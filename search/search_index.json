{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6587\u6863\u5e93 # PHP # PHP \u5404\u7248\u672c\u7279\u6027 PHP PSR \u7f16\u7801\u89c4\u8303 PHPDoc \u7f16\u7801\u6ce8\u91ca\u89c4\u8303 PHP Coding Standards Fixer PHP \u8bbe\u8ba1\u6a21\u5f0f\u5168\u96c6 Elasticsearch # Elasticsearch 6.3 - \u4e2d\u6587\u7248 Elasticsearch-PHP \u66f4\u591a # Git \u5e38\u7528\u547d\u4ee4 \u4e2d\u6587\u6280\u672f\u6587\u6863\u7684\u5199\u4f5c\u89c4\u8303","title":"\u9996\u9875"},{"location":"#_1","text":"","title":"\u6587\u6863\u5e93"},{"location":"#php","text":"PHP \u5404\u7248\u672c\u7279\u6027 PHP PSR \u7f16\u7801\u89c4\u8303 PHPDoc \u7f16\u7801\u6ce8\u91ca\u89c4\u8303 PHP Coding Standards Fixer PHP \u8bbe\u8ba1\u6a21\u5f0f\u5168\u96c6","title":"PHP"},{"location":"#elasticsearch","text":"Elasticsearch 6.3 - \u4e2d\u6587\u7248 Elasticsearch-PHP","title":"Elasticsearch"},{"location":"#_2","text":"Git \u5e38\u7528\u547d\u4ee4 \u4e2d\u6587\u6280\u672f\u6587\u6863\u7684\u5199\u4f5c\u89c4\u8303","title":"\u66f4\u591a"},{"location":"devops/docker/","text":"Docker # Docker \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5e94\u7528\u5bb9\u5668\u5f15\u64ce\uff0c\u8ba9\u5f00\u53d1\u8005\u53ef\u4ee5\u6253\u5305\u4ed6\u4eec\u7684\u5e94\u7528\u4ee5\u53ca\u4f9d\u8d56\u5305\u5230\u4e00\u4e2a\u53ef\u79fb\u690d\u7684\u5bb9\u5668\u4e2d\uff0c\u7136\u540e\u53d1\u5e03\u5230\u4efb\u4f55\u6d41\u884c\u7684 Linux \u673a\u5668\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u865a\u62df\u5316\u3002\u5bb9\u5668\u662f\u5b8c\u5168\u4f7f\u7528\u6c99\u7bb1\u673a\u5236\uff0c\u76f8\u4e92\u4e4b\u95f4\u4e0d\u4f1a\u6709\u4efb\u4f55\u63a5\u53e3\u3002","title":"\u6982\u8ff0"},{"location":"devops/docker/#docker","text":"Docker \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5e94\u7528\u5bb9\u5668\u5f15\u64ce\uff0c\u8ba9\u5f00\u53d1\u8005\u53ef\u4ee5\u6253\u5305\u4ed6\u4eec\u7684\u5e94\u7528\u4ee5\u53ca\u4f9d\u8d56\u5305\u5230\u4e00\u4e2a\u53ef\u79fb\u690d\u7684\u5bb9\u5668\u4e2d\uff0c\u7136\u540e\u53d1\u5e03\u5230\u4efb\u4f55\u6d41\u884c\u7684 Linux \u673a\u5668\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u865a\u62df\u5316\u3002\u5bb9\u5668\u662f\u5b8c\u5168\u4f7f\u7528\u6c99\u7bb1\u673a\u5236\uff0c\u76f8\u4e92\u4e4b\u95f4\u4e0d\u4f1a\u6709\u4efb\u4f55\u63a5\u53e3\u3002","title":"Docker"},{"location":"devops/docker/dockerfile/php/","text":"PHP # 1. \u6982\u8ff0 # PHP-7.2 \u5e38\u7528\u6269\u5c55 Redis swoole composer 2. Dockerfile # \u793a\u4f8b\uff1aphp-7.2 \u7248\u672c 2.1. \u914d\u7f6e # FROM php:7.2.9 # php extension RUN apt-get update && apt-get install -y \\ libfreetype6-dev \\ libjpeg62-turbo-dev \\ libpng-dev \\ && docker-php-ext-install -j $( nproc ) bcmath \\ iconv \\ mysqli \\ gettext \\ pcntl \\ pdo_mysql \\ sysvsem \\ sockets \\ zip \\ && docker-php-ext-configure gd --with-freetype-dir = /usr/include/ --with-jpeg-dir = /usr/include/ \\ && docker-php-ext-install -j $( nproc ) gd RUN pecl install redis \\ && pecl install swoole \\ && docker-php-ext-enable redis swoole # php composer RUN php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" \\ && php composer-setup.php --install-dir = /usr/local/bin --filename = composer \\ && php -r \"unlink('composer-setup.php');\" CMD ['php', '-v'] 2.2. \u6784\u5efa\u955c\u50cf # docker build -t php-7.2 . 3. Docker Hub \u955c\u50cf # \u955c\u50cf\u5730\u5740\uff1a https://hub.docker.com/r/flc1125/php-7.2/ 3.1. \u62c9\u53d6\u955c\u50cf # docker pull flc1125/php-7.2 3.2. \u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668 # docker run -dit --name php-7.2 flc1125/php-7.2 bash","title":"PHP"},{"location":"devops/docker/dockerfile/php/#php","text":"","title":"PHP"},{"location":"devops/docker/dockerfile/php/#1","text":"PHP-7.2 \u5e38\u7528\u6269\u5c55 Redis swoole composer","title":"1. \u6982\u8ff0"},{"location":"devops/docker/dockerfile/php/#2-dockerfile","text":"\u793a\u4f8b\uff1aphp-7.2 \u7248\u672c","title":"2. Dockerfile"},{"location":"devops/docker/dockerfile/php/#21","text":"FROM php:7.2.9 # php extension RUN apt-get update && apt-get install -y \\ libfreetype6-dev \\ libjpeg62-turbo-dev \\ libpng-dev \\ && docker-php-ext-install -j $( nproc ) bcmath \\ iconv \\ mysqli \\ gettext \\ pcntl \\ pdo_mysql \\ sysvsem \\ sockets \\ zip \\ && docker-php-ext-configure gd --with-freetype-dir = /usr/include/ --with-jpeg-dir = /usr/include/ \\ && docker-php-ext-install -j $( nproc ) gd RUN pecl install redis \\ && pecl install swoole \\ && docker-php-ext-enable redis swoole # php composer RUN php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" \\ && php composer-setup.php --install-dir = /usr/local/bin --filename = composer \\ && php -r \"unlink('composer-setup.php');\" CMD ['php', '-v']","title":"2.1. \u914d\u7f6e"},{"location":"devops/docker/dockerfile/php/#22","text":"docker build -t php-7.2 .","title":"2.2. \u6784\u5efa\u955c\u50cf"},{"location":"devops/docker/dockerfile/php/#3-docker-hub","text":"\u955c\u50cf\u5730\u5740\uff1a https://hub.docker.com/r/flc1125/php-7.2/","title":"3. Docker Hub \u955c\u50cf"},{"location":"devops/docker/dockerfile/php/#31","text":"docker pull flc1125/php-7.2","title":"3.1. \u62c9\u53d6\u955c\u50cf"},{"location":"devops/docker/dockerfile/php/#32","text":"docker run -dit --name php-7.2 flc1125/php-7.2 bash","title":"3.2. \u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668"},{"location":"devops/redis/","text":"Redis # Redis\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u4f7f\u7528ANSI C\u8bed\u8a00\u7f16\u5199\u3001\u652f\u6301\u7f51\u7edc\u3001\u53ef\u57fa\u4e8e\u5185\u5b58\u4ea6\u53ef\u6301\u4e45\u5316\u7684\u65e5\u5fd7\u578b\u3001Key-Value\u6570\u636e\u5e93\uff0c\u5e76\u63d0\u4f9b\u591a\u79cd\u8bed\u8a00\u7684API\u3002\u4ece2010\u5e743\u670815\u65e5\u8d77\uff0cRedis\u7684\u5f00\u53d1\u5de5\u4f5c\u7531VMware\u4e3b\u6301\u3002\u4ece2013\u5e745\u6708\u5f00\u59cb\uff0cRedis\u7684\u5f00\u53d1\u7531Pivotal\u8d5e\u52a9\u3002","title":"Redis"},{"location":"devops/redis/#redis","text":"Redis\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u4f7f\u7528ANSI C\u8bed\u8a00\u7f16\u5199\u3001\u652f\u6301\u7f51\u7edc\u3001\u53ef\u57fa\u4e8e\u5185\u5b58\u4ea6\u53ef\u6301\u4e45\u5316\u7684\u65e5\u5fd7\u578b\u3001Key-Value\u6570\u636e\u5e93\uff0c\u5e76\u63d0\u4f9b\u591a\u79cd\u8bed\u8a00\u7684API\u3002\u4ece2010\u5e743\u670815\u65e5\u8d77\uff0cRedis\u7684\u5f00\u53d1\u5de5\u4f5c\u7531VMware\u4e3b\u6301\u3002\u4ece2013\u5e745\u6708\u5f00\u59cb\uff0cRedis\u7684\u5f00\u53d1\u7531Pivotal\u8d5e\u52a9\u3002","title":"Redis"},{"location":"elasticsearch/elasticsearch-6.3/basic_concepts/","text":"\u57fa\u672c\u6982\u5ff5 # \u672c\u6587\u5c06\u4ecb\u7ecd\u4e00\u4e9b Elasticsearch \u7684\u6838\u5fc3\u6982\u5ff5\u3002\u4ece\u4e00\u5f00\u59cb\u5c31\u7406\u89e3\u8fd9\u4e9b\u6982\u5ff5\u5c06\u6781\u5927\u5730\u5e2e\u52a9\u4f60\u7b80\u5316\u5b66\u4e60\u8fc7\u7a0b\u3002 \u8fd1\u5b9e\u65f6\uff08NRT\uff09 # Elasticsearch \u662f\u4e00\u4e2a\u8fd1\u5b9e\u65f6\u7684\u641c\u7d22\u5e73\u53f0\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ea\u9700\u8981\u82b1\u4e00\u70b9\u70b9\u65f6\u95f4\uff08\u901a\u5e38\u662f\u4e00\u79d2\uff09\u4ece\u7d22\u5f15\u6587\u6863\u91cc\u641c\u7d22\u5230\u53ef\u7528\u7684\u6587\u6863\u3002 \u96c6\u7fa4\uff08Cluster\uff09 # A cluster is a collection of one or more nodes (servers) that together holds your entire data and provides federated indexing and search capabilities across all nodes. A cluster is identified by a unique name which by default is \"elasticsearch\". This name is important because a node can only be part of a cluster if the node is set up to join the cluster by its name. Make sure that you don't reuse the same cluster names in different environments, otherwise you might end up with nodes joining the wrong cluster. For instance you could use logging-dev , logging-stage , and logging-prod for the development, staging, and production clusters. Note that it is valid and perfectly fine to have a cluster with only a single node in it. Furthermore, you may also have multiple independent clusters each with its own unique cluster name. \u8282\u70b9\uff08Node\uff09 # A node is a single server that is part of your cluster, stores your data, and participates in the cluster's indexing and search capabilities. Just like a cluster, a node is identified by a name which by default is a random Universally Unique IDentifier (UUID) that is assigned to the node at startup. You can define any node name you want if you do not want the default. This name is important for administration purposes where you want to identify which servers in your network correspond to which nodes in your Elasticsearch cluster. A node can be configured to join a specific cluster by the cluster name. By default, each node is set up to join a cluster named elasticsearch which means that if you start up a number of nodes on your network and--assuming they can discover each other--they will all automatically form and join a single cluster named elasticsearch . In a single cluster, you can have as many nodes as you want. Furthermore, if there are no other Elasticsearch nodes currently running on your network, starting a single node will by default form a new single-node cluster named elasticsearch . \u7d22\u5f15\uff08Index\uff09 # An index is a collection of documents that have somewhat similar characteristics. For example, you can have an index for customer data, another index for a product catalog, and yet another index for order data. An index is identified by a name (that must be all lowercase) and this name is used to refer to the index when performing indexing, search, update, and delete operations against the documents in it. In a single cluster, you can define as many indexes as you want. \u7c7b\u578b\uff08Type\uff09 # Deprecated in 6.0.0. See Removal of mapping types A type used to be a logical category/partition of your index to allow you to store different types of documents in the same index, eg one type for users, another type for blog posts. It is no longer possible to create multiple types in an index, and the whole concept of types will be removed in a later version. See Removal of mapping types for more. \u6587\u6863\uff08Document\uff09 # A document is a basic unit of information that can be indexed. For example, you can have a document for a single customer, another document for a single product, and yet another for a single order. This document is expressed in JSON (JavaScript Object Notation) which is a ubiquitous internet data interchange format. Within an index/type, you can store as many documents as you want. Note that although a document physically resides in an index, a document actually must be indexed/assigned to a type inside an index. [[getting-started-shards-and-replicas]] \u5206\u7247\u548c\u526f\u672c\uff08Shards & Replicas\uff09 # An index can potentially store a large amount of data that can exceed the hardware limits of a single node. For example, a single index of a billion documents taking up 1TB of disk space may not fit on the disk of a single node or may be too slow to serve search requests from a single node alone. To solve this problem, Elasticsearch provides the ability to subdivide your index into multiple pieces called shards. When you create an index, you can simply define the number of shards that you want. Each shard is in itself a fully-functional and independent \"index\" that can be hosted on any node in the cluster. Sharding is important for two primary reasons: It allows you to horizontally split/scale your content volume It allows you to distribute and parallelize operations across shards (potentially on multiple nodes) thus increasing performance/throughput The mechanics of how a shard is distributed and also how its documents are aggregated back into search requests are completely managed by Elasticsearch and is transparent to you as the user. In a network/cloud environment where failures can be expected anytime, it is very useful and highly recommended to have a failover mechanism in case a shard/node somehow goes offline or disappears for whatever reason. To this end, Elasticsearch allows you to make one or more copies of your index's shards into what are called replica shards, or replicas for short. Replication is important for two primary reasons: It provides high availability in case a shard/node fails. For this reason, it is important to note that a replica shard is never allocated on the same node as the original/primary shard that it was copied from. It allows you to scale out your search volume/throughput since searches can be executed on all replicas in parallel. To summarize, each index can be split into multiple shards. An index can also be replicated zero (meaning no replicas) or more times. Once replicated, each index will have primary shards (the original shards that were replicated from) and replica shards (the copies of the primary shards). The number of shards and replicas can be defined per index at the time the index is created. After the index is created, you may change the number of replicas dynamically anytime but you cannot change the number of shards after-the-fact. \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cElasticsearch \u4e2d\u7684\u6bcf\u4e2a\u7d22\u5f15\u90fd\u5206\u914d\u4e86 5 \u4e2a\u4e3b\u5206\u7247\u548c 1 \u4e2a\u526f\u672c\uff0c\u8fd9\u610f\u5473\u7740\u96c6\u7fa4\u4e2d\u81f3\u5c11\u6709\u4e24\u4e2a\u8282\u70b9\uff0c\u7d22\u5f15\u4f1a\u5305\u542b5\u4e2a\u4e3b\u5206\u7247\u548c\u53e6\u59165\u4e2a\u526f\u672c\u5206\u7247\uff081\u4e2a\u5b8c\u6574\u526f\u672c\uff09\uff0c\u603b\u8ba1\u4e3a\u6bcf\u4e2a\u7d22\u5f1510\u4e2a\u5206\u7247\u3002 Note \u6bcf\u4e2aElasticsearch\u5206\u7247\u90fd\u662fLucene\u7d22\u5f15\u3002\u5355\u4e2aLucene\u7d22\u5f15\u4e2d\u53ef\u4ee5\u5305\u542b\u6700\u5927\u6570\u91cf\u7684\u6587\u6863\u3002 \u57fa\u4e8e LUCENE-5843 , \u9650\u5236\u6700\u5927\u6587\u6863\u6570\uff1a 2,147,483,519 (= Integer.MAX_VALUE - 128)\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 cat-shards API \u76d1\u63a7\u5206\u7247\u5927\u5c0f\u3002 \u6709\u4e86\u8fd9\u4e9b\uff0c\u8ba9\u6211\u4eec\u5f00\u59cb\u66f4\u6709\u8da3\u7684\u90e8\u5206......","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"elasticsearch/elasticsearch-6.3/basic_concepts/#_1","text":"\u672c\u6587\u5c06\u4ecb\u7ecd\u4e00\u4e9b Elasticsearch \u7684\u6838\u5fc3\u6982\u5ff5\u3002\u4ece\u4e00\u5f00\u59cb\u5c31\u7406\u89e3\u8fd9\u4e9b\u6982\u5ff5\u5c06\u6781\u5927\u5730\u5e2e\u52a9\u4f60\u7b80\u5316\u5b66\u4e60\u8fc7\u7a0b\u3002","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"elasticsearch/elasticsearch-6.3/basic_concepts/#nrt","text":"Elasticsearch \u662f\u4e00\u4e2a\u8fd1\u5b9e\u65f6\u7684\u641c\u7d22\u5e73\u53f0\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ea\u9700\u8981\u82b1\u4e00\u70b9\u70b9\u65f6\u95f4\uff08\u901a\u5e38\u662f\u4e00\u79d2\uff09\u4ece\u7d22\u5f15\u6587\u6863\u91cc\u641c\u7d22\u5230\u53ef\u7528\u7684\u6587\u6863\u3002","title":"\u8fd1\u5b9e\u65f6\uff08NRT\uff09"},{"location":"elasticsearch/elasticsearch-6.3/basic_concepts/#cluster","text":"A cluster is a collection of one or more nodes (servers) that together holds your entire data and provides federated indexing and search capabilities across all nodes. A cluster is identified by a unique name which by default is \"elasticsearch\". This name is important because a node can only be part of a cluster if the node is set up to join the cluster by its name. Make sure that you don't reuse the same cluster names in different environments, otherwise you might end up with nodes joining the wrong cluster. For instance you could use logging-dev , logging-stage , and logging-prod for the development, staging, and production clusters. Note that it is valid and perfectly fine to have a cluster with only a single node in it. Furthermore, you may also have multiple independent clusters each with its own unique cluster name.","title":"\u96c6\u7fa4\uff08Cluster\uff09"},{"location":"elasticsearch/elasticsearch-6.3/basic_concepts/#node","text":"A node is a single server that is part of your cluster, stores your data, and participates in the cluster's indexing and search capabilities. Just like a cluster, a node is identified by a name which by default is a random Universally Unique IDentifier (UUID) that is assigned to the node at startup. You can define any node name you want if you do not want the default. This name is important for administration purposes where you want to identify which servers in your network correspond to which nodes in your Elasticsearch cluster. A node can be configured to join a specific cluster by the cluster name. By default, each node is set up to join a cluster named elasticsearch which means that if you start up a number of nodes on your network and--assuming they can discover each other--they will all automatically form and join a single cluster named elasticsearch . In a single cluster, you can have as many nodes as you want. Furthermore, if there are no other Elasticsearch nodes currently running on your network, starting a single node will by default form a new single-node cluster named elasticsearch .","title":"\u8282\u70b9\uff08Node\uff09"},{"location":"elasticsearch/elasticsearch-6.3/basic_concepts/#index","text":"An index is a collection of documents that have somewhat similar characteristics. For example, you can have an index for customer data, another index for a product catalog, and yet another index for order data. An index is identified by a name (that must be all lowercase) and this name is used to refer to the index when performing indexing, search, update, and delete operations against the documents in it. In a single cluster, you can define as many indexes as you want.","title":"\u7d22\u5f15\uff08Index\uff09"},{"location":"elasticsearch/elasticsearch-6.3/basic_concepts/#type","text":"Deprecated in 6.0.0. See Removal of mapping types A type used to be a logical category/partition of your index to allow you to store different types of documents in the same index, eg one type for users, another type for blog posts. It is no longer possible to create multiple types in an index, and the whole concept of types will be removed in a later version. See Removal of mapping types for more.","title":"\u7c7b\u578b\uff08Type\uff09"},{"location":"elasticsearch/elasticsearch-6.3/basic_concepts/#document","text":"A document is a basic unit of information that can be indexed. For example, you can have a document for a single customer, another document for a single product, and yet another for a single order. This document is expressed in JSON (JavaScript Object Notation) which is a ubiquitous internet data interchange format. Within an index/type, you can store as many documents as you want. Note that although a document physically resides in an index, a document actually must be indexed/assigned to a type inside an index. [[getting-started-shards-and-replicas]]","title":"\u6587\u6863\uff08Document\uff09"},{"location":"elasticsearch/elasticsearch-6.3/basic_concepts/#shards-replicas","text":"An index can potentially store a large amount of data that can exceed the hardware limits of a single node. For example, a single index of a billion documents taking up 1TB of disk space may not fit on the disk of a single node or may be too slow to serve search requests from a single node alone. To solve this problem, Elasticsearch provides the ability to subdivide your index into multiple pieces called shards. When you create an index, you can simply define the number of shards that you want. Each shard is in itself a fully-functional and independent \"index\" that can be hosted on any node in the cluster. Sharding is important for two primary reasons: It allows you to horizontally split/scale your content volume It allows you to distribute and parallelize operations across shards (potentially on multiple nodes) thus increasing performance/throughput The mechanics of how a shard is distributed and also how its documents are aggregated back into search requests are completely managed by Elasticsearch and is transparent to you as the user. In a network/cloud environment where failures can be expected anytime, it is very useful and highly recommended to have a failover mechanism in case a shard/node somehow goes offline or disappears for whatever reason. To this end, Elasticsearch allows you to make one or more copies of your index's shards into what are called replica shards, or replicas for short. Replication is important for two primary reasons: It provides high availability in case a shard/node fails. For this reason, it is important to note that a replica shard is never allocated on the same node as the original/primary shard that it was copied from. It allows you to scale out your search volume/throughput since searches can be executed on all replicas in parallel. To summarize, each index can be split into multiple shards. An index can also be replicated zero (meaning no replicas) or more times. Once replicated, each index will have primary shards (the original shards that were replicated from) and replica shards (the copies of the primary shards). The number of shards and replicas can be defined per index at the time the index is created. After the index is created, you may change the number of replicas dynamically anytime but you cannot change the number of shards after-the-fact. \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cElasticsearch \u4e2d\u7684\u6bcf\u4e2a\u7d22\u5f15\u90fd\u5206\u914d\u4e86 5 \u4e2a\u4e3b\u5206\u7247\u548c 1 \u4e2a\u526f\u672c\uff0c\u8fd9\u610f\u5473\u7740\u96c6\u7fa4\u4e2d\u81f3\u5c11\u6709\u4e24\u4e2a\u8282\u70b9\uff0c\u7d22\u5f15\u4f1a\u5305\u542b5\u4e2a\u4e3b\u5206\u7247\u548c\u53e6\u59165\u4e2a\u526f\u672c\u5206\u7247\uff081\u4e2a\u5b8c\u6574\u526f\u672c\uff09\uff0c\u603b\u8ba1\u4e3a\u6bcf\u4e2a\u7d22\u5f1510\u4e2a\u5206\u7247\u3002 Note \u6bcf\u4e2aElasticsearch\u5206\u7247\u90fd\u662fLucene\u7d22\u5f15\u3002\u5355\u4e2aLucene\u7d22\u5f15\u4e2d\u53ef\u4ee5\u5305\u542b\u6700\u5927\u6570\u91cf\u7684\u6587\u6863\u3002 \u57fa\u4e8e LUCENE-5843 , \u9650\u5236\u6700\u5927\u6587\u6863\u6570\uff1a 2,147,483,519 (= Integer.MAX_VALUE - 128)\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 cat-shards API \u76d1\u63a7\u5206\u7247\u5927\u5c0f\u3002 \u6709\u4e86\u8fd9\u4e9b\uff0c\u8ba9\u6211\u4eec\u5f00\u59cb\u66f4\u6709\u8da3\u7684\u90e8\u5206......","title":"\u5206\u7247\u548c\u526f\u672c\uff08Shards &amp; Replicas\uff09"},{"location":"elasticsearch/elasticsearch-6.3/getting-started/","text":"\u5165\u95e8 # Elasticsearch \u662f\u4e00\u4e2a\u9ad8\u5ea6\u53ef\u6269\u5c55\u7684\u5f00\u6e90\u5168\u6587\u641c\u7d22\u548c\u5206\u6790\u5f15\u64ce\u3002\u5b83\u5141\u8bb8\u60a8\u5feb\u901f\uff0c\u8fd1\u5b9e\u65f6\u5730\u5b58\u50a8\uff0c\u641c\u7d22\u548c\u5206\u6790\u5927\u91cf\u6570\u636e\u3002\u5b83\u901a\u5e38\u7528\u4f5c\u5e95\u5c42\u5f15\u64ce/\u6280\u672f\uff0c\u4e3a\u5177\u6709\u590d\u6742\u641c\u7d22\u529f\u80fd\u548c\u8981\u6c42\u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u652f\u6301\u3002 \u4ee5\u4e0b\u662f Elasticsearch \u53ef\u7528\u4e8e\u7684\u4e00\u4e9b\u793a\u4f8b\u7528\u4f8b\uff1a \u60a8\u8fd0\u884c\u5728\u7ebf\u7f51\u4e0a\u5546\u5e97\uff0c\u5141\u8bb8\u60a8\u7684\u5ba2\u6237\u641c\u7d22\u60a8\u9500\u552e\u7684\u4ea7\u54c1\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 Elasticsearch \u5b58\u50a8\u6574\u4e2a\u4ea7\u54c1\u76ee\u5f55\u548c\u5e93\u5b58\uff0c\u5e76\u4e3a\u5b83\u4eec\u63d0\u4f9b\u641c\u7d22\u548c\u81ea\u52a8\u586b\u5145\u5efa\u8bae\u3002 \u60a8\u5e0c\u671b\u6536\u96c6\u65e5\u5fd7\u6216\u4ea4\u6613\u6570\u636e\uff0c\u5e76\u4e14\u5e0c\u671b\u5206\u6790\u548c\u6316\u6398\u6b64\u6570\u636e\u4ee5\u67e5\u627e\u8d8b\u52bf\uff0c\u7edf\u8ba1\u4fe1\u606f\uff0c\u6458\u8981\u6216\u5f02\u5e38\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 Logstash\uff08Elasticsearch / Logstash / Kibana \u7ec4\u5408\u7684\u4e00\u90e8\u5206\uff09\u6765\u6536\u96c6\uff0c\u805a\u5408\u548c\u89e3\u6790\u6570\u636e\uff0c\u7136\u540e\u8ba9 Logstash \u5c06\u6b64\u6570\u636e\u63d0\u4f9b\u7ed9 Elasticsearch \u3002\u4e00\u65e6\u6570\u636e\u5728 Elasticsearch \u4e2d\uff0c\u60a8\u5c31\u53ef\u4ee5\u8fd0\u884c\u641c\u7d22\u548c\u805a\u5408\u6765\u6316\u6398\u60a8\u611f\u5174\u8da3\u7684\u4efb\u4f55\u4fe1\u606f\u3002 \u60a8\u8fd0\u884c\u4ef7\u683c\u8b66\u62a5\u5e73\u53f0\uff0c\u5141\u8bb8\u7cbe\u786e\u4ef7\u683c\u7684\u5ba2\u6237\u6307\u5b9a\u4e00\u6761\u89c4\u5219\uff0c\u4f8b\u5982\u201c\u6211\u6709\u5174\u8da3\u8d2d\u4e70\u7279\u5b9a\u7684\u7535\u5b50\u4ea7\u54c1\uff0c\u5982\u679c\u5c0f\u5de5\u5177\u7684\u4ef7\u683c\u5728\u4e0b\u4e2a\u6708\u5185\u4ece\u4efb\u4f55\u4f9b\u5e94\u5546\u964d\u81f3X\u7f8e\u5143\u4ee5\u4e0b\uff0c\u6211\u5e0c\u671b\u6536\u5230\u901a\u77e5\u201d \u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u83b7\u53d6\u4f9b\u5e94\u5546\u4ef7\u683c\uff0c\u5c06\u5176\u63a8\u5165 Elasticsearch \u5e76\u4f7f\u7528\u5176\u53cd\u5411\u641c\u7d22\uff08Percolator\uff09\u529f\u80fd\u6765\u5339\u914d\u4ef7\u683c\u53d8\u52a8\u4e0e\u5ba2\u6237\u67e5\u8be2\uff0c\u5e76\u6700\u7ec8\u5339\u914d\u540e\u5c06\u8b66\u62a5\u63a8\u9001\u7ed9\u5ba2\u6237\u3002 \u60a8\u6709\u5206\u6790/\u4e1a\u52a1\u667a\u80fd\u9700\u6c42\uff0c\u5e76\u5e0c\u671b\u5feb\u901f\u8c03\u67e5\uff0c\u5206\u6790\uff0c\u53ef\u89c6\u5316\u5e76\u8be2\u95ee\u6709\u5173\u5927\u91cf\u6570\u636e\u7684\u7279\u5b9a\u95ee\u9898\uff08\u60f3\u60f3\u6570\u767e\u4e07\u6216\u6570\u5341\u4ebf\u6761\u8bb0\u5f55\uff09\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 Elasticsearch \u5b58\u50a8\u6570\u636e\uff0c\u7136\u540e\u4f7f\u7528 Kibana\uff08Elasticsearch / Logstash / Kibana \u7ec4\u5408\u7684\u4e00\u90e8\u5206\uff09\u6784\u5efa\u81ea\u5b9a\u4e49\u4eea\u8868\u677f\uff0c\u4ee5\u4fbf\u53ef\u89c6\u5316\u4e00\u4e9b\u5bf9\u60a8\u6765\u8bf4\u91cd\u8981\u7684\u6570\u636e\u3002\u6b64\u5916\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 Elasticsearch \u805a\u5408\u529f\u80fd\u9488\u5bf9\u60a8\u7684\u6570\u636e\u6267\u884c\u590d\u6742\u7684\u5546\u4e1a\u667a\u80fd\u67e5\u8be2\u3002 \u5728\u672c\u6559\u7a0b\u7684\u5176\u4f59\u90e8\u5206\u4e2d\uff0c\u5c06\u5f15\u5bfc\u60a8\u5b8c\u6210\u542f\u52a8\u548c\u8fd0\u884c Elasticsearch \uff0c\u67e5\u770b\u5176\u4e2d\u7684\u5185\u5bb9\u4ee5\u53ca\u6267\u884c\u7d22\u5f15\uff0c\u641c\u7d22\u548c\u4fee\u6539\u6570\u636e\u7b49\u57fa\u672c\u64cd\u4f5c\u7684\u8fc7\u7a0b\u3002\u5728\u672c\u6559\u7a0b\u7ed3\u675f\u65f6\uff0c\u60a8\u5e94\u8be5\u5f88\u597d\u5730\u4e86\u89e3 Elasticsearch \u662f\u4ec0\u4e48\uff0c\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u5e76\u5e0c\u671b\u80fd\u591f\u542f\u53d1\u5b83\uff0c\u770b\u770b\u5982\u4f55\u4f7f\u7528\u5b83\u6765\u6784\u5efa\u590d\u6742\u7684\u641c\u7d22\u5e94\u7528\u7a0b\u5e8f\u6216\u4ece\u6570\u636e\u4e2d\u6316\u6398\u667a\u80fd\u3002","title":"\u5165\u95e8"},{"location":"elasticsearch/elasticsearch-6.3/getting-started/#_1","text":"Elasticsearch \u662f\u4e00\u4e2a\u9ad8\u5ea6\u53ef\u6269\u5c55\u7684\u5f00\u6e90\u5168\u6587\u641c\u7d22\u548c\u5206\u6790\u5f15\u64ce\u3002\u5b83\u5141\u8bb8\u60a8\u5feb\u901f\uff0c\u8fd1\u5b9e\u65f6\u5730\u5b58\u50a8\uff0c\u641c\u7d22\u548c\u5206\u6790\u5927\u91cf\u6570\u636e\u3002\u5b83\u901a\u5e38\u7528\u4f5c\u5e95\u5c42\u5f15\u64ce/\u6280\u672f\uff0c\u4e3a\u5177\u6709\u590d\u6742\u641c\u7d22\u529f\u80fd\u548c\u8981\u6c42\u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u652f\u6301\u3002 \u4ee5\u4e0b\u662f Elasticsearch \u53ef\u7528\u4e8e\u7684\u4e00\u4e9b\u793a\u4f8b\u7528\u4f8b\uff1a \u60a8\u8fd0\u884c\u5728\u7ebf\u7f51\u4e0a\u5546\u5e97\uff0c\u5141\u8bb8\u60a8\u7684\u5ba2\u6237\u641c\u7d22\u60a8\u9500\u552e\u7684\u4ea7\u54c1\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 Elasticsearch \u5b58\u50a8\u6574\u4e2a\u4ea7\u54c1\u76ee\u5f55\u548c\u5e93\u5b58\uff0c\u5e76\u4e3a\u5b83\u4eec\u63d0\u4f9b\u641c\u7d22\u548c\u81ea\u52a8\u586b\u5145\u5efa\u8bae\u3002 \u60a8\u5e0c\u671b\u6536\u96c6\u65e5\u5fd7\u6216\u4ea4\u6613\u6570\u636e\uff0c\u5e76\u4e14\u5e0c\u671b\u5206\u6790\u548c\u6316\u6398\u6b64\u6570\u636e\u4ee5\u67e5\u627e\u8d8b\u52bf\uff0c\u7edf\u8ba1\u4fe1\u606f\uff0c\u6458\u8981\u6216\u5f02\u5e38\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 Logstash\uff08Elasticsearch / Logstash / Kibana \u7ec4\u5408\u7684\u4e00\u90e8\u5206\uff09\u6765\u6536\u96c6\uff0c\u805a\u5408\u548c\u89e3\u6790\u6570\u636e\uff0c\u7136\u540e\u8ba9 Logstash \u5c06\u6b64\u6570\u636e\u63d0\u4f9b\u7ed9 Elasticsearch \u3002\u4e00\u65e6\u6570\u636e\u5728 Elasticsearch \u4e2d\uff0c\u60a8\u5c31\u53ef\u4ee5\u8fd0\u884c\u641c\u7d22\u548c\u805a\u5408\u6765\u6316\u6398\u60a8\u611f\u5174\u8da3\u7684\u4efb\u4f55\u4fe1\u606f\u3002 \u60a8\u8fd0\u884c\u4ef7\u683c\u8b66\u62a5\u5e73\u53f0\uff0c\u5141\u8bb8\u7cbe\u786e\u4ef7\u683c\u7684\u5ba2\u6237\u6307\u5b9a\u4e00\u6761\u89c4\u5219\uff0c\u4f8b\u5982\u201c\u6211\u6709\u5174\u8da3\u8d2d\u4e70\u7279\u5b9a\u7684\u7535\u5b50\u4ea7\u54c1\uff0c\u5982\u679c\u5c0f\u5de5\u5177\u7684\u4ef7\u683c\u5728\u4e0b\u4e2a\u6708\u5185\u4ece\u4efb\u4f55\u4f9b\u5e94\u5546\u964d\u81f3X\u7f8e\u5143\u4ee5\u4e0b\uff0c\u6211\u5e0c\u671b\u6536\u5230\u901a\u77e5\u201d \u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u83b7\u53d6\u4f9b\u5e94\u5546\u4ef7\u683c\uff0c\u5c06\u5176\u63a8\u5165 Elasticsearch \u5e76\u4f7f\u7528\u5176\u53cd\u5411\u641c\u7d22\uff08Percolator\uff09\u529f\u80fd\u6765\u5339\u914d\u4ef7\u683c\u53d8\u52a8\u4e0e\u5ba2\u6237\u67e5\u8be2\uff0c\u5e76\u6700\u7ec8\u5339\u914d\u540e\u5c06\u8b66\u62a5\u63a8\u9001\u7ed9\u5ba2\u6237\u3002 \u60a8\u6709\u5206\u6790/\u4e1a\u52a1\u667a\u80fd\u9700\u6c42\uff0c\u5e76\u5e0c\u671b\u5feb\u901f\u8c03\u67e5\uff0c\u5206\u6790\uff0c\u53ef\u89c6\u5316\u5e76\u8be2\u95ee\u6709\u5173\u5927\u91cf\u6570\u636e\u7684\u7279\u5b9a\u95ee\u9898\uff08\u60f3\u60f3\u6570\u767e\u4e07\u6216\u6570\u5341\u4ebf\u6761\u8bb0\u5f55\uff09\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 Elasticsearch \u5b58\u50a8\u6570\u636e\uff0c\u7136\u540e\u4f7f\u7528 Kibana\uff08Elasticsearch / Logstash / Kibana \u7ec4\u5408\u7684\u4e00\u90e8\u5206\uff09\u6784\u5efa\u81ea\u5b9a\u4e49\u4eea\u8868\u677f\uff0c\u4ee5\u4fbf\u53ef\u89c6\u5316\u4e00\u4e9b\u5bf9\u60a8\u6765\u8bf4\u91cd\u8981\u7684\u6570\u636e\u3002\u6b64\u5916\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 Elasticsearch \u805a\u5408\u529f\u80fd\u9488\u5bf9\u60a8\u7684\u6570\u636e\u6267\u884c\u590d\u6742\u7684\u5546\u4e1a\u667a\u80fd\u67e5\u8be2\u3002 \u5728\u672c\u6559\u7a0b\u7684\u5176\u4f59\u90e8\u5206\u4e2d\uff0c\u5c06\u5f15\u5bfc\u60a8\u5b8c\u6210\u542f\u52a8\u548c\u8fd0\u884c Elasticsearch \uff0c\u67e5\u770b\u5176\u4e2d\u7684\u5185\u5bb9\u4ee5\u53ca\u6267\u884c\u7d22\u5f15\uff0c\u641c\u7d22\u548c\u4fee\u6539\u6570\u636e\u7b49\u57fa\u672c\u64cd\u4f5c\u7684\u8fc7\u7a0b\u3002\u5728\u672c\u6559\u7a0b\u7ed3\u675f\u65f6\uff0c\u60a8\u5e94\u8be5\u5f88\u597d\u5730\u4e86\u89e3 Elasticsearch \u662f\u4ec0\u4e48\uff0c\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u5e76\u5e0c\u671b\u80fd\u591f\u542f\u53d1\u5b83\uff0c\u770b\u770b\u5982\u4f55\u4f7f\u7528\u5b83\u6765\u6784\u5efa\u590d\u6742\u7684\u641c\u7d22\u5e94\u7528\u7a0b\u5e8f\u6216\u4ece\u6570\u636e\u4e2d\u6316\u6398\u667a\u80fd\u3002","title":"\u5165\u95e8"},{"location":"elasticsearch/elasticsearch-6.3/translation-instructions/","text":"\u7ffb\u8bd1\u8bf4\u660e # \u5b98\u65b9\u82f1\u6587\u7248\uff1a https://www.elastic.co/guide/en/elasticsearch/reference/6.3/index.html \u8fdb\u884c\u4e2d...","title":"\u7ffb\u8bd1\u8bf4\u660e"},{"location":"elasticsearch/elasticsearch-6.3/translation-instructions/#_1","text":"\u5b98\u65b9\u82f1\u6587\u7248\uff1a https://www.elastic.co/guide/en/elasticsearch/reference/6.3/index.html \u8fdb\u884c\u4e2d...","title":"\u7ffb\u8bd1\u8bf4\u660e"},{"location":"elasticsearch/elasticsearch-php/community_dsls/","text":"\u793e\u533a DSLs # ElasticsearchDSL # ElasticsearchDSL ElasticsearchDSL \u5f15\u5165 Elasticsearch DSL \u7c7b\u5e93\uff0c\u76ee\u7684\u662f\u4e3a Elasticsearch bundle \u548c Elasticsearch PHP \u5ba2\u6237\u7aef\u63d0\u4f9b\u5bf9\u8c61\u67e5\u8be2\u8bed\u53e5\u6784\u9020\u5668\u3002\u4f60\u53ef\u4ee5\u8f7b\u677e\u5730\u6784\u9020\u4efb\u4f55 Elasticsearch \u67e5\u8be2\u8bed\u53e5\u4e14\u8f6c\u53d8\u8bed\u53e5\u4e3a\u6570\u7ec4\u3002 elasticsearcher # elasticsearcher elasticsearcher \u8fd9\u4e2a\u72ec\u7acb\u7684\u5305\u662f\u4f4d\u4e8e Elasticsearch PHP \u5ba2\u6237\u7aef\u4e4b\u4e0a\u7684\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u5c01\u88c5\u3002\u5b83\u4e3b\u8981\u7684\u76ee\u7684\u662f\u8ba9\u5e94\u7528\u4e2d\u7684\u67e5\u8be2\u8bed\u53e5\u548c\u7d22\u5f15\u7684\u6784\u9020\u66f4\u4e3a\u7b80\u6613\u3002\u5b83\u5e76\u975e\u8981\u9690\u85cf\u6216\u66ff\u4ee3 Elasticsearch PHP \u5ba2\u6237\u7aef\u7684\u529f\u80fd\u3002","title":"\u793e\u533a DSLs"},{"location":"elasticsearch/elasticsearch-php/community_dsls/#dsls","text":"","title":"\u793e\u533a DSLs"},{"location":"elasticsearch/elasticsearch-php/community_dsls/#elasticsearchdsl","text":"ElasticsearchDSL ElasticsearchDSL \u5f15\u5165 Elasticsearch DSL \u7c7b\u5e93\uff0c\u76ee\u7684\u662f\u4e3a Elasticsearch bundle \u548c Elasticsearch PHP \u5ba2\u6237\u7aef\u63d0\u4f9b\u5bf9\u8c61\u67e5\u8be2\u8bed\u53e5\u6784\u9020\u5668\u3002\u4f60\u53ef\u4ee5\u8f7b\u677e\u5730\u6784\u9020\u4efb\u4f55 Elasticsearch \u67e5\u8be2\u8bed\u53e5\u4e14\u8f6c\u53d8\u8bed\u53e5\u4e3a\u6570\u7ec4\u3002","title":"ElasticsearchDSL"},{"location":"elasticsearch/elasticsearch-php/community_dsls/#elasticsearcher","text":"elasticsearcher elasticsearcher \u8fd9\u4e2a\u72ec\u7acb\u7684\u5305\u662f\u4f4d\u4e8e Elasticsearch PHP \u5ba2\u6237\u7aef\u4e4b\u4e0a\u7684\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u5c01\u88c5\u3002\u5b83\u4e3b\u8981\u7684\u76ee\u7684\u662f\u8ba9\u5e94\u7528\u4e2d\u7684\u67e5\u8be2\u8bed\u53e5\u548c\u7d22\u5f15\u7684\u6784\u9020\u66f4\u4e3a\u7b80\u6613\u3002\u5b83\u5e76\u975e\u8981\u9690\u85cf\u6216\u66ff\u4ee3 Elasticsearch PHP \u5ba2\u6237\u7aef\u7684\u529f\u80fd\u3002","title":"elasticsearcher"},{"location":"elasticsearch/elasticsearch-php/configuration/","text":"\u914d\u7f6e # \u51e0\u4e4e\u6240\u6709\u5e94\u7528\uff08\u8bd1\u8005\u6ce8\uff1a\u5982 mysql\u3001redis \u7b49\uff09\u7684\u5ba2\u6237\u7aef\u90fd\u53ef\u4ee5\u914d\u7f6e\u3002\u5927\u591a\u6570\u7528\u6237\u53ea\u9700\u914d\u7f6e\u4e00\u4e9b\u53c2\u6570\u6765\u6ee1\u8db3\u4ed6\u4eec\u7684\u9700\u6c42\uff0c\u4f46\u662f\u4e5f\u6709\u53ef\u80fd\u9700\u8981\u4fee\u6539\u5927\u91cf\u7684\u5185\u6838\u4ee3\u7801\u6765\u6ee1\u8db3\u9700\u6c42\u3002 \u5728\u5ba2\u6237\u7aef\u5bf9\u8c61\u5b9e\u4f8b\u5316\u524d\u5c31\u5e94\u8be5\u901a\u8fc7 ClientBuilder \u5bf9\u8c61\u6765\u5b8c\u6210\u81ea\u5b9a\u4e49\u914d\u7f6e\u3002\u6211\u4eec\u4f1a\u6982\u8ff0\u4e00\u4e0b\u6240\u6709\u7684\u914d\u7f6e\u53c2\u6570\uff0c\u5e76\u4e14\u5c55\u793a\u4e00\u4e9b\u4ee3\u7801\u793a\u4f8b\u3002 Inline Host \u914d\u7f6e\u6cd5 # \u6700\u5e38\u89c1\u7684\u914d\u7f6e\u662f\u544a\u8bc9\u5ba2\u6237\u7aef\u6709\u5173\u96c6\u7fa4\u7684\u4fe1\u606f\uff1a\u6709\u591a\u5c11\u4e2a\u8282\u70b9\uff0c\u8282\u70b9\u7684ip\u5730\u5740\u548c\u7aef\u53e3\u53f7\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u4e3b\u673a\u540d\uff0c\u5ba2\u6237\u7aef\u4f1a\u8fde\u63a5 localhost:9200 \u3002 \u5229\u7528 ClientBuilder \u7684 setHosts() \u65b9\u6cd5\u53ef\u4ee5\u6539\u53d8\u5ba2\u6237\u7aef\u7684\u9ed8\u8ba4\u8fde\u63a5\u65b9\u5f0f\u3002 setHosts() \u65b9\u6cd5\u63a5\u6536\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u6570\u7ec4\u91cc\u9762\u6bcf\u4e2a\u503c\u90fd\u4ee3\u8868\u96c6\u7fa4\u91cc\u9762\u7684\u4e00\u4e2a\u8282\u70b9\u4fe1\u606f\u3002\u503c\u7684\u683c\u5f0f\u591a\u79cd\u591a\u6837\uff0c\u4e3b\u8981\u770b\u4f60\u7684\u9700\u6c42\uff1a <?php $hosts = [ '192.168.1.1:9200' , // IP + Port '192.168.1.2' , // Just IP 'mydomain.server.com:9201' , // Domain + Port 'mydomain2.server.com' , // Just Domain 'https://localhost' , // SSL to localhost 'https://192.168.1.3:9200' // SSL to IP + Port ]; $client = ClientBuilder :: create () // Instantiate a new ClientBuilder -> setHosts ( $hosts ) // Set the hosts -> build (); // Build the client object \u6ce8\u610f ClientBuilder \u5bf9\u8c61\u5141\u8bb8\u94fe\u5f0f\u64cd\u4f5c\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u5206\u522b\u8c03\u7528\u4e0a\u8ff0\u7684\u65b9\u6cd5\uff1a <?php $hosts = [ '192.168.1.1:9200' , // IP + Port '192.168.1.2' , // Just IP 'mydomain.server.com:9201' , // Domain + Port 'mydomain2.server.com' , // Just Domain 'https://localhost' , // SSL to localhost 'https://192.168.1.3:9200' // SSL to IP + Port ]; $clientBuilder = ClientBuilder :: create (); // Instantiate a new ClientBuilder $clientBuilder -> setHosts ( $hosts ); // Set the hosts $client = $clientBuilder -> build (); // Build the client object Extended Host \u914d\u7f6e\u6cd5 # \u5ba2\u6237\u7aef\u4e5f\u652f\u6301 Extended Host \u914d\u7f6e\u8bed\u6cd5\u3002Inline Host \u914d\u7f6e\u6cd5\u4f9d\u8d56 PHP \u7684 filter_var() \u51fd\u6570\u548c parse_url() \u51fd\u6570\u6765\u9a8c\u8bc1\u548c\u63d0\u53d6\u4e00\u4e2a URL \u7684\u5404\u4e2a\u90e8\u5206\u3002\u7136\u800c\uff0c\u8fd9\u4e9b php \u51fd\u6570\u5728\u4e00\u4e9b\u7279\u5b9a\u7684\u573a\u666f\u4e0b\u4f1a\u51fa\u9519\u3002\u4f8b\u5982\uff0c filter_var() \u51fd\u6570\u4e0d\u63a5\u6536\u6709\u4e0b\u5212\u7ebf\u7684 URL\u3002\u540c\u6837\uff0c\u5982\u679c Basic Auth \u7684\u5bc6\u7801\u542b\u6709\u7279\u5b9a\u5b57\u7b26\uff08\u5982#\u3001?\uff09\uff0c\u90a3\u4e48 parse_url() \u51fd\u6570\u4f1a\u62a5\u9519\u3002 \u56e0\u800c\u5ba2\u6237\u7aef\u4e5f\u652f\u6301 Extended Host \u914d\u7f6e\u8bed\u6cd5\uff0c\u4ece\u800c\u4f7f\u5ba2\u6237\u7aef\u5b9e\u4f8b\u5316\u66f4\u52a0\u53ef\u63a7\uff1a <?php $hosts = [ // This is effectively equal to: \"https://username:password!#$?*abc@foo.com:9200/\" [ 'host' => 'foo.com' , 'port' => '9200' , 'scheme' => 'https' , 'user' => 'username' , 'pass' => 'password!#$?*abc' ], // This is equal to \"http://localhost:9200/\" [ 'host' => 'localhost' , // Only host is required ] ]; $client = ClientBuilder :: create () // Instantiate a new ClientBuilder -> setHosts ( $hosts ) // Set the hosts -> build (); // Build the client object \u6bcf\u4e2a\u8282\u70b9\u53ea\u9700\u8981\u914d\u7f6e host \u53c2\u6570\u3002\u5982\u679c\u5176\u5b83\u53c2\u6570\u4e0d\u6307\u5b9a\uff0c\u90a3\u4e48\u9ed8\u8ba4\u7684\u7aef\u53e3\u662f 9200 \uff0c\u9ed8\u8ba4\u7684 scheme \u662f http \u3002 \u8ba4\u8bc1\u4e0e\u52a0\u5bc6 # \u60f3\u4e86\u89e3 HTTP \u8ba4\u8bc1\u548c SSL \u52a0\u5bc6\u7684\u5185\u5bb9\uff0c\u8bf7\u67e5\u770b \u8ba4\u8bc1\u4e0e\u52a0\u5bc6 \u3002 \u8bbe\u7f6e\u91cd\u8fde\u6b21\u6570 # \u5728\u4e00\u4e2a\u96c6\u7fa4\u4e2d\uff0c\u5982\u679c\u64cd\u4f5c\u629b\u51fa\u5982\u4e0b\u5f02\u5e38\uff1aconnection refusal, connection timeout, DNS lookup timeout \u7b49\u7b49\uff08\u4e0d\u5305\u62ec4xx\u548c5xx\uff09\uff0c\u5ba2\u6237\u7aef\u4fbf\u4f1a\u91cd\u8fde\u3002\u5ba2\u6237\u7aef\u9ed8\u8ba4\u91cd\u8fde n \uff08n=\u8282\u70b9\u6570\uff09\u6b21\u3002 \u5982\u679c\u4f60\u4e0d\u60f3\u91cd\u8fde\uff0c\u6216\u8005\u60f3\u66f4\u6539\u91cd\u8fde\u6b21\u6570\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 setRetries() \u65b9\u6cd5\uff1a <?php $client = ClientBuilder :: create () -> setRetries ( 2 ) -> build (); \u5047\u5982\u5ba2\u6237\u7aef\u91cd\u8fde\u6b21\u6570\u8d85\u8fc7\u8bbe\u5b9a\u503c\uff0c\u4fbf\u4f1a\u629b\u51fa\u6700\u540e\u63a5\u6536\u5230\u7684\u5f02\u5e38\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6709 10 \u4e2a\u8282\u70b9\uff0c\u8bbe\u7f6e setRetries(5) \uff0c\u5ba2\u6237\u7aef\u4fbf\u4f1a\u6700\u591a\u53d1\u9001 5 \u6b21\u8fde\u63a5\u547d\u4ee4\u3002\u5982\u679c 5 \u4e2a\u8282\u70b9\u8fd4\u56de\u7684\u7ed3\u679c\u90fd\u662f connection timeout\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u4f1a\u629b\u51fa OperationTimeoutException \u3002\u7531\u4e8e\u8fde\u63a5\u6c60\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u8fd9\u4e9b\u8282\u70b9\u4e5f\u53ef\u80fd\u4f1a\u88ab\u6807\u8bb0\u4e3a\u6b7b\u8282\u70b9\u3002 \u4e3a\u4e86\u8bc6\u522b\u662f\u5426\u4e3a\u91cd\u8fde\u5f02\u5e38\uff0c\u629b\u51fa\u7684\u5f02\u5e38\u4f1a\u5305\u542b\u4e00\u4e2a MaxRetriesException \u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5728 catch \u5185\u4f7f\u7528 getPrevious() \u6765\u6355\u83b7\u4e00\u4e2a\u7279\u5b9a\u7684 curl \u5f02\u5e38\uff0c\u4ee5\u4fbf\u67e5\u770b\u662f\u5426\u5305\u542b MaxRetriesException \u3002 <?php $client = Elasticsearch\\ClientBuilder :: create () -> setHosts ([ \"localhost:1\" ]) -> setRetries ( 0 ) -> build (); try { $client -> search ( $searchParams ); } catch ( Elasticsearch\\Common\\Exceptions\\Curl\\CouldNotConnectToHost $e ) { $previous = $e -> getPrevious (); if ( $previous instanceof 'Elasticsearch\\Common\\Exceptions\\MaxRetriesException' ) { echo \"Max retries!\" ; } } \u7531\u4e8e\u6240\u6709 curl \u629b\u51fa\u7684\u5f02\u5e38\uff08 CouldNotConnectToHost , CouldNotResolveHostException , OperationTimeoutException \uff09\u90fd\u7ee7\u627f TransportException \u3002\u8fd9\u6837\u4f60\u5c31\u80fd\u591f\u7528 TransportException \u6765\u66ff\u4ee3\u5982\u4e0a3\u79cd\u5f02\u5e38\uff1a <?php $client = Elasticsearch\\ClientBuilder :: create () -> setHosts ([ \"localhost:1\" ]) -> setRetries ( 0 ) -> build (); try { $client -> search ( $searchParams ); } catch ( Elasticsearch\\Common\\Exceptions\\TransportException $e ) { $previous = $e -> getPrevious (); if ( $previous instanceof 'Elasticsearch\\Common\\Exceptions\\MaxRetriesException' ) { echo \"Max retries!\" ; } } \u5f00\u542f\u65e5\u5fd7 # Elasticsearch-PHP \u652f\u6301\u65e5\u5fd7\u8bb0\u5f55\uff0c\u4f46\u7531\u4e8e\u6027\u80fd\u539f\u56e0\uff0c\u6240\u4ee5\u9ed8\u8ba4\u6ca1\u6709\u5f00\u542f\u3002\u5982\u679c\u4f60\u5e0c\u671b\u5f00\u542f\u65e5\u5fd7\uff0c\u4f60\u5c31\u8981\u9009\u62e9\u4e00\u4e2a\u65e5\u5fd7\u8bb0\u5f55\u5de5\u5177\u5e76\u5b89\u88c5\u5b83\uff0c\u7136\u540e\u5728\u5ba2\u6237\u7aef\u4e2d\u5f00\u542f\u65e5\u5fd7\u3002\u63a8\u8350\u4f7f\u7528 https://github.com/Seldaek/monolog[Monolog ]\uff0c\u4e0d\u8fc7\u4efb\u4f55\u5b9e\u73b0 PSR/Log \u63a5\u53e3\u7684\u65e5\u5fd7\u8bb0\u5f55\u5de5\u5177\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002 \u4f60\u4f1a\u53d1\u73b0\u5728\u5b89\u88c5 elasticsearch-php \u65f6\u4f1a\u5efa\u8bae\u5b89\u88c5 Monolog\u3002\u4e3a\u4e86\u4f7f\u7528 Monolog\uff0c\u8bf7\u628a\u5b83\u52a0\u5165 composer.json \uff1a { \"require\" : { ... \"elasticsearch/elasticsearch\" : \"~6.0\" , \"monolog/monolog\" : \"~1.0\" } } \u7136\u540e\u7528 composer \u66f4\u65b0\uff1a php composer.phar update <?php \u4e00\u65e6\u5b89\u88c5\u597d Monolog\uff08\u6216\u5176\u4ed6\u65e5\u5fd7\u8bb0\u5f55\u5de5\u5177\uff09\uff0c\u4f60\u5c31\u8981\u521b\u5efa\u4e00\u4e2a\u65e5\u5fd7\u5bf9\u8c61\u5e76\u4e14\u6ce8\u5165\u5230\u5ba2\u6237\u7aef\u4e2d\u3002 `ClientBuilder` \u5bf9\u8c61\u6709\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5\u6765\u6784\u5efa\u4e00\u4e2a\u901a\u7528\u7684 Monolog - based \u65e5\u5fd7\u5bf9\u8c61\u3002\u4f60\u53ea\u9700\u8981\u63d0\u4f9b\u5b58\u653e\u65e5\u5fd7\u8def\u5f84\u5c31\u884c\uff1a $logger = ClientBuilder :: defaultLogger ( 'path/to/your.log' ); $client = ClientBuilder :: create () // Instantiate a new ClientBuilder -> setLogger ( $logger ) // Set the logger with a default logger -> build (); // Build the client object \u4f60\u4e5f\u53ef\u4ee5\u6307\u5b9a\u8bb0\u5f55\u7684\u65e5\u5fd7\u7ea7\u522b\uff1a <?php // set severity with second parameter $logger = ClientBuilder :: defaultLogger ( '/path/to/logs/' , Logger :: INFO ); $client = ClientBuilder :: create () // Instantiate a new ClientBuilder -> setLogger ( $logger ) // Set the logger with a default logger -> build (); // Build the client object defaultLogger() \u65b9\u6cd5\u53ea\u662f\u4e00\u4e2a\u8f85\u52a9\u65b9\u6cd5\uff0c\u4e0d\u8981\u6c42\u4f60\u4f7f\u7528\u5b83\u3002\u4f60\u53ef\u4ee5\u81ea\u5df1\u521b\u5efa\u65e5\u5fd7\u5bf9\u8c61\uff0c\u7136\u540e\u6ce8\u5165\uff1a <?php use Monolog\\Logger ; use Monolog\\Handler\\StreamHandler ; $logger = new Logger ( 'name' ); $logger -> pushHandler ( new StreamHandler ( 'path/to/your.log' , Logger :: WARNING )); $client = ClientBuilder :: create () // Instantiate a new ClientBuilder -> setLogger ( $logger ) // Set your custom logger -> build (); // Build the client object \u914d\u7f6e HTTP Handler # Elasticsearch-PHP \u4f7f\u7528\u7684\u662f\u53ef\u66ff\u4ee3\u7684 HTTP \u4f20\u8f93\u5c42\u2014\u2014 RingPHP \u3002\u8fd9\u5141\u8bb8\u5ba2\u6237\u7aef\u6784\u5efa\u4e00\u4e2a\u666e\u901a\u7684 HTTP \u8bf7\u6c42\uff0c\u7136\u540e\u901a\u8fc7\u4f20\u8f93\u5c42\u53d1\u9001\u51fa\u53bb\u3002\u771f\u6b63\u7684\u8bf7\u6c42\u7ec6\u8282\u9690\u85cf\u5728\u5ba2\u6237\u7aef\u5185\uff0c\u5e76\u4e14\u8fd9\u662f\u6a21\u5757\u5316\u7684\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u6839\u636e\u4f60\u7684\u9700\u6c42\u6765\u9009\u62e9 HTTP handlers\u3002 \u5ba2\u6237\u7aef\u4f7f\u7528\u7684\u9ed8\u8ba4 handler \u662f\u7ed3\u5408\u578b handler\uff08combination handler\uff09\u3002\u5f53\u4f7f\u7528\u540c\u6b65\u6a21\u5f0f\uff0chandler \u4f1a\u4f7f\u7528 CurlHandler \u6765\u4e00\u4e2a\u4e00\u4e2a\u5730\u53d1\u9001 curl \u8bf7\u6c42\u3002\u8fd9\u79cd\u65b9\u5f0f\u5bf9\u4e8e\u5355\u4e00\u8bf7\u6c42\uff08single requests\uff09\u6765\u8bf4\u7279\u522b\u8fc5\u901f\u3002\u5f53\u5f02\u6b65\uff08future\uff09\u6a21\u5f0f\u5f00\u542f\uff0chandler \u5c31\u8f6c\u6362\u6210\u4f7f\u7528 CurlMultiHandler \uff0c CurlMultiHandler \u4ee5 curl_multi \u65b9\u5f0f\u6765\u53d1\u9001\u8bf7\u6c42\u3002\u8fd9\u6837\u4f1a\u6d88\u8017\u66f4\u591a\u6027\u80fd\uff0c\u4f46\u662f\u5141\u8bb8\u6279\u91cf HTTP \u8bf7\u6c42\u5e76\u884c\u6267\u884c\u3002 \u4f60\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u4e00\u4e9b\u52a9\u624b\u51fd\u6570\u4e2d\u9009\u62e9\u4e00\u4e2a\u6765\u914d\u7f6e HTTP handler\uff0c\u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49 HTTP handler\uff1a <?php $defaultHandler = ClientBuilder :: defaultHandler (); $singleHandler = ClientBuilder :: singleHandler (); $multiHandler = ClientBuilder :: multiHandler (); $customHandler = new MyCustomHandler (); $client = ClientBuilder :: create () -> setHandler ( $defaultHandler ) -> build (); \u60f3\u8981\u4e86\u89e3\u81ea\u5b9a\u4e49 Ring handler \u7684\u7ec6\u8282\uff0c\u8bf7\u67e5\u770b RingPHP\u6587\u6863 \u3002 \u5728\u6240\u6709\u7684\u60c5\u51b5\u4e0b\u90fd\u63a8\u8350\u4f7f\u7528\u9ed8\u8ba4\u7684 handler\u3002\u8fd9\u4e0d\u4ec5\u53ef\u4ee5\u4ee5\u540c\u6b65\u6a21\u5f0f\u5feb\u901f\u53d1\u9001\u8bf7\u6c42\uff0c\u800c\u4e14\u4e5f\u4fdd\u7559\u4e86\u5f02\u6b65\u6a21\u5f0f\u6765\u5b9e\u73b0\u5e76\u884c\u8bf7\u6c42\u3002 \u5982\u679c\u4f60\u89c9\u5f97\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u7528\u5230 future \u6a21\u5f0f\uff0c\u4f60\u53ef\u4ee5\u8003\u8651\u7528 singleHandler \uff0c\u8fd9\u6837\u4f1a\u95f4\u63a5\u8282\u7701\u4e00\u4e9b\u6027\u80fd\u3002 \u8bbe\u7f6e\u8fde\u63a5\u6c60 # \u5ba2\u6237\u7aef\u4f1a\u7ef4\u6301\u4e00\u4e2a\u8fde\u63a5\u6c60\uff0c\u8fde\u63a5\u6c60\u5185\u6bcf\u4e2a\u8fde\u63a5\u4ee3\u8868\u96c6\u7fa4\u7684\u4e00\u4e2a\u8282\u70b9\u3002\u8fd9\u91cc\u6709\u597d\u51e0\u79cd\u8fde\u63a5\u6c60\u53ef\u4f9b\u4f7f\u7528\uff0c\u6bcf\u4e2a\u7684\u884c\u4e3a\u90fd\u6709\u4e9b\u7ec6\u5fae\u5dee\u8ddd\u3002\u8fde\u63a5\u6c60\u53ef\u901a\u8fc7 setConnectionPool() \u6765\u914d\u7f6e\uff1a <?php $connectionPool = '\\Elasticsearch\\ConnectionPool\\StaticNoPingConnectionPool' ; $client = ClientBuilder :: create () -> setConnectionPool ( $connectionPool ) -> build (); \u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u8be2 \u8fde\u63a5\u6c60\u914d\u7f6e \u3002 \u8bbe\u7f6e\u9009\u62e9\u5668\uff08Selector\uff09 # \u8fde\u63a5\u6c60\u662f\u7528\u6765\u7ba1\u7406\u96c6\u7fa4\u7684\u8fde\u63a5\uff0c\u4f46\u662f\u9009\u62e9\u5668\u5219\u662f\u7528\u6765\u786e\u5b9a\u4e0b\u4e00\u4e2a API \u8bf7\u6c42\u8981\u7528\u54ea\u4e2a\u8fde\u63a5\u3002\u8fd9\u91cc\u6709\u51e0\u4e2a\u9009\u62e9\u5668\u53ef\u4f9b\u9009\u62e9\u3002\u9009\u62e9\u5668\u53ef\u901a\u8fc7 setSelector() \u65b9\u6cd5\u6765\u66f4\u6539\uff1a <?php $selector = '\\Elasticsearch\\ConnectionPool\\Selectors\\StickyRoundRobinSelector' ; $client = ClientBuilder :: create () -> setSelector ( $selector ) -> build (); \u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u8be2 \u9009\u62e9\u5668\u914d\u7f6e \u3002 \u8bbe\u7f6e\u5e8f\u5217\u5316\u5668\uff08Serializer\uff09 # \u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u6570\u636e\u662f\u5173\u8054\u6570\u7ec4\uff0c\u4f46\u662f Elasticsearch \u63a5\u53d7 JSON \u6570\u636e\u3002\u5e8f\u5217\u5316\u5668\u662f\u6307\u628a PHP \u6570\u7ec4\u5e8f\u5217\u5316\u4e3a JSON \u6570\u636e\u3002\u5f53\u7136 Elasticsearch \u8fd4\u56de\u7684 JSON \u6570\u636e\u4e5f\u4f1a\u53cd\u5e8f\u5217\u5316\u4e3a PHP \u6570\u7ec4\u3002\u8fd9\u770b\u8d77\u6765\u6709\u4e9b\u7e41\u7410\uff0c\u4f46\u628a\u5e8f\u5217\u5316\u5668\u6a21\u5757\u5316\u5bf9\u4e8e\u5904\u7406\u4e00\u4e9b\u6781\u7aef\u6848\u4f8b\u6709\u83ab\u5927\u5e2e\u52a9\u3002 \u5927\u90e8\u5206\u4eba\u4e0d\u4f1a\u66f4\u6539\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5668\uff08 SmartSerializer \uff09\uff0c\u4f46\u4f60\u771f\u7684\u60f3\u6539\u53d8\uff0c\u90a3\u53ef\u4ee5\u901a\u8fc7 setSerializer() \u65b9\u6cd5\uff1a <?php $serializer = '\\Elasticsearch\\Serializers\\SmartSerializer' ; $client = ClientBuilder :: create () -> setSerializer ( $serializer ) -> build (); \u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u8be2 \u5e8f\u5217\u5316\u5668\u914d\u7f6e \u3002 \u8bbe\u7f6e\u81ea\u5b9a\u4e49 ConnectionFactory # \u5f53\u8fde\u63a5\u6c60\u53d1\u9001\u8bf7\u6c42\u65f6\uff0cConnectionFactory \u5c31\u4f1a\u5b9e\u4f8b\u5316\u8fde\u63a5\u5bf9\u8c61\u3002\u4e00\u4e2a\u8fde\u63a5\u5bf9\u8c61\u4ee3\u8868\u4e00\u4e2a\u8282\u70b9\u3002\u56e0\u4e3a handler\uff08\u901a\u8fc7RingPHP\uff09\u624d\u662f\u771f\u6b63\u7684\u6267\u884c\u7f51\u7edc\u8bf7\u6c42\uff0c\u90a3\u4e48\u8fde\u63a5\u5bf9\u8c61\u7684\u4e3b\u8981\u5de5\u4f5c\u5c31\u662f\u7ef4\u6301\u8fde\u63a5\uff1a\u8282\u70b9\u662f\u6d3b\u8282\u70b9\u5417\uff1fping \u7684\u901a\u5417\uff1fhost \u548c\u7aef\u53e3\u662f\u4ec0\u4e48\uff1f \u5f88\u5c11\u4f1a\u53bb\u81ea\u5b9a\u4e49 ConnectionFactory\uff0c\u4f46\u662f\u5982\u679c\u4f60\u60f3\u505a\uff0c\u90a3\u4e48\u4f60\u8981\u63d0\u4f9b\u4e00\u4e2a\u5b8c\u6574\u7684 ConnectionFactory \u5bf9\u8c61\u4f5c\u4e3a setConnectionFactory() \u65b9\u6cd5\u7684\u53c2\u6570\u3002\u8fd9\u4e2a\u81ea\u5b9a\u4e49\u5bf9\u8c61\u9700\u8981\u5b9e\u73b0 ConnectionFactoryInterface \u63a5\u53e3\u3002 <?php class MyConnectionFactory implements ConnectionFactoryInterface { public function __construct ( $handler , array $connectionParams , SerializerInterface $serializer , LoggerInterface $logger , LoggerInterface $tracer ) { // Code here } /** * @param $hostDetails * * @return ConnectionInterface */ public function create ( $hostDetails ) { // Code here...must return a Connection object } } $connectionFactory = new MyConnectionFactory ( $handler , $connectionParams , $serializer , $logger , $tracer ); $client = ClientBuilder :: create () -> setConnectionFactory ( $connectionFactory ); -> build (); \u5982\u4e0a\u6240\u8ff0\uff0c\u5982\u679c\u4f60\u60f3\u6ce8\u5165\u81ea\u5b9a\u4e49\u7684 ConnectionFactory\uff0c\u4f60\u81ea\u5df1\u5c31\u8981\u8d1f\u8d23\u5199\u5bf9\u5b83\u3002\u81ea\u5b9a\u4e49 ConnectionFactory \u9700\u8981\u7528\u5230 HTTP handler\uff0c\u5e8f\u5217\u5316\u5668\uff0c\u65e5\u5fd7\u548c\u8ffd\u8e2a\u3002 \u8bbe\u7f6e Endpoint \u95ed\u5305 # \u5ba2\u6237\u7aef\u4f7f\u7528 Endpoint \u95ed\u5305\u6765\u53d1\u9001 API \u8bf7\u6c42\u5230 Elasticsearch \u7684 Endpoint \u5bf9\u8c61\u3002\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u5bf9\u8c61\u4f1a\u901a\u8fc7\u95ed\u5305\u6784\u5efa\u4e00\u4e2a\u65b0\u7684 Endpoint\uff0c\u8fd9\u4e2a\u610f\u5473\u7740\u5982\u679c\u4f60\u60f3\u6269\u5c55 API \u7684 Endpoint\uff0c\u4f60\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u505a\u5230\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u65b0\u589e\u4e00\u4e2a endpoint\uff1a <?php $transport = $this -> transport ; $serializer = $this -> serializer ; $newEndpoint = function ( $class ) use ( $transport , $serializer ) { if ( $class == 'SuperSearch' ) { return new MyProject\\SuperSearch ( $transport ); } else { // Default handler $fullPath = '\\\\Elasticsearch\\\\Endpoints\\\\' . $class ; if ( $class === 'Bulk' || $class === 'Msearch' || $class === 'MPercolate' ) { return new $fullPath ( $transport , $serializer ); } else { return new $fullPath ( $transport ); } } }; $client = ClientBuilder :: create () -> setEndpoint ( $newEndpoint ) -> build (); \u5f88\u660e\u663e\uff0c\u5982\u679c\u4f60\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u90a3\u4e48\u4f60\u5c31\u8981\u8d1f\u8d23\u5bf9\u73b0\u5b58\u7684 Endpoint \u8fdb\u884c\u7ef4\u62a4\uff0c\u4ee5\u786e\u4fdd\u6240\u6709\u7684\u65b9\u6cd5\u90fd\u80fd\u6b63\u5e38\u8fd0\u884c\u3002\u540c\u65f6\u4f60\u4e5f\u8981\u786e\u4fdd\u7aef\u53e3\u548c\u5e8f\u5217\u5316\u90fd\u5199\u5165\u6bcf\u4e2a Endpoint\u3002 \u4ece hash \u914d\u7f6e\u4e2d\u521b\u5efa\u5ba2\u6237\u7aef # \u4e3a\u4e86\u66f4\u52a0\u5bb9\u6613\u7684\u521b\u5efa\u5ba2\u6237\u7aef\uff0c\u6240\u6709\u7684\u914d\u7f6e\u90fd\u53ef\u4ee5\u7528 hash \u5f62\u5f0f\u6765\u66ff\u4ee3\u5355\u4e00\u914d\u7f6e\u65b9\u6cd5\u3002\u8fd9\u79cd\u914d\u7f6e\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u9759\u6001\u65b9\u6cd5 ClientBuilder::FromConfig() \u6765\u5b8c\u6210\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd4\u56de\u4e00\u4e2a\u914d\u7f6e\u597d\u7684\u5ba2\u6237\u7aef\u3002 \u6570\u7ec4\u7684\u952e\u540d\u5bf9\u5e94\u65b9\u6cd5\u540d\uff08\u5982 retries \u5bf9\u5e94 setRetries() \u65b9\u6cd5\uff09\uff1a <?php $params = [ 'hosts' => [ 'localhost:9200' ], 'retries' => 2 , 'handler' => ClientBuilder :: singleHandler () ]; $client = ClientBuilder :: fromConfig ( $params ); \u4e3a\u4e86\u5e2e\u52a9\u7528\u6237\u627e\u51fa\u6f5c\u5728\u7684\u95ee\u9898\uff0c\u672a\u77e5\u53c2\u6570\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u5982\u679c\u4f60\u4e0d\u60f3\u8981\u629b\u51fa\u5f02\u5e38\uff0c\u4f60\u53ef\u4ee5\u5728 fromConfig() \u4e2d\u8bbe\u7f6e $quiet = true \u6765\u5173\u95ed\u5f02\u5e38\uff1a <?php $params = [ 'hosts' => [ 'localhost:9200' ], 'retries' => 2 , 'imNotReal' => 5 ]; // Set $quiet to true to ignore the unknown `imNotReal` key $client = ClientBuilder :: fromConfig ( $params , true );","title":"\u914d\u7f6e"},{"location":"elasticsearch/elasticsearch-php/configuration/#_1","text":"\u51e0\u4e4e\u6240\u6709\u5e94\u7528\uff08\u8bd1\u8005\u6ce8\uff1a\u5982 mysql\u3001redis \u7b49\uff09\u7684\u5ba2\u6237\u7aef\u90fd\u53ef\u4ee5\u914d\u7f6e\u3002\u5927\u591a\u6570\u7528\u6237\u53ea\u9700\u914d\u7f6e\u4e00\u4e9b\u53c2\u6570\u6765\u6ee1\u8db3\u4ed6\u4eec\u7684\u9700\u6c42\uff0c\u4f46\u662f\u4e5f\u6709\u53ef\u80fd\u9700\u8981\u4fee\u6539\u5927\u91cf\u7684\u5185\u6838\u4ee3\u7801\u6765\u6ee1\u8db3\u9700\u6c42\u3002 \u5728\u5ba2\u6237\u7aef\u5bf9\u8c61\u5b9e\u4f8b\u5316\u524d\u5c31\u5e94\u8be5\u901a\u8fc7 ClientBuilder \u5bf9\u8c61\u6765\u5b8c\u6210\u81ea\u5b9a\u4e49\u914d\u7f6e\u3002\u6211\u4eec\u4f1a\u6982\u8ff0\u4e00\u4e0b\u6240\u6709\u7684\u914d\u7f6e\u53c2\u6570\uff0c\u5e76\u4e14\u5c55\u793a\u4e00\u4e9b\u4ee3\u7801\u793a\u4f8b\u3002","title":"\u914d\u7f6e"},{"location":"elasticsearch/elasticsearch-php/configuration/#inline-host","text":"\u6700\u5e38\u89c1\u7684\u914d\u7f6e\u662f\u544a\u8bc9\u5ba2\u6237\u7aef\u6709\u5173\u96c6\u7fa4\u7684\u4fe1\u606f\uff1a\u6709\u591a\u5c11\u4e2a\u8282\u70b9\uff0c\u8282\u70b9\u7684ip\u5730\u5740\u548c\u7aef\u53e3\u53f7\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u4e3b\u673a\u540d\uff0c\u5ba2\u6237\u7aef\u4f1a\u8fde\u63a5 localhost:9200 \u3002 \u5229\u7528 ClientBuilder \u7684 setHosts() \u65b9\u6cd5\u53ef\u4ee5\u6539\u53d8\u5ba2\u6237\u7aef\u7684\u9ed8\u8ba4\u8fde\u63a5\u65b9\u5f0f\u3002 setHosts() \u65b9\u6cd5\u63a5\u6536\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u6570\u7ec4\u91cc\u9762\u6bcf\u4e2a\u503c\u90fd\u4ee3\u8868\u96c6\u7fa4\u91cc\u9762\u7684\u4e00\u4e2a\u8282\u70b9\u4fe1\u606f\u3002\u503c\u7684\u683c\u5f0f\u591a\u79cd\u591a\u6837\uff0c\u4e3b\u8981\u770b\u4f60\u7684\u9700\u6c42\uff1a <?php $hosts = [ '192.168.1.1:9200' , // IP + Port '192.168.1.2' , // Just IP 'mydomain.server.com:9201' , // Domain + Port 'mydomain2.server.com' , // Just Domain 'https://localhost' , // SSL to localhost 'https://192.168.1.3:9200' // SSL to IP + Port ]; $client = ClientBuilder :: create () // Instantiate a new ClientBuilder -> setHosts ( $hosts ) // Set the hosts -> build (); // Build the client object \u6ce8\u610f ClientBuilder \u5bf9\u8c61\u5141\u8bb8\u94fe\u5f0f\u64cd\u4f5c\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u5206\u522b\u8c03\u7528\u4e0a\u8ff0\u7684\u65b9\u6cd5\uff1a <?php $hosts = [ '192.168.1.1:9200' , // IP + Port '192.168.1.2' , // Just IP 'mydomain.server.com:9201' , // Domain + Port 'mydomain2.server.com' , // Just Domain 'https://localhost' , // SSL to localhost 'https://192.168.1.3:9200' // SSL to IP + Port ]; $clientBuilder = ClientBuilder :: create (); // Instantiate a new ClientBuilder $clientBuilder -> setHosts ( $hosts ); // Set the hosts $client = $clientBuilder -> build (); // Build the client object","title":"Inline Host \u914d\u7f6e\u6cd5"},{"location":"elasticsearch/elasticsearch-php/configuration/#extended-host","text":"\u5ba2\u6237\u7aef\u4e5f\u652f\u6301 Extended Host \u914d\u7f6e\u8bed\u6cd5\u3002Inline Host \u914d\u7f6e\u6cd5\u4f9d\u8d56 PHP \u7684 filter_var() \u51fd\u6570\u548c parse_url() \u51fd\u6570\u6765\u9a8c\u8bc1\u548c\u63d0\u53d6\u4e00\u4e2a URL \u7684\u5404\u4e2a\u90e8\u5206\u3002\u7136\u800c\uff0c\u8fd9\u4e9b php \u51fd\u6570\u5728\u4e00\u4e9b\u7279\u5b9a\u7684\u573a\u666f\u4e0b\u4f1a\u51fa\u9519\u3002\u4f8b\u5982\uff0c filter_var() \u51fd\u6570\u4e0d\u63a5\u6536\u6709\u4e0b\u5212\u7ebf\u7684 URL\u3002\u540c\u6837\uff0c\u5982\u679c Basic Auth \u7684\u5bc6\u7801\u542b\u6709\u7279\u5b9a\u5b57\u7b26\uff08\u5982#\u3001?\uff09\uff0c\u90a3\u4e48 parse_url() \u51fd\u6570\u4f1a\u62a5\u9519\u3002 \u56e0\u800c\u5ba2\u6237\u7aef\u4e5f\u652f\u6301 Extended Host \u914d\u7f6e\u8bed\u6cd5\uff0c\u4ece\u800c\u4f7f\u5ba2\u6237\u7aef\u5b9e\u4f8b\u5316\u66f4\u52a0\u53ef\u63a7\uff1a <?php $hosts = [ // This is effectively equal to: \"https://username:password!#$?*abc@foo.com:9200/\" [ 'host' => 'foo.com' , 'port' => '9200' , 'scheme' => 'https' , 'user' => 'username' , 'pass' => 'password!#$?*abc' ], // This is equal to \"http://localhost:9200/\" [ 'host' => 'localhost' , // Only host is required ] ]; $client = ClientBuilder :: create () // Instantiate a new ClientBuilder -> setHosts ( $hosts ) // Set the hosts -> build (); // Build the client object \u6bcf\u4e2a\u8282\u70b9\u53ea\u9700\u8981\u914d\u7f6e host \u53c2\u6570\u3002\u5982\u679c\u5176\u5b83\u53c2\u6570\u4e0d\u6307\u5b9a\uff0c\u90a3\u4e48\u9ed8\u8ba4\u7684\u7aef\u53e3\u662f 9200 \uff0c\u9ed8\u8ba4\u7684 scheme \u662f http \u3002","title":"Extended Host \u914d\u7f6e\u6cd5"},{"location":"elasticsearch/elasticsearch-php/configuration/#_2","text":"\u60f3\u4e86\u89e3 HTTP \u8ba4\u8bc1\u548c SSL \u52a0\u5bc6\u7684\u5185\u5bb9\uff0c\u8bf7\u67e5\u770b \u8ba4\u8bc1\u4e0e\u52a0\u5bc6 \u3002","title":"\u8ba4\u8bc1\u4e0e\u52a0\u5bc6"},{"location":"elasticsearch/elasticsearch-php/configuration/#_3","text":"\u5728\u4e00\u4e2a\u96c6\u7fa4\u4e2d\uff0c\u5982\u679c\u64cd\u4f5c\u629b\u51fa\u5982\u4e0b\u5f02\u5e38\uff1aconnection refusal, connection timeout, DNS lookup timeout \u7b49\u7b49\uff08\u4e0d\u5305\u62ec4xx\u548c5xx\uff09\uff0c\u5ba2\u6237\u7aef\u4fbf\u4f1a\u91cd\u8fde\u3002\u5ba2\u6237\u7aef\u9ed8\u8ba4\u91cd\u8fde n \uff08n=\u8282\u70b9\u6570\uff09\u6b21\u3002 \u5982\u679c\u4f60\u4e0d\u60f3\u91cd\u8fde\uff0c\u6216\u8005\u60f3\u66f4\u6539\u91cd\u8fde\u6b21\u6570\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 setRetries() \u65b9\u6cd5\uff1a <?php $client = ClientBuilder :: create () -> setRetries ( 2 ) -> build (); \u5047\u5982\u5ba2\u6237\u7aef\u91cd\u8fde\u6b21\u6570\u8d85\u8fc7\u8bbe\u5b9a\u503c\uff0c\u4fbf\u4f1a\u629b\u51fa\u6700\u540e\u63a5\u6536\u5230\u7684\u5f02\u5e38\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6709 10 \u4e2a\u8282\u70b9\uff0c\u8bbe\u7f6e setRetries(5) \uff0c\u5ba2\u6237\u7aef\u4fbf\u4f1a\u6700\u591a\u53d1\u9001 5 \u6b21\u8fde\u63a5\u547d\u4ee4\u3002\u5982\u679c 5 \u4e2a\u8282\u70b9\u8fd4\u56de\u7684\u7ed3\u679c\u90fd\u662f connection timeout\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u4f1a\u629b\u51fa OperationTimeoutException \u3002\u7531\u4e8e\u8fde\u63a5\u6c60\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u8fd9\u4e9b\u8282\u70b9\u4e5f\u53ef\u80fd\u4f1a\u88ab\u6807\u8bb0\u4e3a\u6b7b\u8282\u70b9\u3002 \u4e3a\u4e86\u8bc6\u522b\u662f\u5426\u4e3a\u91cd\u8fde\u5f02\u5e38\uff0c\u629b\u51fa\u7684\u5f02\u5e38\u4f1a\u5305\u542b\u4e00\u4e2a MaxRetriesException \u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5728 catch \u5185\u4f7f\u7528 getPrevious() \u6765\u6355\u83b7\u4e00\u4e2a\u7279\u5b9a\u7684 curl \u5f02\u5e38\uff0c\u4ee5\u4fbf\u67e5\u770b\u662f\u5426\u5305\u542b MaxRetriesException \u3002 <?php $client = Elasticsearch\\ClientBuilder :: create () -> setHosts ([ \"localhost:1\" ]) -> setRetries ( 0 ) -> build (); try { $client -> search ( $searchParams ); } catch ( Elasticsearch\\Common\\Exceptions\\Curl\\CouldNotConnectToHost $e ) { $previous = $e -> getPrevious (); if ( $previous instanceof 'Elasticsearch\\Common\\Exceptions\\MaxRetriesException' ) { echo \"Max retries!\" ; } } \u7531\u4e8e\u6240\u6709 curl \u629b\u51fa\u7684\u5f02\u5e38\uff08 CouldNotConnectToHost , CouldNotResolveHostException , OperationTimeoutException \uff09\u90fd\u7ee7\u627f TransportException \u3002\u8fd9\u6837\u4f60\u5c31\u80fd\u591f\u7528 TransportException \u6765\u66ff\u4ee3\u5982\u4e0a3\u79cd\u5f02\u5e38\uff1a <?php $client = Elasticsearch\\ClientBuilder :: create () -> setHosts ([ \"localhost:1\" ]) -> setRetries ( 0 ) -> build (); try { $client -> search ( $searchParams ); } catch ( Elasticsearch\\Common\\Exceptions\\TransportException $e ) { $previous = $e -> getPrevious (); if ( $previous instanceof 'Elasticsearch\\Common\\Exceptions\\MaxRetriesException' ) { echo \"Max retries!\" ; } }","title":"\u8bbe\u7f6e\u91cd\u8fde\u6b21\u6570"},{"location":"elasticsearch/elasticsearch-php/configuration/#_4","text":"Elasticsearch-PHP \u652f\u6301\u65e5\u5fd7\u8bb0\u5f55\uff0c\u4f46\u7531\u4e8e\u6027\u80fd\u539f\u56e0\uff0c\u6240\u4ee5\u9ed8\u8ba4\u6ca1\u6709\u5f00\u542f\u3002\u5982\u679c\u4f60\u5e0c\u671b\u5f00\u542f\u65e5\u5fd7\uff0c\u4f60\u5c31\u8981\u9009\u62e9\u4e00\u4e2a\u65e5\u5fd7\u8bb0\u5f55\u5de5\u5177\u5e76\u5b89\u88c5\u5b83\uff0c\u7136\u540e\u5728\u5ba2\u6237\u7aef\u4e2d\u5f00\u542f\u65e5\u5fd7\u3002\u63a8\u8350\u4f7f\u7528 https://github.com/Seldaek/monolog[Monolog ]\uff0c\u4e0d\u8fc7\u4efb\u4f55\u5b9e\u73b0 PSR/Log \u63a5\u53e3\u7684\u65e5\u5fd7\u8bb0\u5f55\u5de5\u5177\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002 \u4f60\u4f1a\u53d1\u73b0\u5728\u5b89\u88c5 elasticsearch-php \u65f6\u4f1a\u5efa\u8bae\u5b89\u88c5 Monolog\u3002\u4e3a\u4e86\u4f7f\u7528 Monolog\uff0c\u8bf7\u628a\u5b83\u52a0\u5165 composer.json \uff1a { \"require\" : { ... \"elasticsearch/elasticsearch\" : \"~6.0\" , \"monolog/monolog\" : \"~1.0\" } } \u7136\u540e\u7528 composer \u66f4\u65b0\uff1a php composer.phar update <?php \u4e00\u65e6\u5b89\u88c5\u597d Monolog\uff08\u6216\u5176\u4ed6\u65e5\u5fd7\u8bb0\u5f55\u5de5\u5177\uff09\uff0c\u4f60\u5c31\u8981\u521b\u5efa\u4e00\u4e2a\u65e5\u5fd7\u5bf9\u8c61\u5e76\u4e14\u6ce8\u5165\u5230\u5ba2\u6237\u7aef\u4e2d\u3002 `ClientBuilder` \u5bf9\u8c61\u6709\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5\u6765\u6784\u5efa\u4e00\u4e2a\u901a\u7528\u7684 Monolog - based \u65e5\u5fd7\u5bf9\u8c61\u3002\u4f60\u53ea\u9700\u8981\u63d0\u4f9b\u5b58\u653e\u65e5\u5fd7\u8def\u5f84\u5c31\u884c\uff1a $logger = ClientBuilder :: defaultLogger ( 'path/to/your.log' ); $client = ClientBuilder :: create () // Instantiate a new ClientBuilder -> setLogger ( $logger ) // Set the logger with a default logger -> build (); // Build the client object \u4f60\u4e5f\u53ef\u4ee5\u6307\u5b9a\u8bb0\u5f55\u7684\u65e5\u5fd7\u7ea7\u522b\uff1a <?php // set severity with second parameter $logger = ClientBuilder :: defaultLogger ( '/path/to/logs/' , Logger :: INFO ); $client = ClientBuilder :: create () // Instantiate a new ClientBuilder -> setLogger ( $logger ) // Set the logger with a default logger -> build (); // Build the client object defaultLogger() \u65b9\u6cd5\u53ea\u662f\u4e00\u4e2a\u8f85\u52a9\u65b9\u6cd5\uff0c\u4e0d\u8981\u6c42\u4f60\u4f7f\u7528\u5b83\u3002\u4f60\u53ef\u4ee5\u81ea\u5df1\u521b\u5efa\u65e5\u5fd7\u5bf9\u8c61\uff0c\u7136\u540e\u6ce8\u5165\uff1a <?php use Monolog\\Logger ; use Monolog\\Handler\\StreamHandler ; $logger = new Logger ( 'name' ); $logger -> pushHandler ( new StreamHandler ( 'path/to/your.log' , Logger :: WARNING )); $client = ClientBuilder :: create () // Instantiate a new ClientBuilder -> setLogger ( $logger ) // Set your custom logger -> build (); // Build the client object","title":"\u5f00\u542f\u65e5\u5fd7"},{"location":"elasticsearch/elasticsearch-php/configuration/#http-handler","text":"Elasticsearch-PHP \u4f7f\u7528\u7684\u662f\u53ef\u66ff\u4ee3\u7684 HTTP \u4f20\u8f93\u5c42\u2014\u2014 RingPHP \u3002\u8fd9\u5141\u8bb8\u5ba2\u6237\u7aef\u6784\u5efa\u4e00\u4e2a\u666e\u901a\u7684 HTTP \u8bf7\u6c42\uff0c\u7136\u540e\u901a\u8fc7\u4f20\u8f93\u5c42\u53d1\u9001\u51fa\u53bb\u3002\u771f\u6b63\u7684\u8bf7\u6c42\u7ec6\u8282\u9690\u85cf\u5728\u5ba2\u6237\u7aef\u5185\uff0c\u5e76\u4e14\u8fd9\u662f\u6a21\u5757\u5316\u7684\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u6839\u636e\u4f60\u7684\u9700\u6c42\u6765\u9009\u62e9 HTTP handlers\u3002 \u5ba2\u6237\u7aef\u4f7f\u7528\u7684\u9ed8\u8ba4 handler \u662f\u7ed3\u5408\u578b handler\uff08combination handler\uff09\u3002\u5f53\u4f7f\u7528\u540c\u6b65\u6a21\u5f0f\uff0chandler \u4f1a\u4f7f\u7528 CurlHandler \u6765\u4e00\u4e2a\u4e00\u4e2a\u5730\u53d1\u9001 curl \u8bf7\u6c42\u3002\u8fd9\u79cd\u65b9\u5f0f\u5bf9\u4e8e\u5355\u4e00\u8bf7\u6c42\uff08single requests\uff09\u6765\u8bf4\u7279\u522b\u8fc5\u901f\u3002\u5f53\u5f02\u6b65\uff08future\uff09\u6a21\u5f0f\u5f00\u542f\uff0chandler \u5c31\u8f6c\u6362\u6210\u4f7f\u7528 CurlMultiHandler \uff0c CurlMultiHandler \u4ee5 curl_multi \u65b9\u5f0f\u6765\u53d1\u9001\u8bf7\u6c42\u3002\u8fd9\u6837\u4f1a\u6d88\u8017\u66f4\u591a\u6027\u80fd\uff0c\u4f46\u662f\u5141\u8bb8\u6279\u91cf HTTP \u8bf7\u6c42\u5e76\u884c\u6267\u884c\u3002 \u4f60\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u4e00\u4e9b\u52a9\u624b\u51fd\u6570\u4e2d\u9009\u62e9\u4e00\u4e2a\u6765\u914d\u7f6e HTTP handler\uff0c\u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49 HTTP handler\uff1a <?php $defaultHandler = ClientBuilder :: defaultHandler (); $singleHandler = ClientBuilder :: singleHandler (); $multiHandler = ClientBuilder :: multiHandler (); $customHandler = new MyCustomHandler (); $client = ClientBuilder :: create () -> setHandler ( $defaultHandler ) -> build (); \u60f3\u8981\u4e86\u89e3\u81ea\u5b9a\u4e49 Ring handler \u7684\u7ec6\u8282\uff0c\u8bf7\u67e5\u770b RingPHP\u6587\u6863 \u3002 \u5728\u6240\u6709\u7684\u60c5\u51b5\u4e0b\u90fd\u63a8\u8350\u4f7f\u7528\u9ed8\u8ba4\u7684 handler\u3002\u8fd9\u4e0d\u4ec5\u53ef\u4ee5\u4ee5\u540c\u6b65\u6a21\u5f0f\u5feb\u901f\u53d1\u9001\u8bf7\u6c42\uff0c\u800c\u4e14\u4e5f\u4fdd\u7559\u4e86\u5f02\u6b65\u6a21\u5f0f\u6765\u5b9e\u73b0\u5e76\u884c\u8bf7\u6c42\u3002 \u5982\u679c\u4f60\u89c9\u5f97\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u7528\u5230 future \u6a21\u5f0f\uff0c\u4f60\u53ef\u4ee5\u8003\u8651\u7528 singleHandler \uff0c\u8fd9\u6837\u4f1a\u95f4\u63a5\u8282\u7701\u4e00\u4e9b\u6027\u80fd\u3002","title":"\u914d\u7f6e HTTP Handler"},{"location":"elasticsearch/elasticsearch-php/configuration/#_5","text":"\u5ba2\u6237\u7aef\u4f1a\u7ef4\u6301\u4e00\u4e2a\u8fde\u63a5\u6c60\uff0c\u8fde\u63a5\u6c60\u5185\u6bcf\u4e2a\u8fde\u63a5\u4ee3\u8868\u96c6\u7fa4\u7684\u4e00\u4e2a\u8282\u70b9\u3002\u8fd9\u91cc\u6709\u597d\u51e0\u79cd\u8fde\u63a5\u6c60\u53ef\u4f9b\u4f7f\u7528\uff0c\u6bcf\u4e2a\u7684\u884c\u4e3a\u90fd\u6709\u4e9b\u7ec6\u5fae\u5dee\u8ddd\u3002\u8fde\u63a5\u6c60\u53ef\u901a\u8fc7 setConnectionPool() \u6765\u914d\u7f6e\uff1a <?php $connectionPool = '\\Elasticsearch\\ConnectionPool\\StaticNoPingConnectionPool' ; $client = ClientBuilder :: create () -> setConnectionPool ( $connectionPool ) -> build (); \u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u8be2 \u8fde\u63a5\u6c60\u914d\u7f6e \u3002","title":"\u8bbe\u7f6e\u8fde\u63a5\u6c60"},{"location":"elasticsearch/elasticsearch-php/configuration/#selector","text":"\u8fde\u63a5\u6c60\u662f\u7528\u6765\u7ba1\u7406\u96c6\u7fa4\u7684\u8fde\u63a5\uff0c\u4f46\u662f\u9009\u62e9\u5668\u5219\u662f\u7528\u6765\u786e\u5b9a\u4e0b\u4e00\u4e2a API \u8bf7\u6c42\u8981\u7528\u54ea\u4e2a\u8fde\u63a5\u3002\u8fd9\u91cc\u6709\u51e0\u4e2a\u9009\u62e9\u5668\u53ef\u4f9b\u9009\u62e9\u3002\u9009\u62e9\u5668\u53ef\u901a\u8fc7 setSelector() \u65b9\u6cd5\u6765\u66f4\u6539\uff1a <?php $selector = '\\Elasticsearch\\ConnectionPool\\Selectors\\StickyRoundRobinSelector' ; $client = ClientBuilder :: create () -> setSelector ( $selector ) -> build (); \u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u8be2 \u9009\u62e9\u5668\u914d\u7f6e \u3002","title":"\u8bbe\u7f6e\u9009\u62e9\u5668\uff08Selector\uff09"},{"location":"elasticsearch/elasticsearch-php/configuration/#serializer","text":"\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u6570\u636e\u662f\u5173\u8054\u6570\u7ec4\uff0c\u4f46\u662f Elasticsearch \u63a5\u53d7 JSON \u6570\u636e\u3002\u5e8f\u5217\u5316\u5668\u662f\u6307\u628a PHP \u6570\u7ec4\u5e8f\u5217\u5316\u4e3a JSON \u6570\u636e\u3002\u5f53\u7136 Elasticsearch \u8fd4\u56de\u7684 JSON \u6570\u636e\u4e5f\u4f1a\u53cd\u5e8f\u5217\u5316\u4e3a PHP \u6570\u7ec4\u3002\u8fd9\u770b\u8d77\u6765\u6709\u4e9b\u7e41\u7410\uff0c\u4f46\u628a\u5e8f\u5217\u5316\u5668\u6a21\u5757\u5316\u5bf9\u4e8e\u5904\u7406\u4e00\u4e9b\u6781\u7aef\u6848\u4f8b\u6709\u83ab\u5927\u5e2e\u52a9\u3002 \u5927\u90e8\u5206\u4eba\u4e0d\u4f1a\u66f4\u6539\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5668\uff08 SmartSerializer \uff09\uff0c\u4f46\u4f60\u771f\u7684\u60f3\u6539\u53d8\uff0c\u90a3\u53ef\u4ee5\u901a\u8fc7 setSerializer() \u65b9\u6cd5\uff1a <?php $serializer = '\\Elasticsearch\\Serializers\\SmartSerializer' ; $client = ClientBuilder :: create () -> setSerializer ( $serializer ) -> build (); \u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u8be2 \u5e8f\u5217\u5316\u5668\u914d\u7f6e \u3002","title":"\u8bbe\u7f6e\u5e8f\u5217\u5316\u5668\uff08Serializer\uff09"},{"location":"elasticsearch/elasticsearch-php/configuration/#connectionfactory","text":"\u5f53\u8fde\u63a5\u6c60\u53d1\u9001\u8bf7\u6c42\u65f6\uff0cConnectionFactory \u5c31\u4f1a\u5b9e\u4f8b\u5316\u8fde\u63a5\u5bf9\u8c61\u3002\u4e00\u4e2a\u8fde\u63a5\u5bf9\u8c61\u4ee3\u8868\u4e00\u4e2a\u8282\u70b9\u3002\u56e0\u4e3a handler\uff08\u901a\u8fc7RingPHP\uff09\u624d\u662f\u771f\u6b63\u7684\u6267\u884c\u7f51\u7edc\u8bf7\u6c42\uff0c\u90a3\u4e48\u8fde\u63a5\u5bf9\u8c61\u7684\u4e3b\u8981\u5de5\u4f5c\u5c31\u662f\u7ef4\u6301\u8fde\u63a5\uff1a\u8282\u70b9\u662f\u6d3b\u8282\u70b9\u5417\uff1fping \u7684\u901a\u5417\uff1fhost \u548c\u7aef\u53e3\u662f\u4ec0\u4e48\uff1f \u5f88\u5c11\u4f1a\u53bb\u81ea\u5b9a\u4e49 ConnectionFactory\uff0c\u4f46\u662f\u5982\u679c\u4f60\u60f3\u505a\uff0c\u90a3\u4e48\u4f60\u8981\u63d0\u4f9b\u4e00\u4e2a\u5b8c\u6574\u7684 ConnectionFactory \u5bf9\u8c61\u4f5c\u4e3a setConnectionFactory() \u65b9\u6cd5\u7684\u53c2\u6570\u3002\u8fd9\u4e2a\u81ea\u5b9a\u4e49\u5bf9\u8c61\u9700\u8981\u5b9e\u73b0 ConnectionFactoryInterface \u63a5\u53e3\u3002 <?php class MyConnectionFactory implements ConnectionFactoryInterface { public function __construct ( $handler , array $connectionParams , SerializerInterface $serializer , LoggerInterface $logger , LoggerInterface $tracer ) { // Code here } /** * @param $hostDetails * * @return ConnectionInterface */ public function create ( $hostDetails ) { // Code here...must return a Connection object } } $connectionFactory = new MyConnectionFactory ( $handler , $connectionParams , $serializer , $logger , $tracer ); $client = ClientBuilder :: create () -> setConnectionFactory ( $connectionFactory ); -> build (); \u5982\u4e0a\u6240\u8ff0\uff0c\u5982\u679c\u4f60\u60f3\u6ce8\u5165\u81ea\u5b9a\u4e49\u7684 ConnectionFactory\uff0c\u4f60\u81ea\u5df1\u5c31\u8981\u8d1f\u8d23\u5199\u5bf9\u5b83\u3002\u81ea\u5b9a\u4e49 ConnectionFactory \u9700\u8981\u7528\u5230 HTTP handler\uff0c\u5e8f\u5217\u5316\u5668\uff0c\u65e5\u5fd7\u548c\u8ffd\u8e2a\u3002","title":"\u8bbe\u7f6e\u81ea\u5b9a\u4e49 ConnectionFactory"},{"location":"elasticsearch/elasticsearch-php/configuration/#endpoint","text":"\u5ba2\u6237\u7aef\u4f7f\u7528 Endpoint \u95ed\u5305\u6765\u53d1\u9001 API \u8bf7\u6c42\u5230 Elasticsearch \u7684 Endpoint \u5bf9\u8c61\u3002\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u5bf9\u8c61\u4f1a\u901a\u8fc7\u95ed\u5305\u6784\u5efa\u4e00\u4e2a\u65b0\u7684 Endpoint\uff0c\u8fd9\u4e2a\u610f\u5473\u7740\u5982\u679c\u4f60\u60f3\u6269\u5c55 API \u7684 Endpoint\uff0c\u4f60\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u505a\u5230\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u65b0\u589e\u4e00\u4e2a endpoint\uff1a <?php $transport = $this -> transport ; $serializer = $this -> serializer ; $newEndpoint = function ( $class ) use ( $transport , $serializer ) { if ( $class == 'SuperSearch' ) { return new MyProject\\SuperSearch ( $transport ); } else { // Default handler $fullPath = '\\\\Elasticsearch\\\\Endpoints\\\\' . $class ; if ( $class === 'Bulk' || $class === 'Msearch' || $class === 'MPercolate' ) { return new $fullPath ( $transport , $serializer ); } else { return new $fullPath ( $transport ); } } }; $client = ClientBuilder :: create () -> setEndpoint ( $newEndpoint ) -> build (); \u5f88\u660e\u663e\uff0c\u5982\u679c\u4f60\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u90a3\u4e48\u4f60\u5c31\u8981\u8d1f\u8d23\u5bf9\u73b0\u5b58\u7684 Endpoint \u8fdb\u884c\u7ef4\u62a4\uff0c\u4ee5\u786e\u4fdd\u6240\u6709\u7684\u65b9\u6cd5\u90fd\u80fd\u6b63\u5e38\u8fd0\u884c\u3002\u540c\u65f6\u4f60\u4e5f\u8981\u786e\u4fdd\u7aef\u53e3\u548c\u5e8f\u5217\u5316\u90fd\u5199\u5165\u6bcf\u4e2a Endpoint\u3002","title":"\u8bbe\u7f6e Endpoint \u95ed\u5305"},{"location":"elasticsearch/elasticsearch-php/configuration/#hash","text":"\u4e3a\u4e86\u66f4\u52a0\u5bb9\u6613\u7684\u521b\u5efa\u5ba2\u6237\u7aef\uff0c\u6240\u6709\u7684\u914d\u7f6e\u90fd\u53ef\u4ee5\u7528 hash \u5f62\u5f0f\u6765\u66ff\u4ee3\u5355\u4e00\u914d\u7f6e\u65b9\u6cd5\u3002\u8fd9\u79cd\u914d\u7f6e\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u9759\u6001\u65b9\u6cd5 ClientBuilder::FromConfig() \u6765\u5b8c\u6210\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd4\u56de\u4e00\u4e2a\u914d\u7f6e\u597d\u7684\u5ba2\u6237\u7aef\u3002 \u6570\u7ec4\u7684\u952e\u540d\u5bf9\u5e94\u65b9\u6cd5\u540d\uff08\u5982 retries \u5bf9\u5e94 setRetries() \u65b9\u6cd5\uff09\uff1a <?php $params = [ 'hosts' => [ 'localhost:9200' ], 'retries' => 2 , 'handler' => ClientBuilder :: singleHandler () ]; $client = ClientBuilder :: fromConfig ( $params ); \u4e3a\u4e86\u5e2e\u52a9\u7528\u6237\u627e\u51fa\u6f5c\u5728\u7684\u95ee\u9898\uff0c\u672a\u77e5\u53c2\u6570\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u5982\u679c\u4f60\u4e0d\u60f3\u8981\u629b\u51fa\u5f02\u5e38\uff0c\u4f60\u53ef\u4ee5\u5728 fromConfig() \u4e2d\u8bbe\u7f6e $quiet = true \u6765\u5173\u95ed\u5f02\u5e38\uff1a <?php $params = [ 'hosts' => [ 'localhost:9200' ], 'retries' => 2 , 'imNotReal' => 5 ]; // Set $quiet to true to ignore the unknown `imNotReal` key $client = ClientBuilder :: fromConfig ( $params , true );","title":"\u4ece hash \u914d\u7f6e\u4e2d\u521b\u5efa\u5ba2\u6237\u7aef"},{"location":"elasticsearch/elasticsearch-php/connection_pool/","text":"\u8fde\u63a5\u6c60 # \u8fde\u63a5\u6c60\u662f\u5ba2\u6237\u7aef\u5185\u7684\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4e3b\u8981\u662f\u7ef4\u6301\u73b0\u6709\u8282\u70b9\u7684\u8fde\u63a5\u3002\u7406\u8bba\u4e0a\u6765\u8bb2\uff0c\u8282\u70b9\u53ea\u6709\u6b7b\u8282\u70b9\u4e0e\u6d3b\u8282\u70b9\u3002 \u7136\u800c\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u4e8b\u60c5\u7edd\u4e0d\u4f1a\u8fd9\u4e48\u660e\u786e\u3002\u6709\u65f6\u5019\u8282\u70b9\u662f\u5904\u5728 \u201c\u53ef\u80fd\u6302\u4e86\u4f46\u8fd8\u672a\u786e\u8ba4\u201d \u3001 \u201c\u8fde\u63a5\u8d85\u65f6\u4f46\u672a\u77e5\u539f\u56e0\u201d \u6216 \u201c\u6700\u8fd1\u6302\u8fc7\u4f46\u73b0\u5728\u53ef\u7528\u201d \u7684\u7070\u8272\u5730\u5e26\u4e2d\u3002\u800c\u8fde\u63a5\u6c60\u7684\u5de5\u4f5c\u5c31\u662f\u7ba1\u7406\u8fd9\u4e9b\u65e0\u89c4\u5219\u7684\u8fde\u63a5\uff0c\u5e76\u4e3a\u5ba2\u6237\u7aef\u63d0\u4f9b\u6700\u7a33\u5b9a\u7684\u8fde\u63a5\u72b6\u6001\u3002 \u5982\u679c\u4e00\u4e2a\u8fde\u63a5\u6c60\u627e\u4e0d\u5230\u4e00\u4e2a\u6d3b\u8282\u70b9\u6765\u53d1\u9001\u67e5\u8be2\uff0c\u90a3\u4e48\u5c31\u4f1a\u8fd4\u56de\u4e00\u4e2a NoNodesAvailableException \u5f02\u5e38\u7ed9\u5ba2\u6237\u7aef\u3002\u8fd9\u91cc\u8ddf\u6700\u5927\u91cd\u8fde\u6b21\u6570\uff08retry\uff09\u6709\u6240\u4e0d\u540c\u3002\u5047\u5982\u6709\u8fd9\u4e48\u4e00\u4e2a\u4f8b\u5b50\uff1a\u4f60\u7684\u96c6\u7fa4\u4e2d\u53ef\u80fd\u6709 10 \u4e2a\u8282\u70b9\u3002\u4f60\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\uff0c\u5176\u4e2d\u6709 9 \u4e2a\u8282\u70b9\u56e0\u4e3a\u8fde\u63a5\u8d85\u65f6\u800c\u8bf7\u6c42\u5931\u8d25\u3002\u800c\u7b2c 10 \u4e2a\u8282\u70b9\u53d1\u9001\u8bf7\u6c42\u6210\u529f\u5e76\u6210\u529f\u6267\u884c\u8bf7\u6c42\u3002\u5728\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\uff0c\u524d 9 \u4e2a\u8282\u70b9\u4f1a\u88ab\u6807\u8bb0\u4e3a\u6b7b\u8282\u70b9\uff08\u8fde\u63a5\u6c60\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u624d\u4f1a\u88ab\u6807\u8bb0\uff09\uff0c\u4e14\u5b83\u4eec\u7684\u201c\u6b7b\u4ea1\u201d\u5b9a\u65f6\u5668\u4f1a\u542f\u52a8\u751f\u6548\u3002 \u5f53\u8981\u53d1\u9001\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u8282\u70b91-9\u662f\u88ab\u6807\u8bb0\u4e3a\u6b7b\u8282\u70b9\uff0c\u6240\u4ee5\u8bf7\u6c42\u4f1a\u8df3\u8fc7\u8fd9\u4e9b\u8282\u70b9\u3002\u8bf7\u6c42\u53ea\u4f1a\u53d1\u9001\u5230\u552f\u4e00\u7684\u6d3b\u8282\u70b9 10 \u4e2d\uff0c\u800c\u5047\u5982\u53d1\u9001\u5230\u8fd9\u4e2a\u8282\u70b9\u4e5f\u5931\u8d25\u4e86\uff0c\u90a3\u4e48\u5c31\u4f1a\u8fd4\u56de NoNodesAvailableException \u3002\u4f60\u4f1a\u7559\u610f\u5230\u8fd9\u91cc\u7684\u53d1\u9001\u6b21\u6570\u6bd4\u91cd\u8fde\u6b21\u6570\uff08retries\uff09\u7684\u503c\u8981\u5c11\uff0c\u56e0\u4e3a\u91cd\u8fde\u6b21\u6570\u53ea\u9002\u7528\u4e8e\u6d3b\u8282\u70b9\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u662f\u6d3b\u8282\u70b9\uff0c\u8bf7\u6c42\u5931\u8d25\u540e\u5c31\u4f1a\u8fd4\u56de NoNodesAvailableException \u3002 \u8fd9\u91cc\u6709\u51e0\u79cd\u8fde\u63a5\u6c60\u53ef\u4f9b\u9009\u62e9\uff1a staticNoPingConnectionPool\uff08\u9ed8\u8ba4\uff09 # \u8fde\u63a5\u6c60\u7ef4\u6301\u4e00\u4e2a\u9759\u6001\u7684 hosts \u6e05\u5355\uff0c\u8fd9\u4e9b hosts \u5728\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u65f6\u90fd\u88ab\u5047\u5b9a\u4e3a\u6d3b\u8282\u70b9\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u5904\u7406\u8bf7\u6c42\u5931\u8d25\uff0c\u90a3\u4e48\u8be5\u8282\u70b9\u4f1a\u88ab\u6807\u8bb0\u4e3a\u6b7b\u8282\u70b9\u5e76\u6301\u7eed 60 \u79d2\uff0c\u800c\u8bf7\u6c42\u4f1a\u53d1\u9001\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\u300260 \u79d2\u8fc7\u540e\uff0c\u8282\u70b9\u5219\u4f1a\u518d\u751f\u5e76\u52a0\u5165\u8bf7\u6c42\u8f6e\u8be2\u4e2d\u3002\u6bcf\u589e\u52a0\u4e00\u6b21\u8bf7\u6c42\u5931\u8d25\u6b21\u6570\u90fd\u4f1a\u5bfc\u81f4\u6b7b\u4ea1\u65f6\u95f4\u4ee5\u6307\u6570\u7ea7\u522b\u589e\u957f\u3002 \u8bf7\u6c42\u6210\u529f\u4e00\u6b21\u540e\u4f1a\u91cd\u7f6e \"failed ping timeout\" \u8ba1\u6570\u5668\u3002 \u5982\u679c\u4f60\u60f3\u660e\u786e\u7684\u8bbe\u7f6e\u8fde\u63a5\u6c60\u4e3a StaticNoPingConnectionPool \uff0c\u4f60\u53ef\u80fd\u8981\u5728ClientBuilder\u5bf9\u8c61\u4e2d\u4f7f\u7528 setConnectionPool() \u65b9\u6cd5\uff1a <?php $client = ClientBuilder :: create () -> setConnectionPool ( '\\Elasticsearch\\ConnectionPool\\StaticNoPingConnectionPool' , []) -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u6307\u5b9a\u8fde\u63a5\u6c60\u3002 StaticConnectionPool # StaticConnectionPool \u9664\u4e86\u8981\u5728\u4f7f\u7528\u524d ping \u8282\u70b9\u6765\u786e\u5b9a\u662f\u5426\u4e3a\u6d3b\u8282\u70b9\uff0c\u5176\u5b83\u7684\u7279\u6027\u4e0e StaticNoPingConnectionPool \u4e00\u81f4\u3002\u8fd9\u53ef\u80fd\u5bf9\u4e8e\u6267\u884c\u65f6\u95f4\u8f83\u957f\u7684\u811a\u672c\u6bd4\u8f83\u6709\u7528\uff0c\u4f46\u8fd9\u5f80\u5f80\u4f1a\u589e\u52a0\u989d\u5916\u5f00\u9500\uff0c\u56e0\u4e3a\u5bf9\u4e00\u822c\u7684PHP\u811a\u672c\u6765\u8bf4\u8fd9\u662f\u4e0d\u5fc5\u8981\u7684\u3002 \u4f7f\u7528 StaticConnectionPool \u7684\u65b9\u6cd5\uff1a <?php $client = ClientBuilder :: create () -> setConnectionPool ( '\\Elasticsearch\\ConnectionPool\\StaticConnectionPool' , []) -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u6307\u5b9a\u8fde\u63a5\u6c60\u3002 SimpleConnectionPool # SimpleConnectionPool \u4ec5\u4ec5\u8fd4\u56de\u9009\u62e9\u5668\uff08Selector\uff09\u6307\u5b9a\u7684\u4e0b\u4e2a\u8282\u70b9\u4fe1\u606f\uff0c\u5b83\u4e0d\u76d1\u6d4b\u8282\u70b9\u7684\u201c\u751f\u6b7b\u72b6\u6001\u201d\u3002\u4e0d\u7ba1\u8282\u70b9\u662f\u6d3b\u8282\u70b9\u8fd8\u662f\u6b7b\u8282\u70b9\uff0c\u8fd9\u79cd\u8fde\u63a5\u6c60\u90fd\u4f1a\u8fd4\u56de\u8282\u70b9\u4fe1\u606f\u7ed9\u5ba2\u6237\u7aef\u3002\u5b83\u4ec5\u4ec5\u662f\u4e2a\u7b80\u5355\u7684\u9759\u6001 host \u8fde\u63a5\u6c60\u3002 SimpleConnectionPool \u4e0d\u5efa\u8bae\u5e38\u89c4\u4f7f\u7528\uff0c\u4f46\u662f\u5b83\u662f\u4e2a\u6709\u7528\u7684\u8c03\u8bd5\u5de5\u5177\u3002 \u4f7f\u7528 SimpleConnectionPool \u7684\u65b9\u6cd5\uff1a <?php $client = ClientBuilder :: create () -> setConnectionPool ( '\\Elasticsearch\\ConnectionPool\\SimpleConnectionPool' , []) -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u6307\u5b9a\u8fde\u63a5\u6c60\u3002 SniffingConnectionPool # SniffingConnectionPool \u4e0e\u524d\u9762\u7684\u4e24\u4e2a\u9759\u6001\u8fde\u63a5\u6c60\u6709\u6240\u4e0d\u540c\uff0c\u5b83\u662f\u52a8\u6001\u7684\u3002\u7528\u6237\u63d0\u4f9b hosts \u79cd\u5b50\uff0c\u800c\u5ba2\u6237\u7aef\u5219\u4f1a\u55c5\u63a2\u8fd9\u4e9b hosts \u5e76\u53d1\u73b0\u96c6\u7fa4\u7684\u5176\u4f59\u8282\u70b9\u3002 SniffingConnectionPool \u901a\u8fc7 Cluster State API \u6765\u5b9e\u73b0\u55c5\u63a2\u3002\u5f53\u96c6\u7fa4\u6dfb\u52a0\u65b0\u8282\u70b9\u6216\u5220\u9664\u8282\u70b9\uff0c\u5ba2\u6237\u7aef\u4f1a\u66f4\u65b0\u8fde\u63a5\u6c60\u7684\u6d3b\u8dc3\u8fde\u63a5\u3002 \u4f7f\u7528 SniffingConnectionPool \u7684\u65b9\u6cd5\uff1a <?php $client = ClientBuilder :: create () -> setConnectionPool ( '\\Elasticsearch\\ConnectionPool\\SniffingConnectionPool' , []) -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u6307\u5b9a\u8fde\u63a5\u6c60\u3002 \u81ea\u5b9a\u4e49\u8fde\u63a5\u6c60 # \u5982\u679c\u4f60\u8981\u662f\u5b9e\u73b0\u81ea\u5b9a\u4e49\u8fde\u63a5\u6c60\uff0c\u4f60\u7684\u7c7b\u5219\u5fc5\u987b\u5b9e\u73b0 ConnectionPoolInterface \u63a5\u53e3\uff1a <?php class MyCustomConnectionPool implements ConnectionPoolInterface { /** * @param bool $force * * @return ConnectionInterface */ public function nextConnection ( $force = false ) { // code here } /** * @return void */ public function scheduleCheck () { // code here } } \u7136\u540e\u4f60\u8981\u5b9e\u4f8b\u5316\u81ea\u5b9a\u4e49\u7684\u8fde\u63a5\u6c60\u5e76\u6ce8\u5165\u5230 ClientBuilder\uff1a <?php $myConnectionPool = new MyCustomConnectionPool (); $client = ClientBuilder :: create () -> setConnectionPool ( $myConnectionPool , []) -> build (); \u5982\u679c\u4f60\u7684\u8fde\u63a5\u6c60\u53ea\u6709\u8f83\u5c0f\u7684\u53d8\u66f4\uff0c\u4f60\u53ef\u4ee5\u8003\u8651\u6269\u5c55 AbstractConnectionPool \uff0c\u5b83\u63d0\u4f9b\u4e00\u4e9b\u5177\u4f53\u7684\u52a9\u624b\u65b9\u6cd5\u3002\u5982\u679c\u4f60\u4e0d\u9009\u62e9\u8fd9\u79cd\u505a\u6cd5\uff0c\u4f60\u5c31\u8981\u786e\u4fdd\u8fde\u63a5\u6c60\u62e5\u6709\u517c\u5bb9\u7684\u6784\u9020\u65b9\u6cd5\uff08\u56e0\u4e3a\u5728\u63a5\u53e3\u4e2d\u6ca1\u6709\u5b9a\u4e49\u597d\uff09\uff1a <?php class MyCustomConnectionPool extends AbstractConnectionPool implements ConnectionPoolInterface { public function __construct ( $connections , SelectorInterface $selector , ConnectionFactory $factory , $connectionPoolParams ) { parent :: __construct ( $connections , $selector , $factory , $connectionPoolParams ); } /** * @param bool $force * * @return ConnectionInterface */ public function nextConnection ( $force = false ) { // code here } /** * @return void */ public function scheduleCheck () { // code here } } \u5047\u5982\u4f60\u7684\u6784\u9020\u65b9\u6cd5\u4e0e AbstractConnectionPool \u7684\u6784\u9020\u65b9\u6cd5\u76f8\u540c\uff0c\u4f60\u53ef\u4ee5\u7528\u5bf9\u8c61\u6ce8\u5165\u6216\u547d\u540d\u7a7a\u95f4\u5b9e\u4f8b\u5316\u6765\u8bbe\u7f6e\u8fde\u63a5\u6c60\uff1a <?php $myConnectionPool = new MyCustomConnectionPool (); $client = ClientBuilder :: create () -> setConnectionPool ( $myConnectionPool , []) // object injection -> setConnectionPool ( '/MyProject/ConnectionPools/MyCustomConnectionPool' , []) // or namespace -> build (); \u9009\u62e9\u4ec0\u4e48\u8fde\u63a5\u6c60\uff1fPHP \u548c\u8fde\u63a5\u6c60\u7684\u5173\u7cfb # \u521d\u770b\u89c9\u5f97 sniffingConnectionPool \u4f3c\u4e4e\u6bd4\u8f83\u9ad8\u7ea7\u3002\u5bf9\u8bb8\u591a\u8bed\u8a00\u6765\u8bf4\u5f53\u7136\u5982\u6b64\u3002\u4f46\u662f PHP \u5219\u6709\u4e9b\u4e0d\u540c\u3002 \u56e0\u4e3a PHP \u662f\u65e0\u5171\u4eab\u67b6\u6784\uff08share-nothing architecture\uff09\uff0cphp \u811a\u672c\u5b9e\u4f8b\u5316\u540e\u65e0\u6cd5\u7ef4\u6301\u4e00\u4e2a\u8fde\u63a5\u6c60\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u811a\u672c\u5728\u91cd\u65b0\u6267\u884c\u65f6\u90fd\u8981\u8d1f\u8d23\u521b\u5efa\u3001\u7ef4\u6301\u548c\u9500\u6bc1\u8fde\u63a5\u3002 \u55c5\u63a2\u662f\u76f8\u5bf9\u8f7b\u91cf\u7684\u64cd\u4f5c\uff08\u8c03\u7528\u4e00\u6b21API\u5230 /_cluster/state \uff0c\u7136\u540e ping \u6bcf\u4e2a\u8282\u70b9\uff09\uff0c\u4f46\u662f\u5bf9\u4e8e\u67d0\u4e9b PHP \u7a0b\u5e8f\u6765\u8bf4\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u7b14\u4e0d\u53ef\u5ffd\u89c6\u7684\u5f00\u9500\u3002\u4e00\u822c\u7684 PHP \u811a\u672c\u53ef\u80fd\u4f1a\u52a0\u8f7d\u5ba2\u6237\u7aef\uff0c\u6267\u884c\u4e00\u4e9b\u8bf7\u6c42\u7136\u540e\u5173\u95ed\u3002\u60f3\u8c61\u4e00\u4e0b\u8fd9\u4e2a\u811a\u672c\u6bcf\u79d2\u8c03\u7528 1000 \u6b21\uff1a SniffingConnectionPool \u4f1a\u6bcf\u79d2\u6267\u884c\u55c5\u63a2\u548c ping \u6240\u6709\u8282\u70b9 1000 \u6b21\u3002\u55c5\u63a2\u7a0b\u5e8f\u5219\u4f1a\u589e\u52a0\u5927\u91cf\u7684\u5f00\u9500\u3002 \u5728\u5b9e\u9645\u4e2d\uff0c\u5982\u679c\u4f60\u7684\u811a\u672c\u53ea\u662f\u6267\u884c\u4e00\u4e9b\u8bf7\u6c42\uff0c\u7528\u55c5\u63a2\u5c31\u592a\u7c97\u66b4\u4e86\u3002\u55c5\u63a2\u5bf9\u4e8e\u5e38\u9a7b\u8fdb\u7a0b\u6765\u8bf4\u5f80\u5f80\u66f4\u52a0\u6709\u7528\u3002 \u57fa\u4e8e\u4e0a\u8ff0\u539f\u56e0\uff0c\u9ed8\u8ba4\u8fde\u63a5\u6c60\u624d\u8bbe\u7f6e\u4e3a\u5f53\u524d\u7684 staticNoPingConnectionPool \u3002\u5f53\u7136\u4f60\u53ef\u4ee5\u66f4\u6539\u9ed8\u8ba4\u8fde\u63a5\u6c60\uff0c\u4f46\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u4f60\u8fdb\u884c\u6d4b\u8bd5\u5e76\u786e\u4fdd\u8fde\u63a5\u6c60\u5bf9\u4e8e\u6027\u80fd\u6ca1\u6709\u4ea7\u751f\u4e0d\u826f\u5f71\u54cd\u3002","title":"\u8fde\u63a5\u6c60"},{"location":"elasticsearch/elasticsearch-php/connection_pool/#_1","text":"\u8fde\u63a5\u6c60\u662f\u5ba2\u6237\u7aef\u5185\u7684\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4e3b\u8981\u662f\u7ef4\u6301\u73b0\u6709\u8282\u70b9\u7684\u8fde\u63a5\u3002\u7406\u8bba\u4e0a\u6765\u8bb2\uff0c\u8282\u70b9\u53ea\u6709\u6b7b\u8282\u70b9\u4e0e\u6d3b\u8282\u70b9\u3002 \u7136\u800c\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u4e8b\u60c5\u7edd\u4e0d\u4f1a\u8fd9\u4e48\u660e\u786e\u3002\u6709\u65f6\u5019\u8282\u70b9\u662f\u5904\u5728 \u201c\u53ef\u80fd\u6302\u4e86\u4f46\u8fd8\u672a\u786e\u8ba4\u201d \u3001 \u201c\u8fde\u63a5\u8d85\u65f6\u4f46\u672a\u77e5\u539f\u56e0\u201d \u6216 \u201c\u6700\u8fd1\u6302\u8fc7\u4f46\u73b0\u5728\u53ef\u7528\u201d \u7684\u7070\u8272\u5730\u5e26\u4e2d\u3002\u800c\u8fde\u63a5\u6c60\u7684\u5de5\u4f5c\u5c31\u662f\u7ba1\u7406\u8fd9\u4e9b\u65e0\u89c4\u5219\u7684\u8fde\u63a5\uff0c\u5e76\u4e3a\u5ba2\u6237\u7aef\u63d0\u4f9b\u6700\u7a33\u5b9a\u7684\u8fde\u63a5\u72b6\u6001\u3002 \u5982\u679c\u4e00\u4e2a\u8fde\u63a5\u6c60\u627e\u4e0d\u5230\u4e00\u4e2a\u6d3b\u8282\u70b9\u6765\u53d1\u9001\u67e5\u8be2\uff0c\u90a3\u4e48\u5c31\u4f1a\u8fd4\u56de\u4e00\u4e2a NoNodesAvailableException \u5f02\u5e38\u7ed9\u5ba2\u6237\u7aef\u3002\u8fd9\u91cc\u8ddf\u6700\u5927\u91cd\u8fde\u6b21\u6570\uff08retry\uff09\u6709\u6240\u4e0d\u540c\u3002\u5047\u5982\u6709\u8fd9\u4e48\u4e00\u4e2a\u4f8b\u5b50\uff1a\u4f60\u7684\u96c6\u7fa4\u4e2d\u53ef\u80fd\u6709 10 \u4e2a\u8282\u70b9\u3002\u4f60\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\uff0c\u5176\u4e2d\u6709 9 \u4e2a\u8282\u70b9\u56e0\u4e3a\u8fde\u63a5\u8d85\u65f6\u800c\u8bf7\u6c42\u5931\u8d25\u3002\u800c\u7b2c 10 \u4e2a\u8282\u70b9\u53d1\u9001\u8bf7\u6c42\u6210\u529f\u5e76\u6210\u529f\u6267\u884c\u8bf7\u6c42\u3002\u5728\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\uff0c\u524d 9 \u4e2a\u8282\u70b9\u4f1a\u88ab\u6807\u8bb0\u4e3a\u6b7b\u8282\u70b9\uff08\u8fde\u63a5\u6c60\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u624d\u4f1a\u88ab\u6807\u8bb0\uff09\uff0c\u4e14\u5b83\u4eec\u7684\u201c\u6b7b\u4ea1\u201d\u5b9a\u65f6\u5668\u4f1a\u542f\u52a8\u751f\u6548\u3002 \u5f53\u8981\u53d1\u9001\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u8282\u70b91-9\u662f\u88ab\u6807\u8bb0\u4e3a\u6b7b\u8282\u70b9\uff0c\u6240\u4ee5\u8bf7\u6c42\u4f1a\u8df3\u8fc7\u8fd9\u4e9b\u8282\u70b9\u3002\u8bf7\u6c42\u53ea\u4f1a\u53d1\u9001\u5230\u552f\u4e00\u7684\u6d3b\u8282\u70b9 10 \u4e2d\uff0c\u800c\u5047\u5982\u53d1\u9001\u5230\u8fd9\u4e2a\u8282\u70b9\u4e5f\u5931\u8d25\u4e86\uff0c\u90a3\u4e48\u5c31\u4f1a\u8fd4\u56de NoNodesAvailableException \u3002\u4f60\u4f1a\u7559\u610f\u5230\u8fd9\u91cc\u7684\u53d1\u9001\u6b21\u6570\u6bd4\u91cd\u8fde\u6b21\u6570\uff08retries\uff09\u7684\u503c\u8981\u5c11\uff0c\u56e0\u4e3a\u91cd\u8fde\u6b21\u6570\u53ea\u9002\u7528\u4e8e\u6d3b\u8282\u70b9\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u662f\u6d3b\u8282\u70b9\uff0c\u8bf7\u6c42\u5931\u8d25\u540e\u5c31\u4f1a\u8fd4\u56de NoNodesAvailableException \u3002 \u8fd9\u91cc\u6709\u51e0\u79cd\u8fde\u63a5\u6c60\u53ef\u4f9b\u9009\u62e9\uff1a","title":"\u8fde\u63a5\u6c60"},{"location":"elasticsearch/elasticsearch-php/connection_pool/#staticnopingconnectionpool","text":"\u8fde\u63a5\u6c60\u7ef4\u6301\u4e00\u4e2a\u9759\u6001\u7684 hosts \u6e05\u5355\uff0c\u8fd9\u4e9b hosts \u5728\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u65f6\u90fd\u88ab\u5047\u5b9a\u4e3a\u6d3b\u8282\u70b9\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u5904\u7406\u8bf7\u6c42\u5931\u8d25\uff0c\u90a3\u4e48\u8be5\u8282\u70b9\u4f1a\u88ab\u6807\u8bb0\u4e3a\u6b7b\u8282\u70b9\u5e76\u6301\u7eed 60 \u79d2\uff0c\u800c\u8bf7\u6c42\u4f1a\u53d1\u9001\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\u300260 \u79d2\u8fc7\u540e\uff0c\u8282\u70b9\u5219\u4f1a\u518d\u751f\u5e76\u52a0\u5165\u8bf7\u6c42\u8f6e\u8be2\u4e2d\u3002\u6bcf\u589e\u52a0\u4e00\u6b21\u8bf7\u6c42\u5931\u8d25\u6b21\u6570\u90fd\u4f1a\u5bfc\u81f4\u6b7b\u4ea1\u65f6\u95f4\u4ee5\u6307\u6570\u7ea7\u522b\u589e\u957f\u3002 \u8bf7\u6c42\u6210\u529f\u4e00\u6b21\u540e\u4f1a\u91cd\u7f6e \"failed ping timeout\" \u8ba1\u6570\u5668\u3002 \u5982\u679c\u4f60\u60f3\u660e\u786e\u7684\u8bbe\u7f6e\u8fde\u63a5\u6c60\u4e3a StaticNoPingConnectionPool \uff0c\u4f60\u53ef\u80fd\u8981\u5728ClientBuilder\u5bf9\u8c61\u4e2d\u4f7f\u7528 setConnectionPool() \u65b9\u6cd5\uff1a <?php $client = ClientBuilder :: create () -> setConnectionPool ( '\\Elasticsearch\\ConnectionPool\\StaticNoPingConnectionPool' , []) -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u6307\u5b9a\u8fde\u63a5\u6c60\u3002","title":"staticNoPingConnectionPool\uff08\u9ed8\u8ba4\uff09"},{"location":"elasticsearch/elasticsearch-php/connection_pool/#staticconnectionpool","text":"StaticConnectionPool \u9664\u4e86\u8981\u5728\u4f7f\u7528\u524d ping \u8282\u70b9\u6765\u786e\u5b9a\u662f\u5426\u4e3a\u6d3b\u8282\u70b9\uff0c\u5176\u5b83\u7684\u7279\u6027\u4e0e StaticNoPingConnectionPool \u4e00\u81f4\u3002\u8fd9\u53ef\u80fd\u5bf9\u4e8e\u6267\u884c\u65f6\u95f4\u8f83\u957f\u7684\u811a\u672c\u6bd4\u8f83\u6709\u7528\uff0c\u4f46\u8fd9\u5f80\u5f80\u4f1a\u589e\u52a0\u989d\u5916\u5f00\u9500\uff0c\u56e0\u4e3a\u5bf9\u4e00\u822c\u7684PHP\u811a\u672c\u6765\u8bf4\u8fd9\u662f\u4e0d\u5fc5\u8981\u7684\u3002 \u4f7f\u7528 StaticConnectionPool \u7684\u65b9\u6cd5\uff1a <?php $client = ClientBuilder :: create () -> setConnectionPool ( '\\Elasticsearch\\ConnectionPool\\StaticConnectionPool' , []) -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u6307\u5b9a\u8fde\u63a5\u6c60\u3002","title":"StaticConnectionPool"},{"location":"elasticsearch/elasticsearch-php/connection_pool/#simpleconnectionpool","text":"SimpleConnectionPool \u4ec5\u4ec5\u8fd4\u56de\u9009\u62e9\u5668\uff08Selector\uff09\u6307\u5b9a\u7684\u4e0b\u4e2a\u8282\u70b9\u4fe1\u606f\uff0c\u5b83\u4e0d\u76d1\u6d4b\u8282\u70b9\u7684\u201c\u751f\u6b7b\u72b6\u6001\u201d\u3002\u4e0d\u7ba1\u8282\u70b9\u662f\u6d3b\u8282\u70b9\u8fd8\u662f\u6b7b\u8282\u70b9\uff0c\u8fd9\u79cd\u8fde\u63a5\u6c60\u90fd\u4f1a\u8fd4\u56de\u8282\u70b9\u4fe1\u606f\u7ed9\u5ba2\u6237\u7aef\u3002\u5b83\u4ec5\u4ec5\u662f\u4e2a\u7b80\u5355\u7684\u9759\u6001 host \u8fde\u63a5\u6c60\u3002 SimpleConnectionPool \u4e0d\u5efa\u8bae\u5e38\u89c4\u4f7f\u7528\uff0c\u4f46\u662f\u5b83\u662f\u4e2a\u6709\u7528\u7684\u8c03\u8bd5\u5de5\u5177\u3002 \u4f7f\u7528 SimpleConnectionPool \u7684\u65b9\u6cd5\uff1a <?php $client = ClientBuilder :: create () -> setConnectionPool ( '\\Elasticsearch\\ConnectionPool\\SimpleConnectionPool' , []) -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u6307\u5b9a\u8fde\u63a5\u6c60\u3002","title":"SimpleConnectionPool"},{"location":"elasticsearch/elasticsearch-php/connection_pool/#sniffingconnectionpool","text":"SniffingConnectionPool \u4e0e\u524d\u9762\u7684\u4e24\u4e2a\u9759\u6001\u8fde\u63a5\u6c60\u6709\u6240\u4e0d\u540c\uff0c\u5b83\u662f\u52a8\u6001\u7684\u3002\u7528\u6237\u63d0\u4f9b hosts \u79cd\u5b50\uff0c\u800c\u5ba2\u6237\u7aef\u5219\u4f1a\u55c5\u63a2\u8fd9\u4e9b hosts \u5e76\u53d1\u73b0\u96c6\u7fa4\u7684\u5176\u4f59\u8282\u70b9\u3002 SniffingConnectionPool \u901a\u8fc7 Cluster State API \u6765\u5b9e\u73b0\u55c5\u63a2\u3002\u5f53\u96c6\u7fa4\u6dfb\u52a0\u65b0\u8282\u70b9\u6216\u5220\u9664\u8282\u70b9\uff0c\u5ba2\u6237\u7aef\u4f1a\u66f4\u65b0\u8fde\u63a5\u6c60\u7684\u6d3b\u8dc3\u8fde\u63a5\u3002 \u4f7f\u7528 SniffingConnectionPool \u7684\u65b9\u6cd5\uff1a <?php $client = ClientBuilder :: create () -> setConnectionPool ( '\\Elasticsearch\\ConnectionPool\\SniffingConnectionPool' , []) -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u6307\u5b9a\u8fde\u63a5\u6c60\u3002","title":"SniffingConnectionPool"},{"location":"elasticsearch/elasticsearch-php/connection_pool/#_2","text":"\u5982\u679c\u4f60\u8981\u662f\u5b9e\u73b0\u81ea\u5b9a\u4e49\u8fde\u63a5\u6c60\uff0c\u4f60\u7684\u7c7b\u5219\u5fc5\u987b\u5b9e\u73b0 ConnectionPoolInterface \u63a5\u53e3\uff1a <?php class MyCustomConnectionPool implements ConnectionPoolInterface { /** * @param bool $force * * @return ConnectionInterface */ public function nextConnection ( $force = false ) { // code here } /** * @return void */ public function scheduleCheck () { // code here } } \u7136\u540e\u4f60\u8981\u5b9e\u4f8b\u5316\u81ea\u5b9a\u4e49\u7684\u8fde\u63a5\u6c60\u5e76\u6ce8\u5165\u5230 ClientBuilder\uff1a <?php $myConnectionPool = new MyCustomConnectionPool (); $client = ClientBuilder :: create () -> setConnectionPool ( $myConnectionPool , []) -> build (); \u5982\u679c\u4f60\u7684\u8fde\u63a5\u6c60\u53ea\u6709\u8f83\u5c0f\u7684\u53d8\u66f4\uff0c\u4f60\u53ef\u4ee5\u8003\u8651\u6269\u5c55 AbstractConnectionPool \uff0c\u5b83\u63d0\u4f9b\u4e00\u4e9b\u5177\u4f53\u7684\u52a9\u624b\u65b9\u6cd5\u3002\u5982\u679c\u4f60\u4e0d\u9009\u62e9\u8fd9\u79cd\u505a\u6cd5\uff0c\u4f60\u5c31\u8981\u786e\u4fdd\u8fde\u63a5\u6c60\u62e5\u6709\u517c\u5bb9\u7684\u6784\u9020\u65b9\u6cd5\uff08\u56e0\u4e3a\u5728\u63a5\u53e3\u4e2d\u6ca1\u6709\u5b9a\u4e49\u597d\uff09\uff1a <?php class MyCustomConnectionPool extends AbstractConnectionPool implements ConnectionPoolInterface { public function __construct ( $connections , SelectorInterface $selector , ConnectionFactory $factory , $connectionPoolParams ) { parent :: __construct ( $connections , $selector , $factory , $connectionPoolParams ); } /** * @param bool $force * * @return ConnectionInterface */ public function nextConnection ( $force = false ) { // code here } /** * @return void */ public function scheduleCheck () { // code here } } \u5047\u5982\u4f60\u7684\u6784\u9020\u65b9\u6cd5\u4e0e AbstractConnectionPool \u7684\u6784\u9020\u65b9\u6cd5\u76f8\u540c\uff0c\u4f60\u53ef\u4ee5\u7528\u5bf9\u8c61\u6ce8\u5165\u6216\u547d\u540d\u7a7a\u95f4\u5b9e\u4f8b\u5316\u6765\u8bbe\u7f6e\u8fde\u63a5\u6c60\uff1a <?php $myConnectionPool = new MyCustomConnectionPool (); $client = ClientBuilder :: create () -> setConnectionPool ( $myConnectionPool , []) // object injection -> setConnectionPool ( '/MyProject/ConnectionPools/MyCustomConnectionPool' , []) // or namespace -> build ();","title":"\u81ea\u5b9a\u4e49\u8fde\u63a5\u6c60"},{"location":"elasticsearch/elasticsearch-php/connection_pool/#php","text":"\u521d\u770b\u89c9\u5f97 sniffingConnectionPool \u4f3c\u4e4e\u6bd4\u8f83\u9ad8\u7ea7\u3002\u5bf9\u8bb8\u591a\u8bed\u8a00\u6765\u8bf4\u5f53\u7136\u5982\u6b64\u3002\u4f46\u662f PHP \u5219\u6709\u4e9b\u4e0d\u540c\u3002 \u56e0\u4e3a PHP \u662f\u65e0\u5171\u4eab\u67b6\u6784\uff08share-nothing architecture\uff09\uff0cphp \u811a\u672c\u5b9e\u4f8b\u5316\u540e\u65e0\u6cd5\u7ef4\u6301\u4e00\u4e2a\u8fde\u63a5\u6c60\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u811a\u672c\u5728\u91cd\u65b0\u6267\u884c\u65f6\u90fd\u8981\u8d1f\u8d23\u521b\u5efa\u3001\u7ef4\u6301\u548c\u9500\u6bc1\u8fde\u63a5\u3002 \u55c5\u63a2\u662f\u76f8\u5bf9\u8f7b\u91cf\u7684\u64cd\u4f5c\uff08\u8c03\u7528\u4e00\u6b21API\u5230 /_cluster/state \uff0c\u7136\u540e ping \u6bcf\u4e2a\u8282\u70b9\uff09\uff0c\u4f46\u662f\u5bf9\u4e8e\u67d0\u4e9b PHP \u7a0b\u5e8f\u6765\u8bf4\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u7b14\u4e0d\u53ef\u5ffd\u89c6\u7684\u5f00\u9500\u3002\u4e00\u822c\u7684 PHP \u811a\u672c\u53ef\u80fd\u4f1a\u52a0\u8f7d\u5ba2\u6237\u7aef\uff0c\u6267\u884c\u4e00\u4e9b\u8bf7\u6c42\u7136\u540e\u5173\u95ed\u3002\u60f3\u8c61\u4e00\u4e0b\u8fd9\u4e2a\u811a\u672c\u6bcf\u79d2\u8c03\u7528 1000 \u6b21\uff1a SniffingConnectionPool \u4f1a\u6bcf\u79d2\u6267\u884c\u55c5\u63a2\u548c ping \u6240\u6709\u8282\u70b9 1000 \u6b21\u3002\u55c5\u63a2\u7a0b\u5e8f\u5219\u4f1a\u589e\u52a0\u5927\u91cf\u7684\u5f00\u9500\u3002 \u5728\u5b9e\u9645\u4e2d\uff0c\u5982\u679c\u4f60\u7684\u811a\u672c\u53ea\u662f\u6267\u884c\u4e00\u4e9b\u8bf7\u6c42\uff0c\u7528\u55c5\u63a2\u5c31\u592a\u7c97\u66b4\u4e86\u3002\u55c5\u63a2\u5bf9\u4e8e\u5e38\u9a7b\u8fdb\u7a0b\u6765\u8bf4\u5f80\u5f80\u66f4\u52a0\u6709\u7528\u3002 \u57fa\u4e8e\u4e0a\u8ff0\u539f\u56e0\uff0c\u9ed8\u8ba4\u8fde\u63a5\u6c60\u624d\u8bbe\u7f6e\u4e3a\u5f53\u524d\u7684 staticNoPingConnectionPool \u3002\u5f53\u7136\u4f60\u53ef\u4ee5\u66f4\u6539\u9ed8\u8ba4\u8fde\u63a5\u6c60\uff0c\u4f46\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u4f60\u8fdb\u884c\u6d4b\u8bd5\u5e76\u786e\u4fdd\u8fde\u63a5\u6c60\u5bf9\u4e8e\u6027\u80fd\u6ca1\u6709\u4ea7\u751f\u4e0d\u826f\u5f71\u54cd\u3002","title":"\u9009\u62e9\u4ec0\u4e48\u8fde\u63a5\u6c60\uff1fPHP \u548c\u8fde\u63a5\u6c60\u7684\u5173\u7cfb"},{"location":"elasticsearch/elasticsearch-php/deleting_documents/","text":"\u5220\u9664\u6587\u6863 # \u901a\u8fc7\u6307\u5b9a\u6587\u6863\u7684 /index/type/id \u8def\u5f84\u53ef\u4ee5\u5220\u9664\u6587\u6863\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' ]; // Delete doc at /my_index/my_type/my_id $response = $client -> delete ( $params );","title":"\u5220\u9664\u6587\u6863"},{"location":"elasticsearch/elasticsearch-php/deleting_documents/#_1","text":"\u901a\u8fc7\u6307\u5b9a\u6587\u6863\u7684 /index/type/id \u8def\u5f84\u53ef\u4ee5\u5220\u9664\u6587\u6863\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' ]; // Delete doc at /my_index/my_type/my_id $response = $client -> delete ( $params );","title":"\u5220\u9664\u6587\u6863"},{"location":"elasticsearch/elasticsearch-php/future_mode/","text":"Future \u6a21\u5f0f # \u5ba2\u6237\u7aef\u63d0\u4f9b future \u6a21\u5f0f\uff08\u6216\u53eb\u5f02\u6b65\u6a21\u5f0f\uff09\u3002future \u6a21\u5f0f\u5141\u8bb8\u6279\u91cf\u53d1\u9001\u8bf7\u6c42\uff08\u5e76\u884c\u53d1\u9001\u5230\u96c6\u7fa4\uff09\uff0c\u8fd9\u5bf9\u4e8e\u63d0\u9ad8\u6027\u80fd\u548c\u751f\u4ea7\u529b\u6709\u6781\u5927\u5e2e\u52a9\u3002 PHP \u662f\u5355\u7ebf\u7a0b\u7684\u811a\u672c\u8bed\u8a00\uff0c\u7136\u800c libcurl \u7684 multi interface \u529f\u80fd\u4f7f\u5f97\u50cf PHP \u8fd9\u79cd\u5355\u7ebf\u7a0b\u7684\u8bed\u8a00\u53ef\u4ee5\u6279\u91cf\u53d1\u9001\u8bf7\u6c42\uff0c\u4ece\u800c\u83b7\u5f97\u5e76\u53d1\u6027\u7279\u5f81\u3002\u6279\u91cf\u8bf7\u6c42\u662f\u901a\u8fc7\u5e95\u5c42\u7684\u591a\u7ebf\u7a0b libcurl \u5e93\u5e76\u884c\u7684\u53d1\u9001\u8bf7\u6c42\u7ed9 Elasticsearch\uff0c\u800c\u8fd4\u56de\u7ed9PHP\u7684\u6570\u636e\u4e5f\u662f\u6279\u91cf\u7684\u3002 \u5728\u5355\u7ebf\u7a0b\u73af\u5883\u4e0b\uff0c\u6267\u884c n \u4e2a\u8bf7\u6c42\u7684\u65f6\u95f4\u7b49\u4e8e n \u4e2a\u8bf7\u6c42\u65f6\u95f4\u76f8\u52a0\u3002\u5728 multi interface \u529f\u80fd\u4e0b\uff0c\u6267\u884c n \u4e2a\u8bf7\u6c42\u7684\u65f6\u95f4\u7b49\u4e8e\u6700\u6162\u7684\u4e00\u4e2a\u8bf7\u6c42\u65f6\u95f4\u3002 \u9664\u6b64\u4ee5\u5916\uff0cmulti-interface \u529f\u80fd\u5141\u8bb8\u6279\u91cf\u8bf7\u6c42\u540c\u65f6\u53d1\u9001\u5230\u4e0d\u540c\u7684\u4e3b\u673a\uff0c\u8fd9\u610f\u5473\u7740 Elasticsearch-PHP \u53ef\u4ee5\u66f4\u9ad8\u6548\u5730\u5229\u7528\u96c6\u7fa4\u3002 \u4f7f\u7528 Future \u6a21\u5f0f # \u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f\u76f8\u5bf9\u7b80\u5355\uff0c\u53ea\u662f\u4f60\u8981\u5199\u591a\u4e00\u70b9\u4ee3\u7801\u3002\u4e3a\u4e86\u5f00\u542f future \u6a21\u5f0f\uff0c\u5728 client \u9009\u9879\u4e2d\u589e\u52a0 future \u53c2\u6570\uff0c\u5e76\u8bbe\u7f6e\u503c\u4e3a 'lazy' \uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 1 , 'client' => [ 'future' => 'lazy' ] ]; $future = $client -> get ( $params ); \u8fd9\u91cc\u4f1a\u8fd4\u56de\u4e00\u4e2a future \u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u771f\u6b63\u7684\u54cd\u5e94\u6570\u636e\u3002future \u5bf9\u8c61\u662f\u5f85\u5904\u7406\u5bf9\u8c61\uff0c\u5b83\u770b\u8d77\u6765\u5c31\u50cf\u662f\u4e2a\u5360\u4f4d\u7b26\u3002\u4f60\u53ef\u4ee5\u628a future \u5bf9\u8c61\u5f53\u6210\u662f\u666e\u901a\u5bf9\u8c61\u5728\u4ee3\u7801\u4e2d\u4f20\u9012\u4f7f\u7528\u3002\u5f53\u4f60\u9700\u8981\u54cd\u5e94\u6570\u636e\u65f6\uff0c\u4f60\u53ef\u4ee5\u89e3\u6790 future \u5bf9\u8c61\u3002\u5982\u679c future \u5bf9\u8c61\u5df2\u7ecf\u88ab\u89e3\u6790\uff0c\u53ef\u4ee5\u7acb\u5373\u4f7f\u7528\u54cd\u5e94\u6570\u636e\u3002\u5982\u679c future \u5bf9\u8c61\u8fd8\u6ca1\u88ab\u89e3\u6790\u5b8c\uff0c\u90a3\u4e48\u89e3\u6790\u52a8\u4f5c\u4f1a\u963b\u585e PHP \u811a\u672c\u7684\u6267\u884c\uff0c\u76f4\u5230\u89e3\u6790\u5b8c\u6210\u3002 \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e future: lazy \u952e\u503c\u5bf9\u6784\u9020\u4e00\u4e2a\u8bf7\u6c42\u961f\u5217\uff0c\u800c\u8fd4\u56de\u7684 future \u5bf9\u8c61\u76f4\u5230\u89e3\u6790\u5b8c\u6210\uff0c\u7a0b\u5e8f\u624d\u4f1a\u7ee7\u7eed\u6267\u884c\u3002\u65e0\u8bba\u4ec0\u4e48\u65f6\u5019\uff0c\u5168\u90e8\u7684\u8bf7\u6c42\u90fd\u662f\u4ee5\u5e76\u884c\u65b9\u5f0f\u53d1\u9001\u5230\u96c6\u7fa4\uff0c\u4ee5\u5f02\u6b65\u65b9\u5f0f\u8fd4\u56de\u7ed9 curl\u3002 \u8fd9\u542c\u8d77\u6765\u597d\u590d\u6742\uff0c\u4f46\u7531\u4e8eRingPHP\u7684 FutureArray \u63a5\u53e3\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u5219\u53d8\u5f97\u5f88\u7b80\u5355\u3002\u5b83\u8ba9 future \u5bf9\u8c61\u770b\u8d77\u6765\u50cf\u662f\u4e00\u4e2a\u5173\u8054\u6570\u7ec4\u3002\u4f8b\u5982\uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 1 , 'client' => [ 'future' => 'lazy' ] ]; $future = $client -> get ( $params ); $doc = $future [ '_source' ]; // This call will block and force the future to resolve \u5c31\u50cf\u901a\u5e38\u7684\u54cd\u5e94\u6570\u636e\u90a3\u6837\uff0cfuture \u5bf9\u8c61\u53ef\u4ee5\u7528\u8fed\u4ee3\u5173\u8054\u6570\u7ec4\u7684\u65b9\u5f0f\u89e3\u6790\u7279\u5b9a\u7684\u503c\uff08\u8f6e\u6d41\u89e3\u6790\u672a\u89e3\u6790\u7684\u8bf7\u6c42\u548c\u503c\uff09\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5199\u6210\u5982\u4e0b\u5f62\u5f0f\uff1a <?php $client = ClientBuilder :: create () -> build (); $futures = []; for ( $i = 0 ; $i < 1000 ; $i ++ ) { $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => $i , 'client' => [ 'future' => 'lazy' ] ]; $futures [] = $client -> get ( $params ); //queue up the request } foreach ( $futures as $future ) { // access future's values, causing resolution if necessary echo $future [ '_source' ]; } \u8bf7\u6c42\u961f\u5217\u4f1a\u5e76\u884c\u6267\u884c\uff0c\u6267\u884c\u540e\u8d4b\u503c\u7ed9 futures \u6570\u7ec4\u3002\u6bcf\u6279\u8bf7\u6c42\u9ed8\u8ba4\u4e3a 100 \u4e2a\u3002 \u5982\u679c\u4f60\u60f3\u5f3a\u5236\u89e3\u6790 future \u5bf9\u8c61\uff0c\u4f46\u53c8\u4e0d\u7acb\u523b\u83b7\u53d6\u54cd\u5e94\u6570\u636e\u3002\u4f60\u53ef\u4ee5\u7528 future \u5bf9\u8c61\u7684 wait() \u65b9\u6cd5\u6765\u5f3a\u5236\u89e3\u6790\uff1a <?php $client = ClientBuilder :: create () -> build (); $futures = []; for ( $i = 0 ; $i < 1000 ; $i ++ ) { $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => $i , 'client' => [ 'future' => 'lazy' ] ]; $futures [] = $client -> get ( $params ); //queue up the request } //wait() forces future resolution and will execute the underlying curl batch $futures [ 999 ] -> wait (); \u66f4\u6539\u6279\u91cf\u503c # \u9ed8\u8ba4\u7684\u6279\u91cf\u503c\u4e3a 100 \u4e2a\uff0c\u8fd9\u610f\u5473\u7740\u5728\u5ba2\u6237\u7aef\u5f3a\u5236 future \u5bf9\u8c61\u89e3\u6790\u524d\uff08\u6267\u884c curl_multi \u8c03\u7528\uff09\uff0c\u961f\u5217\u53ef\u4ee5\u5bb9\u7eb3 100 \u4e2a\u8bf7\u6c42\u3002\u6279\u91cf\u503c\u53ef\u4ee5\u66f4\u6539\uff0c\u53d6\u51b3\u4e8e\u4f60\u7684\u9700\u6c42\u3002\u6279\u91cf\u503c\u7684\u8c03\u6574\u662f\u901a\u8fc7\u914d\u7f6e HTTP handler \u65f6\u8bbe\u7f6e max_handles \u53c2\u6570\u6765\u5b9e\u73b0\uff1a <?php $handlerParams = [ 'max_handles' => 500 ]; $defaultHandler = ClientBuilder :: defaultHandler ( $handlerParams ); $client = ClientBuilder :: create () -> setHandler ( $defaultHandler ) -> build (); \u4e0a\u9762\u7684\u8bbe\u7f6e\u4f1a\u66f4\u6539\u6279\u91cf\u53d1\u9001\u6570\u91cf\u4e3a 500\u3002\u6ce8\u610f\uff1a\u4e0d\u7ba1\u961f\u5217\u6570\u91cf\u662f\u5426\u4e3a\u6700\u5927\u6279\u91cf\u503c\uff0c\u5f3a\u5236\u89e3\u6790 future \u5bf9\u8c61\u90fd\u4f1a\u5f15\u8d77\u5e95\u5c42\u7684 curl \u6267\u884c\u6279\u91cf\u8bf7\u6c42\u64cd\u4f5c\u3002\u5728\u5982\u4e0b\u7684\u793a\u4f8b\u4e2d\uff0c\u53ea\u6709 499 \u4e2a\u5bf9\u8c61\u52a0\u5165\u961f\u5217\uff0c\u4f46\u6700\u540e\u7684 future \u5bf9\u8c61\u88ab\u89e3\u6790\u4f1a\u5f15\u8d77\u5f3a\u5236\u53d1\u9001\u6279\u91cf\u8bf7\u6c42\uff1a <?php $handlerParams = [ 'max_handles' => 500 ]; $defaultHandler = ClientBuilder :: defaultHandler ( $handlerParams ); $client = ClientBuilder :: create () -> setHandler ( $defaultHandler ) -> build (); $futures = []; for ( $i = 0 ; $i < 499 ; $i ++ ) { $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => $i , 'client' => [ 'future' => 'lazy' ] ]; $futures [] = $client -> get ( $params ); //queue up the request } // resolve the future, and therefore the underlying batch $body = $future [ 499 ][ 'body' ]; \u5404\u79cd\u6279\u91cf\u6267\u884c # \u961f\u5217\u91cc\u9762\u5141\u8bb8\u5b58\u5728\u5404\u79cd\u8bf7\u6c42\u3002\u6bd4\u5982\uff0c\u4f60\u53ef\u4ee5\u628a get \u8bf7\u6c42\u3001index \u8bf7\u6c42\u548c search \u8bf7\u6c42\u653e\u5230\u961f\u5217\u91cc\u9762\uff1a <?php $client = ClientBuilder :: create () -> build (); $futures = []; $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 1 , 'client' => [ 'future' => 'lazy' ] ]; $futures [ 'getRequest' ] = $client -> get ( $params ); // First request $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 2 , 'body' => [ 'field' => 'value' ], 'client' => [ 'future' => 'lazy' ] ]; $futures [ 'indexRequest' ] = $client -> index ( $params ); // Second request $params = [ 'index' => 'test' , 'type' => 'test' , 'body' => [ 'query' => [ 'match' => [ 'field' => 'value' ] ] ], 'client' => [ 'future' => 'lazy' ] ]; $futures [ 'searchRequest' ] = $client -> search ( $params ); // Third request // Resolve futures...blocks until network call completes $searchResults = $futures [ 'searchRequest' ][ 'hits' ]; // Should return immediately, since the previous future resolved the entire batch $doc = $futures [ 'getRequest' ][ '_source' ]; \u8b66\u544a # \u4f7f\u7528 future \u6a21\u5f0f\u65f6\u9700\u8981\u6ce8\u610f\u51e0\u70b9\u3002\u6700\u5927\u4e5f\u662f\u6700\u660e\u663e\u7684\u95ee\u9898\u662f\uff1a\u4f60\u8981\u81ea\u5df1\u53bb\u89e3\u6790 future \u5bf9\u8c61\u3002\u8fd9\u633a\u9ebb\u70e6\u7684\uff0c\u800c\u4e14\u5076\u5c14\u4f1a\u5f15\u8d77\u4e00\u4e9b\u610f\u6599\u4e0d\u5230\u7684\u72b6\u51b5\u3002 \u4f8b\u5982\uff0c\u5047\u5982\u4f60\u624b\u52a8\u4f7f\u7528 wait() \u65b9\u6cd5\u89e3\u6790\uff0c\u5728\u9700\u8981\u91cd\u65b0\u6784\u5efa future \u5bf9\u8c61\u5e76\u89e3\u6790\u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u4e5f\u8bb8\u8981\u8c03\u7528\u597d\u51e0\u6b21 wait() \u65b9\u6cd5\u3002\u8fd9\u662f\u56e0\u4e3a\u6bcf\u6b21\u91cd\u65b0\u6784\u9020 future \u5bf9\u8c61\u90fd\u4f1a\u5f15\u8d77 future \u5bf9\u8c61\u7684\u91cd\u65b0\u8d4b\u503c\uff08\u8986\u76d6\u89e3\u6790\u7ed3\u679c\uff09\uff0c\u6240\u4ee5\u6bcf\u4e2a future \u5bf9\u8c61\u90fd\u8981\u91cd\u65b0\u89e3\u6790\u83b7\u53d6\u7ed3\u679c\u3002 \u5982\u679c\u4f60\u4f7f\u7528 ArrayInterface \u8fd4\u56de\u7684\u7ed3\u679c\uff08 $response['hits']['hits'] \uff09\u5219\u4e0d\u7528\u8fdb\u884c\u989d\u5916\u5904\u7406\u3002\u7136\u800c FutureArrayInterface \u5c31\u8981\u5168\u9762\u89e3\u6790 future \u5bf9\u8c61\u624d\u80fd\u4f7f\u7528\u54cd\u5e94\u6570\u636e\u3002 \u53e6\u5916\u4e00\u70b9\u662f\u4e00\u4e9b\u65b9\u6cd5\u4f1a\u5931\u6548\u3002\u6bd4\u5982 exists \u65b9\u6cd5\uff08 $client->exists() , $client->indices()->exists , $client->indices->templateExists() \u7b49\uff09\u5728\u6b63\u5e38\u60c5\u51b5\u4e0b\u4f1a\u8fd4\u56de true \u6216 false\u3002 \u5f53\u4f7f\u7528 future \u6a21\u5f0f\u65f6\uff0cfuture \u5bf9\u8c61\u8fd8\u672a\u5c01\u88c5\u597d\uff0c\u8fd9\u4ee3\u8868\u5ba2\u6237\u7aef\u65e0\u6cd5\u68c0\u6d4b\u54cd\u5e94\u7ed3\u679c\u548c\u8fd4\u56de true \u6216 false\u3002\u6240\u4ee5\u4f60\u4f1a\u5f97\u5230\u4ece Elasticsearch \u8fd4\u56de\u7684\u672a\u5c01\u88c5\u54cd\u5e94\u6570\u636e\uff0c\u800c\u4f60\u4e0d\u5f97\u4e0d\u5bf9\u8fd9\u4e9b\u6570\u636e\u8fdb\u884c\u5904\u7406\u3002 \u8fd9\u4e9b\u6ce8\u610f\u4e8b\u9879\u4e5f\u9002\u7528\u4e8e ping() \u65b9\u6cd5\u3002","title":"Future \u6a21\u5f0f"},{"location":"elasticsearch/elasticsearch-php/future_mode/#future","text":"\u5ba2\u6237\u7aef\u63d0\u4f9b future \u6a21\u5f0f\uff08\u6216\u53eb\u5f02\u6b65\u6a21\u5f0f\uff09\u3002future \u6a21\u5f0f\u5141\u8bb8\u6279\u91cf\u53d1\u9001\u8bf7\u6c42\uff08\u5e76\u884c\u53d1\u9001\u5230\u96c6\u7fa4\uff09\uff0c\u8fd9\u5bf9\u4e8e\u63d0\u9ad8\u6027\u80fd\u548c\u751f\u4ea7\u529b\u6709\u6781\u5927\u5e2e\u52a9\u3002 PHP \u662f\u5355\u7ebf\u7a0b\u7684\u811a\u672c\u8bed\u8a00\uff0c\u7136\u800c libcurl \u7684 multi interface \u529f\u80fd\u4f7f\u5f97\u50cf PHP \u8fd9\u79cd\u5355\u7ebf\u7a0b\u7684\u8bed\u8a00\u53ef\u4ee5\u6279\u91cf\u53d1\u9001\u8bf7\u6c42\uff0c\u4ece\u800c\u83b7\u5f97\u5e76\u53d1\u6027\u7279\u5f81\u3002\u6279\u91cf\u8bf7\u6c42\u662f\u901a\u8fc7\u5e95\u5c42\u7684\u591a\u7ebf\u7a0b libcurl \u5e93\u5e76\u884c\u7684\u53d1\u9001\u8bf7\u6c42\u7ed9 Elasticsearch\uff0c\u800c\u8fd4\u56de\u7ed9PHP\u7684\u6570\u636e\u4e5f\u662f\u6279\u91cf\u7684\u3002 \u5728\u5355\u7ebf\u7a0b\u73af\u5883\u4e0b\uff0c\u6267\u884c n \u4e2a\u8bf7\u6c42\u7684\u65f6\u95f4\u7b49\u4e8e n \u4e2a\u8bf7\u6c42\u65f6\u95f4\u76f8\u52a0\u3002\u5728 multi interface \u529f\u80fd\u4e0b\uff0c\u6267\u884c n \u4e2a\u8bf7\u6c42\u7684\u65f6\u95f4\u7b49\u4e8e\u6700\u6162\u7684\u4e00\u4e2a\u8bf7\u6c42\u65f6\u95f4\u3002 \u9664\u6b64\u4ee5\u5916\uff0cmulti-interface \u529f\u80fd\u5141\u8bb8\u6279\u91cf\u8bf7\u6c42\u540c\u65f6\u53d1\u9001\u5230\u4e0d\u540c\u7684\u4e3b\u673a\uff0c\u8fd9\u610f\u5473\u7740 Elasticsearch-PHP \u53ef\u4ee5\u66f4\u9ad8\u6548\u5730\u5229\u7528\u96c6\u7fa4\u3002","title":"Future \u6a21\u5f0f"},{"location":"elasticsearch/elasticsearch-php/future_mode/#future_1","text":"\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f\u76f8\u5bf9\u7b80\u5355\uff0c\u53ea\u662f\u4f60\u8981\u5199\u591a\u4e00\u70b9\u4ee3\u7801\u3002\u4e3a\u4e86\u5f00\u542f future \u6a21\u5f0f\uff0c\u5728 client \u9009\u9879\u4e2d\u589e\u52a0 future \u53c2\u6570\uff0c\u5e76\u8bbe\u7f6e\u503c\u4e3a 'lazy' \uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 1 , 'client' => [ 'future' => 'lazy' ] ]; $future = $client -> get ( $params ); \u8fd9\u91cc\u4f1a\u8fd4\u56de\u4e00\u4e2a future \u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u771f\u6b63\u7684\u54cd\u5e94\u6570\u636e\u3002future \u5bf9\u8c61\u662f\u5f85\u5904\u7406\u5bf9\u8c61\uff0c\u5b83\u770b\u8d77\u6765\u5c31\u50cf\u662f\u4e2a\u5360\u4f4d\u7b26\u3002\u4f60\u53ef\u4ee5\u628a future \u5bf9\u8c61\u5f53\u6210\u662f\u666e\u901a\u5bf9\u8c61\u5728\u4ee3\u7801\u4e2d\u4f20\u9012\u4f7f\u7528\u3002\u5f53\u4f60\u9700\u8981\u54cd\u5e94\u6570\u636e\u65f6\uff0c\u4f60\u53ef\u4ee5\u89e3\u6790 future \u5bf9\u8c61\u3002\u5982\u679c future \u5bf9\u8c61\u5df2\u7ecf\u88ab\u89e3\u6790\uff0c\u53ef\u4ee5\u7acb\u5373\u4f7f\u7528\u54cd\u5e94\u6570\u636e\u3002\u5982\u679c future \u5bf9\u8c61\u8fd8\u6ca1\u88ab\u89e3\u6790\u5b8c\uff0c\u90a3\u4e48\u89e3\u6790\u52a8\u4f5c\u4f1a\u963b\u585e PHP \u811a\u672c\u7684\u6267\u884c\uff0c\u76f4\u5230\u89e3\u6790\u5b8c\u6210\u3002 \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e future: lazy \u952e\u503c\u5bf9\u6784\u9020\u4e00\u4e2a\u8bf7\u6c42\u961f\u5217\uff0c\u800c\u8fd4\u56de\u7684 future \u5bf9\u8c61\u76f4\u5230\u89e3\u6790\u5b8c\u6210\uff0c\u7a0b\u5e8f\u624d\u4f1a\u7ee7\u7eed\u6267\u884c\u3002\u65e0\u8bba\u4ec0\u4e48\u65f6\u5019\uff0c\u5168\u90e8\u7684\u8bf7\u6c42\u90fd\u662f\u4ee5\u5e76\u884c\u65b9\u5f0f\u53d1\u9001\u5230\u96c6\u7fa4\uff0c\u4ee5\u5f02\u6b65\u65b9\u5f0f\u8fd4\u56de\u7ed9 curl\u3002 \u8fd9\u542c\u8d77\u6765\u597d\u590d\u6742\uff0c\u4f46\u7531\u4e8eRingPHP\u7684 FutureArray \u63a5\u53e3\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u5219\u53d8\u5f97\u5f88\u7b80\u5355\u3002\u5b83\u8ba9 future \u5bf9\u8c61\u770b\u8d77\u6765\u50cf\u662f\u4e00\u4e2a\u5173\u8054\u6570\u7ec4\u3002\u4f8b\u5982\uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 1 , 'client' => [ 'future' => 'lazy' ] ]; $future = $client -> get ( $params ); $doc = $future [ '_source' ]; // This call will block and force the future to resolve \u5c31\u50cf\u901a\u5e38\u7684\u54cd\u5e94\u6570\u636e\u90a3\u6837\uff0cfuture \u5bf9\u8c61\u53ef\u4ee5\u7528\u8fed\u4ee3\u5173\u8054\u6570\u7ec4\u7684\u65b9\u5f0f\u89e3\u6790\u7279\u5b9a\u7684\u503c\uff08\u8f6e\u6d41\u89e3\u6790\u672a\u89e3\u6790\u7684\u8bf7\u6c42\u548c\u503c\uff09\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5199\u6210\u5982\u4e0b\u5f62\u5f0f\uff1a <?php $client = ClientBuilder :: create () -> build (); $futures = []; for ( $i = 0 ; $i < 1000 ; $i ++ ) { $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => $i , 'client' => [ 'future' => 'lazy' ] ]; $futures [] = $client -> get ( $params ); //queue up the request } foreach ( $futures as $future ) { // access future's values, causing resolution if necessary echo $future [ '_source' ]; } \u8bf7\u6c42\u961f\u5217\u4f1a\u5e76\u884c\u6267\u884c\uff0c\u6267\u884c\u540e\u8d4b\u503c\u7ed9 futures \u6570\u7ec4\u3002\u6bcf\u6279\u8bf7\u6c42\u9ed8\u8ba4\u4e3a 100 \u4e2a\u3002 \u5982\u679c\u4f60\u60f3\u5f3a\u5236\u89e3\u6790 future \u5bf9\u8c61\uff0c\u4f46\u53c8\u4e0d\u7acb\u523b\u83b7\u53d6\u54cd\u5e94\u6570\u636e\u3002\u4f60\u53ef\u4ee5\u7528 future \u5bf9\u8c61\u7684 wait() \u65b9\u6cd5\u6765\u5f3a\u5236\u89e3\u6790\uff1a <?php $client = ClientBuilder :: create () -> build (); $futures = []; for ( $i = 0 ; $i < 1000 ; $i ++ ) { $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => $i , 'client' => [ 'future' => 'lazy' ] ]; $futures [] = $client -> get ( $params ); //queue up the request } //wait() forces future resolution and will execute the underlying curl batch $futures [ 999 ] -> wait ();","title":"\u4f7f\u7528 Future \u6a21\u5f0f"},{"location":"elasticsearch/elasticsearch-php/future_mode/#_1","text":"\u9ed8\u8ba4\u7684\u6279\u91cf\u503c\u4e3a 100 \u4e2a\uff0c\u8fd9\u610f\u5473\u7740\u5728\u5ba2\u6237\u7aef\u5f3a\u5236 future \u5bf9\u8c61\u89e3\u6790\u524d\uff08\u6267\u884c curl_multi \u8c03\u7528\uff09\uff0c\u961f\u5217\u53ef\u4ee5\u5bb9\u7eb3 100 \u4e2a\u8bf7\u6c42\u3002\u6279\u91cf\u503c\u53ef\u4ee5\u66f4\u6539\uff0c\u53d6\u51b3\u4e8e\u4f60\u7684\u9700\u6c42\u3002\u6279\u91cf\u503c\u7684\u8c03\u6574\u662f\u901a\u8fc7\u914d\u7f6e HTTP handler \u65f6\u8bbe\u7f6e max_handles \u53c2\u6570\u6765\u5b9e\u73b0\uff1a <?php $handlerParams = [ 'max_handles' => 500 ]; $defaultHandler = ClientBuilder :: defaultHandler ( $handlerParams ); $client = ClientBuilder :: create () -> setHandler ( $defaultHandler ) -> build (); \u4e0a\u9762\u7684\u8bbe\u7f6e\u4f1a\u66f4\u6539\u6279\u91cf\u53d1\u9001\u6570\u91cf\u4e3a 500\u3002\u6ce8\u610f\uff1a\u4e0d\u7ba1\u961f\u5217\u6570\u91cf\u662f\u5426\u4e3a\u6700\u5927\u6279\u91cf\u503c\uff0c\u5f3a\u5236\u89e3\u6790 future \u5bf9\u8c61\u90fd\u4f1a\u5f15\u8d77\u5e95\u5c42\u7684 curl \u6267\u884c\u6279\u91cf\u8bf7\u6c42\u64cd\u4f5c\u3002\u5728\u5982\u4e0b\u7684\u793a\u4f8b\u4e2d\uff0c\u53ea\u6709 499 \u4e2a\u5bf9\u8c61\u52a0\u5165\u961f\u5217\uff0c\u4f46\u6700\u540e\u7684 future \u5bf9\u8c61\u88ab\u89e3\u6790\u4f1a\u5f15\u8d77\u5f3a\u5236\u53d1\u9001\u6279\u91cf\u8bf7\u6c42\uff1a <?php $handlerParams = [ 'max_handles' => 500 ]; $defaultHandler = ClientBuilder :: defaultHandler ( $handlerParams ); $client = ClientBuilder :: create () -> setHandler ( $defaultHandler ) -> build (); $futures = []; for ( $i = 0 ; $i < 499 ; $i ++ ) { $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => $i , 'client' => [ 'future' => 'lazy' ] ]; $futures [] = $client -> get ( $params ); //queue up the request } // resolve the future, and therefore the underlying batch $body = $future [ 499 ][ 'body' ];","title":"\u66f4\u6539\u6279\u91cf\u503c"},{"location":"elasticsearch/elasticsearch-php/future_mode/#_2","text":"\u961f\u5217\u91cc\u9762\u5141\u8bb8\u5b58\u5728\u5404\u79cd\u8bf7\u6c42\u3002\u6bd4\u5982\uff0c\u4f60\u53ef\u4ee5\u628a get \u8bf7\u6c42\u3001index \u8bf7\u6c42\u548c search \u8bf7\u6c42\u653e\u5230\u961f\u5217\u91cc\u9762\uff1a <?php $client = ClientBuilder :: create () -> build (); $futures = []; $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 1 , 'client' => [ 'future' => 'lazy' ] ]; $futures [ 'getRequest' ] = $client -> get ( $params ); // First request $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 2 , 'body' => [ 'field' => 'value' ], 'client' => [ 'future' => 'lazy' ] ]; $futures [ 'indexRequest' ] = $client -> index ( $params ); // Second request $params = [ 'index' => 'test' , 'type' => 'test' , 'body' => [ 'query' => [ 'match' => [ 'field' => 'value' ] ] ], 'client' => [ 'future' => 'lazy' ] ]; $futures [ 'searchRequest' ] = $client -> search ( $params ); // Third request // Resolve futures...blocks until network call completes $searchResults = $futures [ 'searchRequest' ][ 'hits' ]; // Should return immediately, since the previous future resolved the entire batch $doc = $futures [ 'getRequest' ][ '_source' ];","title":"\u5404\u79cd\u6279\u91cf\u6267\u884c"},{"location":"elasticsearch/elasticsearch-php/future_mode/#_3","text":"\u4f7f\u7528 future \u6a21\u5f0f\u65f6\u9700\u8981\u6ce8\u610f\u51e0\u70b9\u3002\u6700\u5927\u4e5f\u662f\u6700\u660e\u663e\u7684\u95ee\u9898\u662f\uff1a\u4f60\u8981\u81ea\u5df1\u53bb\u89e3\u6790 future \u5bf9\u8c61\u3002\u8fd9\u633a\u9ebb\u70e6\u7684\uff0c\u800c\u4e14\u5076\u5c14\u4f1a\u5f15\u8d77\u4e00\u4e9b\u610f\u6599\u4e0d\u5230\u7684\u72b6\u51b5\u3002 \u4f8b\u5982\uff0c\u5047\u5982\u4f60\u624b\u52a8\u4f7f\u7528 wait() \u65b9\u6cd5\u89e3\u6790\uff0c\u5728\u9700\u8981\u91cd\u65b0\u6784\u5efa future \u5bf9\u8c61\u5e76\u89e3\u6790\u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u4e5f\u8bb8\u8981\u8c03\u7528\u597d\u51e0\u6b21 wait() \u65b9\u6cd5\u3002\u8fd9\u662f\u56e0\u4e3a\u6bcf\u6b21\u91cd\u65b0\u6784\u9020 future \u5bf9\u8c61\u90fd\u4f1a\u5f15\u8d77 future \u5bf9\u8c61\u7684\u91cd\u65b0\u8d4b\u503c\uff08\u8986\u76d6\u89e3\u6790\u7ed3\u679c\uff09\uff0c\u6240\u4ee5\u6bcf\u4e2a future \u5bf9\u8c61\u90fd\u8981\u91cd\u65b0\u89e3\u6790\u83b7\u53d6\u7ed3\u679c\u3002 \u5982\u679c\u4f60\u4f7f\u7528 ArrayInterface \u8fd4\u56de\u7684\u7ed3\u679c\uff08 $response['hits']['hits'] \uff09\u5219\u4e0d\u7528\u8fdb\u884c\u989d\u5916\u5904\u7406\u3002\u7136\u800c FutureArrayInterface \u5c31\u8981\u5168\u9762\u89e3\u6790 future \u5bf9\u8c61\u624d\u80fd\u4f7f\u7528\u54cd\u5e94\u6570\u636e\u3002 \u53e6\u5916\u4e00\u70b9\u662f\u4e00\u4e9b\u65b9\u6cd5\u4f1a\u5931\u6548\u3002\u6bd4\u5982 exists \u65b9\u6cd5\uff08 $client->exists() , $client->indices()->exists , $client->indices->templateExists() \u7b49\uff09\u5728\u6b63\u5e38\u60c5\u51b5\u4e0b\u4f1a\u8fd4\u56de true \u6216 false\u3002 \u5f53\u4f7f\u7528 future \u6a21\u5f0f\u65f6\uff0cfuture \u5bf9\u8c61\u8fd8\u672a\u5c01\u88c5\u597d\uff0c\u8fd9\u4ee3\u8868\u5ba2\u6237\u7aef\u65e0\u6cd5\u68c0\u6d4b\u54cd\u5e94\u7ed3\u679c\u548c\u8fd4\u56de true \u6216 false\u3002\u6240\u4ee5\u4f60\u4f1a\u5f97\u5230\u4ece Elasticsearch \u8fd4\u56de\u7684\u672a\u5c01\u88c5\u54cd\u5e94\u6570\u636e\uff0c\u800c\u4f60\u4e0d\u5f97\u4e0d\u5bf9\u8fd9\u4e9b\u6570\u636e\u8fdb\u884c\u5904\u7406\u3002 \u8fd9\u4e9b\u6ce8\u610f\u4e8b\u9879\u4e5f\u9002\u7528\u4e8e ping() \u65b9\u6cd5\u3002","title":"\u8b66\u544a"},{"location":"elasticsearch/elasticsearch-php/getting_documents/","text":"\u83b7\u53d6\u6587\u6863 # Elasticsearch \u63d0\u4f9b\u5b9e\u65f6\u83b7\u53d6\u6587\u6863\u7684\u65b9\u6cd5\u3002\u8fd9\u610f\u5473\u7740\u53ea\u8981\u6587\u6863\u88ab\u7d22\u5f15\u4e14\u5ba2\u6237\u7aef\u6536\u5230\u6d88\u606f\u786e\u8ba4\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u7acb\u5373\u5728\u4efb\u4f55\u7684\u5206\u7247\u4e2d\u68c0\u7d22\u6587\u6863\u3002Get \u64cd\u4f5c\u901a\u8fc7 index/type/id \u65b9\u5f0f\u8bf7\u6c42\u4e00\u4e2a\u6587\u6863\u4fe1\u606f\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' ]; // Get doc at /my_index/my_type/my_id $response = $client -> get ( $params );","title":"\u83b7\u53d6\u6587\u6863"},{"location":"elasticsearch/elasticsearch-php/getting_documents/#_1","text":"Elasticsearch \u63d0\u4f9b\u5b9e\u65f6\u83b7\u53d6\u6587\u6863\u7684\u65b9\u6cd5\u3002\u8fd9\u610f\u5473\u7740\u53ea\u8981\u6587\u6863\u88ab\u7d22\u5f15\u4e14\u5ba2\u6237\u7aef\u6536\u5230\u6d88\u606f\u786e\u8ba4\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u7acb\u5373\u5728\u4efb\u4f55\u7684\u5206\u7247\u4e2d\u68c0\u7d22\u6587\u6863\u3002Get \u64cd\u4f5c\u901a\u8fc7 index/type/id \u65b9\u5f0f\u8bf7\u6c42\u4e00\u4e2a\u6587\u6863\u4fe1\u606f\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' ]; // Get doc at /my_index/my_type/my_id $response = $client -> get ( $params );","title":"\u83b7\u53d6\u6587\u6863"},{"location":"elasticsearch/elasticsearch-php/index_management_operations/","text":"\u7d22\u5f15\u7ba1\u7406 # \u7d22\u5f15\u7ba1\u7406\u64cd\u4f5c\u53ef\u4ee5\u8ba9\u4f60\u7ba1\u7406\u96c6\u7fa4\u4e2d\u7684\u7d22\u5f15\uff0c\u4f8b\u5982\u521b\u5efa\u3001\u5220\u9664\u548c\u66f4\u65b0\u7d22\u5f15\u548c\u7d22\u5f15\u7684\u6620\u5c04/\u914d\u7f6e\u3002 \u521b\u5efa\u4e00\u4e2a\u7d22\u5f15 # \u7d22\u5f15\u64cd\u4f5c\u5305\u542b\u5728\u4e00\u4e2a\u7279\u5b9a\u7684\u547d\u540d\u7a7a\u95f4\u5185\uff0c\u4e0e\u5176\u5b83\u76f4\u63a5\u4ece\u5c5e\u4e8e\u5ba2\u6237\u7aef\u5bf9\u8c61\u7684\u65b9\u6cd5\u9694\u79bb\u5f00\u6765\u3002\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7d22\u5f15\u4f5c\u4e3a\u793a\u4f8b\uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'my_index' ]; // Create the index $response = $client -> indices () -> create ( $params ); \u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u521b\u5efa\u7d22\u5f15 API \u4e2d\u6307\u5b9a\u4efb\u4f55\u53c2\u6570\u3002\u6240\u6709\u7684\u53c2\u6570\u901a\u5e38\u4f1a\u6ce8\u5165\u8bf7\u6c42\u4f53\u4e2d\u7684 body \u53c2\u6570\u4e0b\uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'my_index' , 'body' => [ 'settings' => [ 'number_of_shards' => 3 , 'number_of_replicas' => 2 ], 'mappings' => [ 'my_type' => [ '_source' => [ 'enabled' => true ], 'properties' => [ 'first_name' => [ 'type' => 'string' , 'analyzer' => 'standard' ], 'age' => [ 'type' => 'integer' ] ] ] ] ] ]; // Create the index with mappings and settings now $response = $client -> indices () -> create ( $params ); \u521b\u5efa\u4e00\u4e2a\u7d22\u5f15\uff08\u590d\u6742\u793a\u4f8b\uff09 # \u8fd9\u662f\u4e00\u4e2a\u4ee5\u66f4\u4e3a\u590d\u6742\u7684\u65b9\u5f0f\u521b\u5efa\u7d22\u5f15\u7684\u793a\u4f8b\uff0c\u793a\u4f8b\u4e2d\u5c55\u793a\u4e86\u5982\u4f55\u5b9a\u4e49 analyzers\uff0ctokenizers\uff0cfilters \u548c\u7d22\u5f15\u7684 settings\u3002\u867d\u7136\u521b\u5efa\u65b9\u5f0f\u4e0e\u4e4b\u524d\u7684\u793a\u4f8b\u672c\u8d28\u4e00\u6837\uff0c\u4f46\u662f\u8fd9\u4e2a\u590d\u6742\u793a\u4f8b\u5bf9\u4e8e\u7406\u89e3\u5ba2\u6237\u7aef\u7684\u4f7f\u7528\u65b9\u6cd5\u5177\u6709\u83ab\u5927\u5e2e\u52a9\uff0c\u56e0\u4e3a\u8fd9\u79cd\u7279\u5b9a\u7684\u8bed\u6cd5\u7ed3\u6784\u5f88\u5bb9\u6613\u88ab\u6df7\u6dc6\u3002 <?php $params = [ 'index' => 'reuters' , 'body' => [ 'settings' => [ 'number_of_shards' => 1 , 'number_of_replicas' => 0 , 'analysis' => [ 'filter' => [ 'shingle' => [ 'type' => 'shingle' ] ], 'char_filter' => [ 'pre_negs' => [ 'type' => 'pattern_replace' , 'pattern' => '(\\\\w+)\\\\s+((?i:never|no|nothing|nowhere|noone|none|not|havent|hasnt|hadnt|cant|couldnt|shouldnt|wont|wouldnt|dont|doesnt|didnt|isnt|arent|aint))\\\\b' , 'replacement' => '~$1 $2' ], 'post_negs' => [ 'type' => 'pattern_replace' , 'pattern' => '\\\\b((?i:never|no|nothing|nowhere|noone|none|not|havent|hasnt|hadnt|cant|couldnt|shouldnt|wont|wouldnt|dont|doesnt|didnt|isnt|arent|aint))\\\\s+(\\\\w+)' , 'replacement' => '$1 ~$2' ] ], 'analyzer' => [ 'reuters' => [ 'type' => 'custom' , 'tokenizer' => 'standard' , 'filter' => [ 'lowercase' , 'stop' , 'kstem' ] ] ] ] ], 'mappings' => [ '_default_' => [ 'properties' => [ 'title' => [ 'type' => 'string' , 'analyzer' => 'reuters' , 'term_vector' => 'yes' , 'copy_to' => 'combined' ], 'body' => [ 'type' => 'string' , 'analyzer' => 'reuters' , 'term_vector' => 'yes' , 'copy_to' => 'combined' ], 'combined' => [ 'type' => 'string' , 'analyzer' => 'reuters' , 'term_vector' => 'yes' ], 'topics' => [ 'type' => 'string' , 'index' => 'not_analyzed' ], 'places' => [ 'type' => 'string' , 'index' => 'not_analyzed' ] ] ], 'my_type' => [ 'properties' => [ 'my_field' => [ 'type' => 'string' ] ] ] ] ] ]; $client -> indices () -> create ( $params ); \u5220\u9664\u4e00\u4e2a\u7d22\u5f15 # \u5220\u9664\u4e00\u4e2a\u7d22\u5f15\u5341\u5206\u7b80\u5355\uff1a <?php $params = [ 'index' => 'my_index' ]; $response = $client -> indices () -> delete ( $params ); Put Settings API # Put Settings API \u5141\u8bb8\u4f60\u66f4\u6539\u7d22\u5f15\u7684\u914d\u7f6e\u53c2\u6570: <?php $params = [ 'index' => 'my_index' , 'body' => [ 'settings' => [ 'number_of_replicas' => 0 , 'refresh_interval' => - 1 ] ] ]; $response = $client -> indices () -> putSettings ( $params ); Get Settings API # Get Settings API \u53ef\u4ee5\u8ba9\u4f60\u77e5\u9053\u4e00\u4e2a\u6216\u591a\u4e2a\u7d22\u5f15\u7684\u5f53\u524d\u914d\u7f6e\u53c2\u6570\uff1a <?php // Get settings for one index $params = [ 'index' => 'my_index' ]; $response = $client -> indices () -> getSettings ( $params ); // Get settings for several indices $params = [ 'index' => [ 'my_index' , 'my_index2' ] ]; $response = $client -> indices () -> getSettings ( $params ); Put Mappings API # Put Mappings API \u5141\u8bb8\u4f60\u66f4\u6539\u6216\u589e\u52a0\u4e00\u4e2a\u7d22\u5f15\u7684\u6620\u5c04\u3002 <?php // Set the index and type $params = [ 'index' => 'my_index' , 'type' => 'my_type2' , 'body' => [ 'my_type2' => [ '_source' => [ 'enabled' => true ], 'properties' => [ 'first_name' => [ 'type' => 'string' , 'analyzer' => 'standard' ], 'age' => [ 'type' => 'integer' ] ] ] ] ]; // Update the index mapping $client -> indices () -> putMapping ( $params ); Get Mappings API # Get Mappings API \u8fd4\u56de\u7d22\u5f15\u548c\u7c7b\u578b\u7684\u6620\u5c04\u7ec6\u8282\u3002\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e9b\u7d22\u5f15\u548c\u7c7b\u578b\uff0c\u53d6\u51b3\u4e8e\u4f60\u5e0c\u671b\u68c0\u7d22\u4ec0\u4e48\u6620\u5c04\u3002 <?php // Get mappings for all indexes and types $response = $client -> indices () -> getMapping (); // Get mappings for all types in 'my_index' $params = [ 'index' => 'my_index' ]; $response = $client -> indices () -> getMapping ( $params ); // Get mappings for all types of 'my_type', regardless of index $params = [ 'type' => 'my_type' ]; $response = $client -> indices () -> getMapping ( $params ); // Get mapping 'my_type' in 'my_index' $params = [ 'index' => 'my_index' 'type' => 'my_type' ]; $response = $client -> indices () -> getMapping ( $params ); // Get mappings for two indexes $params = [ 'index' => [ 'my_index' , 'my_index2' ] ]; $response = $client -> indices () -> getMapping ( $params ); \u7d22\u5f15\u547d\u540d\u7a7a\u95f4\u4e0b\u7684\u5176\u4ed6 API # \u7d22\u5f15\u547d\u540d\u7a7a\u95f4\u4e0b\u8fd8\u6709\u4e00\u4e9b API \u5141\u8bb8\u4f60\u7ba1\u7406\u4f60\u7684\u7d22\u5f15\uff08add/remove templates, flush segments, close indexes\u7b49\uff09\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u4e00\u4e2a\u81ea\u52a8\u68c0\u7d22\u7684 IDE\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u8f7b\u6613\u53d1\u73b0\u7d22\u5f15\u7684\u547d\u540d\u7a7a\u95f4\uff1a <?php $client -> indices () -> \u8fd9\u91cc\u53ef\u4ee5\u67e5\u770b\u53ef\u7528\u65b9\u6cd5\u6e05\u5355\u3002\u800c\u6d4f\u89c8 \\Elasticsearch\\Namespaces\\Indices.php \u6587\u4ef6\u5219\u4f1a\u770b\u5230\u6240\u6709\u53ef\u8c03\u7528\u7684\u65b9\u6cd5\u6e05\u5355\u3002","title":"\u7d22\u5f15\u7ba1\u7406"},{"location":"elasticsearch/elasticsearch-php/index_management_operations/#_1","text":"\u7d22\u5f15\u7ba1\u7406\u64cd\u4f5c\u53ef\u4ee5\u8ba9\u4f60\u7ba1\u7406\u96c6\u7fa4\u4e2d\u7684\u7d22\u5f15\uff0c\u4f8b\u5982\u521b\u5efa\u3001\u5220\u9664\u548c\u66f4\u65b0\u7d22\u5f15\u548c\u7d22\u5f15\u7684\u6620\u5c04/\u914d\u7f6e\u3002","title":"\u7d22\u5f15\u7ba1\u7406"},{"location":"elasticsearch/elasticsearch-php/index_management_operations/#_2","text":"\u7d22\u5f15\u64cd\u4f5c\u5305\u542b\u5728\u4e00\u4e2a\u7279\u5b9a\u7684\u547d\u540d\u7a7a\u95f4\u5185\uff0c\u4e0e\u5176\u5b83\u76f4\u63a5\u4ece\u5c5e\u4e8e\u5ba2\u6237\u7aef\u5bf9\u8c61\u7684\u65b9\u6cd5\u9694\u79bb\u5f00\u6765\u3002\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7d22\u5f15\u4f5c\u4e3a\u793a\u4f8b\uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'my_index' ]; // Create the index $response = $client -> indices () -> create ( $params ); \u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u521b\u5efa\u7d22\u5f15 API \u4e2d\u6307\u5b9a\u4efb\u4f55\u53c2\u6570\u3002\u6240\u6709\u7684\u53c2\u6570\u901a\u5e38\u4f1a\u6ce8\u5165\u8bf7\u6c42\u4f53\u4e2d\u7684 body \u53c2\u6570\u4e0b\uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'my_index' , 'body' => [ 'settings' => [ 'number_of_shards' => 3 , 'number_of_replicas' => 2 ], 'mappings' => [ 'my_type' => [ '_source' => [ 'enabled' => true ], 'properties' => [ 'first_name' => [ 'type' => 'string' , 'analyzer' => 'standard' ], 'age' => [ 'type' => 'integer' ] ] ] ] ] ]; // Create the index with mappings and settings now $response = $client -> indices () -> create ( $params );","title":"\u521b\u5efa\u4e00\u4e2a\u7d22\u5f15"},{"location":"elasticsearch/elasticsearch-php/index_management_operations/#_3","text":"\u8fd9\u662f\u4e00\u4e2a\u4ee5\u66f4\u4e3a\u590d\u6742\u7684\u65b9\u5f0f\u521b\u5efa\u7d22\u5f15\u7684\u793a\u4f8b\uff0c\u793a\u4f8b\u4e2d\u5c55\u793a\u4e86\u5982\u4f55\u5b9a\u4e49 analyzers\uff0ctokenizers\uff0cfilters \u548c\u7d22\u5f15\u7684 settings\u3002\u867d\u7136\u521b\u5efa\u65b9\u5f0f\u4e0e\u4e4b\u524d\u7684\u793a\u4f8b\u672c\u8d28\u4e00\u6837\uff0c\u4f46\u662f\u8fd9\u4e2a\u590d\u6742\u793a\u4f8b\u5bf9\u4e8e\u7406\u89e3\u5ba2\u6237\u7aef\u7684\u4f7f\u7528\u65b9\u6cd5\u5177\u6709\u83ab\u5927\u5e2e\u52a9\uff0c\u56e0\u4e3a\u8fd9\u79cd\u7279\u5b9a\u7684\u8bed\u6cd5\u7ed3\u6784\u5f88\u5bb9\u6613\u88ab\u6df7\u6dc6\u3002 <?php $params = [ 'index' => 'reuters' , 'body' => [ 'settings' => [ 'number_of_shards' => 1 , 'number_of_replicas' => 0 , 'analysis' => [ 'filter' => [ 'shingle' => [ 'type' => 'shingle' ] ], 'char_filter' => [ 'pre_negs' => [ 'type' => 'pattern_replace' , 'pattern' => '(\\\\w+)\\\\s+((?i:never|no|nothing|nowhere|noone|none|not|havent|hasnt|hadnt|cant|couldnt|shouldnt|wont|wouldnt|dont|doesnt|didnt|isnt|arent|aint))\\\\b' , 'replacement' => '~$1 $2' ], 'post_negs' => [ 'type' => 'pattern_replace' , 'pattern' => '\\\\b((?i:never|no|nothing|nowhere|noone|none|not|havent|hasnt|hadnt|cant|couldnt|shouldnt|wont|wouldnt|dont|doesnt|didnt|isnt|arent|aint))\\\\s+(\\\\w+)' , 'replacement' => '$1 ~$2' ] ], 'analyzer' => [ 'reuters' => [ 'type' => 'custom' , 'tokenizer' => 'standard' , 'filter' => [ 'lowercase' , 'stop' , 'kstem' ] ] ] ] ], 'mappings' => [ '_default_' => [ 'properties' => [ 'title' => [ 'type' => 'string' , 'analyzer' => 'reuters' , 'term_vector' => 'yes' , 'copy_to' => 'combined' ], 'body' => [ 'type' => 'string' , 'analyzer' => 'reuters' , 'term_vector' => 'yes' , 'copy_to' => 'combined' ], 'combined' => [ 'type' => 'string' , 'analyzer' => 'reuters' , 'term_vector' => 'yes' ], 'topics' => [ 'type' => 'string' , 'index' => 'not_analyzed' ], 'places' => [ 'type' => 'string' , 'index' => 'not_analyzed' ] ] ], 'my_type' => [ 'properties' => [ 'my_field' => [ 'type' => 'string' ] ] ] ] ] ]; $client -> indices () -> create ( $params );","title":"\u521b\u5efa\u4e00\u4e2a\u7d22\u5f15\uff08\u590d\u6742\u793a\u4f8b\uff09"},{"location":"elasticsearch/elasticsearch-php/index_management_operations/#_4","text":"\u5220\u9664\u4e00\u4e2a\u7d22\u5f15\u5341\u5206\u7b80\u5355\uff1a <?php $params = [ 'index' => 'my_index' ]; $response = $client -> indices () -> delete ( $params );","title":"\u5220\u9664\u4e00\u4e2a\u7d22\u5f15"},{"location":"elasticsearch/elasticsearch-php/index_management_operations/#put-settings-api","text":"Put Settings API \u5141\u8bb8\u4f60\u66f4\u6539\u7d22\u5f15\u7684\u914d\u7f6e\u53c2\u6570: <?php $params = [ 'index' => 'my_index' , 'body' => [ 'settings' => [ 'number_of_replicas' => 0 , 'refresh_interval' => - 1 ] ] ]; $response = $client -> indices () -> putSettings ( $params );","title":"Put Settings API"},{"location":"elasticsearch/elasticsearch-php/index_management_operations/#get-settings-api","text":"Get Settings API \u53ef\u4ee5\u8ba9\u4f60\u77e5\u9053\u4e00\u4e2a\u6216\u591a\u4e2a\u7d22\u5f15\u7684\u5f53\u524d\u914d\u7f6e\u53c2\u6570\uff1a <?php // Get settings for one index $params = [ 'index' => 'my_index' ]; $response = $client -> indices () -> getSettings ( $params ); // Get settings for several indices $params = [ 'index' => [ 'my_index' , 'my_index2' ] ]; $response = $client -> indices () -> getSettings ( $params );","title":"Get Settings API"},{"location":"elasticsearch/elasticsearch-php/index_management_operations/#put-mappings-api","text":"Put Mappings API \u5141\u8bb8\u4f60\u66f4\u6539\u6216\u589e\u52a0\u4e00\u4e2a\u7d22\u5f15\u7684\u6620\u5c04\u3002 <?php // Set the index and type $params = [ 'index' => 'my_index' , 'type' => 'my_type2' , 'body' => [ 'my_type2' => [ '_source' => [ 'enabled' => true ], 'properties' => [ 'first_name' => [ 'type' => 'string' , 'analyzer' => 'standard' ], 'age' => [ 'type' => 'integer' ] ] ] ] ]; // Update the index mapping $client -> indices () -> putMapping ( $params );","title":"Put Mappings API"},{"location":"elasticsearch/elasticsearch-php/index_management_operations/#get-mappings-api","text":"Get Mappings API \u8fd4\u56de\u7d22\u5f15\u548c\u7c7b\u578b\u7684\u6620\u5c04\u7ec6\u8282\u3002\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e9b\u7d22\u5f15\u548c\u7c7b\u578b\uff0c\u53d6\u51b3\u4e8e\u4f60\u5e0c\u671b\u68c0\u7d22\u4ec0\u4e48\u6620\u5c04\u3002 <?php // Get mappings for all indexes and types $response = $client -> indices () -> getMapping (); // Get mappings for all types in 'my_index' $params = [ 'index' => 'my_index' ]; $response = $client -> indices () -> getMapping ( $params ); // Get mappings for all types of 'my_type', regardless of index $params = [ 'type' => 'my_type' ]; $response = $client -> indices () -> getMapping ( $params ); // Get mapping 'my_type' in 'my_index' $params = [ 'index' => 'my_index' 'type' => 'my_type' ]; $response = $client -> indices () -> getMapping ( $params ); // Get mappings for two indexes $params = [ 'index' => [ 'my_index' , 'my_index2' ] ]; $response = $client -> indices () -> getMapping ( $params );","title":"Get Mappings API"},{"location":"elasticsearch/elasticsearch-php/index_management_operations/#api","text":"\u7d22\u5f15\u547d\u540d\u7a7a\u95f4\u4e0b\u8fd8\u6709\u4e00\u4e9b API \u5141\u8bb8\u4f60\u7ba1\u7406\u4f60\u7684\u7d22\u5f15\uff08add/remove templates, flush segments, close indexes\u7b49\uff09\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u4e00\u4e2a\u81ea\u52a8\u68c0\u7d22\u7684 IDE\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u8f7b\u6613\u53d1\u73b0\u7d22\u5f15\u7684\u547d\u540d\u7a7a\u95f4\uff1a <?php $client -> indices () -> \u8fd9\u91cc\u53ef\u4ee5\u67e5\u770b\u53ef\u7528\u65b9\u6cd5\u6e05\u5355\u3002\u800c\u6d4f\u89c8 \\Elasticsearch\\Namespaces\\Indices.php \u6587\u4ef6\u5219\u4f1a\u770b\u5230\u6240\u6709\u53ef\u8c03\u7528\u7684\u65b9\u6cd5\u6e05\u5355\u3002","title":"\u7d22\u5f15\u547d\u540d\u7a7a\u95f4\u4e0b\u7684\u5176\u4ed6 API"},{"location":"elasticsearch/elasticsearch-php/indexing_documents/","text":"\u7d22\u5f15\u6587\u6863 # \u5f53\u4f60\u8981\u5728 Elasticsearch \u589e\u52a0\u6587\u6863\u65f6\uff0c\u4f60\u5c31\u9700\u8981\u7d22\u5f15 JSON \u6587\u6863\u3002JSON \u6587\u6863\u4f1a\u6620\u5c04 PHP \u5173\u8054\u6570\u7ec4\uff0c\u56e0\u4e3a PHP \u5173\u8054\u6570\u7ec4\u53ef\u4ee5 encode \u4e3a JSON \u6570\u636e\u683c\u5f0f\u3002 \u56e0\u6b64\u5728 Elasticsearch-PHP \u4e2d\u4f60\u53ef\u4ee5\u4f20\u9012\u5173\u8054\u6570\u7ec4\u7ed9\u5ba2\u6237\u7aef\u6765\u7d22\u5f15\u6587\u6863\u3002\u6211\u4eec\u4f1a\u6982\u8ff0\u51e0\u79cd\u65b9\u6cd5\u6765\u589e\u52a0\u6587\u6863\u5230 Elasticsearch\u3002 \u5355\u4e00\u6587\u6863\u7d22\u5f15 # \u5f53\u7d22\u5f15\u4e00\u4e2a\u6587\u6863\u65f6\uff0c\u4f60\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a ID \u6216\u8005\u8ba9 Elasticsearch \u81ea\u52a8\u751f\u6210\u3002 \u63d0\u4f9b ID \u503c\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' , 'body' => [ 'testField' => 'abc' ] ]; // Document will be indexed to my_index/my_type/my_id $response = $client -> index ( $params ); \u4e0d\u63d0\u4f9b ID \u503c\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'body' => [ 'testField' => 'abc' ] ]; // Document will be indexed to my_index/my_type/<autogenerated ID> $response = $client -> index ( $params ); \u5982\u679c\u4f60\u9700\u8981\u8bbe\u7f6e\u5176\u4ed6\u7684\u53c2\u6570\uff0c\u5982 routing \u7684\u503c\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u8fd9\u4e9b\u53c2\u6570\u5230 index , type \u7b49\u53c2\u6570\u540e\u3002\u4f8b\u5982\uff0c\u7d22\u5f15\u4e00\u4e2a\u65b0\u7684\u6587\u6863\u65f6\u8bbe\u7f6e routing \u503c\u548c timestamp \u503c\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' , 'routing' => 'company_xyz' , 'timestamp' => strtotime ( \"-1d\" ), 'body' => [ 'testField' => 'abc' ] ]; $response = $client -> index ( $params ); \u6279\u91cf\uff08bulk\uff09\u7d22\u5f15 # Elasticsearch \u4e5f\u652f\u6301\u6279\u91cf\uff08bulk\uff09\u7d22\u5f15\u6587\u6863\u3002bulk API \u8981\u6c42\u63d0\u4f9b JSON \u683c\u5f0f\u7684 action/\u5143\u6570\u636e \u952e\u503c\u5bf9\u3002\u5728 PHP \u4e2d\u6784\u5efa\u6279\u91cf\u6587\u6863\u6570\u636e\u4e5f\u662f\u76f8\u4f3c\u7684\u3002\u4f60\u9996\u5148\u8981\u521b\u5efa\u4e00\u4e2a action \u6570\u7ec4\u5bf9\u8c61\uff08\u5982 index \u5bf9\u8c61\uff09\uff0c\u7136\u540e\u4f60\u8fd8\u8981\u521b\u5efa\u4e00\u4e2a body \u5bf9\u8c61\u3002\u800c PHP \u7a0b\u5e8f\u5219\u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\u6784\u5efa\u6587\u6863\u6570\u636e\u3002 \u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5982\u4e0b\u6240\u793a\uff1a <?php for ( $i = 0 ; $i < 100 ; $i ++ ) { $params [ 'body' ][] = [ 'index' => [ '_index' => 'my_index' , '_type' => 'my_type' , ] ]; $params [ 'body' ][] = [ 'my_field' => 'my_value' , 'second_field' => 'some more values' ]; } $responses = $client -> bulk ( $params ); \u5b9e\u9645\u4e0a\u5728\u4e00\u6b21 bulk \u8bf7\u6c42\u4e2d\u53d1\u9001\u6570\u91cf\u4f1a\u6bd4\u6587\u6863\u5b9e\u9645\u6570\u91cf\u5c11\u3002\u5982\u679c\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f60\u5c31\u8981\u8bbe\u7f6e\u6279\u91cf\u503c\u7136\u540e\u5468\u671f\u6027\u5730\u53d1\u9001\uff1a <?php $params = [ 'body' => []]; for ( $i = 1 ; $i <= 1234567 ; $i ++ ) { $params [ 'body' ][] = [ 'index' => [ '_index' => 'my_index' , '_type' => 'my_type' , '_id' => $i ] ]; $params [ 'body' ][] = [ 'my_field' => 'my_value' , 'second_field' => 'some more values' ]; // Every 1000 documents stop and send the bulk request if ( $i % 1000 == 0 ) { $responses = $client -> bulk ( $params ); // erase the old bulk request $params = [ 'body' => []]; // unset the bulk response when you are done to save memory unset ( $responses ); } } // Send the last batch if it exists if ( ! empty ( $params [ 'body' ])) { $responses = $client -> bulk ( $params ); }","title":"\u7d22\u5f15\u6587\u6863"},{"location":"elasticsearch/elasticsearch-php/indexing_documents/#_1","text":"\u5f53\u4f60\u8981\u5728 Elasticsearch \u589e\u52a0\u6587\u6863\u65f6\uff0c\u4f60\u5c31\u9700\u8981\u7d22\u5f15 JSON \u6587\u6863\u3002JSON \u6587\u6863\u4f1a\u6620\u5c04 PHP \u5173\u8054\u6570\u7ec4\uff0c\u56e0\u4e3a PHP \u5173\u8054\u6570\u7ec4\u53ef\u4ee5 encode \u4e3a JSON \u6570\u636e\u683c\u5f0f\u3002 \u56e0\u6b64\u5728 Elasticsearch-PHP \u4e2d\u4f60\u53ef\u4ee5\u4f20\u9012\u5173\u8054\u6570\u7ec4\u7ed9\u5ba2\u6237\u7aef\u6765\u7d22\u5f15\u6587\u6863\u3002\u6211\u4eec\u4f1a\u6982\u8ff0\u51e0\u79cd\u65b9\u6cd5\u6765\u589e\u52a0\u6587\u6863\u5230 Elasticsearch\u3002","title":"\u7d22\u5f15\u6587\u6863"},{"location":"elasticsearch/elasticsearch-php/indexing_documents/#_2","text":"\u5f53\u7d22\u5f15\u4e00\u4e2a\u6587\u6863\u65f6\uff0c\u4f60\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a ID \u6216\u8005\u8ba9 Elasticsearch \u81ea\u52a8\u751f\u6210\u3002 \u63d0\u4f9b ID \u503c\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' , 'body' => [ 'testField' => 'abc' ] ]; // Document will be indexed to my_index/my_type/my_id $response = $client -> index ( $params ); \u4e0d\u63d0\u4f9b ID \u503c\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'body' => [ 'testField' => 'abc' ] ]; // Document will be indexed to my_index/my_type/<autogenerated ID> $response = $client -> index ( $params ); \u5982\u679c\u4f60\u9700\u8981\u8bbe\u7f6e\u5176\u4ed6\u7684\u53c2\u6570\uff0c\u5982 routing \u7684\u503c\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u8fd9\u4e9b\u53c2\u6570\u5230 index , type \u7b49\u53c2\u6570\u540e\u3002\u4f8b\u5982\uff0c\u7d22\u5f15\u4e00\u4e2a\u65b0\u7684\u6587\u6863\u65f6\u8bbe\u7f6e routing \u503c\u548c timestamp \u503c\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' , 'routing' => 'company_xyz' , 'timestamp' => strtotime ( \"-1d\" ), 'body' => [ 'testField' => 'abc' ] ]; $response = $client -> index ( $params );","title":"\u5355\u4e00\u6587\u6863\u7d22\u5f15"},{"location":"elasticsearch/elasticsearch-php/indexing_documents/#bulk","text":"Elasticsearch \u4e5f\u652f\u6301\u6279\u91cf\uff08bulk\uff09\u7d22\u5f15\u6587\u6863\u3002bulk API \u8981\u6c42\u63d0\u4f9b JSON \u683c\u5f0f\u7684 action/\u5143\u6570\u636e \u952e\u503c\u5bf9\u3002\u5728 PHP \u4e2d\u6784\u5efa\u6279\u91cf\u6587\u6863\u6570\u636e\u4e5f\u662f\u76f8\u4f3c\u7684\u3002\u4f60\u9996\u5148\u8981\u521b\u5efa\u4e00\u4e2a action \u6570\u7ec4\u5bf9\u8c61\uff08\u5982 index \u5bf9\u8c61\uff09\uff0c\u7136\u540e\u4f60\u8fd8\u8981\u521b\u5efa\u4e00\u4e2a body \u5bf9\u8c61\u3002\u800c PHP \u7a0b\u5e8f\u5219\u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\u6784\u5efa\u6587\u6863\u6570\u636e\u3002 \u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5982\u4e0b\u6240\u793a\uff1a <?php for ( $i = 0 ; $i < 100 ; $i ++ ) { $params [ 'body' ][] = [ 'index' => [ '_index' => 'my_index' , '_type' => 'my_type' , ] ]; $params [ 'body' ][] = [ 'my_field' => 'my_value' , 'second_field' => 'some more values' ]; } $responses = $client -> bulk ( $params ); \u5b9e\u9645\u4e0a\u5728\u4e00\u6b21 bulk \u8bf7\u6c42\u4e2d\u53d1\u9001\u6570\u91cf\u4f1a\u6bd4\u6587\u6863\u5b9e\u9645\u6570\u91cf\u5c11\u3002\u5982\u679c\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f60\u5c31\u8981\u8bbe\u7f6e\u6279\u91cf\u503c\u7136\u540e\u5468\u671f\u6027\u5730\u53d1\u9001\uff1a <?php $params = [ 'body' => []]; for ( $i = 1 ; $i <= 1234567 ; $i ++ ) { $params [ 'body' ][] = [ 'index' => [ '_index' => 'my_index' , '_type' => 'my_type' , '_id' => $i ] ]; $params [ 'body' ][] = [ 'my_field' => 'my_value' , 'second_field' => 'some more values' ]; // Every 1000 documents stop and send the bulk request if ( $i % 1000 == 0 ) { $responses = $client -> bulk ( $params ); // erase the old bulk request $params = [ 'body' => []]; // unset the bulk response when you are done to save memory unset ( $responses ); } } // Send the last batch if it exists if ( ! empty ( $params [ 'body' ])) { $responses = $client -> bulk ( $params ); }","title":"\u6279\u91cf\uff08bulk\uff09\u7d22\u5f15"},{"location":"elasticsearch/elasticsearch-php/installation/","text":"\u5b89\u88c5 # Elasticsearch-php \u7684\u5b89\u88c5\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b 4 \u4e2a\u9700\u6c42\uff1a PHP 7.0.0 \u6216\u66f4\u9ad8\u7248\u672c Composer ext-curl \uff1aPHP \u7684 Libcurl \u6269\u5c55\uff08\u8be6\u60c5\u67e5\u770b\u4e0b\u65b9\u6ce8\u610f\u4e8b\u9879\uff09 \u539f\u751f JSON \u6269\u5c55 ( ext-json ) 1.3.7\u6216\u66f4\u9ad8\u7248\u672c \u5176\u4f59\u7684\u4f9d\u8d56\u4f1a\u7531 Composer \u81ea\u52a8\u5b89\u88c5\u3002Composer \u662f\u4e00\u4e2a PHP \u5305\u7ba1\u7406\u548c\u4f9d\u8d56\u7ba1\u7406\u5de5\u5177\uff0c\u4f7f\u7528 Composer \u5b89\u88c5 elasticsearch-php \u975e\u5e38\u7b80\u5355\u3002 Libcurl \u662f\u53ef\u66ff\u4ee3\u7684 \u4e0e Elasticsearch-php \u5ba2\u6237\u7aef\u7ed1\u5b9a\u7684\u9ed8\u8ba4 HTTP handlers \u9700\u8981 PHP \u7684 Libcurl \u6269\u5c55\uff0c\u4f46\u5ba2\u6237\u7aef\u4e5f\u5e76\u975e\u4e00\u5b9a\u8981\u7528 Libcurl \u6269\u5c55\u3002\u5982\u679c\u4f60\u6709 \u4e00\u53f0\u4e3b\u673a\u6ca1\u6709\u5b89\u88c5 Libcurl \u6269\u5c55\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e PHP streams \u7684 HTTP handler \u6765\u66ff\u4ee3\u3002\u4f46\u662f\u6027\u80fd\u4f1a\u53d8\u5dee\uff0c\u56e0\u4e3a Libcurl \u6269\u5c55\u8981\u5feb\u5f97\u591a\u3002 \u7248\u672c\u77e9\u9635 # Elasticsearch-PHP \u7684\u7248\u672c\u8981\u548c Elasticsearch \u7248\u672c\u9002\u914d\u3002 Elasticsearch-PHP \u7684 master \u5206\u652f\u603b\u662f\u4e0e Elasticsearch \u7684 master \u5206\u652f\u76f8\u4e00\u81f4\uff0c\u4f46\u4e0d\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4ee3\u7801\u4e2d\u4f7f\u7528 dev-master \u5206\u652f\u3002 Elasticsearch Version Elasticsearch-PHP Branch >= 6.0 6.0 >= 5.0, <= 6.0 5.0 >= 1.0, <= 5.0 1.0 , 2.0 <= 0.90.* 0.4 Composer \u5b89\u88c5 # \u5728 composer.json \u6587\u4ef6\u4e2d\u589e\u52a0 elasticsearch-php\u3002\u5982\u679c\u4f60\u662f\u65b0\u5efa\u9879\u76ee\uff0c\u90a3\u4e48\u628a\u4ee5\u4e0b\u7684\u4ee3\u7801\u590d\u5236\u7c98\u8d34\u5230 composer.json \u5c31\u884c\u4e86\u3002\u5982\u679c\u662f\u5728\u73b0\u6709\u9879\u76ee\u4e2d\u6dfb\u52a0 elasticsearch-php\uff0c\u90a3\u4e48\u628a elasticsearch-php \u6dfb\u52a0\u5230\u5176\u5b83\u7684\u5305\u540d\u540e\u9762\u5373\u53ef\uff1a { \"require\" : { \"elasticsearch/elasticsearch\" : \"~6.0\" } } \u4f7f\u7528 composer \u5b89\u88c5\u5ba2\u6237\u7aef\uff1a\u9996\u5148\u8981\u7528\u4e0b\u9762\u7b2c\u4e00\u4e2a\u547d\u4ee4\u6765\u5b89\u88c5 composer.phar \uff0c\u7136\u540e\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u547d\u4ee4\u6765\u6267\u884c\u5b89\u88c5\u7a0b\u5e8f\u3002composer \u4f1a\u81ea\u52a8\u4e0b\u8f7d\u6240\u6709\u7684\u4f9d\u8d56\uff0c\u628a\u4e0b\u8f7d\u7684\u4f9d\u8d56\u5b58\u50a8\u5728 /vendor/ \u76ee\u5f55\u4e0b\uff0c\u5e76\u4e14\u521b\u5efa\u4e00\u4e2a autoloader \uff1a curl -s http://getcomposer.org/installer | php php composer.phar install --no-dev \u5173\u4e8e Composer \u7684\u8be6\u60c5\u8bf7\u67e5\u770b Composer \u4e2d\u6587\u7f51 \u3002 \u6700\u540e\u52a0\u8f7d autoload.php\u3002\u5982\u679c\u4f60\u73b0\u6709\u9879\u76ee\u662f\u7528 Composer \u5b89\u88c5\u7684\uff0c\u90a3\u4e48 autoload.php \u4e5f\u8bb8\u5df2\u7ecf\u5728\u67d0\u5904\u52a0\u8f7d\u4e86\uff0c\u4f60\u5c31\u4e0d\u5fc5\u518d\u52a0\u8f7d\u3002\u6700\u540e\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5ba2\u6237\u7aef\u5bf9\u8c61\uff1a <?php require 'vendor/autoload.php' ; $client = Elasticsearch\\ClientBuilder :: create () -> build (); \u5ba2\u6237\u7aef\u5bf9\u8c61\u7684\u5b9e\u4f8b\u5316\u4e3b\u8981\u662f\u4f7f\u7528\u9759\u6001\u65b9\u6cd5 create() \uff0c\u8fd9\u91cc\u4f1a\u521b\u5efa\u4e00\u4e2a ClientBuilder \u5bf9\u8c61\uff0c\u4e3b\u8981\u662f\u7528\u6765\u8bbe\u7f6e\u4e00\u4e9b\u81ea\u5b9a\u4e49\u914d\u7f6e\u3002\u5982\u679c\u4f60\u914d\u7f6e\u5b8c\u4e86\uff0c\u4f60\u5c31\u53ef\u4ee5\u8c03\u7528 build() \u65b9\u6cd5\u6765\u521b\u5efa\u4e00\u4e2a Client \u5bf9\u8c61\u3002\u6211\u4eec\u4f1a\u5728\u914d\u7f6e\u4e00\u8282\u4e2d\u8be6\u7ec6\u8bf4\u660e\u914d\u7f6e\u65b9\u6cd5\u3002 --no-dev\u6807\u5fd7 # \u4f60\u4f1a\u6ce8\u610f\u5230\u5b89\u88c5\u547d\u4ee4\u884c\u6307\u5b9a\u4e86 --no-dev \u3002\u8fd9\u91cc\u662f\u9632\u6b62 Composer \u5b89\u88c5\u5404\u79cd\u6d4b\u8bd5\u4f9d\u8d56\u5305\u548c\u5f00\u53d1\u4f9d\u8d56\u5305\u3002\u5bf9\u4e8e\u666e\u901a\u7528\u6237\u6ca1\u6709\u5fc5\u8981\u5b89\u88c5\u6d4b\u8bd5\u5305\u3002\u7279\u522b\u662f\u5f00\u53d1\u4f9d\u8d56\u5305\u5305\u542b\u4e86 Elasticsearch \u7684\u4e00\u5957\u6e90\u7801\uff0c\u8fd9\u662f\u4e3a\u4e86\u4ee5 REST API \u7684\u65b9\u5f0f\u8fdb\u884c\u6d4b\u8bd5\u3002\u7136\u800c\u8fd9\u5bf9\u4e8e\u975e\u5f00\u53d1\u8005\u6765\u8bf4\u592a\u5927\u4e86\uff0c\u56e0\u6b64\u8981\u4f7f\u7528 --no-dev \u3002 \u5982\u679c\u4f60\u60f3\u5e2e\u52a9\u5b8c\u5584\u8fd9\u4e2a\u5ba2\u6237\u7aef\u7c7b\u5e93\uff0c\u90a3\u5c31\u5220\u6389 --no-dev \u6807\u5fd7\u6765\u8fdb\u884c\u6d4b\u8bd5\u5427\u3002","title":"\u5b89\u88c5"},{"location":"elasticsearch/elasticsearch-php/installation/#_1","text":"Elasticsearch-php \u7684\u5b89\u88c5\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b 4 \u4e2a\u9700\u6c42\uff1a PHP 7.0.0 \u6216\u66f4\u9ad8\u7248\u672c Composer ext-curl \uff1aPHP \u7684 Libcurl \u6269\u5c55\uff08\u8be6\u60c5\u67e5\u770b\u4e0b\u65b9\u6ce8\u610f\u4e8b\u9879\uff09 \u539f\u751f JSON \u6269\u5c55 ( ext-json ) 1.3.7\u6216\u66f4\u9ad8\u7248\u672c \u5176\u4f59\u7684\u4f9d\u8d56\u4f1a\u7531 Composer \u81ea\u52a8\u5b89\u88c5\u3002Composer \u662f\u4e00\u4e2a PHP \u5305\u7ba1\u7406\u548c\u4f9d\u8d56\u7ba1\u7406\u5de5\u5177\uff0c\u4f7f\u7528 Composer \u5b89\u88c5 elasticsearch-php \u975e\u5e38\u7b80\u5355\u3002 Libcurl \u662f\u53ef\u66ff\u4ee3\u7684 \u4e0e Elasticsearch-php \u5ba2\u6237\u7aef\u7ed1\u5b9a\u7684\u9ed8\u8ba4 HTTP handlers \u9700\u8981 PHP \u7684 Libcurl \u6269\u5c55\uff0c\u4f46\u5ba2\u6237\u7aef\u4e5f\u5e76\u975e\u4e00\u5b9a\u8981\u7528 Libcurl \u6269\u5c55\u3002\u5982\u679c\u4f60\u6709 \u4e00\u53f0\u4e3b\u673a\u6ca1\u6709\u5b89\u88c5 Libcurl \u6269\u5c55\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e PHP streams \u7684 HTTP handler \u6765\u66ff\u4ee3\u3002\u4f46\u662f\u6027\u80fd\u4f1a\u53d8\u5dee\uff0c\u56e0\u4e3a Libcurl \u6269\u5c55\u8981\u5feb\u5f97\u591a\u3002","title":"\u5b89\u88c5"},{"location":"elasticsearch/elasticsearch-php/installation/#_2","text":"Elasticsearch-PHP \u7684\u7248\u672c\u8981\u548c Elasticsearch \u7248\u672c\u9002\u914d\u3002 Elasticsearch-PHP \u7684 master \u5206\u652f\u603b\u662f\u4e0e Elasticsearch \u7684 master \u5206\u652f\u76f8\u4e00\u81f4\uff0c\u4f46\u4e0d\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4ee3\u7801\u4e2d\u4f7f\u7528 dev-master \u5206\u652f\u3002 Elasticsearch Version Elasticsearch-PHP Branch >= 6.0 6.0 >= 5.0, <= 6.0 5.0 >= 1.0, <= 5.0 1.0 , 2.0 <= 0.90.* 0.4","title":"\u7248\u672c\u77e9\u9635"},{"location":"elasticsearch/elasticsearch-php/installation/#composer","text":"\u5728 composer.json \u6587\u4ef6\u4e2d\u589e\u52a0 elasticsearch-php\u3002\u5982\u679c\u4f60\u662f\u65b0\u5efa\u9879\u76ee\uff0c\u90a3\u4e48\u628a\u4ee5\u4e0b\u7684\u4ee3\u7801\u590d\u5236\u7c98\u8d34\u5230 composer.json \u5c31\u884c\u4e86\u3002\u5982\u679c\u662f\u5728\u73b0\u6709\u9879\u76ee\u4e2d\u6dfb\u52a0 elasticsearch-php\uff0c\u90a3\u4e48\u628a elasticsearch-php \u6dfb\u52a0\u5230\u5176\u5b83\u7684\u5305\u540d\u540e\u9762\u5373\u53ef\uff1a { \"require\" : { \"elasticsearch/elasticsearch\" : \"~6.0\" } } \u4f7f\u7528 composer \u5b89\u88c5\u5ba2\u6237\u7aef\uff1a\u9996\u5148\u8981\u7528\u4e0b\u9762\u7b2c\u4e00\u4e2a\u547d\u4ee4\u6765\u5b89\u88c5 composer.phar \uff0c\u7136\u540e\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u547d\u4ee4\u6765\u6267\u884c\u5b89\u88c5\u7a0b\u5e8f\u3002composer \u4f1a\u81ea\u52a8\u4e0b\u8f7d\u6240\u6709\u7684\u4f9d\u8d56\uff0c\u628a\u4e0b\u8f7d\u7684\u4f9d\u8d56\u5b58\u50a8\u5728 /vendor/ \u76ee\u5f55\u4e0b\uff0c\u5e76\u4e14\u521b\u5efa\u4e00\u4e2a autoloader \uff1a curl -s http://getcomposer.org/installer | php php composer.phar install --no-dev \u5173\u4e8e Composer \u7684\u8be6\u60c5\u8bf7\u67e5\u770b Composer \u4e2d\u6587\u7f51 \u3002 \u6700\u540e\u52a0\u8f7d autoload.php\u3002\u5982\u679c\u4f60\u73b0\u6709\u9879\u76ee\u662f\u7528 Composer \u5b89\u88c5\u7684\uff0c\u90a3\u4e48 autoload.php \u4e5f\u8bb8\u5df2\u7ecf\u5728\u67d0\u5904\u52a0\u8f7d\u4e86\uff0c\u4f60\u5c31\u4e0d\u5fc5\u518d\u52a0\u8f7d\u3002\u6700\u540e\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5ba2\u6237\u7aef\u5bf9\u8c61\uff1a <?php require 'vendor/autoload.php' ; $client = Elasticsearch\\ClientBuilder :: create () -> build (); \u5ba2\u6237\u7aef\u5bf9\u8c61\u7684\u5b9e\u4f8b\u5316\u4e3b\u8981\u662f\u4f7f\u7528\u9759\u6001\u65b9\u6cd5 create() \uff0c\u8fd9\u91cc\u4f1a\u521b\u5efa\u4e00\u4e2a ClientBuilder \u5bf9\u8c61\uff0c\u4e3b\u8981\u662f\u7528\u6765\u8bbe\u7f6e\u4e00\u4e9b\u81ea\u5b9a\u4e49\u914d\u7f6e\u3002\u5982\u679c\u4f60\u914d\u7f6e\u5b8c\u4e86\uff0c\u4f60\u5c31\u53ef\u4ee5\u8c03\u7528 build() \u65b9\u6cd5\u6765\u521b\u5efa\u4e00\u4e2a Client \u5bf9\u8c61\u3002\u6211\u4eec\u4f1a\u5728\u914d\u7f6e\u4e00\u8282\u4e2d\u8be6\u7ec6\u8bf4\u660e\u914d\u7f6e\u65b9\u6cd5\u3002","title":"Composer \u5b89\u88c5"},{"location":"elasticsearch/elasticsearch-php/installation/#-no-dev","text":"\u4f60\u4f1a\u6ce8\u610f\u5230\u5b89\u88c5\u547d\u4ee4\u884c\u6307\u5b9a\u4e86 --no-dev \u3002\u8fd9\u91cc\u662f\u9632\u6b62 Composer \u5b89\u88c5\u5404\u79cd\u6d4b\u8bd5\u4f9d\u8d56\u5305\u548c\u5f00\u53d1\u4f9d\u8d56\u5305\u3002\u5bf9\u4e8e\u666e\u901a\u7528\u6237\u6ca1\u6709\u5fc5\u8981\u5b89\u88c5\u6d4b\u8bd5\u5305\u3002\u7279\u522b\u662f\u5f00\u53d1\u4f9d\u8d56\u5305\u5305\u542b\u4e86 Elasticsearch \u7684\u4e00\u5957\u6e90\u7801\uff0c\u8fd9\u662f\u4e3a\u4e86\u4ee5 REST API \u7684\u65b9\u5f0f\u8fdb\u884c\u6d4b\u8bd5\u3002\u7136\u800c\u8fd9\u5bf9\u4e8e\u975e\u5f00\u53d1\u8005\u6765\u8bf4\u592a\u5927\u4e86\uff0c\u56e0\u6b64\u8981\u4f7f\u7528 --no-dev \u3002 \u5982\u679c\u4f60\u60f3\u5e2e\u52a9\u5b8c\u5584\u8fd9\u4e2a\u5ba2\u6237\u7aef\u7c7b\u5e93\uff0c\u90a3\u5c31\u5220\u6389 --no-dev \u6807\u5fd7\u6765\u8fdb\u884c\u6d4b\u8bd5\u5427\u3002","title":"--no-dev\u6807\u5fd7"},{"location":"elasticsearch/elasticsearch-php/namespaces/","text":"\u547d\u540d\u7a7a\u95f4 # \u5ba2\u6237\u7aef\u6709\u8bb8\u591a\u201c\u547d\u540d\u7a7a\u95f4\u201d\uff0c\u901a\u5e38\u662f\u4e00\u4e9b\u516c\u5f00\u7684\u53ef\u7ba1\u7406\u529f\u80fd\u3002\u547d\u540d\u7a7a\u95f4\u5bf9\u5e94 Elasticsearch \u4e2d\u5404\u79cd\u53ef\u7ba1\u7406\u7684 endpoint\u3002\u4e0b\u9762\u662f\u5168\u90e8\u7684\u547d\u540d\u7a7a\u95f4\uff1a \u547d\u540d\u7a7a\u95f4 \u529f\u80fd indices() \u7d22\u5f15\u6570\u636e\u7edf\u8ba1\u548c\u663e\u793a\u7d22\u5f15\u4fe1\u606f nodes() \u8282\u70b9\u6570\u636e\u7edf\u8ba1\u548c\u663e\u793a\u8282\u70b9\u4fe1\u606f cluster() \u96c6\u7fa4\u6570\u636e\u7edf\u8ba1\u548c\u663e\u793a\u96c6\u7fa4\u4fe1\u606f snapshot() \u5bf9\u96c6\u7fa4\u548c\u7d22\u5f15\u8fdb\u884c\u62cd\u6444\u5feb\u7167\u6216\u6062\u590d\u6570\u636e cat() \u6267\u884cCat API\u547d\u4ee4\uff08\u901a\u5e38\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528\uff09 \u4e00\u4e9b\u65b9\u6cd5\u5728\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u4e0b\u5747\u53ef\u4f7f\u7528\u3002\u867d\u7136\u8fd4\u56de\u7684\u662f\u540c\u6837\u7684\u4fe1\u606f\u4f46\u662f\u5374\u5c5e\u4e8e\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587\u73af\u5883\u3002\u60f3\u77e5\u9053\u547d\u540d\u7a7a\u95f4\u5982\u4f55\u8fd0\u884c\uff0c\u8bf7\u770b _stats \u7684\u8f93\u51fa\u4fe1\u606f\uff1a <?php $client = ClientBuilder :: create () -> build (); // Index Stats // Corresponds to curl -XGET localhost:9200/_stats $response = $client -> indices () -> stats (); // Node Stats // Corresponds to curl -XGET localhost:9200/_nodes/stats $response = $client -> nodes () -> stats (); // Cluster Stats // Corresponds to curl -XGET localhost:9200/_cluster/stats $response = $client -> cluster () -> stats (); \u4e0a\u9762\u5c55\u793a\u4e86\u5728\u4e09\u4e2a\u4e0d\u540c\u547d\u540d\u7a7a\u95f4\u4e0b\u90fd\u8c03\u7528\u4e86 stats() \u65b9\u6cd5\u3002\u6709\u65f6\u8fd9\u4e9b\u65b9\u6cd5\u9700\u8981\u53c2\u6570\uff0c\u8fd9\u4e9b\u53c2\u6570\u7684\u5199\u6cd5\u8ddf\u5ba2\u6237\u7aef\u4e2d\u5176\u4ed6\u65b9\u6cd5\u7684\u53c2\u6570\u5199\u6cd5\u76f8\u540c\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf7\u6c42\u4e00\u4e2a\u7d22\u5f15\u6216\u591a\u4e2a\u7d22\u5f15\u7684\u7edf\u8ba1\u4fe1\u606f\uff1a <?php $client = ClientBuilder :: create () -> build (); // Corresponds to curl -XGET localhost:9200/my_index/_stats $params [ 'index' ] = 'my_index' ; $response = $client -> indices () -> stats ( $params ); // Corresponds to curl -XGET localhost:9200/my_index1,my_index2/_stats $params [ 'index' ] = array ( 'my_index1' , 'my_index2' ); $response = $client -> indices () -> stats ( $params ); \u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\u662f\u5728\u4e00\u4e2a\u73b0\u6709\u7d22\u5f15\u4e2d\u6dfb\u52a0\u522b\u540d\uff1a <?php $params [ 'body' ] = array ( 'actions' => array ( array ( 'add' => array ( 'index' => 'myindex' , 'alias' => 'myalias' ) ) ) ); $client -> indices () -> updateAliases ( $params ); \u6ce8\u610f\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\u4e24\u4e2a stats \u7684\u8c03\u7528\u548c updateAlias \u7684\u8c03\u7528\u662f\u63a5\u6536\u4e0d\u540c\u683c\u5f0f\u7684\u53c2\u6570\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u7684\u53c2\u6570\u683c\u5f0f\u7531\u76f8\u5e94\u7684 API \u9700\u6c42\u6765\u51b3\u5b9a\u3002 stats API\u53ea\u9700\u8981\u4e00\u4e2a index \u540d\uff0c\u800c updateAlias \u5219\u9700\u8981\u4e00\u4e2a body\uff0c\u91cc\u9762\u8fd8\u8981\u4e00\u4e2a actions \u53c2\u6570\u3002","title":"\u547d\u540d\u7a7a\u95f4"},{"location":"elasticsearch/elasticsearch-php/namespaces/#_1","text":"\u5ba2\u6237\u7aef\u6709\u8bb8\u591a\u201c\u547d\u540d\u7a7a\u95f4\u201d\uff0c\u901a\u5e38\u662f\u4e00\u4e9b\u516c\u5f00\u7684\u53ef\u7ba1\u7406\u529f\u80fd\u3002\u547d\u540d\u7a7a\u95f4\u5bf9\u5e94 Elasticsearch \u4e2d\u5404\u79cd\u53ef\u7ba1\u7406\u7684 endpoint\u3002\u4e0b\u9762\u662f\u5168\u90e8\u7684\u547d\u540d\u7a7a\u95f4\uff1a \u547d\u540d\u7a7a\u95f4 \u529f\u80fd indices() \u7d22\u5f15\u6570\u636e\u7edf\u8ba1\u548c\u663e\u793a\u7d22\u5f15\u4fe1\u606f nodes() \u8282\u70b9\u6570\u636e\u7edf\u8ba1\u548c\u663e\u793a\u8282\u70b9\u4fe1\u606f cluster() \u96c6\u7fa4\u6570\u636e\u7edf\u8ba1\u548c\u663e\u793a\u96c6\u7fa4\u4fe1\u606f snapshot() \u5bf9\u96c6\u7fa4\u548c\u7d22\u5f15\u8fdb\u884c\u62cd\u6444\u5feb\u7167\u6216\u6062\u590d\u6570\u636e cat() \u6267\u884cCat API\u547d\u4ee4\uff08\u901a\u5e38\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528\uff09 \u4e00\u4e9b\u65b9\u6cd5\u5728\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u4e0b\u5747\u53ef\u4f7f\u7528\u3002\u867d\u7136\u8fd4\u56de\u7684\u662f\u540c\u6837\u7684\u4fe1\u606f\u4f46\u662f\u5374\u5c5e\u4e8e\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587\u73af\u5883\u3002\u60f3\u77e5\u9053\u547d\u540d\u7a7a\u95f4\u5982\u4f55\u8fd0\u884c\uff0c\u8bf7\u770b _stats \u7684\u8f93\u51fa\u4fe1\u606f\uff1a <?php $client = ClientBuilder :: create () -> build (); // Index Stats // Corresponds to curl -XGET localhost:9200/_stats $response = $client -> indices () -> stats (); // Node Stats // Corresponds to curl -XGET localhost:9200/_nodes/stats $response = $client -> nodes () -> stats (); // Cluster Stats // Corresponds to curl -XGET localhost:9200/_cluster/stats $response = $client -> cluster () -> stats (); \u4e0a\u9762\u5c55\u793a\u4e86\u5728\u4e09\u4e2a\u4e0d\u540c\u547d\u540d\u7a7a\u95f4\u4e0b\u90fd\u8c03\u7528\u4e86 stats() \u65b9\u6cd5\u3002\u6709\u65f6\u8fd9\u4e9b\u65b9\u6cd5\u9700\u8981\u53c2\u6570\uff0c\u8fd9\u4e9b\u53c2\u6570\u7684\u5199\u6cd5\u8ddf\u5ba2\u6237\u7aef\u4e2d\u5176\u4ed6\u65b9\u6cd5\u7684\u53c2\u6570\u5199\u6cd5\u76f8\u540c\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf7\u6c42\u4e00\u4e2a\u7d22\u5f15\u6216\u591a\u4e2a\u7d22\u5f15\u7684\u7edf\u8ba1\u4fe1\u606f\uff1a <?php $client = ClientBuilder :: create () -> build (); // Corresponds to curl -XGET localhost:9200/my_index/_stats $params [ 'index' ] = 'my_index' ; $response = $client -> indices () -> stats ( $params ); // Corresponds to curl -XGET localhost:9200/my_index1,my_index2/_stats $params [ 'index' ] = array ( 'my_index1' , 'my_index2' ); $response = $client -> indices () -> stats ( $params ); \u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\u662f\u5728\u4e00\u4e2a\u73b0\u6709\u7d22\u5f15\u4e2d\u6dfb\u52a0\u522b\u540d\uff1a <?php $params [ 'body' ] = array ( 'actions' => array ( array ( 'add' => array ( 'index' => 'myindex' , 'alias' => 'myalias' ) ) ) ); $client -> indices () -> updateAliases ( $params ); \u6ce8\u610f\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\u4e24\u4e2a stats \u7684\u8c03\u7528\u548c updateAlias \u7684\u8c03\u7528\u662f\u63a5\u6536\u4e0d\u540c\u683c\u5f0f\u7684\u53c2\u6570\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u7684\u53c2\u6570\u683c\u5f0f\u7531\u76f8\u5e94\u7684 API \u9700\u6c42\u6765\u51b3\u5b9a\u3002 stats API\u53ea\u9700\u8981\u4e00\u4e2a index \u540d\uff0c\u800c updateAlias \u5219\u9700\u8981\u4e00\u4e2a body\uff0c\u91cc\u9762\u8fd8\u8981\u4e00\u4e2a actions \u53c2\u6570\u3002","title":"\u547d\u540d\u7a7a\u95f4"},{"location":"elasticsearch/elasticsearch-php/overview/","text":"\u6982\u8ff0 # \u8f6c\u8f7d\u8bf4\u660e \u5185\u5bb9\u6765\u6e90\uff1a\u300a \u5b98\u65b9 Elasticsearch-PHP \u300b \u8fd9\u662f Elasticsearch \u5b98\u65b9\u7684 PHP \u5ba2\u6237\u7aef\u3002\u6211\u4eec\u628a Elasticsearch-PHP \u8bbe\u8ba1\u6210\u4f4e\u7ea7\u5ba2\u6237\u7aef\uff08 \u4f4e\u7ea7\u8bbe\u8ba1\u6a21\u5f0f \uff09\uff0c\u4f7f\u7528\u65f6\u4e0d\u4f1a\u504f\u79bb REST API \u7684\u7528\u6cd5\u3002 \u5ba2\u6237\u7aef\u6240\u6709\u65b9\u6cd5\u51e0\u4e4e\u90fd\u4e0e REST API \u5bf9\u5e94\uff0c\u800c\u4e14\u4e5f\u4e0e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u7684\u5ba2\u6237\u7aef\uff08\u5982 ruby, python \u7b49\uff09\u65b9\u6cd5\u7ed3\u6784\u76f8\u4f3c\u3002\u6211\u4eec\u5e0c\u671b\u8fd9\u79cd\u5bf9\u5e94\u65b9\u5f0f\u53ef\u4ee5\u65b9\u4fbf\u5f00\u53d1\u8005\u66f4\u52a0\u5bb9\u6613\u4e0a\u624b\u5ba2\u6237\u7aef\uff0c\u4e14\u4ee5\u6700\u5c0f\u7684\u4ee3\u4ef7\u5feb\u901f\u4ece\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u8f6c\u6362\u5230\u53e6\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u3002 \u672c\u5ba2\u6237\u7aef\u8bbe\u8ba1\u5f97\u5f88\u201c\u7075\u6d3b\u201d\u3002\u867d\u7136\u6709\u4e00\u4e9b\u901a\u7528\u7684\u7ec6\u8282\u6dfb\u52a0\u8fdb\u4e86\u5ba2\u6237\u7aef\uff08\u96c6\u7fa4\u72b6\u6001\u55c5\u63a2\uff0c\u8f6e\u8be2\u8c03\u5ea6\u8bf7\u6c42\u7b49\uff09\uff0c\u4f46\u603b\u7684\u6765\u8bf4\u5b83\u662f\u5341\u5206\u57fa\u7840\u7684\u3002\u8fd9\u4e5f\u662f\u6709\u610f\u8fd9\u6837\u8bbe\u8ba1\u3002\u6211\u4eec\u53ea\u662f\u8bbe\u8ba1\u4e86\u57fa\u7840\u65b9\u6cd5\uff0c\u66f4\u591a\u7684\u590d\u6742\u7c7b\u5e93\u53ef\u4ee5\u5728\u6b64\u884d\u751f\u51fa\u6765\u3002 \u9e23\u8c22 # \u611f\u8c22 @Mosongxing \u8d21\u732e\u672c\u624b\u518c\u7684\u4e2d\u6587\u7ffb\u8bd1\u3002","title":"\u6982\u8ff0"},{"location":"elasticsearch/elasticsearch-php/overview/#_1","text":"\u8f6c\u8f7d\u8bf4\u660e \u5185\u5bb9\u6765\u6e90\uff1a\u300a \u5b98\u65b9 Elasticsearch-PHP \u300b \u8fd9\u662f Elasticsearch \u5b98\u65b9\u7684 PHP \u5ba2\u6237\u7aef\u3002\u6211\u4eec\u628a Elasticsearch-PHP \u8bbe\u8ba1\u6210\u4f4e\u7ea7\u5ba2\u6237\u7aef\uff08 \u4f4e\u7ea7\u8bbe\u8ba1\u6a21\u5f0f \uff09\uff0c\u4f7f\u7528\u65f6\u4e0d\u4f1a\u504f\u79bb REST API \u7684\u7528\u6cd5\u3002 \u5ba2\u6237\u7aef\u6240\u6709\u65b9\u6cd5\u51e0\u4e4e\u90fd\u4e0e REST API \u5bf9\u5e94\uff0c\u800c\u4e14\u4e5f\u4e0e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u7684\u5ba2\u6237\u7aef\uff08\u5982 ruby, python \u7b49\uff09\u65b9\u6cd5\u7ed3\u6784\u76f8\u4f3c\u3002\u6211\u4eec\u5e0c\u671b\u8fd9\u79cd\u5bf9\u5e94\u65b9\u5f0f\u53ef\u4ee5\u65b9\u4fbf\u5f00\u53d1\u8005\u66f4\u52a0\u5bb9\u6613\u4e0a\u624b\u5ba2\u6237\u7aef\uff0c\u4e14\u4ee5\u6700\u5c0f\u7684\u4ee3\u4ef7\u5feb\u901f\u4ece\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u8f6c\u6362\u5230\u53e6\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u3002 \u672c\u5ba2\u6237\u7aef\u8bbe\u8ba1\u5f97\u5f88\u201c\u7075\u6d3b\u201d\u3002\u867d\u7136\u6709\u4e00\u4e9b\u901a\u7528\u7684\u7ec6\u8282\u6dfb\u52a0\u8fdb\u4e86\u5ba2\u6237\u7aef\uff08\u96c6\u7fa4\u72b6\u6001\u55c5\u63a2\uff0c\u8f6e\u8be2\u8c03\u5ea6\u8bf7\u6c42\u7b49\uff09\uff0c\u4f46\u603b\u7684\u6765\u8bf4\u5b83\u662f\u5341\u5206\u57fa\u7840\u7684\u3002\u8fd9\u4e5f\u662f\u6709\u610f\u8fd9\u6837\u8bbe\u8ba1\u3002\u6211\u4eec\u53ea\u662f\u8bbe\u8ba1\u4e86\u57fa\u7840\u65b9\u6cd5\uff0c\u66f4\u591a\u7684\u590d\u6742\u7c7b\u5e93\u53ef\u4ee5\u5728\u6b64\u884d\u751f\u51fa\u6765\u3002","title":"\u6982\u8ff0"},{"location":"elasticsearch/elasticsearch-php/overview/#_2","text":"\u611f\u8c22 @Mosongxing \u8d21\u732e\u672c\u624b\u518c\u7684\u4e2d\u6587\u7ffb\u8bd1\u3002","title":"\u9e23\u8c22"},{"location":"elasticsearch/elasticsearch-php/per_request_configuration/","text":"\u6309\u8bf7\u6c42\u914d\u7f6e # \u9664\u4e86\u914d\u7f6e\u8fde\u63a5\u5c42\u548c\u5ba2\u6237\u7aef\u5c42\uff0c\u8fd8\u53ef\u4ee5\u57fa\u4e8e\u6bcf\u6b21\u8bf7\u6c42\u6765\u8fdb\u884c\u76f8\u5173\u8bbe\u7f6e\u3002\u5177\u4f53\u6765\u8bf4\u662f\u5728\u8bf7\u6c42\u4f53\u4e2d\u6307\u5b9a\u76f8\u5173\u53c2\u6570\u6570\u7ec4\u3002 \u5ffd\u7565\u5f02\u5e38 # Elasticsearch-PHP \u7684\u7c7b\u5e93\u662f\u4f1a\u5bf9\u666e\u901a\u7684\u95ee\u9898\u629b\u51fa\u5f02\u5e38\u7684\u3002\u8fd9\u4e9b\u5f02\u5e38\u8ddf Elasticsearch \u8fd4\u56de\u7684 HTTP \u54cd\u5e94\u7801\u4e00\u4e00\u5bf9\u5e94\u3002\u4f8b\u5982\uff0c\u83b7\u53d6\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u6863\u4f1a\u629b\u51fa MissingDocument404Exception \u3002 \u5f02\u5e38\u5bf9\u4e8e\u5904\u7406\u4e00\u4e9b\u95ee\u9898\uff08\u5982\u627e\u4e0d\u5230\u6587\u6863\u3001\u8bed\u6cd5\u9519\u8bef\u3001\u7248\u672c\u51b2\u7a81\u7b49\uff09\u5341\u5206\u6709\u7528\u3002\u4f46\u662f\u6709\u65f6\u5019\u4f60\u53ea\u662f\u60f3\u8981\u5904\u7406\u8fd4\u56de\u7684\u6570\u636e\u800c\u4e0d\u60f3\u6355\u83b7\u5f02\u5e38\u3002 \u5982\u679c\u4f60\u60f3\u5ffd\u7565\u5f02\u5e38\uff0c\u4f60\u53ef\u4ee5\u914d\u7f6e ignore \u53c2\u6570\u3002ignore \u53c2\u6570\u8981\u4f5c\u4e3a client \u7684\u53c2\u6570\u914d\u7f6e\u5728\u8bf7\u6c42\u4f53\u4e2d\u3002\u4f8b\u5982\u4e0b\u9762\u7684\u793a\u4f8b\u4f1a\u5ffd\u7565 MissingDocument404Exception \uff0c\u8fd4\u56de\u7684\u662f Elasticsearch \u63d0\u4f9b\u7684 JSON \u6570\u636e\u3002 <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'test_missing' , 'type' => 'test' , 'id' => 1 , 'client' => [ 'ignore' => 404 ] < 1 > ]; echo $client -> get ( $params ); > { \"_index\" : \"test_missing\" , \"_type\" : \"test\" , \"_id\" : \"1\" , \"found\" : false } <1> \u8fd9\u91cc\u4f1a\u5ffd\u7565 404 \u5f02\u5e38 \u4f60\u53ef\u4ee5\u901a\u8fc7\u6570\u7ec4\u7684\u65b9\u5f0f\u6307\u5b9a\u5ffd\u7565\u591a\u4e2a HTTP \u72b6\u6001\u7801\uff1a <?php $params = [ 'index' => 'test_missing' , 'type' => 'test' , 'client' => [ 'ignore' => [ 400 , 404 ] ] < 1 > ]; echo $client -> get ( $params ); > No handler found for uri [ / test_missing / test / ] and method [ GET ] <1> ignore \u53c2\u6570\u4e5f\u63a5\u6536\u6570\u7ec4\u3002\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c BadRequest400Exception \u548c MissingDocument404Exception \u90fd\u4f1a\u88ab\u5ffd\u7565\u3002 \u6ce8\u610f\uff0c\u8fd4\u56de\u7684\u6570\u636e\u662f\u5b57\u7b26\u4e32\u683c\u5f0f\uff0c\u800c\u4e0d\u662f JSON \u6570\u636e\u3002\u800c\u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\u8fd4\u56de\u7684\u662f JSON \u6570\u636e\uff0c\u5ba2\u6237\u7aef\u4f1a decode \u8be5 JSON \u6570\u636e\u4e3a\u6570\u7ec4\u3002 \u4e00\u65e6\u5ba2\u6237\u7aef\u65e0\u6cd5\u5f97\u77e5\u8fd4\u56de\u7684\u5f02\u5e38\u6570\u636e\u683c\u5f0f\uff0c\u5ba2\u6237\u7aef\u5c31\u4e0d\u4f1a decode \u8fd4\u56de\u7ed3\u679c\u3002 \u81ea\u5b9a\u4e49\u67e5\u8be2\u53c2\u6570 # \u6709\u65f6\u5019\u4f60\u8981\u81ea\u5df1\u63d0\u4f9b\u81ea\u5b9a\u4e49\u53c2\u6570\uff0c\u6bd4\u5982\u4e3a\u7b2c\u4e09\u65b9\u63d2\u4ef6\u6216\u4ee3\u7406\u63d0\u4f9b\u8ba4\u8bc1 token\u3002\u5728 Elasticsearch-php \u7684\u767d\u540d\u5355\u4e2d\u5b58\u50a8\u7740\u6240\u6709\u7684\u67e5\u8be2\u53c2\u6570\uff0c\u8fd9\u662f\u4e3a\u4e86\u9632\u6b62\u4f60\u6307\u5b9a\u4e00\u4e2a\u53c2\u6570\uff0c\u800c Elasticsearch \u5374\u4e0d\u63a5\u6536\u3002 \u5982\u679c\u4f60\u8981\u81ea\u5b9a\u4e49\u53c2\u6570\uff0c\u4f60\u5c31\u8981\u5ffd\u7565\u6389\u8fd9\u79cd\u767d\u540d\u5355\u673a\u5236\u3002\u4e3a\u4e86\u8fbe\u5230\u8fd9\u79cd\u6548\u679c\uff0c\u8bf7\u589e\u52a0 custom \u53c2\u6570\uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 1 , 'parent' => 'abc' , // white-listed Elasticsearch parameter 'client' => [ 'custom' => [ 'customToken' => 'abc' , // user-defined, not white listed, not checked 'otherToken' => 123 ] ] ]; $exists = $client -> exists ( $params ); \u8fd4\u56de\u8be6\u7ec6\u8f93\u51fa # \u5ba2\u6237\u7aef\u9ed8\u8ba4\u53ea\u8fd4\u56de\u54cd\u5e94\u4f53\u6570\u636e\u3002\u5982\u679c\u4f60\u9700\u8981\u66f4\u591a\u4fe1\u606f\uff08\u5982\u5934\u4fe1\u606f\u3001\u76f8\u5e94\u72b6\u6001\u7801\u7b49\uff09\uff0c\u4f60\u53ef\u4ee5\u8ba9\u5ba2\u6237\u7aef\u8fd4\u56de\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002\u901a\u8fc7 verbose \u53c2\u6570\u53ef\u4ee5\u5f00\u542f\u8fd9\u4e2a\u529f\u80fd\u3002 \u6ca1\u6709\u8fd4\u56de\u8be6\u7ec6\u4fe1\u606f\uff0c\u4f60\u770b\u5230\u7684\u8fd4\u56de\u662f\u8fd9\u6837\u7684\uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 1 ]; $response = $client -> get ( $params ); print_r ( $response ); Array ( [ _index ] => test [ _type ] => test [ _id ] => 1 [ _version ] => 1 [ found ] => 1 [ _source ] => Array ( [ field ] => value ) ) \u5982\u679c\u52a0\u4e0a\u53c2\u6570\uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 1 , 'client' => [ 'verbose' => true ] ]; $response = $client -> get ( $params ); print_r ( $response ); Array ( [ transfer_stats ] => Array ( [ url ] => http :// 127.0 . 0.1 : 9200 / test / test / 1 [ content_type ] => application / json ; charset = UTF - 8 [ http_code ] => 200 [ header_size ] => 86 [ request_size ] => 51 [ filetime ] => - 1 [ ssl_verify_result ] => 0 [ redirect_count ] => 0 [ total_time ] => 0.00289 [ namelookup_time ] => 9.7E-5 [ connect_time ] => 0.000265 [ pretransfer_time ] => 0.000322 [ size_upload ] => 0 [ size_download ] => 96 [ speed_download ] => 33217 [ speed_upload ] => 0 [ download_content_length ] => 96 [ upload_content_length ] => - 1 [ starttransfer_time ] => 0.002796 [ redirect_time ] => 0 [ redirect_url ] => [ primary_ip ] => 127.0 . 0.1 [ certinfo ] => Array ( ) [ primary_port ] => 9200 [ local_ip ] => 127.0 . 0.1 [ local_port ] => 62971 ) [ curl ] => Array ( [ error ] => [ errno ] => 0 ) [ effective_url ] => http :// 127.0 . 0.1 : 9200 / test / test / 1 [ headers ] => Array ( [ Content - Type ] => Array ( [ 0 ] => application / json ; charset = UTF - 8 ) [ Content - Length ] => Array ( [ 0 ] => 96 ) ) [ status ] => 200 [ reason ] => OK [ body ] => Array ( [ _index ] => test [ _type ] => test [ _id ] => 1 [ _version ] => 1 [ found ] => 1 [ _source ] => Array ( [ field ] => value ) ) ) Curl \u8d85\u65f6\u8bbe\u7f6e # \u901a\u8fc7 timeout \u548c connect_timeout \u53c2\u6570\u53ef\u4ee5\u914d\u7f6e\u6bcf\u4e2a\u8bf7\u6c42\u7684 Curl \u8d85\u65f6\u65f6\u95f4\u3002\u8fd9\u4e2a\u914d\u7f6e\u4e3b\u8981\u662f\u63a7\u5236\u5ba2\u6237\u7aef\u7684\u8d85\u65f6\u65f6\u95f4\u3002 connect_timeout \u53c2\u6570\u63a7\u5236\u5728\u8fde\u63a5\u9636\u6bb5\u5b8c\u6210\u524d\uff0ccurl \u7684\u7b49\u5f85\u65f6\u95f4\u3002\u800c timeout \u53c2\u6570\u5219\u63a7\u5236\u6574\u4e2a\u8bf7\u6c42\u5b8c\u6210\u524d\uff0c\u6700\u591a\u7b49\u5f85\u591a\u957f\u65f6\u95f4\u3002 \u5982\u679c\u8d85\u8fc7\u8d85\u65f6\u65f6\u95f4\uff0ccurl \u4f1a\u5173\u95ed\u8fde\u63a5\u5e76\u8fd4\u56de\u4e00\u4e2a\u81f4\u547d\u9519\u8bef\u3002\u4e24\u4e2a\u53c2\u6570\u90fd\u8981\u7528 \u79d2 \u4f5c\u4e3a\u53c2\u6570\u3002 \u6ce8\u610f\uff1a\u5ba2\u6237\u7aef\u8d85\u65f6\u5e76 \u4e0d \u610f\u5473\u7740 Elasticsearch \u4e2d\u6b62\u8bf7\u6c42\u3002Elasticsearch \u4f1a\u7ee7\u7eed\u6267\u884c\u8bf7\u6c42\u76f4\u5230\u8bf7\u6c42\u5b8c\u6210\u3002\u5728\u6162\u67e5\u8be2\u6216\u662f bulk \u8bf7\u6c42\u4e0b\uff0c\u64cd\u4f5c\u4f1a\u5728\u540e\u53f0\u7ee7\u7eed\u6267\u884c\uff0c\u5bf9\u5ba2\u6237\u7aef\u6765\u8bf4\u8fd9\u4e9b\u52a8\u4f5c\u662f\u9690\u853d\u7684\u3002\u5982\u679c\u5ba2\u6237\u7aef\u5728\u8d85\u65f6\u540e\u7acb\u5373\u65ad\u5f00\u8fde\u63a5\uff0c\u7136\u540e\u53c8\u7acb\u523b\u53d1\u9001\u53e6\u5916\u4e00\u4e2a\u8bf7\u6c42\u3002\u7531\u4e8e\u5ba2\u6237\u7aef\u6ca1\u6709\u5904\u7406\u670d\u52a1\u7aef\u56de\u538b\uff08\u8bd1\u8005\u6ce8\uff1a\u8fd9\u91cc\u56fd\u5185\u7ffb\u8bd1\u6210\u80cc\u538b\uff0c\u4f46\u662fhttps:// www.zhihu.com/question/49618581?from=profile_question_card[\u77e5\u4e4e]\u6709\u6587\u7ae0\u6307\u51fa\u8fd9\u4e2a\u7ffb\u8bd1\u4e0d\u591f\u7cbe\u51c6 \uff0c\u4f1a\u9020\u6210\u7a0b\u5e8f\u5458\u96be\u4ee5\u7406\u89e3\uff0c\u6240\u4ee5\u8fd9\u91cc\u7ffb\u8bd1\u6210\u56de\u538b\uff09\u7684\u673a\u5236\uff0c\u8fd9\u6709\u53ef\u80fd\u4f1a\u9020\u6210\u670d\u52a1\u7aef\u8fc7\u8f7d\u3002\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f60\u4f1a\u53d1\u73b0\u7ebf\u7a0b\u6c60\u961f\u5217\u4f1a\u6162\u6162\u53d8\u5927\uff0c\u5f53\u961f\u5217\u8d85\u51fa\u8d1f\u8377\uff0cElasticsearch \u4f1a\u53d1\u9001 EsRejectedExecutionException \u7684\u5f02\u5e38\u3002 <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 1 , 'client' => [ 'timeout' => 10 , // ten second timeout 'connect_timeout' => 10 ] ]; $response = $client -> get ( $params ); \u5f00\u542f Future \u6a21\u5f0f # \u5ba2\u6237\u7aef\u652f\u6301\u5f02\u6b65\u65b9\u5f0f\u6279\u91cf\u53d1\u9001\u8bf7\u6c42\u3002\u901a\u8fc7 client \u9009\u9879\u7684 future \u53c2\u6570\u53ef\u4ee5\u5f00\u542f\uff08HTTP handler \u8981\u652f\u6301\u5f02\u6b65\u6a21\u5f0f\uff09\uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 1 , 'client' => [ 'future' => 'lazy' ] ]; $future = $client -> get ( $params ); $results = $future -> wait (); // resolve the future Future \u6a21\u5f0f\u6709\u4e24\u4e2a\u53c2\u6570\u53ef\u9009\uff1a true \u6216 lazy \u3002\u5173\u4e8e\u5f02\u6b65\u6267\u884c\u65b9\u6cd5\u4ee5\u53ca\u5982\u4f55\u5904\u7406\u8fd4\u56de\u7ed3\u679c\u7684\u8be6\u60c5\uff0c\u8bf7\u5230 Future \u6a21\u5f0f \u4e2d\u67e5\u770b\u3002 SSL \u52a0\u5bc6 # \u5728\u521b\u5efa\u5ba2\u6237\u7aef\u65f6\uff0c\u4e00\u822c\u9700\u8981\u6307\u5b9a SSL \u914d\u7f6e\uff0c\u56e0\u4e3a\u901a\u5e38\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u9700\u8981\u52a0\u5bc6\uff08\u67e5\u8be2 \u5b89\u5168 \u4e00\u8282\u83b7\u53d6\u66f4\u591a\u8be6\u60c5\uff09\u3002\u7136\u800c\uff0c\u5728\u6bcf\u4e2a\u8bf7\u6c42\u4e2d\u914d\u7f6e SSL \u52a0\u5bc6\u4e5f\u662f\u6709\u53ef\u80fd\u7684\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u9700\u8981\u5728\u67d0\u4e2a\u7279\u5b9a\u7684\u8bf7\u6c42\u4e2d\u4f7f\u7528\u81ea\u7b7e\u540d\u8bc1\u4e66\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728 client \u9009\u9879\u4e2d\u914d\u7f6e verify \u53c2\u6570\uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 1 , 'client' => [ 'verify' => 'path/to/cacert.pem' //Use a self-signed certificate ] ]; $result = $client -> get ( $params );","title":"\u6309\u8bf7\u6c42\u914d\u7f6e"},{"location":"elasticsearch/elasticsearch-php/per_request_configuration/#_1","text":"\u9664\u4e86\u914d\u7f6e\u8fde\u63a5\u5c42\u548c\u5ba2\u6237\u7aef\u5c42\uff0c\u8fd8\u53ef\u4ee5\u57fa\u4e8e\u6bcf\u6b21\u8bf7\u6c42\u6765\u8fdb\u884c\u76f8\u5173\u8bbe\u7f6e\u3002\u5177\u4f53\u6765\u8bf4\u662f\u5728\u8bf7\u6c42\u4f53\u4e2d\u6307\u5b9a\u76f8\u5173\u53c2\u6570\u6570\u7ec4\u3002","title":"\u6309\u8bf7\u6c42\u914d\u7f6e"},{"location":"elasticsearch/elasticsearch-php/per_request_configuration/#_2","text":"Elasticsearch-PHP \u7684\u7c7b\u5e93\u662f\u4f1a\u5bf9\u666e\u901a\u7684\u95ee\u9898\u629b\u51fa\u5f02\u5e38\u7684\u3002\u8fd9\u4e9b\u5f02\u5e38\u8ddf Elasticsearch \u8fd4\u56de\u7684 HTTP \u54cd\u5e94\u7801\u4e00\u4e00\u5bf9\u5e94\u3002\u4f8b\u5982\uff0c\u83b7\u53d6\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u6863\u4f1a\u629b\u51fa MissingDocument404Exception \u3002 \u5f02\u5e38\u5bf9\u4e8e\u5904\u7406\u4e00\u4e9b\u95ee\u9898\uff08\u5982\u627e\u4e0d\u5230\u6587\u6863\u3001\u8bed\u6cd5\u9519\u8bef\u3001\u7248\u672c\u51b2\u7a81\u7b49\uff09\u5341\u5206\u6709\u7528\u3002\u4f46\u662f\u6709\u65f6\u5019\u4f60\u53ea\u662f\u60f3\u8981\u5904\u7406\u8fd4\u56de\u7684\u6570\u636e\u800c\u4e0d\u60f3\u6355\u83b7\u5f02\u5e38\u3002 \u5982\u679c\u4f60\u60f3\u5ffd\u7565\u5f02\u5e38\uff0c\u4f60\u53ef\u4ee5\u914d\u7f6e ignore \u53c2\u6570\u3002ignore \u53c2\u6570\u8981\u4f5c\u4e3a client \u7684\u53c2\u6570\u914d\u7f6e\u5728\u8bf7\u6c42\u4f53\u4e2d\u3002\u4f8b\u5982\u4e0b\u9762\u7684\u793a\u4f8b\u4f1a\u5ffd\u7565 MissingDocument404Exception \uff0c\u8fd4\u56de\u7684\u662f Elasticsearch \u63d0\u4f9b\u7684 JSON \u6570\u636e\u3002 <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'test_missing' , 'type' => 'test' , 'id' => 1 , 'client' => [ 'ignore' => 404 ] < 1 > ]; echo $client -> get ( $params ); > { \"_index\" : \"test_missing\" , \"_type\" : \"test\" , \"_id\" : \"1\" , \"found\" : false } <1> \u8fd9\u91cc\u4f1a\u5ffd\u7565 404 \u5f02\u5e38 \u4f60\u53ef\u4ee5\u901a\u8fc7\u6570\u7ec4\u7684\u65b9\u5f0f\u6307\u5b9a\u5ffd\u7565\u591a\u4e2a HTTP \u72b6\u6001\u7801\uff1a <?php $params = [ 'index' => 'test_missing' , 'type' => 'test' , 'client' => [ 'ignore' => [ 400 , 404 ] ] < 1 > ]; echo $client -> get ( $params ); > No handler found for uri [ / test_missing / test / ] and method [ GET ] <1> ignore \u53c2\u6570\u4e5f\u63a5\u6536\u6570\u7ec4\u3002\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c BadRequest400Exception \u548c MissingDocument404Exception \u90fd\u4f1a\u88ab\u5ffd\u7565\u3002 \u6ce8\u610f\uff0c\u8fd4\u56de\u7684\u6570\u636e\u662f\u5b57\u7b26\u4e32\u683c\u5f0f\uff0c\u800c\u4e0d\u662f JSON \u6570\u636e\u3002\u800c\u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\u8fd4\u56de\u7684\u662f JSON \u6570\u636e\uff0c\u5ba2\u6237\u7aef\u4f1a decode \u8be5 JSON \u6570\u636e\u4e3a\u6570\u7ec4\u3002 \u4e00\u65e6\u5ba2\u6237\u7aef\u65e0\u6cd5\u5f97\u77e5\u8fd4\u56de\u7684\u5f02\u5e38\u6570\u636e\u683c\u5f0f\uff0c\u5ba2\u6237\u7aef\u5c31\u4e0d\u4f1a decode \u8fd4\u56de\u7ed3\u679c\u3002","title":"\u5ffd\u7565\u5f02\u5e38"},{"location":"elasticsearch/elasticsearch-php/per_request_configuration/#_3","text":"\u6709\u65f6\u5019\u4f60\u8981\u81ea\u5df1\u63d0\u4f9b\u81ea\u5b9a\u4e49\u53c2\u6570\uff0c\u6bd4\u5982\u4e3a\u7b2c\u4e09\u65b9\u63d2\u4ef6\u6216\u4ee3\u7406\u63d0\u4f9b\u8ba4\u8bc1 token\u3002\u5728 Elasticsearch-php \u7684\u767d\u540d\u5355\u4e2d\u5b58\u50a8\u7740\u6240\u6709\u7684\u67e5\u8be2\u53c2\u6570\uff0c\u8fd9\u662f\u4e3a\u4e86\u9632\u6b62\u4f60\u6307\u5b9a\u4e00\u4e2a\u53c2\u6570\uff0c\u800c Elasticsearch \u5374\u4e0d\u63a5\u6536\u3002 \u5982\u679c\u4f60\u8981\u81ea\u5b9a\u4e49\u53c2\u6570\uff0c\u4f60\u5c31\u8981\u5ffd\u7565\u6389\u8fd9\u79cd\u767d\u540d\u5355\u673a\u5236\u3002\u4e3a\u4e86\u8fbe\u5230\u8fd9\u79cd\u6548\u679c\uff0c\u8bf7\u589e\u52a0 custom \u53c2\u6570\uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 1 , 'parent' => 'abc' , // white-listed Elasticsearch parameter 'client' => [ 'custom' => [ 'customToken' => 'abc' , // user-defined, not white listed, not checked 'otherToken' => 123 ] ] ]; $exists = $client -> exists ( $params );","title":"\u81ea\u5b9a\u4e49\u67e5\u8be2\u53c2\u6570"},{"location":"elasticsearch/elasticsearch-php/per_request_configuration/#_4","text":"\u5ba2\u6237\u7aef\u9ed8\u8ba4\u53ea\u8fd4\u56de\u54cd\u5e94\u4f53\u6570\u636e\u3002\u5982\u679c\u4f60\u9700\u8981\u66f4\u591a\u4fe1\u606f\uff08\u5982\u5934\u4fe1\u606f\u3001\u76f8\u5e94\u72b6\u6001\u7801\u7b49\uff09\uff0c\u4f60\u53ef\u4ee5\u8ba9\u5ba2\u6237\u7aef\u8fd4\u56de\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002\u901a\u8fc7 verbose \u53c2\u6570\u53ef\u4ee5\u5f00\u542f\u8fd9\u4e2a\u529f\u80fd\u3002 \u6ca1\u6709\u8fd4\u56de\u8be6\u7ec6\u4fe1\u606f\uff0c\u4f60\u770b\u5230\u7684\u8fd4\u56de\u662f\u8fd9\u6837\u7684\uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 1 ]; $response = $client -> get ( $params ); print_r ( $response ); Array ( [ _index ] => test [ _type ] => test [ _id ] => 1 [ _version ] => 1 [ found ] => 1 [ _source ] => Array ( [ field ] => value ) ) \u5982\u679c\u52a0\u4e0a\u53c2\u6570\uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 1 , 'client' => [ 'verbose' => true ] ]; $response = $client -> get ( $params ); print_r ( $response ); Array ( [ transfer_stats ] => Array ( [ url ] => http :// 127.0 . 0.1 : 9200 / test / test / 1 [ content_type ] => application / json ; charset = UTF - 8 [ http_code ] => 200 [ header_size ] => 86 [ request_size ] => 51 [ filetime ] => - 1 [ ssl_verify_result ] => 0 [ redirect_count ] => 0 [ total_time ] => 0.00289 [ namelookup_time ] => 9.7E-5 [ connect_time ] => 0.000265 [ pretransfer_time ] => 0.000322 [ size_upload ] => 0 [ size_download ] => 96 [ speed_download ] => 33217 [ speed_upload ] => 0 [ download_content_length ] => 96 [ upload_content_length ] => - 1 [ starttransfer_time ] => 0.002796 [ redirect_time ] => 0 [ redirect_url ] => [ primary_ip ] => 127.0 . 0.1 [ certinfo ] => Array ( ) [ primary_port ] => 9200 [ local_ip ] => 127.0 . 0.1 [ local_port ] => 62971 ) [ curl ] => Array ( [ error ] => [ errno ] => 0 ) [ effective_url ] => http :// 127.0 . 0.1 : 9200 / test / test / 1 [ headers ] => Array ( [ Content - Type ] => Array ( [ 0 ] => application / json ; charset = UTF - 8 ) [ Content - Length ] => Array ( [ 0 ] => 96 ) ) [ status ] => 200 [ reason ] => OK [ body ] => Array ( [ _index ] => test [ _type ] => test [ _id ] => 1 [ _version ] => 1 [ found ] => 1 [ _source ] => Array ( [ field ] => value ) ) )","title":"\u8fd4\u56de\u8be6\u7ec6\u8f93\u51fa"},{"location":"elasticsearch/elasticsearch-php/per_request_configuration/#curl","text":"\u901a\u8fc7 timeout \u548c connect_timeout \u53c2\u6570\u53ef\u4ee5\u914d\u7f6e\u6bcf\u4e2a\u8bf7\u6c42\u7684 Curl \u8d85\u65f6\u65f6\u95f4\u3002\u8fd9\u4e2a\u914d\u7f6e\u4e3b\u8981\u662f\u63a7\u5236\u5ba2\u6237\u7aef\u7684\u8d85\u65f6\u65f6\u95f4\u3002 connect_timeout \u53c2\u6570\u63a7\u5236\u5728\u8fde\u63a5\u9636\u6bb5\u5b8c\u6210\u524d\uff0ccurl \u7684\u7b49\u5f85\u65f6\u95f4\u3002\u800c timeout \u53c2\u6570\u5219\u63a7\u5236\u6574\u4e2a\u8bf7\u6c42\u5b8c\u6210\u524d\uff0c\u6700\u591a\u7b49\u5f85\u591a\u957f\u65f6\u95f4\u3002 \u5982\u679c\u8d85\u8fc7\u8d85\u65f6\u65f6\u95f4\uff0ccurl \u4f1a\u5173\u95ed\u8fde\u63a5\u5e76\u8fd4\u56de\u4e00\u4e2a\u81f4\u547d\u9519\u8bef\u3002\u4e24\u4e2a\u53c2\u6570\u90fd\u8981\u7528 \u79d2 \u4f5c\u4e3a\u53c2\u6570\u3002 \u6ce8\u610f\uff1a\u5ba2\u6237\u7aef\u8d85\u65f6\u5e76 \u4e0d \u610f\u5473\u7740 Elasticsearch \u4e2d\u6b62\u8bf7\u6c42\u3002Elasticsearch \u4f1a\u7ee7\u7eed\u6267\u884c\u8bf7\u6c42\u76f4\u5230\u8bf7\u6c42\u5b8c\u6210\u3002\u5728\u6162\u67e5\u8be2\u6216\u662f bulk \u8bf7\u6c42\u4e0b\uff0c\u64cd\u4f5c\u4f1a\u5728\u540e\u53f0\u7ee7\u7eed\u6267\u884c\uff0c\u5bf9\u5ba2\u6237\u7aef\u6765\u8bf4\u8fd9\u4e9b\u52a8\u4f5c\u662f\u9690\u853d\u7684\u3002\u5982\u679c\u5ba2\u6237\u7aef\u5728\u8d85\u65f6\u540e\u7acb\u5373\u65ad\u5f00\u8fde\u63a5\uff0c\u7136\u540e\u53c8\u7acb\u523b\u53d1\u9001\u53e6\u5916\u4e00\u4e2a\u8bf7\u6c42\u3002\u7531\u4e8e\u5ba2\u6237\u7aef\u6ca1\u6709\u5904\u7406\u670d\u52a1\u7aef\u56de\u538b\uff08\u8bd1\u8005\u6ce8\uff1a\u8fd9\u91cc\u56fd\u5185\u7ffb\u8bd1\u6210\u80cc\u538b\uff0c\u4f46\u662fhttps:// www.zhihu.com/question/49618581?from=profile_question_card[\u77e5\u4e4e]\u6709\u6587\u7ae0\u6307\u51fa\u8fd9\u4e2a\u7ffb\u8bd1\u4e0d\u591f\u7cbe\u51c6 \uff0c\u4f1a\u9020\u6210\u7a0b\u5e8f\u5458\u96be\u4ee5\u7406\u89e3\uff0c\u6240\u4ee5\u8fd9\u91cc\u7ffb\u8bd1\u6210\u56de\u538b\uff09\u7684\u673a\u5236\uff0c\u8fd9\u6709\u53ef\u80fd\u4f1a\u9020\u6210\u670d\u52a1\u7aef\u8fc7\u8f7d\u3002\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f60\u4f1a\u53d1\u73b0\u7ebf\u7a0b\u6c60\u961f\u5217\u4f1a\u6162\u6162\u53d8\u5927\uff0c\u5f53\u961f\u5217\u8d85\u51fa\u8d1f\u8377\uff0cElasticsearch \u4f1a\u53d1\u9001 EsRejectedExecutionException \u7684\u5f02\u5e38\u3002 <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 1 , 'client' => [ 'timeout' => 10 , // ten second timeout 'connect_timeout' => 10 ] ]; $response = $client -> get ( $params );","title":"Curl \u8d85\u65f6\u8bbe\u7f6e"},{"location":"elasticsearch/elasticsearch-php/per_request_configuration/#future","text":"\u5ba2\u6237\u7aef\u652f\u6301\u5f02\u6b65\u65b9\u5f0f\u6279\u91cf\u53d1\u9001\u8bf7\u6c42\u3002\u901a\u8fc7 client \u9009\u9879\u7684 future \u53c2\u6570\u53ef\u4ee5\u5f00\u542f\uff08HTTP handler \u8981\u652f\u6301\u5f02\u6b65\u6a21\u5f0f\uff09\uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 1 , 'client' => [ 'future' => 'lazy' ] ]; $future = $client -> get ( $params ); $results = $future -> wait (); // resolve the future Future \u6a21\u5f0f\u6709\u4e24\u4e2a\u53c2\u6570\u53ef\u9009\uff1a true \u6216 lazy \u3002\u5173\u4e8e\u5f02\u6b65\u6267\u884c\u65b9\u6cd5\u4ee5\u53ca\u5982\u4f55\u5904\u7406\u8fd4\u56de\u7ed3\u679c\u7684\u8be6\u60c5\uff0c\u8bf7\u5230 Future \u6a21\u5f0f \u4e2d\u67e5\u770b\u3002","title":"\u5f00\u542f Future \u6a21\u5f0f"},{"location":"elasticsearch/elasticsearch-php/per_request_configuration/#ssl","text":"\u5728\u521b\u5efa\u5ba2\u6237\u7aef\u65f6\uff0c\u4e00\u822c\u9700\u8981\u6307\u5b9a SSL \u914d\u7f6e\uff0c\u56e0\u4e3a\u901a\u5e38\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u9700\u8981\u52a0\u5bc6\uff08\u67e5\u8be2 \u5b89\u5168 \u4e00\u8282\u83b7\u53d6\u66f4\u591a\u8be6\u60c5\uff09\u3002\u7136\u800c\uff0c\u5728\u6bcf\u4e2a\u8bf7\u6c42\u4e2d\u914d\u7f6e SSL \u52a0\u5bc6\u4e5f\u662f\u6709\u53ef\u80fd\u7684\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u9700\u8981\u5728\u67d0\u4e2a\u7279\u5b9a\u7684\u8bf7\u6c42\u4e2d\u4f7f\u7528\u81ea\u7b7e\u540d\u8bc1\u4e66\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728 client \u9009\u9879\u4e2d\u914d\u7f6e verify \u53c2\u6570\uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ 'index' => 'test' , 'type' => 'test' , 'id' => 1 , 'client' => [ 'verify' => 'path/to/cacert.pem' //Use a self-signed certificate ] ]; $result = $client -> get ( $params );","title":"SSL \u52a0\u5bc6"},{"location":"elasticsearch/elasticsearch-php/php_json_objects/","text":"PHP \u5904\u7406 JSON \u6570\u7ec4\u6216\u5bf9\u8c61 # \u5ba2\u6237\u7aef\u5728\u5173\u4e8e JSON \u6570\u7ec4\u548c JSON \u5bf9\u8c61\u7684\u5904\u7406\u548c\u5b9a\u4e49\u65b9\u9762\u603b\u662f\u4ee4\u4eba\u7591\u60d1\u4e0d\u5df2\u3002\u5c24\u5176\u662f\u7531\u7a7a\u5bf9\u8c61\u548c\u5bf9\u8c61\u6570\u7ec4\u5f15\u8d77\u7684\u95ee\u9898\u3002\u672c\u8282\u4f1a\u5c55\u793a\u4e00\u4e9b Elasticsearch JSON API \u5e38\u89c1\u7684\u6570\u636e\u683c\u5f0f\uff0c\u8fd8\u4f1a\u8bf4\u660e\u5982\u4f55\u4ee5 PHP \u7684\u8bed\u6cd5\u6765\u8868\u8fbe\u8fd9\u4e9b\u6570\u636e\u683c\u5f0f\u3002 \u7a7a\u5bf9\u8c61 # Elasticsearch API \u5728\u51e0\u4e2a\u5730\u65b9\u4f7f\u7528\u4e86\u7a7a\u5bf9\u8c61\uff0c\u8fd9\u4f1a\u5bf9 PHP \u9020\u6210\u5f71\u54cd\u3002\u4e0d\u50cf\u5176\u5b83\u7684\u8bed\u8a00\uff0cPHP \u6ca1\u6709\u4e00\u4e2a\u7b80\u4fbf\u7684\u7b26\u53f7\u6765\u8868\u793a\u7a7a\u5bf9\u8c61\uff0c\u800c\u8bb8\u591a\u5f00\u53d1\u8005\u8fd8\u4e0d\u77e5\u9053\u5982\u4f55\u6307\u5b9a\u4e00\u4e2a\u7a7a\u5bf9\u8c61\u3002 \u8bbe\u60f3\u5728\u67e5\u8be2\u4e2d\u589e\u52a0 Highlight\uff1a { \"query\" : { \"match\" : { \"content\" : \"quick brown fox\" } }, \"highlight\" : { \"fields\" : { \"content\" : {} < 1 > } } } <1> \u8fd9\u4e2a\u7a7a\u5bf9\u8c61\u4fbf\u4f1a\u5f15\u8d77\u95ee\u9898 \u95ee\u9898\u5c31\u5728\u4e8e PHP \u4f1a\u81ea\u52a8\u628a \"content\" : {} \u8f6c\u6362\u6210 \"content\" : [] \uff0c\u5728 Elasticsearch DSL \u4e2d\u8fd9\u6837\u7684\u6570\u636e\u683c\u5f0f\u662f\u975e\u6cd5\u7684\u3002\u6211\u4eec\u9700\u8981\u544a\u8bc9 PHP \u90a3\u4e2a\u7a7a\u5bf9\u8c61\u5c31\u662f\u4e00\u4e2a\u7a7a\u5bf9\u8c61\u800c\u975e\u7a7a\u6570\u7ec4\u3002\u4e3a\u4e86\u5728\u67e5\u8be2\u4e2d\u5b9a\u4e49\u7a7a\u5bf9\u8c61\uff0c\u4f60\u9700\u8981\u8fd9\u6837\u505a\uff1a <?php $params [ 'body' ] = array ( 'query' => array ( 'match' => array ( 'content' => 'quick brown fox' ) ), 'highlight' => array ( 'fields' => array ( 'content' => new \\stdClass () < 1 > ) ) ); $results = $client -> search ( $params ); <1> \u4f7f\u7528 PHP \u7684 stdClass \u5bf9\u8c61\u6765\u4ee3\u8868\u7a7a\u5bf9\u8c61\uff0c\u73b0\u5728\u5c31\u53ef\u4ee5\u89e3\u6790\u4e3a\u6b63\u786e\u7684 JSON \u6570\u636e\u4e86\u3002 \u901a\u8fc7\u4f7f\u7528\u4e00\u4e2a stdClass \u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u5f3a\u5236 json_encode \u89e3\u6790\u4e3a\u7a7a\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u7a7a\u6570\u7ec4\u3002\u7136\u800c\uff0c\u8fd9\u79cd\u5197\u4f59\u7684\u5199\u6cd5\u662f\u552f\u4e00\u89e3\u51b3 PHP \u7a7a\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u6ca1\u6709\u7b80\u4fbf\u7684\u65b9\u6cd5\u53ef\u4ee5\u8868\u793a\u7a7a\u5bf9\u8c61\u3002 \u5bf9\u8c61\u6570\u7ec4 # Elasticsearch DSL \u7684\u53e6\u4e00\u79cd\u5e38\u89c1\u7684\u6570\u636e\u683c\u5f0f\u662f\u5bf9\u8c61\u6570\u7ec4\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u5728\u4f60\u7684\u67e5\u8be2\u4e2d\u589e\u52a0\u6392\u5e8f\uff1a { \"query\" : { \"match\" : { \"content\" : \"quick brown fox\" } }, \"sort\" : [ < 1 > { \"time\" : { \"order\" : \"desc\" }}, { \"popularity\" : { \"order\" : \"desc\" }} ] } <1> \"sort\" \u5185\u5305\u542b JSON \u5bf9\u8c61\u6570\u7ec4\u3002 \u8fd9\u79cd\u5f62\u5f0f\u5f88\u5e38\u89c1\uff0c\u4f46\u662f\u5728 PHP \u4e2d\u6784\u5efa\u5c31\u7a0d\u5fae\u6709\u4e9b\u7e41\u7410\uff0c\u56e0\u4e3a\u8fd9\u9700\u8981\u5d4c\u5957\u6570\u7ec4\u3002\u7528 PHP \u5199\u8fd9\u79cd\u5197\u4f59\u7684\u7ed3\u6784\u5c31\u8ba9\u4eba\u8bfb\u8d77\u6765\u6709\u70b9\u6666\u6da9\u3002\u4e3a\u4e86\u6784\u5efa\u5bf9\u8c61\u6570\u7ec4\uff0c\u4f60\u8981\u5728\u6570\u7ec4\u4e2d\u5d4c\u5957\u6570\u7ec4\uff1a <?php $params [ 'body' ] = array ( 'query' => array ( 'match' => array ( 'content' => 'quick brown fox' ) ), 'sort' => array ( < 1 > array ( 'time' => array ( 'order' => 'desc' )), < 2 > array ( 'popularity' => array ( 'order' => 'desc' )) < 3 > ) ); $results = $client -> search ( $params ); <1> \u8fd9\u91cc encode \u4e3a \"sort\" : [] <2> \u8fd9\u91cc encode \u4e3a {\"time\" : {\"order\" : \"desc\"}} <3> \u8fd9\u91cc encode \u4e3a {\"popularity\" : {\"order\" : \"desc\"}} \u5982\u679c\u4f60\u7528\u7684\u662f PHP5.4 \u53ca\u4ee5\u4e0a\u7248\u672c\uff0c\u6211\u5f3a\u70c8\u8981\u6c42\u4f60\u4f7f\u7528 [] \u6784\u5efa\u6570\u7ec4\u3002\u8fd9\u4f1a\u8ba9\u591a\u7ef4\u6570\u7ec4\u770b\u8d77\u6765\u6613\u8bfb\u4e9b\uff1a <?php $params [ 'body' ] = [ 'query' => [ 'match' => [ 'content' => 'quick brown fox' ] ], 'sort' => [ [ 'time' => [ 'order' => 'desc' ]], [ 'popularity' => [ 'order' => 'desc' ]] ] ]; $results = $client -> search ( $params ); \u7a7a\u5bf9\u8c61\u6570\u7ec4 # \u5076\u5c14\u4f60\u4f1a\u770b\u5230 DSL \u9700\u8981\u4e0a\u8ff0\u4e24\u79cd\u6570\u636e\u683c\u5f0f\u3002score \u67e5\u8be2\u4fbf\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\uff0c\u8be5\u67e5\u8be2\u6709\u65f6\u9700\u8981\u4e00\u4e2a\u5bf9\u8c61\u6570\u7ec4\uff0c\u800c\u6709\u4e00\u4e9b\u5bf9\u8c61\u53ef\u80fd\u662f\u4e00\u4e2a\u7a7a\u7684 JSON \u5bf9\u8c61\u3002 \u8bf7\u770b\u5982\u4e0b\u67e5\u8be2\uff1a { \"query\" : { \"function_score\" : { \"functions\" : [ { \"random_score\" : {} } ], \"boost_mode\" : \"replace\" } } } \u6211\u4eec\u7528\u4e0b\u9762\u7684 PHP \u4ee3\u7801\u6765\u6784\u5efa\u8fd9\u4e2a\u67e5\u8be2\uff1a <?php $params [ 'body' ] = array ( 'query' => array ( 'function_score' => array ( 'functions' => array ( < 1 > array ( < 2 > 'random_score' => new \\stdClass () < 3 > ) ) ) ) ); $results = $client -> search ( $params ); <1> \u8fd9\u91cc encode \u4e3a \"functions\" : [] <2> \u8fd9\u91cc encode \u4e3a { \"random_score\": {} } <3> \u8fd9\u91cc encode \u4e3a \"random_score\": {}","title":"PHP \u5904\u7406 JSON \u6570\u7ec4\u6216\u5bf9\u8c61"},{"location":"elasticsearch/elasticsearch-php/php_json_objects/#php-json","text":"\u5ba2\u6237\u7aef\u5728\u5173\u4e8e JSON \u6570\u7ec4\u548c JSON \u5bf9\u8c61\u7684\u5904\u7406\u548c\u5b9a\u4e49\u65b9\u9762\u603b\u662f\u4ee4\u4eba\u7591\u60d1\u4e0d\u5df2\u3002\u5c24\u5176\u662f\u7531\u7a7a\u5bf9\u8c61\u548c\u5bf9\u8c61\u6570\u7ec4\u5f15\u8d77\u7684\u95ee\u9898\u3002\u672c\u8282\u4f1a\u5c55\u793a\u4e00\u4e9b Elasticsearch JSON API \u5e38\u89c1\u7684\u6570\u636e\u683c\u5f0f\uff0c\u8fd8\u4f1a\u8bf4\u660e\u5982\u4f55\u4ee5 PHP \u7684\u8bed\u6cd5\u6765\u8868\u8fbe\u8fd9\u4e9b\u6570\u636e\u683c\u5f0f\u3002","title":"PHP \u5904\u7406 JSON \u6570\u7ec4\u6216\u5bf9\u8c61"},{"location":"elasticsearch/elasticsearch-php/php_json_objects/#_1","text":"Elasticsearch API \u5728\u51e0\u4e2a\u5730\u65b9\u4f7f\u7528\u4e86\u7a7a\u5bf9\u8c61\uff0c\u8fd9\u4f1a\u5bf9 PHP \u9020\u6210\u5f71\u54cd\u3002\u4e0d\u50cf\u5176\u5b83\u7684\u8bed\u8a00\uff0cPHP \u6ca1\u6709\u4e00\u4e2a\u7b80\u4fbf\u7684\u7b26\u53f7\u6765\u8868\u793a\u7a7a\u5bf9\u8c61\uff0c\u800c\u8bb8\u591a\u5f00\u53d1\u8005\u8fd8\u4e0d\u77e5\u9053\u5982\u4f55\u6307\u5b9a\u4e00\u4e2a\u7a7a\u5bf9\u8c61\u3002 \u8bbe\u60f3\u5728\u67e5\u8be2\u4e2d\u589e\u52a0 Highlight\uff1a { \"query\" : { \"match\" : { \"content\" : \"quick brown fox\" } }, \"highlight\" : { \"fields\" : { \"content\" : {} < 1 > } } } <1> \u8fd9\u4e2a\u7a7a\u5bf9\u8c61\u4fbf\u4f1a\u5f15\u8d77\u95ee\u9898 \u95ee\u9898\u5c31\u5728\u4e8e PHP \u4f1a\u81ea\u52a8\u628a \"content\" : {} \u8f6c\u6362\u6210 \"content\" : [] \uff0c\u5728 Elasticsearch DSL \u4e2d\u8fd9\u6837\u7684\u6570\u636e\u683c\u5f0f\u662f\u975e\u6cd5\u7684\u3002\u6211\u4eec\u9700\u8981\u544a\u8bc9 PHP \u90a3\u4e2a\u7a7a\u5bf9\u8c61\u5c31\u662f\u4e00\u4e2a\u7a7a\u5bf9\u8c61\u800c\u975e\u7a7a\u6570\u7ec4\u3002\u4e3a\u4e86\u5728\u67e5\u8be2\u4e2d\u5b9a\u4e49\u7a7a\u5bf9\u8c61\uff0c\u4f60\u9700\u8981\u8fd9\u6837\u505a\uff1a <?php $params [ 'body' ] = array ( 'query' => array ( 'match' => array ( 'content' => 'quick brown fox' ) ), 'highlight' => array ( 'fields' => array ( 'content' => new \\stdClass () < 1 > ) ) ); $results = $client -> search ( $params ); <1> \u4f7f\u7528 PHP \u7684 stdClass \u5bf9\u8c61\u6765\u4ee3\u8868\u7a7a\u5bf9\u8c61\uff0c\u73b0\u5728\u5c31\u53ef\u4ee5\u89e3\u6790\u4e3a\u6b63\u786e\u7684 JSON \u6570\u636e\u4e86\u3002 \u901a\u8fc7\u4f7f\u7528\u4e00\u4e2a stdClass \u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u5f3a\u5236 json_encode \u89e3\u6790\u4e3a\u7a7a\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u7a7a\u6570\u7ec4\u3002\u7136\u800c\uff0c\u8fd9\u79cd\u5197\u4f59\u7684\u5199\u6cd5\u662f\u552f\u4e00\u89e3\u51b3 PHP \u7a7a\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u6ca1\u6709\u7b80\u4fbf\u7684\u65b9\u6cd5\u53ef\u4ee5\u8868\u793a\u7a7a\u5bf9\u8c61\u3002","title":"\u7a7a\u5bf9\u8c61"},{"location":"elasticsearch/elasticsearch-php/php_json_objects/#_2","text":"Elasticsearch DSL \u7684\u53e6\u4e00\u79cd\u5e38\u89c1\u7684\u6570\u636e\u683c\u5f0f\u662f\u5bf9\u8c61\u6570\u7ec4\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u5728\u4f60\u7684\u67e5\u8be2\u4e2d\u589e\u52a0\u6392\u5e8f\uff1a { \"query\" : { \"match\" : { \"content\" : \"quick brown fox\" } }, \"sort\" : [ < 1 > { \"time\" : { \"order\" : \"desc\" }}, { \"popularity\" : { \"order\" : \"desc\" }} ] } <1> \"sort\" \u5185\u5305\u542b JSON \u5bf9\u8c61\u6570\u7ec4\u3002 \u8fd9\u79cd\u5f62\u5f0f\u5f88\u5e38\u89c1\uff0c\u4f46\u662f\u5728 PHP \u4e2d\u6784\u5efa\u5c31\u7a0d\u5fae\u6709\u4e9b\u7e41\u7410\uff0c\u56e0\u4e3a\u8fd9\u9700\u8981\u5d4c\u5957\u6570\u7ec4\u3002\u7528 PHP \u5199\u8fd9\u79cd\u5197\u4f59\u7684\u7ed3\u6784\u5c31\u8ba9\u4eba\u8bfb\u8d77\u6765\u6709\u70b9\u6666\u6da9\u3002\u4e3a\u4e86\u6784\u5efa\u5bf9\u8c61\u6570\u7ec4\uff0c\u4f60\u8981\u5728\u6570\u7ec4\u4e2d\u5d4c\u5957\u6570\u7ec4\uff1a <?php $params [ 'body' ] = array ( 'query' => array ( 'match' => array ( 'content' => 'quick brown fox' ) ), 'sort' => array ( < 1 > array ( 'time' => array ( 'order' => 'desc' )), < 2 > array ( 'popularity' => array ( 'order' => 'desc' )) < 3 > ) ); $results = $client -> search ( $params ); <1> \u8fd9\u91cc encode \u4e3a \"sort\" : [] <2> \u8fd9\u91cc encode \u4e3a {\"time\" : {\"order\" : \"desc\"}} <3> \u8fd9\u91cc encode \u4e3a {\"popularity\" : {\"order\" : \"desc\"}} \u5982\u679c\u4f60\u7528\u7684\u662f PHP5.4 \u53ca\u4ee5\u4e0a\u7248\u672c\uff0c\u6211\u5f3a\u70c8\u8981\u6c42\u4f60\u4f7f\u7528 [] \u6784\u5efa\u6570\u7ec4\u3002\u8fd9\u4f1a\u8ba9\u591a\u7ef4\u6570\u7ec4\u770b\u8d77\u6765\u6613\u8bfb\u4e9b\uff1a <?php $params [ 'body' ] = [ 'query' => [ 'match' => [ 'content' => 'quick brown fox' ] ], 'sort' => [ [ 'time' => [ 'order' => 'desc' ]], [ 'popularity' => [ 'order' => 'desc' ]] ] ]; $results = $client -> search ( $params );","title":"\u5bf9\u8c61\u6570\u7ec4"},{"location":"elasticsearch/elasticsearch-php/php_json_objects/#_3","text":"\u5076\u5c14\u4f60\u4f1a\u770b\u5230 DSL \u9700\u8981\u4e0a\u8ff0\u4e24\u79cd\u6570\u636e\u683c\u5f0f\u3002score \u67e5\u8be2\u4fbf\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\uff0c\u8be5\u67e5\u8be2\u6709\u65f6\u9700\u8981\u4e00\u4e2a\u5bf9\u8c61\u6570\u7ec4\uff0c\u800c\u6709\u4e00\u4e9b\u5bf9\u8c61\u53ef\u80fd\u662f\u4e00\u4e2a\u7a7a\u7684 JSON \u5bf9\u8c61\u3002 \u8bf7\u770b\u5982\u4e0b\u67e5\u8be2\uff1a { \"query\" : { \"function_score\" : { \"functions\" : [ { \"random_score\" : {} } ], \"boost_mode\" : \"replace\" } } } \u6211\u4eec\u7528\u4e0b\u9762\u7684 PHP \u4ee3\u7801\u6765\u6784\u5efa\u8fd9\u4e2a\u67e5\u8be2\uff1a <?php $params [ 'body' ] = array ( 'query' => array ( 'function_score' => array ( 'functions' => array ( < 1 > array ( < 2 > 'random_score' => new \\stdClass () < 3 > ) ) ) ) ); $results = $client -> search ( $params ); <1> \u8fd9\u91cc encode \u4e3a \"functions\" : [] <2> \u8fd9\u91cc encode \u4e3a { \"random_score\": {} } <3> \u8fd9\u91cc encode \u4e3a \"random_score\": {}","title":"\u7a7a\u5bf9\u8c61\u6570\u7ec4"},{"location":"elasticsearch/elasticsearch-php/php_version_requirement/","text":"PHP \u7248\u672c\u9700\u6c42 # Elasticsearch-PHP 6.0 \u9700\u8981 PHP 7.0.0 \u6216\u8005\u66f4\u9ad8\u7248\u672c\u3002\u53e6\u5916\uff0c\u5b83\u8fd8\u9700\u8981\u539f\u751f JSON \u6269\u5c55\u7684\u7248\u672c\u4e3a 1.3.7 \u6216\u8005\u66f4\u9ad8\u7248\u672c\u3002\u3002","title":"PHP \u7248\u672c\u9700\u6c42"},{"location":"elasticsearch/elasticsearch-php/php_version_requirement/#php","text":"Elasticsearch-PHP 6.0 \u9700\u8981 PHP 7.0.0 \u6216\u8005\u66f4\u9ad8\u7248\u672c\u3002\u53e6\u5916\uff0c\u5b83\u8fd8\u9700\u8981\u539f\u751f JSON \u6269\u5c55\u7684\u7248\u672c\u4e3a 1.3.7 \u6216\u8005\u66f4\u9ad8\u7248\u672c\u3002\u3002","title":"PHP \u7248\u672c\u9700\u6c42"},{"location":"elasticsearch/elasticsearch-php/quickstart/","text":"\u5feb\u901f\u5f00\u59cb\u7f16\u8f91 # \u8fd9\u4e00\u8282\u4f1a\u6982\u8ff0\u4e00\u4e0b\u5ba2\u6237\u7aef\u4ee5\u53ca\u5ba2\u6237\u7aef\u7684\u4e00\u4e9b\u4e3b\u8981\u65b9\u6cd5\u7684\u4f7f\u7528\u89c4\u5219\u3002 \u5b89\u88c5 # \u5728 composer.json \u6587\u4ef6\u4e2d\u5f15\u5165 elasticsearch-php\uff1a { \"require\" : { \"elasticsearch/elasticsearch\" : \"~6.0\" } } \u7528 composer \u5b89\u88c5\u5ba2\u6237\u7aef\uff1a curl -s http://getcomposer.org/installer | php php composer.phar install --no-dev \u5728\u9879\u76ee\u4e2d\u5f15\u5165\u81ea\u52a8\u52a0\u8f7d\u6587\u4ef6\uff08\u5982\u679c\u8fd8\u6ca1\u5f15\u5165\uff09\uff0c\u5e76\u4e14\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5ba2\u6237\u7aef\uff1a <?php require 'vendor/autoload.php' ; use Elasticsearch\\ClientBuilder ; $client = ClientBuilder :: create () -> build (); \u7d22\u5f15\u4e00\u4e2a\u6587\u6863 # \u5728 elasticsearch-php \u4e2d\uff0c\u51e0\u4e4e\u4e00\u5207\u64cd\u4f5c\u90fd\u662f\u7528\u5173\u8054\u6570\u7ec4\u6765\u914d\u7f6e\u3002REST \u8def\u5f84\uff08endpoint\uff09\u3001\u6587\u6863\u548c\u53ef\u9009\u53c2\u6570\u90fd\u662f\u7528\u5173\u8054\u6570\u7ec4\u6765\u914d\u7f6e\u3002 \u4e3a\u4e86\u7d22\u5f15\u4e00\u4e2a\u6587\u6863\uff0c\u6211\u4eec\u8981\u6307\u5b9a4\u90e8\u5206\u4fe1\u606f\uff1a index \uff0c type \uff0c id \u548c\u4e00\u4e2a body \u3002\u6784\u5efa\u4e00\u4e2a\u952e\u503c\u5bf9\u7684\u5173\u8054\u6570\u7ec4\u5c31\u53ef\u4ee5\u5b8c\u6210\u4e0a\u9762\u7684\u5185\u5bb9\u3002body \u7684\u952e\u503c\u5bf9\u683c\u5f0f\u4e0e\u6587\u6863\u7684\u6570\u636e\u4fdd\u6301\u4e00\u81f4\u6027\u3002\uff08\u8bd1\u8005\u6ce8\uff1a\u5982 [\"testField\" \u21d2 \"abc\"] \u5728\u6587\u6863\u4e2d\u5219\u4e3a {\"testField\" : \"abc\"} \uff09\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' , 'body' => [ 'testField' => 'abc' ] ]; $response = $client -> index ( $params ); print_r ( $response ); \u6536\u5230\u7684\u54cd\u5e94\u6570\u636e\u8868\u660e\uff0c\u4f60\u6307\u5b9a\u7684\u7d22\u5f15\u4e2d\u5df2\u7ecf\u521b\u5efa\u597d\u4e86\u6587\u6863\u3002\u54cd\u5e94\u6570\u636e\u662f\u4e00\u4e2a\u5173\u8054\u6570\u7ec4\uff0c\u91cc\u9762\u7684\u5185\u5bb9\u662f Elasticsearch \u8fd4\u56de\u7684decoded JSON \u6570\u636e\uff1a Array ( [_index] => my_index [_type] => my_type [_id] => my_id [_version] => 1 [result] => created [_shards] => Array ( [total] => 2 [successful] => 1 [failed] => 0 ) [_seq_no] => 0 [_primary_term] => 1 ) \u83b7\u53d6\u4e00\u4e2a\u6587\u6863 # \u73b0\u5728\u83b7\u53d6\u521a\u624d\u7d22\u5f15\u7684\u6587\u6863\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' ]; $response = $client -> get ( $params ); print_r ( $response ); \u54cd\u5e94\u6570\u636e\u5305\u542b\u4e00\u4e9b\u5143\u6570\u636e\uff08\u5982 index\uff0ctype \u7b49\uff09\u548c _source \u5c5e\u6027\uff0c \u8fd9\u662f\u4f60\u53d1\u9001\u7ed9 Elasticsearch \u7684\u539f\u59cb\u6587\u6863\u6570\u636e\u3002 Array ( [_index] => my_index [_type] => my_type [_id] => my_id [_version] => 1 [found] => 1 [_source] => Array ( [testField] => abc ) ) \u641c\u7d22\u4e00\u4e2a\u6587\u6863 # \u641c\u7d22\u662f elasticsearch \u7684\u4e00\u5927\u7279\u8272\uff0c\u6240\u4ee5\u6211\u4eec\u8bd5\u4e00\u4e0b\u6267\u884c\u4e00\u4e2a\u641c\u7d22\u3002\u6211\u4eec\u51c6\u5907\u7528 Match \u67e5\u8be2\u6765\u4f5c\u4e3a\u793a\u8303\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'body' => [ 'query' => [ 'match' => [ 'testField' => 'abc' ] ] ] ]; $response = $client -> search ( $params ); print_r ( $response ); \u8fd9\u4e2a\u54cd\u5e94\u6570\u636e\u4e0e\u524d\u9762\u4f8b\u5b50\u7684\u54cd\u5e94\u6570\u636e\u6709\u6240\u4e0d\u540c\u3002\u8fd9\u91cc\u6709\u4e00\u4e9b\u5143\u6570\u636e\uff08\u5982 took , timed_out \u7b49\uff09\u548c\u4e00\u4e2a hits \u7684\u6570\u7ec4\uff0c\u8fd9\u4ee3\u8868\u4e86\u4f60\u7684\u641c\u7d22\u7ed3\u679c\u3002\u800c hits \u5185\u90e8\u4e5f\u6709\u4e00\u4e2a hits \u6570\u7ec4\uff0c\u5185\u90e8\u7684 hits \u5305\u542b\u7279\u5b9a\u7684\u641c\u7d22\u7ed3\u679c\uff1a Array ( [took] => 16 [timed_out] => [_shards] => Array ( [total] => 5 [successful] => 5 [skipped] => 0 [failed] => 0 ) [hits] => Array ( [total] => 1 [max_score] => 0.2876821 [hits] => Array ( [0] => Array ( [_index] => my_index [_type] => my_type [_id] => my_id [_score] => 0.2876821 [_source] => Array ( [testField] => abc ) ) ) ) ) \u5220\u9664\u4e00\u4e2a\u6587\u6863 # \u597d\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u770b\u4e00\u4e0b\u5982\u4f55\u628a\u4e4b\u524d\u6dfb\u52a0\u7684\u6587\u6863\u5220\u9664\u6389\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' ]; $response = $client -> delete ( $params ); print_r ( $response ); \u4f60\u4f1a\u6ce8\u610f\u5230\u5220\u9664\u6587\u6863\u7684\u8bed\u6cd5\u4e0e\u83b7\u53d6\u6587\u6863\u7684\u8bed\u6cd5\u662f\u4e00\u6837\u7684\u3002\u552f\u4e00\u4e0d\u540c\u7684\u662f delete \u65b9\u6cd5\u66ff\u4ee3\u4e86 get \u65b9\u6cd5\u3002\u4e0b\u9762\u54cd\u5e94\u6570\u636e\u4ee3\u8868\u6587\u6863\u5df2\u88ab\u5220\u9664\uff1a Array ( [_index] => my_index [_type] => my_type [_id] => my_id [_version] => 2 [result] => deleted [_shards] => Array ( [total] => 2 [successful] => 1 [failed] => 0 ) [_seq_no] => 1 [_primary_term] => 1 ) \u5220\u9664\u4e00\u4e2a\u7d22\u5f15 # \u7531\u4e8e elasticsearch \u7684\u52a8\u6001\u7279\u6027\uff0c\u6211\u4eec\u521b\u5efa\u7684\u7b2c\u4e00\u4e2a\u6587\u6863\u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u7d22\u5f15\uff0c\u540c\u65f6\u4e5f\u4f1a\u628a settings \u91cc\u9762\u7684\u53c2\u6570\u8bbe\u5b9a\u4e3a\u9ed8\u8ba4\u53c2\u6570\u3002\u7531\u4e8e\u6211\u4eec\u5728\u540e\u9762\u8981\u6307\u5b9a\u7279\u5b9a\u7684 settings\uff0c\u6240\u4ee5\u73b0\u5728\u8981\u5220\u9664\u6389\u8fd9\u4e2a\u7d22\u5f15\uff1a <?php $deleteParams = [ 'index' => 'my_index' ]; $response = $client -> indices () -> delete ( $deleteParams ); print_r ( $response ); \u54cd\u5e94\u6570\u636e\u662f\uff1a Array ( [acknowledged] => 1 ) \u521b\u5efa\u4e00\u4e2a\u7d22\u5f15 # \u7531\u4e8e\u6570\u636e\u5df2\u88ab\u6e05\u7a7a\uff0c\u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u5f00\u59cb\u4e86\uff0c\u73b0\u5728\u8981\u6dfb\u52a0\u4e00\u4e2a\u7d22\u5f15\uff0c\u540c\u65f6\u8981\u8fdb\u884c\u81ea\u5b9a\u4e49 settings\uff1a <?php $params = [ 'index' => 'my_index' , 'body' => [ 'settings' => [ 'number_of_shards' => 2 , 'number_of_replicas' => 0 ] ] ]; $response = $client -> indices () -> create ( $params ); print_r ( $response ); Elasticsearch\u4f1a\u521b\u5efa\u4e00\u4e2a\u7d22\u5f15\uff0c\u5e76\u914d\u7f6e\u4f60\u6307\u5b9a\u7684\u53c2\u6570\u503c\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u6d88\u606f\u786e\u8ba4\uff1a Array ( [acknowledged] => 1 [shards_acknowledged] => 1 [index] => my_index ) \u672c\u8282\u7ed3\u8bed # \u8fd9\u91cc\u53ea\u662f\u6982\u8ff0\u4e86\u4e00\u4e0b\u5ba2\u6237\u7aef\u4ee5\u53ca\u5b83\u7684\u8bed\u6cd5\u3002\u5982\u679c\u4f60\u5f88\u719f\u6089 elasticsearch\uff0c\u4f60\u4f1a\u6ce8\u610f\u5230\u8fd9\u4e9b\u65b9\u6cd5\u7684\u547d\u540d\u8ddf REST \u8def\u5f84\uff08endpoint\uff09\u662f\u4e00\u6837\u7684\u3002 \u4f60\u4e5f\u6ce8\u610f\u5230\u4e86\u5ba2\u6237\u7aef\u7684\u53c2\u6570\u914d\u7f6e\u4ece\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u8bb2\u4e5f\u662f\u65b9\u4fbf\u4f60\u7684IDE\u6613\u4e8e\u641c\u7d22\u3002 $client \u5bf9\u8c61\u4e0b\u7684\u6240\u6709\u6838\u5fc3\u65b9\u6cd5\uff08\u7d22\u5f15\uff0c\u641c\u7d22\uff0c\u83b7\u53d6\u7b49\uff09\u90fd\u662f\u53ef\u7528\u7684\u3002\u7d22\u5f15\u7ba1\u7406\u548c\u96c6\u7fa4\u7ba1\u7406\u5206\u522b\u5728 $client->indices() \u548c $client->cluster() \u4e2d\u3002 \u8bf7\u67e5\u8be2\u6587\u6863\u7684\u5176\u4f59\u5185\u5bb9\u4ee5\u4fbf\u77e5\u9053\u6574\u4e2a\u5ba2\u6237\u7aef\u7684\u8fd0\u4f5c\u673a\u5236\u3002","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"elasticsearch/elasticsearch-php/quickstart/#_1","text":"\u8fd9\u4e00\u8282\u4f1a\u6982\u8ff0\u4e00\u4e0b\u5ba2\u6237\u7aef\u4ee5\u53ca\u5ba2\u6237\u7aef\u7684\u4e00\u4e9b\u4e3b\u8981\u65b9\u6cd5\u7684\u4f7f\u7528\u89c4\u5219\u3002","title":"\u5feb\u901f\u5f00\u59cb\u7f16\u8f91"},{"location":"elasticsearch/elasticsearch-php/quickstart/#_2","text":"\u5728 composer.json \u6587\u4ef6\u4e2d\u5f15\u5165 elasticsearch-php\uff1a { \"require\" : { \"elasticsearch/elasticsearch\" : \"~6.0\" } } \u7528 composer \u5b89\u88c5\u5ba2\u6237\u7aef\uff1a curl -s http://getcomposer.org/installer | php php composer.phar install --no-dev \u5728\u9879\u76ee\u4e2d\u5f15\u5165\u81ea\u52a8\u52a0\u8f7d\u6587\u4ef6\uff08\u5982\u679c\u8fd8\u6ca1\u5f15\u5165\uff09\uff0c\u5e76\u4e14\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5ba2\u6237\u7aef\uff1a <?php require 'vendor/autoload.php' ; use Elasticsearch\\ClientBuilder ; $client = ClientBuilder :: create () -> build ();","title":"\u5b89\u88c5"},{"location":"elasticsearch/elasticsearch-php/quickstart/#_3","text":"\u5728 elasticsearch-php \u4e2d\uff0c\u51e0\u4e4e\u4e00\u5207\u64cd\u4f5c\u90fd\u662f\u7528\u5173\u8054\u6570\u7ec4\u6765\u914d\u7f6e\u3002REST \u8def\u5f84\uff08endpoint\uff09\u3001\u6587\u6863\u548c\u53ef\u9009\u53c2\u6570\u90fd\u662f\u7528\u5173\u8054\u6570\u7ec4\u6765\u914d\u7f6e\u3002 \u4e3a\u4e86\u7d22\u5f15\u4e00\u4e2a\u6587\u6863\uff0c\u6211\u4eec\u8981\u6307\u5b9a4\u90e8\u5206\u4fe1\u606f\uff1a index \uff0c type \uff0c id \u548c\u4e00\u4e2a body \u3002\u6784\u5efa\u4e00\u4e2a\u952e\u503c\u5bf9\u7684\u5173\u8054\u6570\u7ec4\u5c31\u53ef\u4ee5\u5b8c\u6210\u4e0a\u9762\u7684\u5185\u5bb9\u3002body \u7684\u952e\u503c\u5bf9\u683c\u5f0f\u4e0e\u6587\u6863\u7684\u6570\u636e\u4fdd\u6301\u4e00\u81f4\u6027\u3002\uff08\u8bd1\u8005\u6ce8\uff1a\u5982 [\"testField\" \u21d2 \"abc\"] \u5728\u6587\u6863\u4e2d\u5219\u4e3a {\"testField\" : \"abc\"} \uff09\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' , 'body' => [ 'testField' => 'abc' ] ]; $response = $client -> index ( $params ); print_r ( $response ); \u6536\u5230\u7684\u54cd\u5e94\u6570\u636e\u8868\u660e\uff0c\u4f60\u6307\u5b9a\u7684\u7d22\u5f15\u4e2d\u5df2\u7ecf\u521b\u5efa\u597d\u4e86\u6587\u6863\u3002\u54cd\u5e94\u6570\u636e\u662f\u4e00\u4e2a\u5173\u8054\u6570\u7ec4\uff0c\u91cc\u9762\u7684\u5185\u5bb9\u662f Elasticsearch \u8fd4\u56de\u7684decoded JSON \u6570\u636e\uff1a Array ( [_index] => my_index [_type] => my_type [_id] => my_id [_version] => 1 [result] => created [_shards] => Array ( [total] => 2 [successful] => 1 [failed] => 0 ) [_seq_no] => 0 [_primary_term] => 1 )","title":"\u7d22\u5f15\u4e00\u4e2a\u6587\u6863"},{"location":"elasticsearch/elasticsearch-php/quickstart/#_4","text":"\u73b0\u5728\u83b7\u53d6\u521a\u624d\u7d22\u5f15\u7684\u6587\u6863\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' ]; $response = $client -> get ( $params ); print_r ( $response ); \u54cd\u5e94\u6570\u636e\u5305\u542b\u4e00\u4e9b\u5143\u6570\u636e\uff08\u5982 index\uff0ctype \u7b49\uff09\u548c _source \u5c5e\u6027\uff0c \u8fd9\u662f\u4f60\u53d1\u9001\u7ed9 Elasticsearch \u7684\u539f\u59cb\u6587\u6863\u6570\u636e\u3002 Array ( [_index] => my_index [_type] => my_type [_id] => my_id [_version] => 1 [found] => 1 [_source] => Array ( [testField] => abc ) )","title":"\u83b7\u53d6\u4e00\u4e2a\u6587\u6863"},{"location":"elasticsearch/elasticsearch-php/quickstart/#_5","text":"\u641c\u7d22\u662f elasticsearch \u7684\u4e00\u5927\u7279\u8272\uff0c\u6240\u4ee5\u6211\u4eec\u8bd5\u4e00\u4e0b\u6267\u884c\u4e00\u4e2a\u641c\u7d22\u3002\u6211\u4eec\u51c6\u5907\u7528 Match \u67e5\u8be2\u6765\u4f5c\u4e3a\u793a\u8303\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'body' => [ 'query' => [ 'match' => [ 'testField' => 'abc' ] ] ] ]; $response = $client -> search ( $params ); print_r ( $response ); \u8fd9\u4e2a\u54cd\u5e94\u6570\u636e\u4e0e\u524d\u9762\u4f8b\u5b50\u7684\u54cd\u5e94\u6570\u636e\u6709\u6240\u4e0d\u540c\u3002\u8fd9\u91cc\u6709\u4e00\u4e9b\u5143\u6570\u636e\uff08\u5982 took , timed_out \u7b49\uff09\u548c\u4e00\u4e2a hits \u7684\u6570\u7ec4\uff0c\u8fd9\u4ee3\u8868\u4e86\u4f60\u7684\u641c\u7d22\u7ed3\u679c\u3002\u800c hits \u5185\u90e8\u4e5f\u6709\u4e00\u4e2a hits \u6570\u7ec4\uff0c\u5185\u90e8\u7684 hits \u5305\u542b\u7279\u5b9a\u7684\u641c\u7d22\u7ed3\u679c\uff1a Array ( [took] => 16 [timed_out] => [_shards] => Array ( [total] => 5 [successful] => 5 [skipped] => 0 [failed] => 0 ) [hits] => Array ( [total] => 1 [max_score] => 0.2876821 [hits] => Array ( [0] => Array ( [_index] => my_index [_type] => my_type [_id] => my_id [_score] => 0.2876821 [_source] => Array ( [testField] => abc ) ) ) ) )","title":"\u641c\u7d22\u4e00\u4e2a\u6587\u6863"},{"location":"elasticsearch/elasticsearch-php/quickstart/#_6","text":"\u597d\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u770b\u4e00\u4e0b\u5982\u4f55\u628a\u4e4b\u524d\u6dfb\u52a0\u7684\u6587\u6863\u5220\u9664\u6389\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' ]; $response = $client -> delete ( $params ); print_r ( $response ); \u4f60\u4f1a\u6ce8\u610f\u5230\u5220\u9664\u6587\u6863\u7684\u8bed\u6cd5\u4e0e\u83b7\u53d6\u6587\u6863\u7684\u8bed\u6cd5\u662f\u4e00\u6837\u7684\u3002\u552f\u4e00\u4e0d\u540c\u7684\u662f delete \u65b9\u6cd5\u66ff\u4ee3\u4e86 get \u65b9\u6cd5\u3002\u4e0b\u9762\u54cd\u5e94\u6570\u636e\u4ee3\u8868\u6587\u6863\u5df2\u88ab\u5220\u9664\uff1a Array ( [_index] => my_index [_type] => my_type [_id] => my_id [_version] => 2 [result] => deleted [_shards] => Array ( [total] => 2 [successful] => 1 [failed] => 0 ) [_seq_no] => 1 [_primary_term] => 1 )","title":"\u5220\u9664\u4e00\u4e2a\u6587\u6863"},{"location":"elasticsearch/elasticsearch-php/quickstart/#_7","text":"\u7531\u4e8e elasticsearch \u7684\u52a8\u6001\u7279\u6027\uff0c\u6211\u4eec\u521b\u5efa\u7684\u7b2c\u4e00\u4e2a\u6587\u6863\u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u7d22\u5f15\uff0c\u540c\u65f6\u4e5f\u4f1a\u628a settings \u91cc\u9762\u7684\u53c2\u6570\u8bbe\u5b9a\u4e3a\u9ed8\u8ba4\u53c2\u6570\u3002\u7531\u4e8e\u6211\u4eec\u5728\u540e\u9762\u8981\u6307\u5b9a\u7279\u5b9a\u7684 settings\uff0c\u6240\u4ee5\u73b0\u5728\u8981\u5220\u9664\u6389\u8fd9\u4e2a\u7d22\u5f15\uff1a <?php $deleteParams = [ 'index' => 'my_index' ]; $response = $client -> indices () -> delete ( $deleteParams ); print_r ( $response ); \u54cd\u5e94\u6570\u636e\u662f\uff1a Array ( [acknowledged] => 1 )","title":"\u5220\u9664\u4e00\u4e2a\u7d22\u5f15"},{"location":"elasticsearch/elasticsearch-php/quickstart/#_8","text":"\u7531\u4e8e\u6570\u636e\u5df2\u88ab\u6e05\u7a7a\uff0c\u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u5f00\u59cb\u4e86\uff0c\u73b0\u5728\u8981\u6dfb\u52a0\u4e00\u4e2a\u7d22\u5f15\uff0c\u540c\u65f6\u8981\u8fdb\u884c\u81ea\u5b9a\u4e49 settings\uff1a <?php $params = [ 'index' => 'my_index' , 'body' => [ 'settings' => [ 'number_of_shards' => 2 , 'number_of_replicas' => 0 ] ] ]; $response = $client -> indices () -> create ( $params ); print_r ( $response ); Elasticsearch\u4f1a\u521b\u5efa\u4e00\u4e2a\u7d22\u5f15\uff0c\u5e76\u914d\u7f6e\u4f60\u6307\u5b9a\u7684\u53c2\u6570\u503c\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u6d88\u606f\u786e\u8ba4\uff1a Array ( [acknowledged] => 1 [shards_acknowledged] => 1 [index] => my_index )","title":"\u521b\u5efa\u4e00\u4e2a\u7d22\u5f15"},{"location":"elasticsearch/elasticsearch-php/quickstart/#_9","text":"\u8fd9\u91cc\u53ea\u662f\u6982\u8ff0\u4e86\u4e00\u4e0b\u5ba2\u6237\u7aef\u4ee5\u53ca\u5b83\u7684\u8bed\u6cd5\u3002\u5982\u679c\u4f60\u5f88\u719f\u6089 elasticsearch\uff0c\u4f60\u4f1a\u6ce8\u610f\u5230\u8fd9\u4e9b\u65b9\u6cd5\u7684\u547d\u540d\u8ddf REST \u8def\u5f84\uff08endpoint\uff09\u662f\u4e00\u6837\u7684\u3002 \u4f60\u4e5f\u6ce8\u610f\u5230\u4e86\u5ba2\u6237\u7aef\u7684\u53c2\u6570\u914d\u7f6e\u4ece\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u8bb2\u4e5f\u662f\u65b9\u4fbf\u4f60\u7684IDE\u6613\u4e8e\u641c\u7d22\u3002 $client \u5bf9\u8c61\u4e0b\u7684\u6240\u6709\u6838\u5fc3\u65b9\u6cd5\uff08\u7d22\u5f15\uff0c\u641c\u7d22\uff0c\u83b7\u53d6\u7b49\uff09\u90fd\u662f\u53ef\u7528\u7684\u3002\u7d22\u5f15\u7ba1\u7406\u548c\u96c6\u7fa4\u7ba1\u7406\u5206\u522b\u5728 $client->indices() \u548c $client->cluster() \u4e2d\u3002 \u8bf7\u67e5\u8be2\u6587\u6863\u7684\u5176\u4f59\u5185\u5bb9\u4ee5\u4fbf\u77e5\u9053\u6574\u4e2a\u5ba2\u6237\u7aef\u7684\u8fd0\u4f5c\u673a\u5236\u3002","title":"\u672c\u8282\u7ed3\u8bed"},{"location":"elasticsearch/elasticsearch-php/search_operations/","text":"\u641c\u7d22\u64cd\u4f5c # \u5443......\u8fd9\u4e2a\u9879\u76ee\u5982\u679c\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u4e4b\u5904\u5c31\u4e0d\u53eb elasticsearch \u4e86\uff01\u73b0\u5728\u4e00\u8d77\u6765\u804a\u804a\u5ba2\u6237\u7aef\u7684\u641c\u7d22\u64cd\u4f5c\u3002 \u5728\u547d\u540d\u65b9\u6848\u89c4\u8303\u7684\u524d\u63d0\u4e0b\uff0c\u5ba2\u6237\u7aef\u62e5\u6709\u4e00\u5207\u7684\u67e5\u8be2\u6743\u9650\uff0c\u4e5f\u62e5\u6709\u83b7\u53d6 REST API \u516c\u5f00\u7684\u4e00\u5207\u53c2\u6570\u7684\u6743\u9650\u3002\u73b0\u5728\u6765\u770b\u770b\u4e00\u4e9b\u793a\u4f8b\uff0c\u65b9\u4fbf\u4f60\u719f\u6089\u8fd9\u4e9b\u8bed\u6cd5\u89c4\u5219\u3002 Match\u67e5\u8be2 # \u4ee5\u4e0b\u662f Match \u67e5\u8be2\u7684\u6807\u51c6 curl \u683c\u5f0f\uff1a curl -XGET 'localhost:9200/my_index/my_type/_search' -d '{ \"query\" : { \"match\" : { \"testField\" : \"abc\" } } }' \u800c\u8fd9\u91cc\u5219\u662f\u5ba2\u6237\u7aef\u6784\u5efa\u7684\u540c\u6837\u7684\u67e5\u8be2\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'body' => [ 'query' => [ 'match' => [ 'testField' => 'abc' ] ] ] ]; $results = $client -> search ( $params ); \u8fd9\u91cc\u8981\u6ce8\u610f PHP \u6570\u7ec4\u7684\u7ed3\u6784\u4e0e\u5c42\u6b21\u662f\u600e\u6837\u4e0e curl \u4e2d\u7684 JSON \u8bf7\u6c42\u4f53\u683c\u5f0f\u76f8\u5e94\u5bf9\u7684\u3002\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u5f97 JSON \u7684\u5199\u6cd5\u8f6c\u6362\u4e3a PHP \u7684\u5199\u6cd5\u53d8\u5f97\u5341\u5206\u7b80\u5355\u3002\u4e00\u4e2a\u5feb\u901f\u68c0\u6d4b PHP \u6570\u7ec4\u662f\u5426\u4e3a\u9884\u671f\u7ed3\u679c\u7684\u65b9\u6cd5\uff0c\u5c31\u662f encode \u4e3a JSON \u683c\u5f0f\uff0c\u7136\u540e\u8fdb\u884c\u68c0\u67e5\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'body' => [ 'query' => [ 'match' => [ 'testField' => 'abc' ] ] ] ]; print_r ( json_encode ( $params [ 'body' ])); { \"query\" : { \"match\" : { \"testField\" : \"abc\" }}} \u4f7f\u7528\u539f\u751fJSON \u6709\u65f6\u4f7f\u7528\u539f\u751f JSON \u6765\u8fdb\u884c\u6d4b\u8bd5\u4f1a\u5341\u5206\u65b9\u4fbf\uff0c\u6216\u8005\u7528\u539f\u751f JSON \u6765\u8fdb\u884c\u4e0d\u540c\u7cfb\u7edf\u7684\u79fb\u690d\u4e5f\u540c\u6837\u65b9\u4fbf\u3002\u4f60\u53ef\u4ee5\u5728 body \u4e2d\u7528\u539f\u751f JSON \u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u5ba2\u6237\u7aef\u4f1a\u81ea\u52a8\u8fdb\u884c\u68c0\u67e5\u64cd\u4f5c\uff1a <?php $json = '{ \"query\" : { \"match\" : { \"testField\" : \"abc\" } } }' ; $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'body' => $json ]; $results = $client -> search ( $params ); \u641c\u7d22\u7ed3\u679c\u4e0e Elasticsearch \u7684\u54cd\u5e94\u7ed3\u679c\u4e00\u81f4\uff0c\u552f\u4e00\u4e0d\u540c\u7684\u662f JSON \u683c\u5f0f\u4f1a\u8f6c\u6362\u6210 PHP \u6570\u7ec4\u3002\u5904\u7406\u8fd9\u4e9b\u6570\u636e\u4e0e\u6570\u7ec4\u8fed\u4ee3\u4e00\u6837\u7b80\u5355\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'body' => [ 'query' => [ 'match' => [ 'testField' => 'abc' ] ] ] ]; $results = $client -> search ( $params ); $milliseconds = $results [ 'took' ]; $maxScore = $results [ 'hits' ][ 'max_score' ]; $score = $results [ 'hits' ][ 'hits' ][ 0 ][ '_score' ]; $doc = $results [ 'hits' ][ 'hits' ][ 0 ][ '_source' ]; Bool\u67e5\u8be2 # \u5229\u7528\u5ba2\u6237\u7aef\u53ef\u4ee5\u8f7b\u677e\u6784\u5efa Bool \u67e5\u8be2\u3002\u4f8b\u5982\u4ee5\u4e0b\u67e5\u8be2\uff1a curl -XGET 'localhost:9200/my_index/my_type/_search' -d '{ \"query\" : { \"bool\" : { \"must\": [ { \"match\" : { \"testField\" : \"abc\" } }, { \"match\" : { \"testField2\" : \"xyz\" } } ] } } }' \u4f1a\u6784\u5efa\u4e3a\u8fd9\u6837\u5b50\uff08\u6ce8\u610f\u65b9\u62ec\u53f7\u4f4d\u7f6e\uff09\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'body' => [ 'query' => [ 'bool' => [ 'must' => [ [ 'match' => [ 'testField' => 'abc' ] ], [ 'match' => [ 'testField2' => 'xyz' ] ], ] ] ] ] ]; $results = $client -> search ( $params ); \u8fd9\u91cc\u6ce8\u610f must \u8bed\u53e5\u63a5\u6536\u7684\u662f\u6570\u7ec4\u3002\u8fd9\u91cc\u4f1a\u8f6c\u5316\u4e3a JSON \u6570\u7ec4\uff0c\u6240\u4ee5\u6700\u540e\u7684\u54cd\u5e94\u7ed3\u679c\u4e0e curl \u683c\u5f0f\u7684\u54cd\u5e94\u7ed3\u679c\u4e00\u81f4\u3002\u60f3\u4e86\u89e3 PHP \u4e2d\u6570\u7ec4\u548c\u5bf9\u8c61\u7684\u8f6c\u6362\uff0c\u8bf7\u67e5\u770b \u7528PHP\u5904\u7406JSON\u6570\u7ec4\u548cJSON\u5bf9\u8c61 \u3002 \u66f4\u4e3a\u590d\u6742\u7684\u793a\u4f8b # \u8fd9\u91cc\u6784\u5efa\u4e00\u4e2a\u6709\u70b9\u590d\u6742\u7684\u4f8b\u5b50\uff1a\u4e00\u4e2a bool \u67e5\u8be2\u5305\u542b\u4e00\u4e2a filter \u8fc7\u6ee4\u5668\u548c\u4e00\u4e2a\u666e\u901a\u67e5\u8be2\u3002\u8fd9\u5728 elasticsearch \u7684\u67e5\u8be2\u4e2d\u975e\u5e38\u666e\u904d\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4f8b\u5b50\u4f1a\u975e\u5e38\u6709\u7528\u3002 curl \u683c\u5f0f\u7684\u67e5\u8be2\uff1a curl -XGET 'localhost:9200/my_index/my_type/_search' -d '{ \"query\" : { \"bool\" : { \"filter\" : { \"term\" : { \"my_field\" : \"abc\" } }, \"should\" : { \"match\" : { \"my_other_field\" : \"xyz\" } } } } }' \u800c\u5728 PHP \u4e2d\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'body' => [ 'query' => [ 'bool' => [ 'filter' => [ 'term' => [ 'my_field' => 'abc' ] ], 'should' => [ 'match' => [ 'my_other_field' => 'xyz' ] ] ] ] ] ]; $results = $client -> search ( $params ); Scrolling\uff08\u6e38\u6807\uff09\u67e5\u8be2 # \u5728\u7528 bulk \u65f6\uff0c\u7ecf\u5e38\u8981\u7528 Scrolling \u529f\u80fd\u5bf9\u6587\u6863\u8fdb\u884c\u5206\u9875\u5904\u7406\uff0c\u5982\u8f93\u51fa\u4e00\u4e2a\u7528\u6237\u7684\u6240\u6709\u6587\u6863\u3002\u8fd9\u6bd4\u5e38\u89c4\u7684\u641c\u7d22\u8981\u9ad8\u6548\uff0c\u56e0\u4e3a\u8fd9\u91cc\u4e0d\u9700\u8981\u5bf9\u6587\u6863\u6267\u884c\u6027\u80fd\u6d88\u8017\u8f83\u5927\u7684\u6392\u5e8f\u64cd\u4f5c\u3002 Scrolling \u4f1a\u4fdd\u7559\u67d0\u4e2a\u65f6\u95f4\u70b9\u7684\u7d22\u5f15\u5feb\u7167\u6570\u636e\uff0c\u7136\u540e\u7528\u5feb\u7167\u6570\u636e\u8fdb\u884c\u5206\u9875\u3002\u6e38\u6807\u67e5\u8be2\u7a97\u53e3\u5141\u8bb8\u6301\u7eed\u5206\u9875\u64cd\u4f5c\uff0c\u5373\u4f7f\u540e\u53f0\u6b63\u5728\u6267\u884c\u7d22\u5f15\u6587\u6863\u3001\u66f4\u65b0\u6587\u6863\u548c\u5220\u9664\u6587\u6863\u3002\u9996\u5148\uff0c\u4f60\u8981\u5728\u53d1\u9001\u641c\u7d22\u8bf7\u6c42\u65f6\u589e\u52a0 scroll \u53c2\u6570\u3002\u7136\u540e\u5c31\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6587\u6863\u201c\u9875\u6570\u201d\u4fe1\u606f\uff0c\u8fd8\u6709\u4e00\u4e2a\u7528\u6765\u83b7\u53d6 hits \u5206\u9875\u6570\u636e\u7684 scroll_id\u3002 \u66f4\u591a\u8be6\u60c5\u8bf7\u67e5\u770b \u6e38\u6807\u67e5\u8be2 \u3002 \u4ee5\u4e0b\u4ee3\u7801\u66f4\u4e3a\u6df1\u5165\u7684\u64cd\u4f5c\u7684\u793a\u4f8b\uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ \"scroll\" => \"30s\" , // how long between scroll requests. should be small! \"size\" => 50 , // how many results *per shard* you want back \"index\" => \"my_index\" , \"body\" => [ \"query\" => [ \"match_all\" => new \\stdClass () ] ] ]; // Execute the search // The response will contain the first batch of documents // and a scroll_id $response = $client -> search ( $params ); // Now we loop until the scroll \"cursors\" are exhausted while ( isset ( $response [ 'hits' ][ 'hits' ]) && count ( $response [ 'hits' ][ 'hits' ]) > 0 ) { // ** // Do your work here, on the $response['hits']['hits'] array // ** // When done, get the new scroll_id // You must always refresh your _scroll_id! It can change sometimes $scroll_id = $response [ '_scroll_id' ]; // Execute a Scroll request and repeat $response = $client -> scroll ([ \"scroll_id\" => $scroll_id , //...using our previously obtained _scroll_id \"scroll\" => \"30s\" // and the same timeout window ] ); }","title":"\u641c\u7d22\u64cd\u4f5c"},{"location":"elasticsearch/elasticsearch-php/search_operations/#_1","text":"\u5443......\u8fd9\u4e2a\u9879\u76ee\u5982\u679c\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u4e4b\u5904\u5c31\u4e0d\u53eb elasticsearch \u4e86\uff01\u73b0\u5728\u4e00\u8d77\u6765\u804a\u804a\u5ba2\u6237\u7aef\u7684\u641c\u7d22\u64cd\u4f5c\u3002 \u5728\u547d\u540d\u65b9\u6848\u89c4\u8303\u7684\u524d\u63d0\u4e0b\uff0c\u5ba2\u6237\u7aef\u62e5\u6709\u4e00\u5207\u7684\u67e5\u8be2\u6743\u9650\uff0c\u4e5f\u62e5\u6709\u83b7\u53d6 REST API \u516c\u5f00\u7684\u4e00\u5207\u53c2\u6570\u7684\u6743\u9650\u3002\u73b0\u5728\u6765\u770b\u770b\u4e00\u4e9b\u793a\u4f8b\uff0c\u65b9\u4fbf\u4f60\u719f\u6089\u8fd9\u4e9b\u8bed\u6cd5\u89c4\u5219\u3002","title":"\u641c\u7d22\u64cd\u4f5c"},{"location":"elasticsearch/elasticsearch-php/search_operations/#match","text":"\u4ee5\u4e0b\u662f Match \u67e5\u8be2\u7684\u6807\u51c6 curl \u683c\u5f0f\uff1a curl -XGET 'localhost:9200/my_index/my_type/_search' -d '{ \"query\" : { \"match\" : { \"testField\" : \"abc\" } } }' \u800c\u8fd9\u91cc\u5219\u662f\u5ba2\u6237\u7aef\u6784\u5efa\u7684\u540c\u6837\u7684\u67e5\u8be2\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'body' => [ 'query' => [ 'match' => [ 'testField' => 'abc' ] ] ] ]; $results = $client -> search ( $params ); \u8fd9\u91cc\u8981\u6ce8\u610f PHP \u6570\u7ec4\u7684\u7ed3\u6784\u4e0e\u5c42\u6b21\u662f\u600e\u6837\u4e0e curl \u4e2d\u7684 JSON \u8bf7\u6c42\u4f53\u683c\u5f0f\u76f8\u5e94\u5bf9\u7684\u3002\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u5f97 JSON \u7684\u5199\u6cd5\u8f6c\u6362\u4e3a PHP \u7684\u5199\u6cd5\u53d8\u5f97\u5341\u5206\u7b80\u5355\u3002\u4e00\u4e2a\u5feb\u901f\u68c0\u6d4b PHP \u6570\u7ec4\u662f\u5426\u4e3a\u9884\u671f\u7ed3\u679c\u7684\u65b9\u6cd5\uff0c\u5c31\u662f encode \u4e3a JSON \u683c\u5f0f\uff0c\u7136\u540e\u8fdb\u884c\u68c0\u67e5\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'body' => [ 'query' => [ 'match' => [ 'testField' => 'abc' ] ] ] ]; print_r ( json_encode ( $params [ 'body' ])); { \"query\" : { \"match\" : { \"testField\" : \"abc\" }}} \u4f7f\u7528\u539f\u751fJSON \u6709\u65f6\u4f7f\u7528\u539f\u751f JSON \u6765\u8fdb\u884c\u6d4b\u8bd5\u4f1a\u5341\u5206\u65b9\u4fbf\uff0c\u6216\u8005\u7528\u539f\u751f JSON \u6765\u8fdb\u884c\u4e0d\u540c\u7cfb\u7edf\u7684\u79fb\u690d\u4e5f\u540c\u6837\u65b9\u4fbf\u3002\u4f60\u53ef\u4ee5\u5728 body \u4e2d\u7528\u539f\u751f JSON \u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u5ba2\u6237\u7aef\u4f1a\u81ea\u52a8\u8fdb\u884c\u68c0\u67e5\u64cd\u4f5c\uff1a <?php $json = '{ \"query\" : { \"match\" : { \"testField\" : \"abc\" } } }' ; $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'body' => $json ]; $results = $client -> search ( $params ); \u641c\u7d22\u7ed3\u679c\u4e0e Elasticsearch \u7684\u54cd\u5e94\u7ed3\u679c\u4e00\u81f4\uff0c\u552f\u4e00\u4e0d\u540c\u7684\u662f JSON \u683c\u5f0f\u4f1a\u8f6c\u6362\u6210 PHP \u6570\u7ec4\u3002\u5904\u7406\u8fd9\u4e9b\u6570\u636e\u4e0e\u6570\u7ec4\u8fed\u4ee3\u4e00\u6837\u7b80\u5355\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'body' => [ 'query' => [ 'match' => [ 'testField' => 'abc' ] ] ] ]; $results = $client -> search ( $params ); $milliseconds = $results [ 'took' ]; $maxScore = $results [ 'hits' ][ 'max_score' ]; $score = $results [ 'hits' ][ 'hits' ][ 0 ][ '_score' ]; $doc = $results [ 'hits' ][ 'hits' ][ 0 ][ '_source' ];","title":"Match\u67e5\u8be2"},{"location":"elasticsearch/elasticsearch-php/search_operations/#bool","text":"\u5229\u7528\u5ba2\u6237\u7aef\u53ef\u4ee5\u8f7b\u677e\u6784\u5efa Bool \u67e5\u8be2\u3002\u4f8b\u5982\u4ee5\u4e0b\u67e5\u8be2\uff1a curl -XGET 'localhost:9200/my_index/my_type/_search' -d '{ \"query\" : { \"bool\" : { \"must\": [ { \"match\" : { \"testField\" : \"abc\" } }, { \"match\" : { \"testField2\" : \"xyz\" } } ] } } }' \u4f1a\u6784\u5efa\u4e3a\u8fd9\u6837\u5b50\uff08\u6ce8\u610f\u65b9\u62ec\u53f7\u4f4d\u7f6e\uff09\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'body' => [ 'query' => [ 'bool' => [ 'must' => [ [ 'match' => [ 'testField' => 'abc' ] ], [ 'match' => [ 'testField2' => 'xyz' ] ], ] ] ] ] ]; $results = $client -> search ( $params ); \u8fd9\u91cc\u6ce8\u610f must \u8bed\u53e5\u63a5\u6536\u7684\u662f\u6570\u7ec4\u3002\u8fd9\u91cc\u4f1a\u8f6c\u5316\u4e3a JSON \u6570\u7ec4\uff0c\u6240\u4ee5\u6700\u540e\u7684\u54cd\u5e94\u7ed3\u679c\u4e0e curl \u683c\u5f0f\u7684\u54cd\u5e94\u7ed3\u679c\u4e00\u81f4\u3002\u60f3\u4e86\u89e3 PHP \u4e2d\u6570\u7ec4\u548c\u5bf9\u8c61\u7684\u8f6c\u6362\uff0c\u8bf7\u67e5\u770b \u7528PHP\u5904\u7406JSON\u6570\u7ec4\u548cJSON\u5bf9\u8c61 \u3002","title":"Bool\u67e5\u8be2"},{"location":"elasticsearch/elasticsearch-php/search_operations/#_2","text":"\u8fd9\u91cc\u6784\u5efa\u4e00\u4e2a\u6709\u70b9\u590d\u6742\u7684\u4f8b\u5b50\uff1a\u4e00\u4e2a bool \u67e5\u8be2\u5305\u542b\u4e00\u4e2a filter \u8fc7\u6ee4\u5668\u548c\u4e00\u4e2a\u666e\u901a\u67e5\u8be2\u3002\u8fd9\u5728 elasticsearch \u7684\u67e5\u8be2\u4e2d\u975e\u5e38\u666e\u904d\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4f8b\u5b50\u4f1a\u975e\u5e38\u6709\u7528\u3002 curl \u683c\u5f0f\u7684\u67e5\u8be2\uff1a curl -XGET 'localhost:9200/my_index/my_type/_search' -d '{ \"query\" : { \"bool\" : { \"filter\" : { \"term\" : { \"my_field\" : \"abc\" } }, \"should\" : { \"match\" : { \"my_other_field\" : \"xyz\" } } } } }' \u800c\u5728 PHP \u4e2d\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'body' => [ 'query' => [ 'bool' => [ 'filter' => [ 'term' => [ 'my_field' => 'abc' ] ], 'should' => [ 'match' => [ 'my_other_field' => 'xyz' ] ] ] ] ] ]; $results = $client -> search ( $params );","title":"\u66f4\u4e3a\u590d\u6742\u7684\u793a\u4f8b"},{"location":"elasticsearch/elasticsearch-php/search_operations/#scrolling","text":"\u5728\u7528 bulk \u65f6\uff0c\u7ecf\u5e38\u8981\u7528 Scrolling \u529f\u80fd\u5bf9\u6587\u6863\u8fdb\u884c\u5206\u9875\u5904\u7406\uff0c\u5982\u8f93\u51fa\u4e00\u4e2a\u7528\u6237\u7684\u6240\u6709\u6587\u6863\u3002\u8fd9\u6bd4\u5e38\u89c4\u7684\u641c\u7d22\u8981\u9ad8\u6548\uff0c\u56e0\u4e3a\u8fd9\u91cc\u4e0d\u9700\u8981\u5bf9\u6587\u6863\u6267\u884c\u6027\u80fd\u6d88\u8017\u8f83\u5927\u7684\u6392\u5e8f\u64cd\u4f5c\u3002 Scrolling \u4f1a\u4fdd\u7559\u67d0\u4e2a\u65f6\u95f4\u70b9\u7684\u7d22\u5f15\u5feb\u7167\u6570\u636e\uff0c\u7136\u540e\u7528\u5feb\u7167\u6570\u636e\u8fdb\u884c\u5206\u9875\u3002\u6e38\u6807\u67e5\u8be2\u7a97\u53e3\u5141\u8bb8\u6301\u7eed\u5206\u9875\u64cd\u4f5c\uff0c\u5373\u4f7f\u540e\u53f0\u6b63\u5728\u6267\u884c\u7d22\u5f15\u6587\u6863\u3001\u66f4\u65b0\u6587\u6863\u548c\u5220\u9664\u6587\u6863\u3002\u9996\u5148\uff0c\u4f60\u8981\u5728\u53d1\u9001\u641c\u7d22\u8bf7\u6c42\u65f6\u589e\u52a0 scroll \u53c2\u6570\u3002\u7136\u540e\u5c31\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6587\u6863\u201c\u9875\u6570\u201d\u4fe1\u606f\uff0c\u8fd8\u6709\u4e00\u4e2a\u7528\u6765\u83b7\u53d6 hits \u5206\u9875\u6570\u636e\u7684 scroll_id\u3002 \u66f4\u591a\u8be6\u60c5\u8bf7\u67e5\u770b \u6e38\u6807\u67e5\u8be2 \u3002 \u4ee5\u4e0b\u4ee3\u7801\u66f4\u4e3a\u6df1\u5165\u7684\u64cd\u4f5c\u7684\u793a\u4f8b\uff1a <?php $client = ClientBuilder :: create () -> build (); $params = [ \"scroll\" => \"30s\" , // how long between scroll requests. should be small! \"size\" => 50 , // how many results *per shard* you want back \"index\" => \"my_index\" , \"body\" => [ \"query\" => [ \"match_all\" => new \\stdClass () ] ] ]; // Execute the search // The response will contain the first batch of documents // and a scroll_id $response = $client -> search ( $params ); // Now we loop until the scroll \"cursors\" are exhausted while ( isset ( $response [ 'hits' ][ 'hits' ]) && count ( $response [ 'hits' ][ 'hits' ]) > 0 ) { // ** // Do your work here, on the $response['hits']['hits'] array // ** // When done, get the new scroll_id // You must always refresh your _scroll_id! It can change sometimes $scroll_id = $response [ '_scroll_id' ]; // Execute a Scroll request and repeat $response = $client -> scroll ([ \"scroll_id\" => $scroll_id , //...using our previously obtained _scroll_id \"scroll\" => \"30s\" // and the same timeout window ] ); }","title":"Scrolling\uff08\u6e38\u6807\uff09\u67e5\u8be2"},{"location":"elasticsearch/elasticsearch-php/security/","text":"\u5b89\u5168 # Elasticsearch-PHP \u5ba2\u6237\u7aef\u652f\u6301\u4e24\u79cd\u5b89\u5168\u8bbe\u7f6e\u65b9\u5f0f\uff1aHTTP \u8ba4\u8bc1\u548c SSL \u52a0\u5bc6\u3002 HTTP \u8ba4\u8bc1 # \u5982\u679c\u4f60\u7684 Elasticsearch \u662f\u901a\u8fc7 HTTP \u8ba4\u8bc1\u6765\u7ef4\u6301\u5b89\u5168\uff0c\u4f60\u5c31\u8981\u4e3a Elasticsearch-PHP \u5ba2\u6237\u7aef\u63d0\u4f9b\u8eab\u4efd\u51ed\u8bc1\uff08credentials\uff09\uff0c\u8fd9\u6837\u670d\u52a1\u7aef\u624d\u80fd\u8ba4\u8bc1\u5ba2\u6237\u7aef\u8bf7\u6c42\u3002\u5728\u5b9e\u4f8b\u5316\u5ba2\u6237\u7aef\u65f6\uff0c\u8eab\u4efd\u51ed\u8bc1\uff08credentials\uff09\u9700\u8981\u914d\u7f6e\u5728 host \u6570\u7ec4\u4e2d\uff1a <?php $hosts = [ 'http://user:pass@localhost:9200' , // HTTP Basic Authentication 'http://user2:pass2@other-host.com:9200' // Different credentials on different host ]; $client = ClientBuilder :: create () -> setHosts ( $hosts ) -> build (); \u6bcf\u4e2a host \u90fd\u8981\u6dfb\u52a0\u8eab\u4efd\u51ed\u8bc1\uff08credentials\uff09\uff0c\u8fd9\u6837\u7684\u8bdd\u6bcf\u4e2a host \u90fd\u62e5\u6709\u81ea\u5df1\u7684\u8eab\u4efd\u51ed\u8bc1\uff08credentials\uff09\u3002\u6240\u6709\u53d1\u9001\u5230\u96c6\u7fa4\u4e2d\u7684\u8bf7\u6c42\u90fd\u4f1a\u6839\u636e\u8bbf\u95ee\u8282\u70b9\u6765\u4f7f\u7528\u76f8\u5e94\u7684\u8eab\u4efd\u51ed\u8bc1\uff08credentials\uff09\u3002 SSL \u52a0\u5bc6 # \u914d\u7f6e SSL \u4f1a\u6709\u4e9b\u590d\u6742\u3002\u4f60\u8981\u53bb\u8bc6\u522b Certificate Authority (CA) \u7b7e\u540d\u7684\u8bc1\u4e66\u6216\u8005\u81ea\u7b7e\u540d\u8bc1\u4e66\u3002 libcurl\u7248\u672c\u6ce8\u610f\u4e8b\u9879 \u5982\u679c\u4f60\u89c9\u5f97\u5ba2\u6237\u7aef\u5df2\u7ecf\u6b63\u786e\u914d\u7f6e SSL\uff0c\u4f46\u662f\u6ca1\u6709\u8d77\u6548\uff0c\u8bf7\u68c0\u67e5\u4f60\u7684 libcurl \u7248\u672c\u3002\u5728\u67d0\u4e9b\u5e73\u53f0\u4e0a\uff0c\u4e00\u4e9b\u8bbe\u7f6e\u53ef\u80fd\u6709\u6548\u4e5f\u53ef\u80fd\u65e0\u6548\uff0c\u8fd9\u53d6\u51b3\u4e8e libcurl \u7248\u672c\u53f7\u3002\u4f8b\u5982\u76f4\u5230 libcurl 7.37.1\uff0cOSX \u5e73\u53f0\u7684 libcurl \u624d\u6dfb\u52a0 --cacert \u9009\u9879\u3002 --cacert \u9009\u9879\u5bf9\u5e94 PHP \u7684 CURLOPT_CAINFO \u5e38\u91cf\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u81ea\u5b9a\u4e49\u7684\u8bc1\u4e66\u5728\u4f4e\u7248\u672c\u4e0b\u662f\u65e0\u6cd5\u4f7f\u7528\u7684\u3002 \u5982\u679c\u4f60\u73b0\u5728\u6b63\u9762\u4e34\u8fd9\u4e2a\u95ee\u9898\uff0c\u8bf7\u66f4\u65b0\u4f60\u7684 libcurl\uff0c\u7136\u540e/\u6216\u8005\u67e5\u770b curl changelog \u6709\u65e0\u589e\u52a0\u8be5\u9009\u9879\u3002 \u516c\u5171 CA \u8bc1\u4e66 # \u5982\u679c\u4f60\u7684\u8bc1\u4e66\u662f\u516c\u5171 CA \u7b7e\u540d\u8bc1\u4e66\uff0c\u4e14\u4f60\u7684\u670d\u52a1\u5668\u7528\u7684\u662f\u6700\u65b0\u7684\u6839\u8bc1\u4e66\uff0c\u4f60\u53ea\u9700\u8981\u5728 host \u4e2d\u4f7f\u7528 https\u3002\u5ba2\u6237\u7aef\u4f1a\u81ea\u52a8\u8bc6\u522b SSL \u8bc1\u4e66\uff1a <?php $hosts = [ 'https://localhost:9200' < 1 > ]; $client = ClientBuilder :: create () -> setHosts ( $hosts ) -> build (); <1> \u6ce8\u610f\uff1a\u8fd9\u91cc\u7528\u7684\u662f https \u800c\u975e http \u5982\u679c\u670d\u52a1\u5668\u7684\u6839\u8bc1\u4e66\u5df2\u7ecf\u8fc7\u671f\uff0c\u4f60\u5c31\u8981\u7528\u8bc1\u4e66 bundle\u3002\u5bf9\u4e8e\u5ba2\u6237\u7aef\u6765\u8bf4\uff0c\u6700\u597d\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 composer/ca-bundle \u3002\u4e00\u65e6\u5b89\u88c5\u597d ca-bundle\uff0c\u4f60\u8981\u544a\u8bc9\u5ba2\u6237\u7aef\u4f7f\u7528\u4f60\u63d0\u4f9b\u7684\u8bc1\u4e66\u6765\u66ff\u4ee3\u7cfb\u7edf\u7684 bundle\uff1a <?php $hosts = [ 'https://localhost:9200' ]; $caBundle = \\Composer\\CaBundle\\CaBundle :: getBundledCaBundlePath (); $client = ClientBuilder :: create () -> setHosts ( $hosts ) -> setSSLVerification ( $caBundle ) -> build (); \u81ea\u7b7e\u540d\u8bc1\u4e66 # \u81ea\u7b7e\u540d\u8bc1\u4e66\u662f\u6307\u6ca1\u6709\u88ab\u516c\u5171 CA \u7b7e\u540d\u7684\u8bc1\u4e66\u3002\u81ea\u7b7e\u540d\u8bc1\u4e66\u7531\u4f60\u81ea\u5df1\u7684\u7ec4\u7ec7\u6765\u7b7e\u540d\u3002\u5728\u4f60\u786e\u4fdd\u5b89\u5168\u53d1\u9001\u81ea\u5df1\u7684\u6839\u8bc1\u4e66\u524d\u63d0\u4e0b\uff0c\u81ea\u7b7e\u540d\u8bc1\u4e66\u53ef\u7528\u4f5c\u5185\u90e8\u4f7f\u7528\u7684\u3002\u5f53\u81ea\u7b7e\u540d\u8bc1\u4e66\u66b4\u9732\u7ed9\u516c\u4f17\u5ba2\u6237\u65f6\u5c31\u4e0d\u5e94\u8be5\u4f7f\u7528\u4e86\uff0c\u56e0\u4e3a\u5ba2\u6237\u7aef\u5bb9\u6613\u53d7\u5230\u4e2d\u95f4\u4eba\u653b\u51fb\u3002 \u5982\u679c\u4f60\u6b63\u4f7f\u7528\u81ea\u7b7e\u540d\u8bc1\u4e66\uff0c\u4f60\u8981\u7ed9\u5ba2\u6237\u7aef\u63d0\u4f9b\u8bc1\u4e66\u8def\u5f84\u3002\u8fd9\u4e0e\u6307\u5b9a\u4e00\u4e2a\u6839 bundle \u7684\u8bed\u6cd5\u4e00\u81f4\uff0c\u53ea\u662f\u628a\u6839 bundle \u66ff\u6362\u4e3a\u81ea\u7b7e\u540d\u8bc1\u4e66\uff1a <?php $hosts = [ 'https://localhost:9200' ]; $myCert = 'path/to/cacert.pem' ; $client = ClientBuilder :: create () -> setHosts ( $hosts ) -> setSSLVerification ( $myCert ) -> build (); \u540c\u65f6\u4f7f\u7528\u8ba4\u8bc1\u4e0e SSL # \u540c\u65f6\u4f7f\u7528\u8ba4\u8bc1\u4e0e SSL \u4e5f\u662f\u6709\u53ef\u80fd\u7684\u3002\u5728 URI \u4e2d\u6307\u5b9a https \u4e0e\u8eab\u4efd\u51ed\u8bc1\uff08credentials\uff09\uff0c\u540c\u65f6\u63d0\u4f9b SSL \u6240\u9700\u7684\u81ea\u7b7e\u540d\u8bc1\u4e66\u3002\u4f8b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u6bb5\u5c31\u540c\u65f6\u4f7f\u7528\u4e86 HTTP \u8ba4\u8bc1\u548c\u81ea\u7b7e\u540d\u8bc1\u4e66\uff1a <?php $hosts = [ 'https://user:pass@localhost:9200' ]; $myCert = 'path/to/cacert.pem' ; $client = ClientBuilder :: create () -> setHosts ( $hosts ) -> setSSLVerification ( $myCert ) -> build ();","title":"\u5b89\u5168"},{"location":"elasticsearch/elasticsearch-php/security/#_1","text":"Elasticsearch-PHP \u5ba2\u6237\u7aef\u652f\u6301\u4e24\u79cd\u5b89\u5168\u8bbe\u7f6e\u65b9\u5f0f\uff1aHTTP \u8ba4\u8bc1\u548c SSL \u52a0\u5bc6\u3002","title":"\u5b89\u5168"},{"location":"elasticsearch/elasticsearch-php/security/#http","text":"\u5982\u679c\u4f60\u7684 Elasticsearch \u662f\u901a\u8fc7 HTTP \u8ba4\u8bc1\u6765\u7ef4\u6301\u5b89\u5168\uff0c\u4f60\u5c31\u8981\u4e3a Elasticsearch-PHP \u5ba2\u6237\u7aef\u63d0\u4f9b\u8eab\u4efd\u51ed\u8bc1\uff08credentials\uff09\uff0c\u8fd9\u6837\u670d\u52a1\u7aef\u624d\u80fd\u8ba4\u8bc1\u5ba2\u6237\u7aef\u8bf7\u6c42\u3002\u5728\u5b9e\u4f8b\u5316\u5ba2\u6237\u7aef\u65f6\uff0c\u8eab\u4efd\u51ed\u8bc1\uff08credentials\uff09\u9700\u8981\u914d\u7f6e\u5728 host \u6570\u7ec4\u4e2d\uff1a <?php $hosts = [ 'http://user:pass@localhost:9200' , // HTTP Basic Authentication 'http://user2:pass2@other-host.com:9200' // Different credentials on different host ]; $client = ClientBuilder :: create () -> setHosts ( $hosts ) -> build (); \u6bcf\u4e2a host \u90fd\u8981\u6dfb\u52a0\u8eab\u4efd\u51ed\u8bc1\uff08credentials\uff09\uff0c\u8fd9\u6837\u7684\u8bdd\u6bcf\u4e2a host \u90fd\u62e5\u6709\u81ea\u5df1\u7684\u8eab\u4efd\u51ed\u8bc1\uff08credentials\uff09\u3002\u6240\u6709\u53d1\u9001\u5230\u96c6\u7fa4\u4e2d\u7684\u8bf7\u6c42\u90fd\u4f1a\u6839\u636e\u8bbf\u95ee\u8282\u70b9\u6765\u4f7f\u7528\u76f8\u5e94\u7684\u8eab\u4efd\u51ed\u8bc1\uff08credentials\uff09\u3002","title":"HTTP \u8ba4\u8bc1"},{"location":"elasticsearch/elasticsearch-php/security/#ssl","text":"\u914d\u7f6e SSL \u4f1a\u6709\u4e9b\u590d\u6742\u3002\u4f60\u8981\u53bb\u8bc6\u522b Certificate Authority (CA) \u7b7e\u540d\u7684\u8bc1\u4e66\u6216\u8005\u81ea\u7b7e\u540d\u8bc1\u4e66\u3002 libcurl\u7248\u672c\u6ce8\u610f\u4e8b\u9879 \u5982\u679c\u4f60\u89c9\u5f97\u5ba2\u6237\u7aef\u5df2\u7ecf\u6b63\u786e\u914d\u7f6e SSL\uff0c\u4f46\u662f\u6ca1\u6709\u8d77\u6548\uff0c\u8bf7\u68c0\u67e5\u4f60\u7684 libcurl \u7248\u672c\u3002\u5728\u67d0\u4e9b\u5e73\u53f0\u4e0a\uff0c\u4e00\u4e9b\u8bbe\u7f6e\u53ef\u80fd\u6709\u6548\u4e5f\u53ef\u80fd\u65e0\u6548\uff0c\u8fd9\u53d6\u51b3\u4e8e libcurl \u7248\u672c\u53f7\u3002\u4f8b\u5982\u76f4\u5230 libcurl 7.37.1\uff0cOSX \u5e73\u53f0\u7684 libcurl \u624d\u6dfb\u52a0 --cacert \u9009\u9879\u3002 --cacert \u9009\u9879\u5bf9\u5e94 PHP \u7684 CURLOPT_CAINFO \u5e38\u91cf\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u81ea\u5b9a\u4e49\u7684\u8bc1\u4e66\u5728\u4f4e\u7248\u672c\u4e0b\u662f\u65e0\u6cd5\u4f7f\u7528\u7684\u3002 \u5982\u679c\u4f60\u73b0\u5728\u6b63\u9762\u4e34\u8fd9\u4e2a\u95ee\u9898\uff0c\u8bf7\u66f4\u65b0\u4f60\u7684 libcurl\uff0c\u7136\u540e/\u6216\u8005\u67e5\u770b curl changelog \u6709\u65e0\u589e\u52a0\u8be5\u9009\u9879\u3002","title":"SSL \u52a0\u5bc6"},{"location":"elasticsearch/elasticsearch-php/security/#ca","text":"\u5982\u679c\u4f60\u7684\u8bc1\u4e66\u662f\u516c\u5171 CA \u7b7e\u540d\u8bc1\u4e66\uff0c\u4e14\u4f60\u7684\u670d\u52a1\u5668\u7528\u7684\u662f\u6700\u65b0\u7684\u6839\u8bc1\u4e66\uff0c\u4f60\u53ea\u9700\u8981\u5728 host \u4e2d\u4f7f\u7528 https\u3002\u5ba2\u6237\u7aef\u4f1a\u81ea\u52a8\u8bc6\u522b SSL \u8bc1\u4e66\uff1a <?php $hosts = [ 'https://localhost:9200' < 1 > ]; $client = ClientBuilder :: create () -> setHosts ( $hosts ) -> build (); <1> \u6ce8\u610f\uff1a\u8fd9\u91cc\u7528\u7684\u662f https \u800c\u975e http \u5982\u679c\u670d\u52a1\u5668\u7684\u6839\u8bc1\u4e66\u5df2\u7ecf\u8fc7\u671f\uff0c\u4f60\u5c31\u8981\u7528\u8bc1\u4e66 bundle\u3002\u5bf9\u4e8e\u5ba2\u6237\u7aef\u6765\u8bf4\uff0c\u6700\u597d\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 composer/ca-bundle \u3002\u4e00\u65e6\u5b89\u88c5\u597d ca-bundle\uff0c\u4f60\u8981\u544a\u8bc9\u5ba2\u6237\u7aef\u4f7f\u7528\u4f60\u63d0\u4f9b\u7684\u8bc1\u4e66\u6765\u66ff\u4ee3\u7cfb\u7edf\u7684 bundle\uff1a <?php $hosts = [ 'https://localhost:9200' ]; $caBundle = \\Composer\\CaBundle\\CaBundle :: getBundledCaBundlePath (); $client = ClientBuilder :: create () -> setHosts ( $hosts ) -> setSSLVerification ( $caBundle ) -> build ();","title":"\u516c\u5171 CA \u8bc1\u4e66"},{"location":"elasticsearch/elasticsearch-php/security/#_2","text":"\u81ea\u7b7e\u540d\u8bc1\u4e66\u662f\u6307\u6ca1\u6709\u88ab\u516c\u5171 CA \u7b7e\u540d\u7684\u8bc1\u4e66\u3002\u81ea\u7b7e\u540d\u8bc1\u4e66\u7531\u4f60\u81ea\u5df1\u7684\u7ec4\u7ec7\u6765\u7b7e\u540d\u3002\u5728\u4f60\u786e\u4fdd\u5b89\u5168\u53d1\u9001\u81ea\u5df1\u7684\u6839\u8bc1\u4e66\u524d\u63d0\u4e0b\uff0c\u81ea\u7b7e\u540d\u8bc1\u4e66\u53ef\u7528\u4f5c\u5185\u90e8\u4f7f\u7528\u7684\u3002\u5f53\u81ea\u7b7e\u540d\u8bc1\u4e66\u66b4\u9732\u7ed9\u516c\u4f17\u5ba2\u6237\u65f6\u5c31\u4e0d\u5e94\u8be5\u4f7f\u7528\u4e86\uff0c\u56e0\u4e3a\u5ba2\u6237\u7aef\u5bb9\u6613\u53d7\u5230\u4e2d\u95f4\u4eba\u653b\u51fb\u3002 \u5982\u679c\u4f60\u6b63\u4f7f\u7528\u81ea\u7b7e\u540d\u8bc1\u4e66\uff0c\u4f60\u8981\u7ed9\u5ba2\u6237\u7aef\u63d0\u4f9b\u8bc1\u4e66\u8def\u5f84\u3002\u8fd9\u4e0e\u6307\u5b9a\u4e00\u4e2a\u6839 bundle \u7684\u8bed\u6cd5\u4e00\u81f4\uff0c\u53ea\u662f\u628a\u6839 bundle \u66ff\u6362\u4e3a\u81ea\u7b7e\u540d\u8bc1\u4e66\uff1a <?php $hosts = [ 'https://localhost:9200' ]; $myCert = 'path/to/cacert.pem' ; $client = ClientBuilder :: create () -> setHosts ( $hosts ) -> setSSLVerification ( $myCert ) -> build ();","title":"\u81ea\u7b7e\u540d\u8bc1\u4e66"},{"location":"elasticsearch/elasticsearch-php/security/#ssl_1","text":"\u540c\u65f6\u4f7f\u7528\u8ba4\u8bc1\u4e0e SSL \u4e5f\u662f\u6709\u53ef\u80fd\u7684\u3002\u5728 URI \u4e2d\u6307\u5b9a https \u4e0e\u8eab\u4efd\u51ed\u8bc1\uff08credentials\uff09\uff0c\u540c\u65f6\u63d0\u4f9b SSL \u6240\u9700\u7684\u81ea\u7b7e\u540d\u8bc1\u4e66\u3002\u4f8b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u6bb5\u5c31\u540c\u65f6\u4f7f\u7528\u4e86 HTTP \u8ba4\u8bc1\u548c\u81ea\u7b7e\u540d\u8bc1\u4e66\uff1a <?php $hosts = [ 'https://user:pass@localhost:9200' ]; $myCert = 'path/to/cacert.pem' ; $client = ClientBuilder :: create () -> setHosts ( $hosts ) -> setSSLVerification ( $myCert ) -> build ();","title":"\u540c\u65f6\u4f7f\u7528\u8ba4\u8bc1\u4e0e  SSL"},{"location":"elasticsearch/elasticsearch-php/selectors/","text":"\u9009\u62e9\u5668 # \u8fde\u63a5\u6c60\u7ef4\u6301\u4e00\u4efd\u8fde\u63a5\u6e05\u5355\uff0c\u5b83\u51b3\u5b9a\u8282\u70b9\u5728\u4ec0\u4e48\u65f6\u5019\u4ece\u6d3b\u8282\u70b9\u8f6c\u53d8\u4e3a\u6b7b\u8282\u70b9\uff08\u6216\u6b7b\u8282\u70b9\u8f6c\u53d8\u4e3a\u6d3b\u8282\u70b9\uff09\u3002\u7136\u800c\u8fde\u63a5\u6c60\u9009\u62e9\u8fde\u63a5\u5bf9\u8c61\u65f6\u662f\u6ca1\u6709\u903b\u8f91\u7684\uff0c\u8fd9\u4efd\u5de5\u4f5c\u5c5e\u4e8e Selector \u7c7b\u3002 \u9009\u62e9\u5668\uff08selector\uff09\u7684\u5de5\u4f5c\u662f\u4ece\u8fde\u63a5\u6570\u7ec4\u4e2d\u8fd4\u56de\u4e00\u4e2a\u8fde\u63a5\u3002\u548c\u8fde\u63a5\u6c60\u4e00\u6837\uff0c\u4e5f\u6709\u51e0\u79cd\u9009\u62e9\u5668\u53ef\u4f9b\u9009\u62e9\u3002 RoundRobinSelector\uff08\u9ed8\u8ba4\uff09 # \u9009\u62e9\u5668\u901a\u8fc7\u8f6e\u8be2\u8c03\u5ea6\u7684\u65b9\u5f0f\u6765\u8fd4\u56de\u8fde\u63a5\u3002\u4f8b\u5982\u5728\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u4e2d\u9009\u62e9\u8282\u70b91\uff0c\u5728\u7b2c\u4e8c\u8bf7\u6c42\u4e2d\u9009\u62e9\u8282\u70b9 2\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u8fd9\u786e\u4fdd\u96c6\u7fa4\u4e2d\u7684\u8282\u70b9\u5e73\u5747\u8d1f\u62c5\u6d41\u91cf\u3002\u8f6e\u8be2\u8c03\u5ea6\u662f\u57fa\u4e8e\u6bcf\u4e2a\u8bf7\u6c42\u6765\u6267\u884c\u7684\uff08\u4f8b\u5982\uff0c\u4e00\u4e2aPHP\u811a\u672c\u7684\u6240\u6709\u8bf7\u6c42\u8f6e\u6d41\u53d1\u9001\u5230\u4e0d\u540c\u7684\u8282\u70b9\u4e2d\uff09\u3002 RoundRobinSelector \u662f\u9ed8\u8ba4\u9009\u62e9\u5668\uff0c\u4f46\u5982\u679c\u4f60\u60f3\u660e\u786e\u5730\u914d\u7f6e\u8be5\u9009\u62e9\u5668\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a <?php $client = ClientBuilder :: create () -> setSelector ( '\\Elasticsearch\\ConnectionPool\\Selectors\\RoundRobinSelector' ) -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u6307\u5b9a\u9009\u62e9\u5668\u3002 StickyRoundRobinSelector # \u8fd9\u4e2a\u9009\u62e9\u5668\u5177\u6709\u201c\u7c98\u6027\u201d\uff0c\u5b83\u66f4\u559c\u6b22\u91cd\u7528\u540c\u4e00\u4e2a\u8fde\u63a5\u3002\u4f8b\u5982\uff0c\u5728\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u4e2d\u9009\u62e9\u8282\u70b91\uff0c\u9009\u62e9\u5668\u4f1a\u91cd\u7528\u8282\u70b91\u6765\u53d1\u9001\u968f\u540e\u7684\u8bf7\u6c42\uff0c\u76f4\u5230\u8282\u70b9\u8bf7\u6c42\u5931\u8d25\u3002\u5728\u8282\u70b91\u8bf7\u6c42\u5931\u8d25\u540e\uff0c\u9009\u62e9\u5668\u4f1a\u8f6e\u8be2\u81f3\u4e0b\u4e00\u4e2a\u53ef\u7528\u8282\u70b9\uff0c\u7136\u540e\u4e00\u76f4\u91cd\u7528\u8fd9\u4e2a\u8282\u70b9\u3002 \u5bf9\u8bb8\u591a PHP \u811a\u672c\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u7406\u60f3\u7684\u7b56\u7565\u3002\u7531\u4e8e PHP \u811a\u672c\u662f\u65e0\u5171\u4eab\u67b6\u6784\u4e14\u4f1a\u5feb\u901f\u9000\u51fa\uff0c\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u521b\u5efa\u65b0\u8fde\u63a5\u901a\u5e38\u662f\u4e00\u79cd\u6b21\u4f18\u7b56\u7565\u4e14\u4f1a\u5f15\u8d77\u5927\u91cf\u7684\u5f00\u9500\u3002\u76f8\u53cd\uff0c\u5728\u811a\u672c\u8fd0\u884c\u671f\u95f4\u201c\u9ecf\u4f4f\u201d\u5355\u4e2a\u8282\u70b9\u4f1a\u66f4\u597d\u3002 \u8fd9\u4e2a\u9009\u62e9\u5668\u4f1a\u9ed8\u8ba4\u4f1a\u5728\u521d\u59cb\u5316\u65f6\u628a hosts \u968f\u673a\u6253\u4e71\uff0c\u4f46\u4ecd\u7136\u4fdd\u8bc1\u96c6\u7fa4\u4e2d\u7684\u8282\u70b9\u5e73\u5747\u8d1f\u62c5\u6d41\u91cf\u3002\u5b83\u52a8\u6001\u5730\u66f4\u6539\u8f6e\u8be2\u65b9\u5f0f\uff0c\u628a\u8f6e\u8be2\u6bcf\u4e2a\u8bf7\u6c42\u53d8\u6210\u8f6e\u8be2\u6bcf\u4e2a\u811a\u672c\u3002 \u5982\u679c\u4f60\u4f7f\u7528 Future \u6a21\u5f0f \uff0c\u8fd9\u79cd\u9009\u62e9\u5668\u7684\u201c\u7c98\u6027\u201d\u884c\u4e3a\u5c31\u4e0d\u7406\u60f3\u4e86\uff0c\u56e0\u4e3a\u6240\u6709\u5e76\u884c\u7684\u8bf7\u6c42\u4f1a\u53d1\u9001\u5230\u96c6\u7fa4\u4e2d\u7684\u540c\u4e00\u4e2a\u8282\u70b9\u800c\u975e\u591a\u4e2a\u8282\u70b9\u3002\u5f53\u4f7f\u7528 Future \u6a21\u5f0f\u65f6\uff0c\u9ed8\u8ba4\u7684 RoundRobinSelector \u9009\u62e9\u5668\u4f1a\u66f4\u597d\u3002 \u5982\u679c\u4f60\u8981\u4f7f\u7528\u8be5\u9009\u62e9\u5668\uff0c\u4f60\u8981\u8fd9\u6837\u505a\uff1a <?php $client = ClientBuilder :: create () -> setSelector ( '\\Elasticsearch\\ConnectionPool\\Selectors\\StickyRoundRobinSelector' ) -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u6307\u5b9a\u9009\u62e9\u5668\u3002 RandomSelector # \u8fd9\u79cd\u9009\u62e9\u5668\u4ec5\u4ec5\u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u7684\u8282\u70b9\uff0c\u4e0d\u7ba1\u8282\u70b9\u662f\u5904\u4e8e\u4ec0\u4e48\u72b6\u6001\u3002\u8fd9\u4e2a\u9009\u62e9\u5668\u901a\u5e38\u7528\u505a\u6d4b\u8bd5\u3002 \u5982\u679c\u4f60\u8981\u4f7f\u7528\u8be5\u9009\u62e9\u5668\uff0c\u4f60\u8981\u8fd9\u6837\u505a\uff1a <?php $client = ClientBuilder :: create () -> setSelector ( '\\Elasticsearch\\ConnectionPool\\Selectors\\RandomSelector' ) -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u6307\u5b9a\u9009\u62e9\u5668\u3002 \u81ea\u5b9a\u4e49\u9009\u62e9\u5668 # \u4f60\u53ef\u4ee5\u5b9e\u73b0\u81ea\u5b9a\u4e49\u9009\u62e9\u5668\u3002\u81ea\u5b9a\u4e49\u9009\u62e9\u5668\u5fc5\u987b\u5b9e\u73b0 SelectorInterface \u63a5\u53e3\u3002 <?php namespace MyProject\\Selectors ; use Elasticsearch\\Connections\\ConnectionInterface ; use Elasticsearch\\ConnectionPool\\Selectors\\SelectorInterface class MyCustomSelector implements SelectorInterface { /** * Selects the first connection * * @param array $connections Array of Connection objects * * @return ConnectionInterface */ public function select ( $connections ) { // code here } } \u7136\u540e\u4f60\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8c61\u6ce8\u5165\u6216\u547d\u540d\u7a7a\u95f4\u5b9e\u4f8b\u5316\u65b9\u5f0f\u6765\u4f7f\u7528\u81ea\u5b9a\u4e49\u9009\u62e9\u5668\uff1a <?php $mySelector = new MyCustomSelector (); $client = ClientBuilder :: create () -> setSelector ( $mySelector ) // object injection -> setSelector ( '\\MyProject\\Selectors\\FirstSelector' ) // or namespace -> build ();","title":"\u9009\u62e9\u5668"},{"location":"elasticsearch/elasticsearch-php/selectors/#_1","text":"\u8fde\u63a5\u6c60\u7ef4\u6301\u4e00\u4efd\u8fde\u63a5\u6e05\u5355\uff0c\u5b83\u51b3\u5b9a\u8282\u70b9\u5728\u4ec0\u4e48\u65f6\u5019\u4ece\u6d3b\u8282\u70b9\u8f6c\u53d8\u4e3a\u6b7b\u8282\u70b9\uff08\u6216\u6b7b\u8282\u70b9\u8f6c\u53d8\u4e3a\u6d3b\u8282\u70b9\uff09\u3002\u7136\u800c\u8fde\u63a5\u6c60\u9009\u62e9\u8fde\u63a5\u5bf9\u8c61\u65f6\u662f\u6ca1\u6709\u903b\u8f91\u7684\uff0c\u8fd9\u4efd\u5de5\u4f5c\u5c5e\u4e8e Selector \u7c7b\u3002 \u9009\u62e9\u5668\uff08selector\uff09\u7684\u5de5\u4f5c\u662f\u4ece\u8fde\u63a5\u6570\u7ec4\u4e2d\u8fd4\u56de\u4e00\u4e2a\u8fde\u63a5\u3002\u548c\u8fde\u63a5\u6c60\u4e00\u6837\uff0c\u4e5f\u6709\u51e0\u79cd\u9009\u62e9\u5668\u53ef\u4f9b\u9009\u62e9\u3002","title":"\u9009\u62e9\u5668"},{"location":"elasticsearch/elasticsearch-php/selectors/#roundrobinselector","text":"\u9009\u62e9\u5668\u901a\u8fc7\u8f6e\u8be2\u8c03\u5ea6\u7684\u65b9\u5f0f\u6765\u8fd4\u56de\u8fde\u63a5\u3002\u4f8b\u5982\u5728\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u4e2d\u9009\u62e9\u8282\u70b91\uff0c\u5728\u7b2c\u4e8c\u8bf7\u6c42\u4e2d\u9009\u62e9\u8282\u70b9 2\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u8fd9\u786e\u4fdd\u96c6\u7fa4\u4e2d\u7684\u8282\u70b9\u5e73\u5747\u8d1f\u62c5\u6d41\u91cf\u3002\u8f6e\u8be2\u8c03\u5ea6\u662f\u57fa\u4e8e\u6bcf\u4e2a\u8bf7\u6c42\u6765\u6267\u884c\u7684\uff08\u4f8b\u5982\uff0c\u4e00\u4e2aPHP\u811a\u672c\u7684\u6240\u6709\u8bf7\u6c42\u8f6e\u6d41\u53d1\u9001\u5230\u4e0d\u540c\u7684\u8282\u70b9\u4e2d\uff09\u3002 RoundRobinSelector \u662f\u9ed8\u8ba4\u9009\u62e9\u5668\uff0c\u4f46\u5982\u679c\u4f60\u60f3\u660e\u786e\u5730\u914d\u7f6e\u8be5\u9009\u62e9\u5668\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a <?php $client = ClientBuilder :: create () -> setSelector ( '\\Elasticsearch\\ConnectionPool\\Selectors\\RoundRobinSelector' ) -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u6307\u5b9a\u9009\u62e9\u5668\u3002","title":"RoundRobinSelector\uff08\u9ed8\u8ba4\uff09"},{"location":"elasticsearch/elasticsearch-php/selectors/#stickyroundrobinselector","text":"\u8fd9\u4e2a\u9009\u62e9\u5668\u5177\u6709\u201c\u7c98\u6027\u201d\uff0c\u5b83\u66f4\u559c\u6b22\u91cd\u7528\u540c\u4e00\u4e2a\u8fde\u63a5\u3002\u4f8b\u5982\uff0c\u5728\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u4e2d\u9009\u62e9\u8282\u70b91\uff0c\u9009\u62e9\u5668\u4f1a\u91cd\u7528\u8282\u70b91\u6765\u53d1\u9001\u968f\u540e\u7684\u8bf7\u6c42\uff0c\u76f4\u5230\u8282\u70b9\u8bf7\u6c42\u5931\u8d25\u3002\u5728\u8282\u70b91\u8bf7\u6c42\u5931\u8d25\u540e\uff0c\u9009\u62e9\u5668\u4f1a\u8f6e\u8be2\u81f3\u4e0b\u4e00\u4e2a\u53ef\u7528\u8282\u70b9\uff0c\u7136\u540e\u4e00\u76f4\u91cd\u7528\u8fd9\u4e2a\u8282\u70b9\u3002 \u5bf9\u8bb8\u591a PHP \u811a\u672c\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u7406\u60f3\u7684\u7b56\u7565\u3002\u7531\u4e8e PHP \u811a\u672c\u662f\u65e0\u5171\u4eab\u67b6\u6784\u4e14\u4f1a\u5feb\u901f\u9000\u51fa\uff0c\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u521b\u5efa\u65b0\u8fde\u63a5\u901a\u5e38\u662f\u4e00\u79cd\u6b21\u4f18\u7b56\u7565\u4e14\u4f1a\u5f15\u8d77\u5927\u91cf\u7684\u5f00\u9500\u3002\u76f8\u53cd\uff0c\u5728\u811a\u672c\u8fd0\u884c\u671f\u95f4\u201c\u9ecf\u4f4f\u201d\u5355\u4e2a\u8282\u70b9\u4f1a\u66f4\u597d\u3002 \u8fd9\u4e2a\u9009\u62e9\u5668\u4f1a\u9ed8\u8ba4\u4f1a\u5728\u521d\u59cb\u5316\u65f6\u628a hosts \u968f\u673a\u6253\u4e71\uff0c\u4f46\u4ecd\u7136\u4fdd\u8bc1\u96c6\u7fa4\u4e2d\u7684\u8282\u70b9\u5e73\u5747\u8d1f\u62c5\u6d41\u91cf\u3002\u5b83\u52a8\u6001\u5730\u66f4\u6539\u8f6e\u8be2\u65b9\u5f0f\uff0c\u628a\u8f6e\u8be2\u6bcf\u4e2a\u8bf7\u6c42\u53d8\u6210\u8f6e\u8be2\u6bcf\u4e2a\u811a\u672c\u3002 \u5982\u679c\u4f60\u4f7f\u7528 Future \u6a21\u5f0f \uff0c\u8fd9\u79cd\u9009\u62e9\u5668\u7684\u201c\u7c98\u6027\u201d\u884c\u4e3a\u5c31\u4e0d\u7406\u60f3\u4e86\uff0c\u56e0\u4e3a\u6240\u6709\u5e76\u884c\u7684\u8bf7\u6c42\u4f1a\u53d1\u9001\u5230\u96c6\u7fa4\u4e2d\u7684\u540c\u4e00\u4e2a\u8282\u70b9\u800c\u975e\u591a\u4e2a\u8282\u70b9\u3002\u5f53\u4f7f\u7528 Future \u6a21\u5f0f\u65f6\uff0c\u9ed8\u8ba4\u7684 RoundRobinSelector \u9009\u62e9\u5668\u4f1a\u66f4\u597d\u3002 \u5982\u679c\u4f60\u8981\u4f7f\u7528\u8be5\u9009\u62e9\u5668\uff0c\u4f60\u8981\u8fd9\u6837\u505a\uff1a <?php $client = ClientBuilder :: create () -> setSelector ( '\\Elasticsearch\\ConnectionPool\\Selectors\\StickyRoundRobinSelector' ) -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u6307\u5b9a\u9009\u62e9\u5668\u3002","title":"StickyRoundRobinSelector"},{"location":"elasticsearch/elasticsearch-php/selectors/#randomselector","text":"\u8fd9\u79cd\u9009\u62e9\u5668\u4ec5\u4ec5\u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u7684\u8282\u70b9\uff0c\u4e0d\u7ba1\u8282\u70b9\u662f\u5904\u4e8e\u4ec0\u4e48\u72b6\u6001\u3002\u8fd9\u4e2a\u9009\u62e9\u5668\u901a\u5e38\u7528\u505a\u6d4b\u8bd5\u3002 \u5982\u679c\u4f60\u8981\u4f7f\u7528\u8be5\u9009\u62e9\u5668\uff0c\u4f60\u8981\u8fd9\u6837\u505a\uff1a <?php $client = ClientBuilder :: create () -> setSelector ( '\\Elasticsearch\\ConnectionPool\\Selectors\\RandomSelector' ) -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u6307\u5b9a\u9009\u62e9\u5668\u3002","title":"RandomSelector"},{"location":"elasticsearch/elasticsearch-php/selectors/#_2","text":"\u4f60\u53ef\u4ee5\u5b9e\u73b0\u81ea\u5b9a\u4e49\u9009\u62e9\u5668\u3002\u81ea\u5b9a\u4e49\u9009\u62e9\u5668\u5fc5\u987b\u5b9e\u73b0 SelectorInterface \u63a5\u53e3\u3002 <?php namespace MyProject\\Selectors ; use Elasticsearch\\Connections\\ConnectionInterface ; use Elasticsearch\\ConnectionPool\\Selectors\\SelectorInterface class MyCustomSelector implements SelectorInterface { /** * Selects the first connection * * @param array $connections Array of Connection objects * * @return ConnectionInterface */ public function select ( $connections ) { // code here } } \u7136\u540e\u4f60\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8c61\u6ce8\u5165\u6216\u547d\u540d\u7a7a\u95f4\u5b9e\u4f8b\u5316\u65b9\u5f0f\u6765\u4f7f\u7528\u81ea\u5b9a\u4e49\u9009\u62e9\u5668\uff1a <?php $mySelector = new MyCustomSelector (); $client = ClientBuilder :: create () -> setSelector ( $mySelector ) // object injection -> setSelector ( '\\MyProject\\Selectors\\FirstSelector' ) // or namespace -> build ();","title":"\u81ea\u5b9a\u4e49\u9009\u62e9\u5668"},{"location":"elasticsearch/elasticsearch-php/serializers/","text":"\u5e8f\u5217\u5316\u5668 # \u5ba2\u6237\u7aef\u6709 3 \u79cd\u5e8f\u5217\u5316\u5668\u53ef\u7528\u3002\u4f60\u53ef\u80fd\u6c38\u8fdc\u90fd\u4e0d\u4f1a\u66f4\u6539\u5e8f\u5217\u5316\u5668\uff0c\u9664\u975e\u4f60\u6709\u7279\u6b8a\u9700\u6c42\u6216\u8005\u8981\u5b9e\u73b0\u4e00\u4e2a\u65b0\u7684\u534f\u8bae\u3002 \u5e8f\u5217\u5316\u5668\u7684\u5de5\u4f5c\u662f encode \u53d1\u9001\u7684\u8bf7\u6c42\u4f53\u548c decode \u8fd4\u56de\u7684\u54cd\u5e94\u4f53\u3002\u5728 99% \u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u5c31\u662f\u4e00\u79cd\u7b80\u5355\u8f6c\u6362\u4e3aJSON\u6570\u636e\u6216\u89e3\u6790 JSON \u6570\u636e\u7684\u5de5\u5177\u3002 \u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5668\u662f SmartSerializer \u3002 SmartSerializer # Serialize() # SmartSerializer \u4f1a\u5148\u68c0\u67e5\u9700\u8981 encode \u7684\u6570\u636e\u3002\u5982\u679c\u8bf7\u6c42\u4f53\u662f\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u4f1a\u76f4\u63a5\u53d1\u9001\u5230 Elasticsearch\u3002\u8fd9\u79cd\u65b9\u5f0f\u5141\u8bb8\u7528\u6237\u63d0\u4f9b\u539f\u751fJSON\u6570\u636e\uff0c\u6216\u662f\u5b57\u7b26\u4e32\uff08\u63d0\u4f9b\u7ed9\u67d0\u4e9b\u6ca1\u6709\u7ed3\u6784\u7684 endpoint\uff0c\u4f8b\u5982 Analyze endpoint\uff09\u3002 \u5982\u679c\u6570\u636e\u662f\u6570\u7ec4\uff0c\u5219\u4f1a\u88ab\u8f6c\u6362\u4e3a JSON \u6570\u636e\u3002\u5982\u679c\u6570\u636e\u662f\u7a7a\u6570\u7ec4\uff0c\u90a3\u4e48\u5e8f\u5217\u5316\u5668\u9700\u8981\u624b\u52a8\u8f6c\u6362\u7a7a\u6570\u7ec4\uff08 [] \uff09\u4e3a\u7a7a\u5bf9\u8c61\uff08 {} \uff09\uff0c\u8fd9\u6837\u53d1\u9001\u7ed9 Elasticsearch \u7684\u8bf7\u6c42\u4f53\u6570\u636e\u624d\u662f\u6709\u6548\u7684 JSON \u6570\u636e\u3002 Deserialize() # \u5f53 decode \u54cd\u5e94\u4f53\u6570\u636e\u65f6\uff0c SmartSerializer \u4f1a\u68c0\u6d4b\u54cd\u5e94\u5934\u7684 content_type \u6765\u5224\u65ad\u662f\u5426\u4e3a\u5408\u9002\u7684encode\u6570\u636e\u3002\u5047\u5982\u6570\u636e encode \u4e3a JSON \u6570\u636e\uff0c\u90a3\u4e48\u4f1a\u7528 json_decode \u6765\u89e3\u6790 JSON \u6570\u636e\u4e3a\u6570\u7ec4\u3002\u5426\u5219\u4f1a\u4ee5\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 \u8fd9\u4e2a\u529f\u80fd\u9700\u8981\u4e0e endpoint \u534f\u4f5c\uff0c\u4f8b\u5982 Cat endpoints \u4f1a\u8fd4\u56de\u8868\u683c\u6587\u672c\u800c\u975e JSON \u6570\u636e\u3002 \u9009\u62e9 SmartSerializer # \u5ba2\u6237\u7aef\u9ed8\u8ba4\u9009\u62e9 SmartSerializer \uff0c\u4f46\u5982\u679c\u4f60\u60f3\u624b\u52a8\u5730\u914d\u7f6e\u8fd9\u4e2a\u9009\u62e9\u5668\uff0c\u4f60\u53ef\u4ee5\u5728 ClientBuilder \u5bf9\u8c61\u4e2d\u4f7f\u7528 setSerializer() \u65b9\u6cd5\uff1a <?php $client = ClientBuilder :: create () -> setSerializer ( '\\Elasticsearch\\Serializers\\SmartSerializer' ); -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u914d\u7f6e\u5e8f\u5217\u5316\u5668\u3002 ArrayToJSONSerializer # Serialize() # ArrayToJSONSerializer \u4f1a\u5148\u68c0\u67e5\u9700\u8981 encode \u7684\u6570\u636e\u3002\u5982\u679c\u8bf7\u6c42\u4f53\u662f\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u4f1a\u76f4\u63a5\u53d1\u9001\u5230 Elasticsearch\u3002\u8fd9\u79cd\u65b9\u5f0f\u5141\u8bb8\u7528\u6237\u63d0\u4f9b\u539f\u751f JSON \u6570\u636e\uff0c\u6216\u662f\u5b57\u7b26\u4e32\uff08\u63d0\u4f9b\u7ed9\u67d0\u4e9b\u6ca1\u6709\u7ed3\u6784\u7684 endpoint\uff0c\u4f8b\u5982 Analyze endpoint\uff09\u3002 \u5982\u679c\u6570\u636e\u662f\u6570\u7ec4\uff0c\u5219\u4f1a\u88ab\u8f6c\u6362\u4e3a JSON \u6570\u636e\u3002\u5982\u679c\u6570\u636e\u662f\u7a7a\u6570\u7ec4\uff0c\u90a3\u4e48\u5e8f\u5217\u5316\u5668\u9700\u8981\u624b\u52a8\u8f6c\u6362\u7a7a\u6570\u7ec4\uff08 [] \uff09\u4e3a\u7a7a\u5bf9\u8c61\uff08 {} \uff09\uff0c\u8fd9\u6837\u53d1\u9001\u7ed9 Elasticsearch \u7684\u8bf7\u6c42\u4f53\u6570\u636e\u624d\u662f\u6709\u6548\u7684 JSON \u6570\u636e\u3002 Deserialize() # \u5f53 decode \u54cd\u5e94\u4f53\u6570\u636e\u65f6\uff0c\u6240\u6709\u6570\u636e\u90fd\u4f1a encode \u7531 JSON \u6570\u636e decode \u4e3a JSON \u6570\u636e\u3002\u5982\u679c\u6570\u636e\u4e0d\u662f\u6709\u6548\u7684 JSON \u6570\u636e\uff0c\u90a3\u4e48\u4f1a\u8fd4\u56de null \u7ed9\u5ba2\u6237\u7aef\u3002 \u9009\u62e9 ArrayToJSONSerializer # \u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ClientBuilder \u5bf9\u8c61\u7684 setSerializer() \u65b9\u6cd5\u6765\u9009\u62e9 ArrayToJSONSerializer \uff1a <?php $client = ClientBuilder :: create () -> setSerializer ( '\\Elasticsearch\\Serializers\\ArrayToJSONSerializer' ); -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u914d\u7f6e\u5e8f\u5217\u5316\u5668\u3002 EverythingToJSONSerializer # Serialize() # EverythingToJSONSerializer \u4f1a\u628a\u4e00\u5207\u6570\u636e\u8f6c\u6362\u4e3aJSON\u6570\u636e\u3002 \u5982\u679c\u6570\u636e\u662f\u7a7a\u6570\u7ec4\uff0c\u90a3\u4e48\u5e8f\u5217\u5316\u5668\u9700\u8981\u624b\u52a8\u8f6c\u6362\u7a7a\u6570\u7ec4\uff08 [] \uff09\u4e3a\u7a7a\u5bf9\u8c61\uff08 {} \uff09\uff0c\u8fd9\u6837\u53d1\u9001\u7ed9 Elasticsearch \u7684\u8bf7\u6c42\u4f53\u6570\u636e\u624d\u662f\u6709\u6548\u7684 JSON \u6570\u636e\u3002 \u5982\u679c\u6570\u636e\u4e0d\u662f\u6570\u7ec4\u4e14\uff08\u6216\uff09\u6ca1\u6709\u8f6c\u6362\u4e3a JSON \u6570\u636e\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u8fd4\u56de null \u7ed9\u5ba2\u6237\u7aef\u3002 Deserialize() # \u5f53 decode \u54cd\u5e94\u4f53\u6570\u636e\u65f6\uff0c\u6240\u6709\u6570\u636e\u90fd\u4f1a encode \u7531 JSON \u6570\u636e decode \u4e3a JSON \u6570\u636e\u3002\u5982\u679c\u6570\u636e\u4e0d\u662f\u6709\u6548\u7684 JSON \u6570\u636e\uff0c\u90a3\u4e48\u4f1a\u8fd4\u56de null \u7ed9\u5ba2\u6237\u7aef\u3002 \u9009\u62e9 EverythingToJSONSerializer # \u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ClientBuilder \u5bf9\u8c61\u7684 setSerializer() \u65b9\u6cd5\u6765\u9009\u62e9 EverythingToJSONSerializer \uff1a <?php $client = ClientBuilder :: create () -> setSerializer ( '\\Elasticsearch\\Serializers\\EverythingToJSONSerializer' ); -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u914d\u7f6e\u5e8f\u5217\u5316\u5668\u3002 \u5b9e\u73b0\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5668 # \u5982\u679c\u4f60\u60f3\u4f7f\u7528\u81ea\u5b9a\u4e49\u5e8f\u5217\u5668\uff0c\u4f60\u9700\u8981\u5b9e\u73b0 SerializerInterface \u63a5\u53e3\u3002\u8bf7\u8bb0\u4f4f\uff0c\u5bf9\u4e8e\u6240\u6709\u7684 endpoint \u548c\u8fde\u63a5\u6765\u8bf4\uff0c\u5ba2\u6237\u7aef\u53ea\u4f7f\u7528\u4e00\u4e2a\u5e8f\u5217\u5668\u5bf9\u8c61\u3002 <?php class MyCustomSerializer implements SerializerInterface { /** * Serialize request body * * @param string|array $data Request body * * @return string */ public function serialize ( $data ) { // code here } /** * Deserialize response body * * @param string $data Response body * @param array $headers Response Headers * * @return array|string */ public function deserialize ( $data , $headers ) { // code here } } \u7136\u540e\u4e3a\u4e86\u4f7f\u7528\u4f60\u81ea\u5b9a\u4e49\u7684\u5e8f\u5217\u5316\u5668\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ClientBuilder \u5bf9\u8c61\u7684 setSerializer() \u65b9\u6cd5\u6765\u914d\u7f6e\u5e8f\u5217\u5316\u5668\uff08\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u683c\u5f0f\uff09\uff1a <?php $client = ClientBuilder :: create () -> setSerializer ( '\\MyProject\\Serializers\\MyCustomSerializer' ); -> build (); \u5982\u679c\u4f60\u7684\u5e8f\u5217\u5316\u5668\u5728\u6ce8\u5165\u5230\u5ba2\u6237\u7aef\u524d\u5df2\u7ecf\u5b9e\u4f8b\u5316\uff0c\u6216\u8005\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u9700\u8981\u8fdb\u4e00\u6b65\u521d\u59cb\u5316\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u6765\u5b9e\u4f8b\u5316\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u5e76\u6ce8\u5165\u5230\u5ba2\u6237\u7aef\uff1a <?php $mySerializer = new MyCustomSerializer ( $a , $b , $c ); $mySerializer -> setFoo ( \"bar\" ); $client = ClientBuilder :: create () -> setSerializer ( $mySerializer ); -> build ();","title":"\u5e8f\u5217\u5316\u5668"},{"location":"elasticsearch/elasticsearch-php/serializers/#_1","text":"\u5ba2\u6237\u7aef\u6709 3 \u79cd\u5e8f\u5217\u5316\u5668\u53ef\u7528\u3002\u4f60\u53ef\u80fd\u6c38\u8fdc\u90fd\u4e0d\u4f1a\u66f4\u6539\u5e8f\u5217\u5316\u5668\uff0c\u9664\u975e\u4f60\u6709\u7279\u6b8a\u9700\u6c42\u6216\u8005\u8981\u5b9e\u73b0\u4e00\u4e2a\u65b0\u7684\u534f\u8bae\u3002 \u5e8f\u5217\u5316\u5668\u7684\u5de5\u4f5c\u662f encode \u53d1\u9001\u7684\u8bf7\u6c42\u4f53\u548c decode \u8fd4\u56de\u7684\u54cd\u5e94\u4f53\u3002\u5728 99% \u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u5c31\u662f\u4e00\u79cd\u7b80\u5355\u8f6c\u6362\u4e3aJSON\u6570\u636e\u6216\u89e3\u6790 JSON \u6570\u636e\u7684\u5de5\u5177\u3002 \u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5668\u662f SmartSerializer \u3002","title":"\u5e8f\u5217\u5316\u5668"},{"location":"elasticsearch/elasticsearch-php/serializers/#smartserializer","text":"","title":"SmartSerializer"},{"location":"elasticsearch/elasticsearch-php/serializers/#serialize","text":"SmartSerializer \u4f1a\u5148\u68c0\u67e5\u9700\u8981 encode \u7684\u6570\u636e\u3002\u5982\u679c\u8bf7\u6c42\u4f53\u662f\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u4f1a\u76f4\u63a5\u53d1\u9001\u5230 Elasticsearch\u3002\u8fd9\u79cd\u65b9\u5f0f\u5141\u8bb8\u7528\u6237\u63d0\u4f9b\u539f\u751fJSON\u6570\u636e\uff0c\u6216\u662f\u5b57\u7b26\u4e32\uff08\u63d0\u4f9b\u7ed9\u67d0\u4e9b\u6ca1\u6709\u7ed3\u6784\u7684 endpoint\uff0c\u4f8b\u5982 Analyze endpoint\uff09\u3002 \u5982\u679c\u6570\u636e\u662f\u6570\u7ec4\uff0c\u5219\u4f1a\u88ab\u8f6c\u6362\u4e3a JSON \u6570\u636e\u3002\u5982\u679c\u6570\u636e\u662f\u7a7a\u6570\u7ec4\uff0c\u90a3\u4e48\u5e8f\u5217\u5316\u5668\u9700\u8981\u624b\u52a8\u8f6c\u6362\u7a7a\u6570\u7ec4\uff08 [] \uff09\u4e3a\u7a7a\u5bf9\u8c61\uff08 {} \uff09\uff0c\u8fd9\u6837\u53d1\u9001\u7ed9 Elasticsearch \u7684\u8bf7\u6c42\u4f53\u6570\u636e\u624d\u662f\u6709\u6548\u7684 JSON \u6570\u636e\u3002","title":"Serialize()"},{"location":"elasticsearch/elasticsearch-php/serializers/#deserialize","text":"\u5f53 decode \u54cd\u5e94\u4f53\u6570\u636e\u65f6\uff0c SmartSerializer \u4f1a\u68c0\u6d4b\u54cd\u5e94\u5934\u7684 content_type \u6765\u5224\u65ad\u662f\u5426\u4e3a\u5408\u9002\u7684encode\u6570\u636e\u3002\u5047\u5982\u6570\u636e encode \u4e3a JSON \u6570\u636e\uff0c\u90a3\u4e48\u4f1a\u7528 json_decode \u6765\u89e3\u6790 JSON \u6570\u636e\u4e3a\u6570\u7ec4\u3002\u5426\u5219\u4f1a\u4ee5\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 \u8fd9\u4e2a\u529f\u80fd\u9700\u8981\u4e0e endpoint \u534f\u4f5c\uff0c\u4f8b\u5982 Cat endpoints \u4f1a\u8fd4\u56de\u8868\u683c\u6587\u672c\u800c\u975e JSON \u6570\u636e\u3002","title":"Deserialize()"},{"location":"elasticsearch/elasticsearch-php/serializers/#smartserializer_1","text":"\u5ba2\u6237\u7aef\u9ed8\u8ba4\u9009\u62e9 SmartSerializer \uff0c\u4f46\u5982\u679c\u4f60\u60f3\u624b\u52a8\u5730\u914d\u7f6e\u8fd9\u4e2a\u9009\u62e9\u5668\uff0c\u4f60\u53ef\u4ee5\u5728 ClientBuilder \u5bf9\u8c61\u4e2d\u4f7f\u7528 setSerializer() \u65b9\u6cd5\uff1a <?php $client = ClientBuilder :: create () -> setSerializer ( '\\Elasticsearch\\Serializers\\SmartSerializer' ); -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u914d\u7f6e\u5e8f\u5217\u5316\u5668\u3002","title":"\u9009\u62e9 SmartSerializer"},{"location":"elasticsearch/elasticsearch-php/serializers/#arraytojsonserializer","text":"","title":"ArrayToJSONSerializer"},{"location":"elasticsearch/elasticsearch-php/serializers/#serialize_1","text":"ArrayToJSONSerializer \u4f1a\u5148\u68c0\u67e5\u9700\u8981 encode \u7684\u6570\u636e\u3002\u5982\u679c\u8bf7\u6c42\u4f53\u662f\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u4f1a\u76f4\u63a5\u53d1\u9001\u5230 Elasticsearch\u3002\u8fd9\u79cd\u65b9\u5f0f\u5141\u8bb8\u7528\u6237\u63d0\u4f9b\u539f\u751f JSON \u6570\u636e\uff0c\u6216\u662f\u5b57\u7b26\u4e32\uff08\u63d0\u4f9b\u7ed9\u67d0\u4e9b\u6ca1\u6709\u7ed3\u6784\u7684 endpoint\uff0c\u4f8b\u5982 Analyze endpoint\uff09\u3002 \u5982\u679c\u6570\u636e\u662f\u6570\u7ec4\uff0c\u5219\u4f1a\u88ab\u8f6c\u6362\u4e3a JSON \u6570\u636e\u3002\u5982\u679c\u6570\u636e\u662f\u7a7a\u6570\u7ec4\uff0c\u90a3\u4e48\u5e8f\u5217\u5316\u5668\u9700\u8981\u624b\u52a8\u8f6c\u6362\u7a7a\u6570\u7ec4\uff08 [] \uff09\u4e3a\u7a7a\u5bf9\u8c61\uff08 {} \uff09\uff0c\u8fd9\u6837\u53d1\u9001\u7ed9 Elasticsearch \u7684\u8bf7\u6c42\u4f53\u6570\u636e\u624d\u662f\u6709\u6548\u7684 JSON \u6570\u636e\u3002","title":"Serialize()"},{"location":"elasticsearch/elasticsearch-php/serializers/#deserialize_1","text":"\u5f53 decode \u54cd\u5e94\u4f53\u6570\u636e\u65f6\uff0c\u6240\u6709\u6570\u636e\u90fd\u4f1a encode \u7531 JSON \u6570\u636e decode \u4e3a JSON \u6570\u636e\u3002\u5982\u679c\u6570\u636e\u4e0d\u662f\u6709\u6548\u7684 JSON \u6570\u636e\uff0c\u90a3\u4e48\u4f1a\u8fd4\u56de null \u7ed9\u5ba2\u6237\u7aef\u3002","title":"Deserialize()"},{"location":"elasticsearch/elasticsearch-php/serializers/#arraytojsonserializer_1","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ClientBuilder \u5bf9\u8c61\u7684 setSerializer() \u65b9\u6cd5\u6765\u9009\u62e9 ArrayToJSONSerializer \uff1a <?php $client = ClientBuilder :: create () -> setSerializer ( '\\Elasticsearch\\Serializers\\ArrayToJSONSerializer' ); -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u914d\u7f6e\u5e8f\u5217\u5316\u5668\u3002","title":"\u9009\u62e9 ArrayToJSONSerializer"},{"location":"elasticsearch/elasticsearch-php/serializers/#everythingtojsonserializer","text":"","title":"EverythingToJSONSerializer"},{"location":"elasticsearch/elasticsearch-php/serializers/#serialize_2","text":"EverythingToJSONSerializer \u4f1a\u628a\u4e00\u5207\u6570\u636e\u8f6c\u6362\u4e3aJSON\u6570\u636e\u3002 \u5982\u679c\u6570\u636e\u662f\u7a7a\u6570\u7ec4\uff0c\u90a3\u4e48\u5e8f\u5217\u5316\u5668\u9700\u8981\u624b\u52a8\u8f6c\u6362\u7a7a\u6570\u7ec4\uff08 [] \uff09\u4e3a\u7a7a\u5bf9\u8c61\uff08 {} \uff09\uff0c\u8fd9\u6837\u53d1\u9001\u7ed9 Elasticsearch \u7684\u8bf7\u6c42\u4f53\u6570\u636e\u624d\u662f\u6709\u6548\u7684 JSON \u6570\u636e\u3002 \u5982\u679c\u6570\u636e\u4e0d\u662f\u6570\u7ec4\u4e14\uff08\u6216\uff09\u6ca1\u6709\u8f6c\u6362\u4e3a JSON \u6570\u636e\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u8fd4\u56de null \u7ed9\u5ba2\u6237\u7aef\u3002","title":"Serialize()"},{"location":"elasticsearch/elasticsearch-php/serializers/#deserialize_2","text":"\u5f53 decode \u54cd\u5e94\u4f53\u6570\u636e\u65f6\uff0c\u6240\u6709\u6570\u636e\u90fd\u4f1a encode \u7531 JSON \u6570\u636e decode \u4e3a JSON \u6570\u636e\u3002\u5982\u679c\u6570\u636e\u4e0d\u662f\u6709\u6548\u7684 JSON \u6570\u636e\uff0c\u90a3\u4e48\u4f1a\u8fd4\u56de null \u7ed9\u5ba2\u6237\u7aef\u3002","title":"Deserialize()"},{"location":"elasticsearch/elasticsearch-php/serializers/#everythingtojsonserializer_1","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ClientBuilder \u5bf9\u8c61\u7684 setSerializer() \u65b9\u6cd5\u6765\u9009\u62e9 EverythingToJSONSerializer \uff1a <?php $client = ClientBuilder :: create () -> setSerializer ( '\\Elasticsearch\\Serializers\\EverythingToJSONSerializer' ); -> build (); \u6ce8\u610f\uff1a\u8981\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u7684\u65b9\u6cd5\u6765\u914d\u7f6e\u5e8f\u5217\u5316\u5668\u3002","title":"\u9009\u62e9 EverythingToJSONSerializer"},{"location":"elasticsearch/elasticsearch-php/serializers/#_2","text":"\u5982\u679c\u4f60\u60f3\u4f7f\u7528\u81ea\u5b9a\u4e49\u5e8f\u5217\u5668\uff0c\u4f60\u9700\u8981\u5b9e\u73b0 SerializerInterface \u63a5\u53e3\u3002\u8bf7\u8bb0\u4f4f\uff0c\u5bf9\u4e8e\u6240\u6709\u7684 endpoint \u548c\u8fde\u63a5\u6765\u8bf4\uff0c\u5ba2\u6237\u7aef\u53ea\u4f7f\u7528\u4e00\u4e2a\u5e8f\u5217\u5668\u5bf9\u8c61\u3002 <?php class MyCustomSerializer implements SerializerInterface { /** * Serialize request body * * @param string|array $data Request body * * @return string */ public function serialize ( $data ) { // code here } /** * Deserialize response body * * @param string $data Response body * @param array $headers Response Headers * * @return array|string */ public function deserialize ( $data , $headers ) { // code here } } \u7136\u540e\u4e3a\u4e86\u4f7f\u7528\u4f60\u81ea\u5b9a\u4e49\u7684\u5e8f\u5217\u5316\u5668\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ClientBuilder \u5bf9\u8c61\u7684 setSerializer() \u65b9\u6cd5\u6765\u914d\u7f6e\u5e8f\u5217\u5316\u5668\uff08\u547d\u540d\u7a7a\u95f4\u52a0\u7c7b\u540d\u683c\u5f0f\uff09\uff1a <?php $client = ClientBuilder :: create () -> setSerializer ( '\\MyProject\\Serializers\\MyCustomSerializer' ); -> build (); \u5982\u679c\u4f60\u7684\u5e8f\u5217\u5316\u5668\u5728\u6ce8\u5165\u5230\u5ba2\u6237\u7aef\u524d\u5df2\u7ecf\u5b9e\u4f8b\u5316\uff0c\u6216\u8005\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u9700\u8981\u8fdb\u4e00\u6b65\u521d\u59cb\u5316\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u6765\u5b9e\u4f8b\u5316\u5e8f\u5217\u5316\u5668\u5bf9\u8c61\u5e76\u6ce8\u5165\u5230\u5ba2\u6237\u7aef\uff1a <?php $mySerializer = new MyCustomSerializer ( $a , $b , $c ); $mySerializer -> setFoo ( \"bar\" ); $client = ClientBuilder :: create () -> setSerializer ( $mySerializer ); -> build ();","title":"\u5b9e\u73b0\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5668"},{"location":"elasticsearch/elasticsearch-php/updating_documents/","text":"\u66f4\u65b0\u6587\u6863 # \u66f4\u65b0\u6587\u6863\u64cd\u4f5c\u65e2\u53ef\u4ee5\u5b8c\u5168\u8986\u76d6\u73b0\u5b58\u6587\u6863\u5168\u90e8\u5b57\u6bb5\uff0c\u53c8\u53ef\u4ee5\u90e8\u5206\u66f4\u65b0\u5b57\u6bb5\uff08\u66f4\u6539\u73b0\u5b58\u5b57\u6bb5\uff0c\u6216\u6dfb\u52a0\u65b0\u5b57\u6bb5\uff09\u3002 \u90e8\u5206\u66f4\u65b0 # \u5982\u679c\u4f60\u8981\u90e8\u5206\u66f4\u65b0\u6587\u6863\uff08\u5982\u66f4\u6539\u73b0\u5b58\u5b57\u6bb5\uff0c\u6216\u6dfb\u52a0\u65b0\u5b57\u6bb5\uff09\uff0c\u4f60\u53ef\u4ee5\u5728 body \u53c2\u6570\u4e2d\u6307\u5b9a\u4e00\u4e2a doc \u53c2\u6570\u3002\u8fd9\u6837 doc \u53c2\u6570\u5185\u7684\u5b57\u6bb5\u4f1a\u4e0e\u73b0\u5b58\u5b57\u6bb5\u8fdb\u884c\u5408\u5e76\u3002 <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' , 'body' => [ 'doc' => [ 'new_field' => 'abc' ] ] ]; // Update doc at /my_index/my_type/my_id $response = $client -> update ( $params ); script \u66f4\u65b0 # \u6709\u65f6\u4f60\u8981\u6267\u884c\u4e00\u4e2a\u811a\u672c\u6765\u8fdb\u884c\u66f4\u65b0\u64cd\u4f5c\uff0c\u5982\u5bf9\u5b57\u6bb5\u8fdb\u884c\u81ea\u589e\u64cd\u4f5c\u6216\u6dfb\u52a0\u65b0\u5b57\u6bb5\u3002\u4e3a\u4e86\u6267\u884c\u4e00\u4e2a\u811a\u672c\u66f4\u65b0\uff0c\u4f60\u8981\u63d0\u4f9b\u811a\u672c\u547d\u4ee4\u548c\u4e00\u4e9b\u53c2\u6570\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' , 'body' => [ 'script' => 'ctx._source.counter += count' , 'params' => [ 'count' => 4 ] ] ]; $response = $client -> update ( $params ); Upserts \u66f4\u65b0 # Upserts \u64cd\u4f5c\u662f\u6307\u201c\u66f4\u65b0\u6216\u63d2\u5165\u201d\u64cd\u4f5c\u3002\u8fd9\u610f\u5473\u7740\u4e00\u4e2a upsert \u64cd\u4f5c\u4f1a\u5148\u6267\u884c script \u66f4\u65b0\uff0c\u5982\u679c\u6587\u6863\u4e0d\u5b58\u5728\uff08\u6216\u662f\u4f60\u66f4\u65b0\u7684\u5b57\u6bb5\u4e0d\u5b58\u5728\uff09\uff0c\u5219\u4f1a\u63d2\u5165\u4e00\u4e2a\u9ed8\u8ba4\u503c\u3002 <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' , 'body' => [ 'script' => 'ctx._source.counter += count' , 'params' => [ 'count' => 4 ], 'upsert' => [ 'counter' => 1 ] ] ]; $response = $client -> update ( $params );","title":"\u66f4\u65b0\u6587\u6863"},{"location":"elasticsearch/elasticsearch-php/updating_documents/#_1","text":"\u66f4\u65b0\u6587\u6863\u64cd\u4f5c\u65e2\u53ef\u4ee5\u5b8c\u5168\u8986\u76d6\u73b0\u5b58\u6587\u6863\u5168\u90e8\u5b57\u6bb5\uff0c\u53c8\u53ef\u4ee5\u90e8\u5206\u66f4\u65b0\u5b57\u6bb5\uff08\u66f4\u6539\u73b0\u5b58\u5b57\u6bb5\uff0c\u6216\u6dfb\u52a0\u65b0\u5b57\u6bb5\uff09\u3002","title":"\u66f4\u65b0\u6587\u6863"},{"location":"elasticsearch/elasticsearch-php/updating_documents/#_2","text":"\u5982\u679c\u4f60\u8981\u90e8\u5206\u66f4\u65b0\u6587\u6863\uff08\u5982\u66f4\u6539\u73b0\u5b58\u5b57\u6bb5\uff0c\u6216\u6dfb\u52a0\u65b0\u5b57\u6bb5\uff09\uff0c\u4f60\u53ef\u4ee5\u5728 body \u53c2\u6570\u4e2d\u6307\u5b9a\u4e00\u4e2a doc \u53c2\u6570\u3002\u8fd9\u6837 doc \u53c2\u6570\u5185\u7684\u5b57\u6bb5\u4f1a\u4e0e\u73b0\u5b58\u5b57\u6bb5\u8fdb\u884c\u5408\u5e76\u3002 <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' , 'body' => [ 'doc' => [ 'new_field' => 'abc' ] ] ]; // Update doc at /my_index/my_type/my_id $response = $client -> update ( $params );","title":"\u90e8\u5206\u66f4\u65b0"},{"location":"elasticsearch/elasticsearch-php/updating_documents/#script","text":"\u6709\u65f6\u4f60\u8981\u6267\u884c\u4e00\u4e2a\u811a\u672c\u6765\u8fdb\u884c\u66f4\u65b0\u64cd\u4f5c\uff0c\u5982\u5bf9\u5b57\u6bb5\u8fdb\u884c\u81ea\u589e\u64cd\u4f5c\u6216\u6dfb\u52a0\u65b0\u5b57\u6bb5\u3002\u4e3a\u4e86\u6267\u884c\u4e00\u4e2a\u811a\u672c\u66f4\u65b0\uff0c\u4f60\u8981\u63d0\u4f9b\u811a\u672c\u547d\u4ee4\u548c\u4e00\u4e9b\u53c2\u6570\uff1a <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' , 'body' => [ 'script' => 'ctx._source.counter += count' , 'params' => [ 'count' => 4 ] ] ]; $response = $client -> update ( $params );","title":"script \u66f4\u65b0"},{"location":"elasticsearch/elasticsearch-php/updating_documents/#upserts","text":"Upserts \u64cd\u4f5c\u662f\u6307\u201c\u66f4\u65b0\u6216\u63d2\u5165\u201d\u64cd\u4f5c\u3002\u8fd9\u610f\u5473\u7740\u4e00\u4e2a upsert \u64cd\u4f5c\u4f1a\u5148\u6267\u884c script \u66f4\u65b0\uff0c\u5982\u679c\u6587\u6863\u4e0d\u5b58\u5728\uff08\u6216\u662f\u4f60\u66f4\u65b0\u7684\u5b57\u6bb5\u4e0d\u5b58\u5728\uff09\uff0c\u5219\u4f1a\u63d2\u5165\u4e00\u4e2a\u9ed8\u8ba4\u503c\u3002 <?php $params = [ 'index' => 'my_index' , 'type' => 'my_type' , 'id' => 'my_id' , 'body' => [ 'script' => 'ctx._source.counter += count' , 'params' => [ 'count' => 4 ], 'upsert' => [ 'counter' => 1 ] ] ]; $response = $client -> update ( $params );","title":"Upserts \u66f4\u65b0"},{"location":"more/document-style-guide/","text":"\u6982\u8ff0 # \u8f6c\u8f7d\u8bf4\u660e \u539f\u6587\uff1a https://github.com/ruanyf/document-style-guide \u76ee\u5f55 # \u6982\u8ff0 \u6807\u9898 \u6587\u672c \u6bb5\u843d \u6570\u503c \u6807\u70b9\u7b26\u53f7 \u6587\u6863\u4f53\u7cfb \u53c2\u8003\u94fe\u63a5","title":"\u6982\u8ff0"},{"location":"more/document-style-guide/#_1","text":"\u8f6c\u8f7d\u8bf4\u660e \u539f\u6587\uff1a https://github.com/ruanyf/document-style-guide","title":"\u6982\u8ff0"},{"location":"more/document-style-guide/#_2","text":"\u6982\u8ff0 \u6807\u9898 \u6587\u672c \u6bb5\u843d \u6570\u503c \u6807\u70b9\u7b26\u53f7 \u6587\u6863\u4f53\u7cfb \u53c2\u8003\u94fe\u63a5","title":"\u76ee\u5f55"},{"location":"more/document-style-guide/marks/","text":"\u6807\u70b9\u7b26\u53f7 # \u539f\u5219 # \u4e2d\u6587\u8bed\u53e5\u7684\u6807\u70b9\u7b26\u53f7\uff0c\u5747\u5e94\u8be5\u91c7\u53d6\u5168\u89d2\u7b26\u53f7\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u89c6\u89c9\u7684\u4e00\u81f4\u3002 \u5982\u679c\u6574\u53e5\u4e3a\u82f1\u6587\uff0c\u5219\u8be5\u53e5\u4f7f\u7528\u82f1\u6587/\u534a\u89d2\u6807\u70b9\u3002 \u53e5\u53f7\u3001\u95ee\u53f7\u3001\u53f9\u53f7\u3001\u9017\u53f7\u3001\u987f\u53f7\u3001\u5206\u53f7\u548c\u5192\u53f7\u4e0d\u5f97\u51fa\u73b0\u5728\u4e00\u884c\u4e4b\u9996\u3002 \u53e5\u53f7 # \u4e2d\u6587\u8bed\u53e5\u4e2d\u7684\u7ed3\u5c3e\u5904\u5e94\u8be5\u7528\u5168\u89d2\u53e5\u53f7\uff08 \u3002 \uff09\u3002 \u53e5\u5b50\u672b\u5c3e\u7528\u62ec\u53f7\u52a0\u6ce8\u65f6\uff0c\u53e5\u53f7\u5e94\u5728\u62ec\u53f7\u4e4b\u5916\u3002 \u9519\u8bef\uff1a\u5173\u4e8e\u6587\u4ef6\u7684\u8f93\u51fa\uff0c\u8bf7\u53c2\u7167\u7b2c 1.3 \u8282\uff08\u89c1\u7b2c 26 \u9875\u3002\uff09 \u6b63\u786e\uff1a\u5173\u4e8e\u6587\u4ef6\u7684\u8f93\u51fa\uff0c\u8bf7\u53c2\u7167\u7b2c 1.3 \u8282\uff08\u89c1\u7b2c 26 \u9875\uff09\u3002 \u9017\u53f7 # \u9017\u53f7 \uff0c \u8868\u793a\u53e5\u5b50\u5185\u90e8\u7684\u4e00\u822c\u6027\u505c\u987f\u3002 \u6ce8\u610f\u907f\u514d\u201c\u4e00\u9017\u5230\u5e95\u201d\uff0c\u5373\u6574\u4e2a\u6bb5\u843d\u9664\u4e86\u7ed3\u5c3e\uff0c\u5168\u90e8\u505c\u987f\u90fd\u4f7f\u7528\u9017\u53f7\u3002 \u987f\u53f7 # \u53e5\u5b50\u5185\u90e8\u7684\u5e76\u5217\u8bcd\uff0c\u5e94\u8be5\u7528\u5168\u89d2\u987f\u53f7( \u3001 ) \u5206\u9694\uff0c\u800c\u4e0d\u7528\u9017\u53f7\uff0c\u5373\u4f7f\u5e76\u5217\u8bcd\u662f\u82f1\u8bed\u4e5f\u662f\u5982\u6b64\u3002 \u9519\u8bef\uff1a\u6211\u6700\u6b23\u8d4f\u7684\u79d1\u6280\u516c\u53f8\u6709 Google, Facebook, \u817e\u8baf, \u963f\u91cc\u548c\u767e\u5ea6\u7b49\u3002 \u6b63\u786e\uff1a\u6211\u6700\u6b23\u8d4f\u7684\u79d1\u6280\u516c\u53f8\u6709 Google\u3001Facebook\u3001\u817e\u8baf\u3001\u963f\u91cc\u548c\u767e\u5ea6\u7b49\u3002 \u82f1\u6587\u53e5\u5b50\u4e2d\uff0c\u5e76\u5217\u8bcd\u8bed\u4e4b\u95f4\u4f7f\u7528\u534a\u89d2\u9017\u53f7\uff08 , \uff09\u5206\u9694\u3002 \u4f8b\u53e5\uff1aMicrosoft Office includes Word, Excel, PowerPoint, Outlook and other components. \u5206\u53f7 # \u5206\u53f7 \uff1b \u8868\u793a\u590d\u53e5\u5185\u90e8\u5e76\u5217\u5206\u53e5\u4e4b\u95f4\u7684\u505c\u987f\u3002 \u5f15\u53f7 # \u5f15\u7528\u65f6\uff0c\u5e94\u8be5\u4f7f\u7528\u5168\u89d2\u53cc\u5f15\u53f7\uff08 \u201c \u201d \uff09\uff0c\u6ce8\u610f\u524d\u540e\u53cc\u5f15\u53f7\u4e0d\u540c\u3002 \u4f8b\u53e5\uff1a\u8bb8\u591a\u4eba\u90fd\u8ba4\u4e3a\u5ba2\u6237\u670d\u52a1\u7684\u6838\u5fc3\u662f\u201c\u53cb\u597d\u201d\u548c\u201c\u4e13\u4e1a\u201d\u3002 \u5f15\u53f7\u91cc\u9762\u8fd8\u8981\u7528\u5f15\u53f7\u65f6\uff0c\u5916\u9762\u4e00\u5c42\u7528\u53cc\u5f15\u53f7\uff0c\u91cc\u9762\u4e00\u5c42\u7528\u5355\u5f15\u53f7\uff08 \u2018 \u2019 \uff09\uff0c\u6ce8\u610f\u524d\u540e\u5355\u5f15\u53f7\u4e0d\u540c\u3002 \u4f8b\u53e5\uff1a\u9c8d\u52c3\u89e3\u91ca\u9053\uff1a\u201c\u6211\u8981\u653e\u97f3\u4e50\uff0c\u53ef\u8428\u5229\u8bf4\uff0c\u2018\u4e0d\u884c\uff01\u2019\u3002\u201d \u5706\u62ec\u53f7 # \u8865\u5145\u8bf4\u660e\u65f6\uff0c\u4f7f\u7528\u5168\u89d2\u5706\u62ec\u53f7 \uff08\uff09 \uff0c\u62ec\u53f7\u524d\u540e\u4e0d\u52a0\u7a7a\u683c\u3002 \u4f8b\u53e5\uff1a\u8bf7\u786e\u8ba4\u6240\u6709\u7684\u8fde\u63a5\uff08\u7535\u7f06\u548c\u63a5\u63d2\u4ef6\uff09\u5747\u5b89\u88c5\u7262\u56fa\u3002 \u5192\u53f7 # \u5168\u89d2\u5192\u53f7\uff08 \uff1a \uff09\u5e38\u7528\u5728\u9700\u8981\u89e3\u91ca\u7684\u8bcd\u8bed\u540e\u8fb9\uff0c\u5f15\u51fa\u89e3\u91ca\u548c\u8bf4\u660e\u3002 \u4f8b\u53e5\uff1a\u8bf7\u786e\u8ba4\u4ee5\u4e0b\u51e0\u9879\u5185\u5bb9\uff1a\u65f6\u95f4\u3001\u5730\u70b9\u3001\u6d3b\u52a8\u540d\u79f0\uff0c\u4ee5\u53ca\u6765\u5bbe\u6570\u91cf\u3002 \u8868\u793a\u65f6\u95f4\u65f6\uff0c\u5e94\u4f7f\u7528\u534a\u89d2\u5192\u53f7\uff08 : \uff09\u3002 \u4f8b\u53e5\uff1a\u65e9\u4e0a 8:00 \u7701\u7565\u53f7 # \u7701\u7565\u53f7 \u2026\u2026 \u8868\u793a\u8bed\u53e5\u672a\u5b8c\u3001\u6216\u8005\u8bed\u6c14\u7684\u4e0d\u8fde\u7eed\u3002\u5b83\u5360\u4e24\u4e2a\u6c49\u5b57\u7a7a\u95f4\u3001\u5305\u542b\u516d\u4e2a\u7701\u7565\u70b9\uff0c\u4e0d\u8981\u4f7f\u7528 \u3002\u3002\u3002 \u6216 ... \u7b49\u975e\u6807\u51c6\u5f62\u5f0f\u3002 \u7701\u7565\u53f7\u4e0d\u5e94\u4e0e\u201c\u7b49\u201d\u8fd9\u4e2a\u8bcd\u4e00\u8d77\u4f7f\u7528\u3002 \u9519\u8bef\uff1a\u6211\u4eec\u4e3a\u4f1a\u9910\u51c6\u5907\u4e86\u9999\u8549\u3001\u82f9\u679c\u3001\u68a8\u2026\u7b49\u5404\u8272\u6c34\u679c\u3002 \u6b63\u786e\uff1a\u6211\u4eec\u4e3a\u4f1a\u9910\u51c6\u5907\u4e86\u5404\u8272\u6c34\u679c\uff0c\u6709\u9999\u8549\u3001\u82f9\u679c\u3001\u68a8\u2026\u2026 \u6b63\u786e\uff1a\u6211\u4eec\u4e3a\u4f1a\u9910\u51c6\u5907\u4e86\u9999\u8549\u3001\u82f9\u679c\u3001\u68a8\u7b49\u5404\u8272\u6c34\u679c\u3002 \u611f\u53f9\u53f7 # \u5e94\u8be5\u4f7f\u7528\u5e73\u9759\u7684\u8bed\u6c14\u53d9\u8ff0\uff0c\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u611f\u53f9\u53f7 \uff01 \u3002 \u4e0d\u5f97\u591a\u4e2a\u611f\u53f9\u53f7\u8fde\u7528\uff0c\u6bd4\u5982 \uff01\uff01 \u548c !!! \u3002 \u7834\u6298\u53f7 # \u7834\u6298\u53f7 \u2014\u2014\u2014\u2014 \u4e00\u822c\u7528\u4e8e\u8fdb\u4e00\u6b65\u89e3\u91ca\u3002 \u7834\u6298\u53f7\u5e94\u5360\u4e24\u4e2a\u6c49\u5b57\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u7834\u6298\u53f7\u672c\u8eab\u53ea\u5360\u4e00\u4e2a\u6c49\u5b57\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u524d\u540e\u5e94\u8be5\u7559\u51fa\u4e00\u4e2a\u534a\u89d2\u7a7a\u683c\u3002 \u4f8b\u53e5\uff1a\u76f4\u89c9\u2014\u2014\u2014\u2014\u5c3d\u7ba1\u5b83\u5e76\u4e0d\u603b\u662f\u53ef\u9760\u7684\u2014\u2014\u2014\u2014\u544a\u8bc9\u6211\uff0c\u8fd9\u4e8b\u53ef\u80fd\u51fa\u4e86\u4e9b\u95ee\u9898\u3002 \u4f8b\u53e5\uff1a\u76f4\u89c9 \u2014\u2014 \u5c3d\u7ba1\u5b83\u5e76\u4e0d\u603b\u662f\u53ef\u9760\u7684 \u2014\u2014 \u544a\u8bc9\u6211\uff0c\u8fd9\u4e8b\u53ef\u80fd\u51fa\u4e86\u4e9b\u95ee\u9898\u3002 \u8fde\u63a5\u53f7 # \u8fde\u63a5\u53f7\u7528\u4e8e\u8fde\u63a5\u4e24\u4e2a\u7c7b\u4f3c\u7684\u8bcd\u3002 \u4ee5\u4e0b\u573a\u5408\u5e94\u8be5\u4f7f\u7528\u76f4\u7ebf\u8fde\u63a5\u53f7\uff08 - \uff09\uff0c\u5360\u4e00\u4e2a\u534a\u89d2\u5b57\u7b26\u7684\u4f4d\u7f6e\u3002 \u4e24\u4e2a\u540d\u8bcd\u7684\u590d\u5408 \u56fe\u8868\u7f16\u53f7 \u4f8b\u53e5\uff1a\u6c27\u5316-\u8fd8\u539f\u53cd\u5e94 \u4f8b\u53e5\uff1a\u56fe 1-1 \u4ee5\u4e0b\u573a\u5408\u5e94\u8be5\u4f7f\u7528\u6ce2\u6d6a\u8fde\u63a5\u53f7\uff08 \uff5e \uff09\uff0c\u5360\u4e00\u4e2a\u5168\u89d2\u5b57\u7b26\u7684\u4f4d\u7f6e\u3002 \u6570\u503c\u8303\u56f4\uff08\u4f8b\u5982\u65e5\u671f\u3001\u65f6\u95f4\u6216\u6570\u5b57\uff09 \u4f8b\u53e5\uff1a2009 \u5e74\uff5e2011 \u5e74 \u6ce8\u610f\uff0c\u6ce2\u6d6a\u8fde\u63a5\u53f7\u524d\u540e\u4e24\u4e2a\u503c\u90fd\u5e94\u8be5\u52a0\u4e0a\u5355\u4f4d\u3002 \u6ce2\u6d6a\u8fde\u63a5\u53f7\u4e5f\u53ef\u4ee5\u7528\u6c49\u5b57\u201c\u81f3\u201d\u4ee3\u66ff\u3002 \u4f8b\u53e5\uff1a\u5468\u56f4\u6e29\u5ea6\uff1a-20\u00b0C \u81f3 -10\u00b0C","title":"\u6807\u70b9\u7b26\u53f7"},{"location":"more/document-style-guide/marks/#_1","text":"","title":"\u6807\u70b9\u7b26\u53f7"},{"location":"more/document-style-guide/marks/#_2","text":"\u4e2d\u6587\u8bed\u53e5\u7684\u6807\u70b9\u7b26\u53f7\uff0c\u5747\u5e94\u8be5\u91c7\u53d6\u5168\u89d2\u7b26\u53f7\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u89c6\u89c9\u7684\u4e00\u81f4\u3002 \u5982\u679c\u6574\u53e5\u4e3a\u82f1\u6587\uff0c\u5219\u8be5\u53e5\u4f7f\u7528\u82f1\u6587/\u534a\u89d2\u6807\u70b9\u3002 \u53e5\u53f7\u3001\u95ee\u53f7\u3001\u53f9\u53f7\u3001\u9017\u53f7\u3001\u987f\u53f7\u3001\u5206\u53f7\u548c\u5192\u53f7\u4e0d\u5f97\u51fa\u73b0\u5728\u4e00\u884c\u4e4b\u9996\u3002","title":"\u539f\u5219"},{"location":"more/document-style-guide/marks/#_3","text":"\u4e2d\u6587\u8bed\u53e5\u4e2d\u7684\u7ed3\u5c3e\u5904\u5e94\u8be5\u7528\u5168\u89d2\u53e5\u53f7\uff08 \u3002 \uff09\u3002 \u53e5\u5b50\u672b\u5c3e\u7528\u62ec\u53f7\u52a0\u6ce8\u65f6\uff0c\u53e5\u53f7\u5e94\u5728\u62ec\u53f7\u4e4b\u5916\u3002 \u9519\u8bef\uff1a\u5173\u4e8e\u6587\u4ef6\u7684\u8f93\u51fa\uff0c\u8bf7\u53c2\u7167\u7b2c 1.3 \u8282\uff08\u89c1\u7b2c 26 \u9875\u3002\uff09 \u6b63\u786e\uff1a\u5173\u4e8e\u6587\u4ef6\u7684\u8f93\u51fa\uff0c\u8bf7\u53c2\u7167\u7b2c 1.3 \u8282\uff08\u89c1\u7b2c 26 \u9875\uff09\u3002","title":"\u53e5\u53f7"},{"location":"more/document-style-guide/marks/#_4","text":"\u9017\u53f7 \uff0c \u8868\u793a\u53e5\u5b50\u5185\u90e8\u7684\u4e00\u822c\u6027\u505c\u987f\u3002 \u6ce8\u610f\u907f\u514d\u201c\u4e00\u9017\u5230\u5e95\u201d\uff0c\u5373\u6574\u4e2a\u6bb5\u843d\u9664\u4e86\u7ed3\u5c3e\uff0c\u5168\u90e8\u505c\u987f\u90fd\u4f7f\u7528\u9017\u53f7\u3002","title":"\u9017\u53f7"},{"location":"more/document-style-guide/marks/#_5","text":"\u53e5\u5b50\u5185\u90e8\u7684\u5e76\u5217\u8bcd\uff0c\u5e94\u8be5\u7528\u5168\u89d2\u987f\u53f7( \u3001 ) \u5206\u9694\uff0c\u800c\u4e0d\u7528\u9017\u53f7\uff0c\u5373\u4f7f\u5e76\u5217\u8bcd\u662f\u82f1\u8bed\u4e5f\u662f\u5982\u6b64\u3002 \u9519\u8bef\uff1a\u6211\u6700\u6b23\u8d4f\u7684\u79d1\u6280\u516c\u53f8\u6709 Google, Facebook, \u817e\u8baf, \u963f\u91cc\u548c\u767e\u5ea6\u7b49\u3002 \u6b63\u786e\uff1a\u6211\u6700\u6b23\u8d4f\u7684\u79d1\u6280\u516c\u53f8\u6709 Google\u3001Facebook\u3001\u817e\u8baf\u3001\u963f\u91cc\u548c\u767e\u5ea6\u7b49\u3002 \u82f1\u6587\u53e5\u5b50\u4e2d\uff0c\u5e76\u5217\u8bcd\u8bed\u4e4b\u95f4\u4f7f\u7528\u534a\u89d2\u9017\u53f7\uff08 , \uff09\u5206\u9694\u3002 \u4f8b\u53e5\uff1aMicrosoft Office includes Word, Excel, PowerPoint, Outlook and other components.","title":"\u987f\u53f7"},{"location":"more/document-style-guide/marks/#_6","text":"\u5206\u53f7 \uff1b \u8868\u793a\u590d\u53e5\u5185\u90e8\u5e76\u5217\u5206\u53e5\u4e4b\u95f4\u7684\u505c\u987f\u3002","title":"\u5206\u53f7"},{"location":"more/document-style-guide/marks/#_7","text":"\u5f15\u7528\u65f6\uff0c\u5e94\u8be5\u4f7f\u7528\u5168\u89d2\u53cc\u5f15\u53f7\uff08 \u201c \u201d \uff09\uff0c\u6ce8\u610f\u524d\u540e\u53cc\u5f15\u53f7\u4e0d\u540c\u3002 \u4f8b\u53e5\uff1a\u8bb8\u591a\u4eba\u90fd\u8ba4\u4e3a\u5ba2\u6237\u670d\u52a1\u7684\u6838\u5fc3\u662f\u201c\u53cb\u597d\u201d\u548c\u201c\u4e13\u4e1a\u201d\u3002 \u5f15\u53f7\u91cc\u9762\u8fd8\u8981\u7528\u5f15\u53f7\u65f6\uff0c\u5916\u9762\u4e00\u5c42\u7528\u53cc\u5f15\u53f7\uff0c\u91cc\u9762\u4e00\u5c42\u7528\u5355\u5f15\u53f7\uff08 \u2018 \u2019 \uff09\uff0c\u6ce8\u610f\u524d\u540e\u5355\u5f15\u53f7\u4e0d\u540c\u3002 \u4f8b\u53e5\uff1a\u9c8d\u52c3\u89e3\u91ca\u9053\uff1a\u201c\u6211\u8981\u653e\u97f3\u4e50\uff0c\u53ef\u8428\u5229\u8bf4\uff0c\u2018\u4e0d\u884c\uff01\u2019\u3002\u201d","title":"\u5f15\u53f7"},{"location":"more/document-style-guide/marks/#_8","text":"\u8865\u5145\u8bf4\u660e\u65f6\uff0c\u4f7f\u7528\u5168\u89d2\u5706\u62ec\u53f7 \uff08\uff09 \uff0c\u62ec\u53f7\u524d\u540e\u4e0d\u52a0\u7a7a\u683c\u3002 \u4f8b\u53e5\uff1a\u8bf7\u786e\u8ba4\u6240\u6709\u7684\u8fde\u63a5\uff08\u7535\u7f06\u548c\u63a5\u63d2\u4ef6\uff09\u5747\u5b89\u88c5\u7262\u56fa\u3002","title":"\u5706\u62ec\u53f7"},{"location":"more/document-style-guide/marks/#_9","text":"\u5168\u89d2\u5192\u53f7\uff08 \uff1a \uff09\u5e38\u7528\u5728\u9700\u8981\u89e3\u91ca\u7684\u8bcd\u8bed\u540e\u8fb9\uff0c\u5f15\u51fa\u89e3\u91ca\u548c\u8bf4\u660e\u3002 \u4f8b\u53e5\uff1a\u8bf7\u786e\u8ba4\u4ee5\u4e0b\u51e0\u9879\u5185\u5bb9\uff1a\u65f6\u95f4\u3001\u5730\u70b9\u3001\u6d3b\u52a8\u540d\u79f0\uff0c\u4ee5\u53ca\u6765\u5bbe\u6570\u91cf\u3002 \u8868\u793a\u65f6\u95f4\u65f6\uff0c\u5e94\u4f7f\u7528\u534a\u89d2\u5192\u53f7\uff08 : \uff09\u3002 \u4f8b\u53e5\uff1a\u65e9\u4e0a 8:00","title":"\u5192\u53f7"},{"location":"more/document-style-guide/marks/#_10","text":"\u7701\u7565\u53f7 \u2026\u2026 \u8868\u793a\u8bed\u53e5\u672a\u5b8c\u3001\u6216\u8005\u8bed\u6c14\u7684\u4e0d\u8fde\u7eed\u3002\u5b83\u5360\u4e24\u4e2a\u6c49\u5b57\u7a7a\u95f4\u3001\u5305\u542b\u516d\u4e2a\u7701\u7565\u70b9\uff0c\u4e0d\u8981\u4f7f\u7528 \u3002\u3002\u3002 \u6216 ... \u7b49\u975e\u6807\u51c6\u5f62\u5f0f\u3002 \u7701\u7565\u53f7\u4e0d\u5e94\u4e0e\u201c\u7b49\u201d\u8fd9\u4e2a\u8bcd\u4e00\u8d77\u4f7f\u7528\u3002 \u9519\u8bef\uff1a\u6211\u4eec\u4e3a\u4f1a\u9910\u51c6\u5907\u4e86\u9999\u8549\u3001\u82f9\u679c\u3001\u68a8\u2026\u7b49\u5404\u8272\u6c34\u679c\u3002 \u6b63\u786e\uff1a\u6211\u4eec\u4e3a\u4f1a\u9910\u51c6\u5907\u4e86\u5404\u8272\u6c34\u679c\uff0c\u6709\u9999\u8549\u3001\u82f9\u679c\u3001\u68a8\u2026\u2026 \u6b63\u786e\uff1a\u6211\u4eec\u4e3a\u4f1a\u9910\u51c6\u5907\u4e86\u9999\u8549\u3001\u82f9\u679c\u3001\u68a8\u7b49\u5404\u8272\u6c34\u679c\u3002","title":"\u7701\u7565\u53f7"},{"location":"more/document-style-guide/marks/#_11","text":"\u5e94\u8be5\u4f7f\u7528\u5e73\u9759\u7684\u8bed\u6c14\u53d9\u8ff0\uff0c\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u611f\u53f9\u53f7 \uff01 \u3002 \u4e0d\u5f97\u591a\u4e2a\u611f\u53f9\u53f7\u8fde\u7528\uff0c\u6bd4\u5982 \uff01\uff01 \u548c !!! \u3002","title":"\u611f\u53f9\u53f7"},{"location":"more/document-style-guide/marks/#_12","text":"\u7834\u6298\u53f7 \u2014\u2014\u2014\u2014 \u4e00\u822c\u7528\u4e8e\u8fdb\u4e00\u6b65\u89e3\u91ca\u3002 \u7834\u6298\u53f7\u5e94\u5360\u4e24\u4e2a\u6c49\u5b57\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u7834\u6298\u53f7\u672c\u8eab\u53ea\u5360\u4e00\u4e2a\u6c49\u5b57\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u524d\u540e\u5e94\u8be5\u7559\u51fa\u4e00\u4e2a\u534a\u89d2\u7a7a\u683c\u3002 \u4f8b\u53e5\uff1a\u76f4\u89c9\u2014\u2014\u2014\u2014\u5c3d\u7ba1\u5b83\u5e76\u4e0d\u603b\u662f\u53ef\u9760\u7684\u2014\u2014\u2014\u2014\u544a\u8bc9\u6211\uff0c\u8fd9\u4e8b\u53ef\u80fd\u51fa\u4e86\u4e9b\u95ee\u9898\u3002 \u4f8b\u53e5\uff1a\u76f4\u89c9 \u2014\u2014 \u5c3d\u7ba1\u5b83\u5e76\u4e0d\u603b\u662f\u53ef\u9760\u7684 \u2014\u2014 \u544a\u8bc9\u6211\uff0c\u8fd9\u4e8b\u53ef\u80fd\u51fa\u4e86\u4e9b\u95ee\u9898\u3002","title":"\u7834\u6298\u53f7"},{"location":"more/document-style-guide/marks/#_13","text":"\u8fde\u63a5\u53f7\u7528\u4e8e\u8fde\u63a5\u4e24\u4e2a\u7c7b\u4f3c\u7684\u8bcd\u3002 \u4ee5\u4e0b\u573a\u5408\u5e94\u8be5\u4f7f\u7528\u76f4\u7ebf\u8fde\u63a5\u53f7\uff08 - \uff09\uff0c\u5360\u4e00\u4e2a\u534a\u89d2\u5b57\u7b26\u7684\u4f4d\u7f6e\u3002 \u4e24\u4e2a\u540d\u8bcd\u7684\u590d\u5408 \u56fe\u8868\u7f16\u53f7 \u4f8b\u53e5\uff1a\u6c27\u5316-\u8fd8\u539f\u53cd\u5e94 \u4f8b\u53e5\uff1a\u56fe 1-1 \u4ee5\u4e0b\u573a\u5408\u5e94\u8be5\u4f7f\u7528\u6ce2\u6d6a\u8fde\u63a5\u53f7\uff08 \uff5e \uff09\uff0c\u5360\u4e00\u4e2a\u5168\u89d2\u5b57\u7b26\u7684\u4f4d\u7f6e\u3002 \u6570\u503c\u8303\u56f4\uff08\u4f8b\u5982\u65e5\u671f\u3001\u65f6\u95f4\u6216\u6570\u5b57\uff09 \u4f8b\u53e5\uff1a2009 \u5e74\uff5e2011 \u5e74 \u6ce8\u610f\uff0c\u6ce2\u6d6a\u8fde\u63a5\u53f7\u524d\u540e\u4e24\u4e2a\u503c\u90fd\u5e94\u8be5\u52a0\u4e0a\u5355\u4f4d\u3002 \u6ce2\u6d6a\u8fde\u63a5\u53f7\u4e5f\u53ef\u4ee5\u7528\u6c49\u5b57\u201c\u81f3\u201d\u4ee3\u66ff\u3002 \u4f8b\u53e5\uff1a\u5468\u56f4\u6e29\u5ea6\uff1a-20\u00b0C \u81f3 -10\u00b0C","title":"\u8fde\u63a5\u53f7"},{"location":"more/document-style-guide/number/","text":"\u6570\u503c # \u534a\u89d2\u6570\u5b57 # \u6570\u5b57\u4e00\u5f8b\u4f7f\u7528\u534a\u89d2\u5f62\u5f0f\uff0c\u4e0d\u5f97\u4f7f\u7528\u5168\u89d2\u5f62\u5f0f\u3002 \u9519\u8bef\uff1a \u8fd9\u4ef6\u5546\u54c1\u7684\u4ef7\u683c\u662f\uff11\uff10\uff10\uff10\u5143\u3002 \u6b63\u786e\uff1a \u8fd9\u4ef6\u5546\u54c1\u7684\u4ef7\u683c\u662f 1000 \u5143\u3002 \u5343\u5206\u53f7 # \u6570\u503c\u4e3a\u5343\u4f4d\u4ee5\u4e0a\uff0c\u5e94\u6dfb\u52a0\u5343\u5206\u53f7\uff08\u534a\u89d2\u9017\u53f7\uff09\u3002 XXX \u516c\u53f8\u7684\u5b9e\u6536\u8d44\u672c\u4e3a RMB1,258,000\u3002 \u5bf9\u4e8e 4 \uff5e 6 \u4f4d\u7684\u6570\u503c\uff0c\u5343\u5206\u53f7\u662f\u9009\u7528\u7684\uff0c\u6bd4\u5982 1000 \u548c 1,000 \u90fd\u53ef\u4ee5\u63a5\u53d7\u3002\u5bf9\u4e8e7\u4f4d\u53ca\u4ee5\u4e0a\u7684\u6570\u503c\uff0c\u5343\u5206\u53f7\u662f\u5fc5\u987b\u7684\u3002 \u591a\u4f4d\u5c0f\u6570\u8981\u4ece\u5c0f\u6570\u70b9\u540e\u4ece\u5de6\u5411\u53f3\u6dfb\u52a0\u5343\u5206\u53f7\uff0c\u6bd4\u5982 4.234,345 \u3002 \u8d27\u5e01 # \u8d27\u5e01\u5e94\u4e3a\u963f\u62c9\u4f2f\u6570\u5b57\uff0c\u5e76\u5728\u6570\u5b57\u524d\u5199\u51fa\u8d27\u5e01\u7b26\u53f7\uff0c\u6216\u5728\u6570\u5b57\u540e\u5199\u51fa\u8d27\u5e01\u4e2d\u6587\u540d\u79f0\u3002 $1,000 1,000 \u7f8e\u5143 \u6570\u503c\u8303\u56f4 # \u8868\u793a\u6570\u503c\u8303\u56f4\u65f6\uff0c\u7528 \uff5e \u8fde\u63a5\u3002\u53c2\u89c1\u300a\u6807\u70b9\u7b26\u53f7\u300b\u4e00\u8282\u7684\u201c\u8fde\u63a5\u53f7\u201d\u90e8\u5206\u3002 \u5e26\u6709\u5355\u4f4d\u6216\u767e\u5206\u53f7\u65f6\uff0c\u4e24\u4e2a\u6570\u5b57\u90fd\u8981\u52a0\u4e0a\u5355\u4f4d\u6216\u767e\u5206\u53f7\uff0c\u4e0d\u80fd\u53ea\u52a0\u540e\u9762\u4e00\u4e2a\u3002 \u9519\u8bef\uff1a132\uff5e234kg \u6b63\u786e\uff1a132kg\uff5e234kg \u9519\u8bef\uff1a67\uff5e89% \u6b63\u786e\uff1a67%\uff5e89% \u53d8\u5316\u7a0b\u5ea6\u7684\u8868\u793a\u6cd5 # \u6570\u5b57\u7684\u589e\u52a0\u8981\u4f7f\u7528\u201c\u589e\u52a0\u4e86\u201d\u3001\u201c\u589e\u52a0\u5230\u201d\u3002\u201c\u4e86\u201d\u8868\u793a\u589e\u91cf\uff0c\u201c\u5230\u201d\u8868\u793a\u5b9a\u91cf\u3002 \u589e\u52a0\u5230\u8fc7\u53bb\u7684\u4e24\u500d \uff08\u8fc7\u53bb\u4e3a\u4e00\uff0c\u73b0\u5728\u4e3a\u4e8c\uff09 \u589e\u52a0\u4e86\u4e24\u500d \uff08\u8fc7\u53bb\u4e3a\u4e00\uff0c\u73b0\u5728\u4e3a\u4e09\uff09 \u6570\u5b57\u7684\u51cf\u5c11\u8981\u4f7f\u7528\u201c\u964d\u4f4e\u4e86\u201d\u3001\u201c\u964d\u4f4e\u5230\u201d\u3002\u201c\u4e86\u201d\u8868\u793a\u589e\u91cf\uff0c\u201c\u5230\u201d\u8868\u793a\u5b9a\u91cf\u3002 \u964d\u4f4e\u5230\u767e\u5206\u4e4b\u516b\u5341 \uff08\u5b9a\u989d\u662f\u4e00\u767e\uff0c\u73b0\u5728\u662f\u516b\u5341\uff09 \u964d\u4f4e\u4e86\u767e\u5206\u4e4b\u516b\u5341 \uff08\u539f\u6765\u662f\u4e00\u767e\uff0c\u73b0\u5728\u662f\u4e8c\u5341\uff09 \u4e0d\u80fd\u7528\u201c\u964d\u4f4eN\u500d\u201d\u6216\u201c\u51cf\u5c11N\u500d\u201d\u7684\u8868\u793a\u6cd5\uff0c\u8981\u7528\u201c\u964d\u4f4e\u767e\u5206\u4e4b\u51e0\u201d\u6216\u201c\u51cf\u5c11\u767e\u5206\u4e4b\u51e0\u201d\u3002\u56e0\u4e3a\u51cf\u5c11\uff08\u6216\u964d\u4f4e\uff09\u4e00\u500d\u8868\u793a\u6570\u503c\u539f\u6765\u4e3a\u4e00\u767e\uff0c\u73b0\u5728\u7b49\u4e8e\u96f6\u3002","title":"\u6570\u503c"},{"location":"more/document-style-guide/number/#_1","text":"","title":"\u6570\u503c"},{"location":"more/document-style-guide/number/#_2","text":"\u6570\u5b57\u4e00\u5f8b\u4f7f\u7528\u534a\u89d2\u5f62\u5f0f\uff0c\u4e0d\u5f97\u4f7f\u7528\u5168\u89d2\u5f62\u5f0f\u3002 \u9519\u8bef\uff1a \u8fd9\u4ef6\u5546\u54c1\u7684\u4ef7\u683c\u662f\uff11\uff10\uff10\uff10\u5143\u3002 \u6b63\u786e\uff1a \u8fd9\u4ef6\u5546\u54c1\u7684\u4ef7\u683c\u662f 1000 \u5143\u3002","title":"\u534a\u89d2\u6570\u5b57"},{"location":"more/document-style-guide/number/#_3","text":"\u6570\u503c\u4e3a\u5343\u4f4d\u4ee5\u4e0a\uff0c\u5e94\u6dfb\u52a0\u5343\u5206\u53f7\uff08\u534a\u89d2\u9017\u53f7\uff09\u3002 XXX \u516c\u53f8\u7684\u5b9e\u6536\u8d44\u672c\u4e3a RMB1,258,000\u3002 \u5bf9\u4e8e 4 \uff5e 6 \u4f4d\u7684\u6570\u503c\uff0c\u5343\u5206\u53f7\u662f\u9009\u7528\u7684\uff0c\u6bd4\u5982 1000 \u548c 1,000 \u90fd\u53ef\u4ee5\u63a5\u53d7\u3002\u5bf9\u4e8e7\u4f4d\u53ca\u4ee5\u4e0a\u7684\u6570\u503c\uff0c\u5343\u5206\u53f7\u662f\u5fc5\u987b\u7684\u3002 \u591a\u4f4d\u5c0f\u6570\u8981\u4ece\u5c0f\u6570\u70b9\u540e\u4ece\u5de6\u5411\u53f3\u6dfb\u52a0\u5343\u5206\u53f7\uff0c\u6bd4\u5982 4.234,345 \u3002","title":"\u5343\u5206\u53f7"},{"location":"more/document-style-guide/number/#_4","text":"\u8d27\u5e01\u5e94\u4e3a\u963f\u62c9\u4f2f\u6570\u5b57\uff0c\u5e76\u5728\u6570\u5b57\u524d\u5199\u51fa\u8d27\u5e01\u7b26\u53f7\uff0c\u6216\u5728\u6570\u5b57\u540e\u5199\u51fa\u8d27\u5e01\u4e2d\u6587\u540d\u79f0\u3002 $1,000 1,000 \u7f8e\u5143","title":"\u8d27\u5e01"},{"location":"more/document-style-guide/number/#_5","text":"\u8868\u793a\u6570\u503c\u8303\u56f4\u65f6\uff0c\u7528 \uff5e \u8fde\u63a5\u3002\u53c2\u89c1\u300a\u6807\u70b9\u7b26\u53f7\u300b\u4e00\u8282\u7684\u201c\u8fde\u63a5\u53f7\u201d\u90e8\u5206\u3002 \u5e26\u6709\u5355\u4f4d\u6216\u767e\u5206\u53f7\u65f6\uff0c\u4e24\u4e2a\u6570\u5b57\u90fd\u8981\u52a0\u4e0a\u5355\u4f4d\u6216\u767e\u5206\u53f7\uff0c\u4e0d\u80fd\u53ea\u52a0\u540e\u9762\u4e00\u4e2a\u3002 \u9519\u8bef\uff1a132\uff5e234kg \u6b63\u786e\uff1a132kg\uff5e234kg \u9519\u8bef\uff1a67\uff5e89% \u6b63\u786e\uff1a67%\uff5e89%","title":"\u6570\u503c\u8303\u56f4"},{"location":"more/document-style-guide/number/#_6","text":"\u6570\u5b57\u7684\u589e\u52a0\u8981\u4f7f\u7528\u201c\u589e\u52a0\u4e86\u201d\u3001\u201c\u589e\u52a0\u5230\u201d\u3002\u201c\u4e86\u201d\u8868\u793a\u589e\u91cf\uff0c\u201c\u5230\u201d\u8868\u793a\u5b9a\u91cf\u3002 \u589e\u52a0\u5230\u8fc7\u53bb\u7684\u4e24\u500d \uff08\u8fc7\u53bb\u4e3a\u4e00\uff0c\u73b0\u5728\u4e3a\u4e8c\uff09 \u589e\u52a0\u4e86\u4e24\u500d \uff08\u8fc7\u53bb\u4e3a\u4e00\uff0c\u73b0\u5728\u4e3a\u4e09\uff09 \u6570\u5b57\u7684\u51cf\u5c11\u8981\u4f7f\u7528\u201c\u964d\u4f4e\u4e86\u201d\u3001\u201c\u964d\u4f4e\u5230\u201d\u3002\u201c\u4e86\u201d\u8868\u793a\u589e\u91cf\uff0c\u201c\u5230\u201d\u8868\u793a\u5b9a\u91cf\u3002 \u964d\u4f4e\u5230\u767e\u5206\u4e4b\u516b\u5341 \uff08\u5b9a\u989d\u662f\u4e00\u767e\uff0c\u73b0\u5728\u662f\u516b\u5341\uff09 \u964d\u4f4e\u4e86\u767e\u5206\u4e4b\u516b\u5341 \uff08\u539f\u6765\u662f\u4e00\u767e\uff0c\u73b0\u5728\u662f\u4e8c\u5341\uff09 \u4e0d\u80fd\u7528\u201c\u964d\u4f4eN\u500d\u201d\u6216\u201c\u51cf\u5c11N\u500d\u201d\u7684\u8868\u793a\u6cd5\uff0c\u8981\u7528\u201c\u964d\u4f4e\u767e\u5206\u4e4b\u51e0\u201d\u6216\u201c\u51cf\u5c11\u767e\u5206\u4e4b\u51e0\u201d\u3002\u56e0\u4e3a\u51cf\u5c11\uff08\u6216\u964d\u4f4e\uff09\u4e00\u500d\u8868\u793a\u6570\u503c\u539f\u6765\u4e3a\u4e00\u767e\uff0c\u73b0\u5728\u7b49\u4e8e\u96f6\u3002","title":"\u53d8\u5316\u7a0b\u5ea6\u7684\u8868\u793a\u6cd5"},{"location":"more/document-style-guide/paragraph/","text":"\u6bb5\u843d # \u539f\u5219 # \u4e00\u4e2a\u6bb5\u843d\u53ea\u80fd\u6709\u4e00\u4e2a\u4e3b\u9898\uff0c\u6216\u4e00\u4e2a\u4e2d\u5fc3\u53e5\u5b50\u3002 \u6bb5\u843d\u7684\u4e2d\u5fc3\u53e5\u5b50\u653e\u5728\u6bb5\u9996\uff0c\u5bf9\u5168\u6bb5\u5185\u5bb9\u8fdb\u884c\u6982\u8ff0\u3002\u540e\u9762\u9648\u8ff0\u7684\u53e5\u5b50\u4e3a\u6838\u5fc3\u53e5\u670d\u52a1\u3002 \u4e00\u4e2a\u6bb5\u843d\u7684\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7\u4e03\u884c\uff0c\u6700\u4f73\u6bb5\u843d\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u56db\u884c\u3002 \u6bb5\u843d\u7684\u53e5\u5b50\u8bed\u6c14\u8981\u4f7f\u7528\u9648\u8ff0\u548c\u80af\u5b9a\u8bed\u6c14\uff0c\u907f\u514d\u4f7f\u7528\u611f\u53f9\u8bed\u6c14\u3002 \u6bb5\u843d\u4e4b\u95f4\u4f7f\u7528\u4e00\u4e2a\u7a7a\u884c\u9694\u5f00\u3002 \u6bb5\u843d\u5f00\u5934\u4e0d\u8981\u7559\u51fa\u7a7a\u767d\u5b57\u7b26\u3002 \u5f15\u7528 # \u5f15\u7528\u7b2c\u4e09\u65b9\u5185\u5bb9\u65f6\uff0c\u5e94\u6ce8\u660e\u51fa\u5904\u3002 One man\u2019s constant is another man\u2019s variable. \u2014 Alan Perlis \u5982\u679c\u662f\u5168\u7bc7\u8f6c\u8f7d\uff0c\u8bf7\u5728\u5168\u6587\u5f00\u5934\u663e\u8457\u4f4d\u7f6e\u6ce8\u660e\u4f5c\u8005\u548c\u51fa\u5904\uff0c\u5e76\u94fe\u63a5\u81f3\u539f\u6587\u3002 \u672c\u6587\u8f6c\u8f7d\u81ea WikiQuote \u4f7f\u7528\u5916\u90e8\u56fe\u7247\u65f6\uff0c\u5fc5\u987b\u5728\u56fe\u7247\u4e0b\u65b9\u6216\u6587\u672b\u6807\u660e\u6765\u6e90\u3002 \u672c\u6587\u90e8\u5206\u56fe\u7247\u6765\u81ea Wikipedia","title":"\u6bb5\u843d"},{"location":"more/document-style-guide/paragraph/#_1","text":"","title":"\u6bb5\u843d"},{"location":"more/document-style-guide/paragraph/#_2","text":"\u4e00\u4e2a\u6bb5\u843d\u53ea\u80fd\u6709\u4e00\u4e2a\u4e3b\u9898\uff0c\u6216\u4e00\u4e2a\u4e2d\u5fc3\u53e5\u5b50\u3002 \u6bb5\u843d\u7684\u4e2d\u5fc3\u53e5\u5b50\u653e\u5728\u6bb5\u9996\uff0c\u5bf9\u5168\u6bb5\u5185\u5bb9\u8fdb\u884c\u6982\u8ff0\u3002\u540e\u9762\u9648\u8ff0\u7684\u53e5\u5b50\u4e3a\u6838\u5fc3\u53e5\u670d\u52a1\u3002 \u4e00\u4e2a\u6bb5\u843d\u7684\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7\u4e03\u884c\uff0c\u6700\u4f73\u6bb5\u843d\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u56db\u884c\u3002 \u6bb5\u843d\u7684\u53e5\u5b50\u8bed\u6c14\u8981\u4f7f\u7528\u9648\u8ff0\u548c\u80af\u5b9a\u8bed\u6c14\uff0c\u907f\u514d\u4f7f\u7528\u611f\u53f9\u8bed\u6c14\u3002 \u6bb5\u843d\u4e4b\u95f4\u4f7f\u7528\u4e00\u4e2a\u7a7a\u884c\u9694\u5f00\u3002 \u6bb5\u843d\u5f00\u5934\u4e0d\u8981\u7559\u51fa\u7a7a\u767d\u5b57\u7b26\u3002","title":"\u539f\u5219"},{"location":"more/document-style-guide/paragraph/#_3","text":"\u5f15\u7528\u7b2c\u4e09\u65b9\u5185\u5bb9\u65f6\uff0c\u5e94\u6ce8\u660e\u51fa\u5904\u3002 One man\u2019s constant is another man\u2019s variable. \u2014 Alan Perlis \u5982\u679c\u662f\u5168\u7bc7\u8f6c\u8f7d\uff0c\u8bf7\u5728\u5168\u6587\u5f00\u5934\u663e\u8457\u4f4d\u7f6e\u6ce8\u660e\u4f5c\u8005\u548c\u51fa\u5904\uff0c\u5e76\u94fe\u63a5\u81f3\u539f\u6587\u3002 \u672c\u6587\u8f6c\u8f7d\u81ea WikiQuote \u4f7f\u7528\u5916\u90e8\u56fe\u7247\u65f6\uff0c\u5fc5\u987b\u5728\u56fe\u7247\u4e0b\u65b9\u6216\u6587\u672b\u6807\u660e\u6765\u6e90\u3002 \u672c\u6587\u90e8\u5206\u56fe\u7247\u6765\u81ea Wikipedia","title":"\u5f15\u7528"},{"location":"more/document-style-guide/reference/","text":"\u53c2\u8003\u94fe\u63a5 # \u4ea7\u54c1\u624b\u518c\u4e2d\u6587\u5199\u4f5c\u89c4\u8303 , by \u534e\u4e3a \u5199\u4f5c\u89c4\u8303\u548c\u683c\u5f0f\u89c4\u8303 , by DaoCloud \u6280\u672f\u5199\u4f5c\u6280\u5de7\u5728\u65e5\u6c49\u7ffb\u8bd1\u4e2d\u7684\u5e94\u7528 , by \u5218\u65b9 \u7b80\u4f53\u4e2d\u6587\u89c4\u8303\u6307\u5357 , by lengoo \u6587\u6863\u98ce\u683c\u6307\u5357 , by LeanCloud \u8c4c\u8c46\u835a\u6587\u6848\u98ce\u683c\u6307\u5357 , by \u8c4c\u8c46\u835a \u4e2d\u6587\u6587\u6848\u6392\u7248\u6307\u5317 , by sparanoid \u4e2d\u6587\u6392\u7248\u9700\u6c42 , by W3C \u4e3a\u4ec0\u4e48\u6587\u4ef6\u540d\u8981\u5c0f\u5199\uff1f , by \u962e\u4e00\u5cf0 Google Developer Documentation Style Guide , by Google","title":"\u53c2\u8003\u94fe\u63a5"},{"location":"more/document-style-guide/reference/#_1","text":"\u4ea7\u54c1\u624b\u518c\u4e2d\u6587\u5199\u4f5c\u89c4\u8303 , by \u534e\u4e3a \u5199\u4f5c\u89c4\u8303\u548c\u683c\u5f0f\u89c4\u8303 , by DaoCloud \u6280\u672f\u5199\u4f5c\u6280\u5de7\u5728\u65e5\u6c49\u7ffb\u8bd1\u4e2d\u7684\u5e94\u7528 , by \u5218\u65b9 \u7b80\u4f53\u4e2d\u6587\u89c4\u8303\u6307\u5357 , by lengoo \u6587\u6863\u98ce\u683c\u6307\u5357 , by LeanCloud \u8c4c\u8c46\u835a\u6587\u6848\u98ce\u683c\u6307\u5357 , by \u8c4c\u8c46\u835a \u4e2d\u6587\u6587\u6848\u6392\u7248\u6307\u5317 , by sparanoid \u4e2d\u6587\u6392\u7248\u9700\u6c42 , by W3C \u4e3a\u4ec0\u4e48\u6587\u4ef6\u540d\u8981\u5c0f\u5199\uff1f , by \u962e\u4e00\u5cf0 Google Developer Documentation Style Guide , by Google","title":"\u53c2\u8003\u94fe\u63a5"},{"location":"more/document-style-guide/structure/","text":"\u6587\u6863\u4f53\u7cfb # \u7ed3\u6784 # \u8f6f\u4ef6\u624b\u518c\u662f\u4e00\u90e8\u5b8c\u6574\u7684\u4e66\uff0c\u5efa\u8bae\u91c7\u7528\u4e0b\u9762\u7684\u7ed3\u6784\u3002 \u7b80\u4ecb \uff08Introduction\uff09\uff1a [\u5fc5\u5907] [\u6587\u4ef6] \u63d0\u4f9b\u5bf9\u4ea7\u54c1\u548c\u6587\u6863\u672c\u8eab\u7684\u603b\u4f53\u7684\u3001\u627c\u8981\u7684\u8bf4\u660e \u5feb\u901f\u4e0a\u624b \uff08Getting Started\uff09\uff1a[\u53ef\u9009] [\u6587\u4ef6] \u5982\u4f55\u6700\u5feb\u901f\u5730\u4f7f\u7528\u4ea7\u54c1 \u5165\u95e8\u7bc7 \uff08Basics\uff09\uff1a [\u5fc5\u5907] [\u76ee\u5f55] \u53c8\u79f0\u201d\u4f7f\u7528\u7bc7\u201c\uff0c\u63d0\u4f9b\u521d\u7ea7\u7684\u4f7f\u7528\u6559\u7a0b \u73af\u5883\u51c6\u5907 \uff08Prerequisite\uff09\uff1a[\u5fc5\u5907] [\u6587\u4ef6] \u8f6f\u4ef6\u4f7f\u7528\u9700\u8981\u6ee1\u8db3\u7684\u524d\u7f6e\u6761\u4ef6 \u5b89\u88c5 \uff08Installation\uff09\uff1a[\u53ef\u9009] [\u6587\u4ef6] \u8f6f\u4ef6\u7684\u5b89\u88c5\u65b9\u6cd5 \u8bbe\u7f6e \uff08Configuration\uff09\uff1a[\u5fc5\u5907] [\u6587\u4ef6] \u8f6f\u4ef6\u7684\u8bbe\u7f6e \u8fdb\u9636\u7bc7 \uff08Advanced)\uff1a[\u53ef\u9009] [\u76ee\u5f55] \u53c8\u79f0\u201d\u5f00\u53d1\u7bc7\u201c\uff0c\u63d0\u4f9b\u4e2d\u9ad8\u7ea7\u7684\u5f00\u53d1\u6559\u7a0b API \uff08Reference\uff09\uff1a[\u53ef\u9009] [\u76ee\u5f55|\u6587\u4ef6] \u8f6f\u4ef6 API \u7684\u9010\u4e00\u4ecb\u7ecd FAQ \uff1a[\u53ef\u9009] [\u6587\u4ef6] \u5e38\u89c1\u95ee\u9898\u89e3\u7b54 \u9644\u5f55 \uff08Appendix\uff09\uff1a[\u53ef\u9009] [\u76ee\u5f55] \u4e0d\u5c5e\u4e8e\u6559\u7a0b\u672c\u8eab\u3001\u4f46\u5bf9\u9605\u8bfb\u6559\u7a0b\u6709\u5e2e\u52a9\u7684\u5185\u5bb9 Glossary \uff1a[\u53ef\u9009] [\u6587\u4ef6] \u540d\u8bcd\u89e3\u91ca Recipes \uff1a[\u53ef\u9009] [\u6587\u4ef6] \u6700\u4f73\u5b9e\u8df5 Troubleshooting \uff1a[\u53ef\u9009] [\u6587\u4ef6] \u6545\u969c\u5904\u7406 ChangeLog \uff1a[\u53ef\u9009] [\u6587\u4ef6] \u7248\u672c\u8bf4\u660e Feedback \uff1a[\u53ef\u9009] [\u6587\u4ef6] \u53cd\u9988\u65b9\u5f0f \u4e0b\u9762\u662f\u4e24\u4e2a\u771f\u5b9e\u8303\u4f8b\uff0c\u53ef\u53c2\u8003\u3002 Redux \u624b\u518c Atom \u624b\u518c \u6587\u4ef6\u540d # \u6587\u6863\u7684\u6587\u4ef6\u540d\u4e0d\u5f97\u542b\u6709\u7a7a\u683c\u3002 \u6587\u4ef6\u540d\u5fc5\u987b\u4f7f\u7528\u534a\u89d2\u5b57\u7b26\uff0c\u4e0d\u5f97\u4f7f\u7528\u5168\u89d2\u5b57\u7b26\u3002\u8fd9\u4e5f\u610f\u5473\u7740\uff0c\u4e2d\u6587\u4e0d\u80fd\u7528\u4e8e\u6587\u4ef6\u540d\u3002 \u9519\u8bef\uff1a \u540d\u8bcd\u89e3\u91ca.md \u6b63\u786e\uff1a glossary.md \u6587\u4ef6\u540d\u5efa\u8bae\u53ea\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e0d\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u3002 \u9519\u8bef\uff1aTroubleShooting.md \u6b63\u786e\uff1atroubleshooting.md \u4e3a\u4e86\u9192\u76ee\uff0c\u67d0\u4e9b\u8bf4\u660e\u6587\u4ef6\u7684\u6587\u4ef6\u540d\uff0c\u53ef\u4ee5\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\uff0c\u6bd4\u5982 README \u3001 LICENSE \u3002 \u6587\u4ef6\u540d\u5305\u542b\u591a\u4e2a\u5355\u8bcd\u65f6\uff0c\u5355\u8bcd\u4e4b\u95f4\u5efa\u8bae\u4f7f\u7528\u534a\u89d2\u7684\u8fde\u8bcd\u7ebf\uff08 - \uff09\u5206\u9694\u3002 \u4e0d\u4f73\uff1aadvanced_usage.md \u6b63\u786e\uff1aadvanced-usage.md","title":"\u6587\u6863\u4f53\u7cfb"},{"location":"more/document-style-guide/structure/#_1","text":"","title":"\u6587\u6863\u4f53\u7cfb"},{"location":"more/document-style-guide/structure/#_2","text":"\u8f6f\u4ef6\u624b\u518c\u662f\u4e00\u90e8\u5b8c\u6574\u7684\u4e66\uff0c\u5efa\u8bae\u91c7\u7528\u4e0b\u9762\u7684\u7ed3\u6784\u3002 \u7b80\u4ecb \uff08Introduction\uff09\uff1a [\u5fc5\u5907] [\u6587\u4ef6] \u63d0\u4f9b\u5bf9\u4ea7\u54c1\u548c\u6587\u6863\u672c\u8eab\u7684\u603b\u4f53\u7684\u3001\u627c\u8981\u7684\u8bf4\u660e \u5feb\u901f\u4e0a\u624b \uff08Getting Started\uff09\uff1a[\u53ef\u9009] [\u6587\u4ef6] \u5982\u4f55\u6700\u5feb\u901f\u5730\u4f7f\u7528\u4ea7\u54c1 \u5165\u95e8\u7bc7 \uff08Basics\uff09\uff1a [\u5fc5\u5907] [\u76ee\u5f55] \u53c8\u79f0\u201d\u4f7f\u7528\u7bc7\u201c\uff0c\u63d0\u4f9b\u521d\u7ea7\u7684\u4f7f\u7528\u6559\u7a0b \u73af\u5883\u51c6\u5907 \uff08Prerequisite\uff09\uff1a[\u5fc5\u5907] [\u6587\u4ef6] \u8f6f\u4ef6\u4f7f\u7528\u9700\u8981\u6ee1\u8db3\u7684\u524d\u7f6e\u6761\u4ef6 \u5b89\u88c5 \uff08Installation\uff09\uff1a[\u53ef\u9009] [\u6587\u4ef6] \u8f6f\u4ef6\u7684\u5b89\u88c5\u65b9\u6cd5 \u8bbe\u7f6e \uff08Configuration\uff09\uff1a[\u5fc5\u5907] [\u6587\u4ef6] \u8f6f\u4ef6\u7684\u8bbe\u7f6e \u8fdb\u9636\u7bc7 \uff08Advanced)\uff1a[\u53ef\u9009] [\u76ee\u5f55] \u53c8\u79f0\u201d\u5f00\u53d1\u7bc7\u201c\uff0c\u63d0\u4f9b\u4e2d\u9ad8\u7ea7\u7684\u5f00\u53d1\u6559\u7a0b API \uff08Reference\uff09\uff1a[\u53ef\u9009] [\u76ee\u5f55|\u6587\u4ef6] \u8f6f\u4ef6 API \u7684\u9010\u4e00\u4ecb\u7ecd FAQ \uff1a[\u53ef\u9009] [\u6587\u4ef6] \u5e38\u89c1\u95ee\u9898\u89e3\u7b54 \u9644\u5f55 \uff08Appendix\uff09\uff1a[\u53ef\u9009] [\u76ee\u5f55] \u4e0d\u5c5e\u4e8e\u6559\u7a0b\u672c\u8eab\u3001\u4f46\u5bf9\u9605\u8bfb\u6559\u7a0b\u6709\u5e2e\u52a9\u7684\u5185\u5bb9 Glossary \uff1a[\u53ef\u9009] [\u6587\u4ef6] \u540d\u8bcd\u89e3\u91ca Recipes \uff1a[\u53ef\u9009] [\u6587\u4ef6] \u6700\u4f73\u5b9e\u8df5 Troubleshooting \uff1a[\u53ef\u9009] [\u6587\u4ef6] \u6545\u969c\u5904\u7406 ChangeLog \uff1a[\u53ef\u9009] [\u6587\u4ef6] \u7248\u672c\u8bf4\u660e Feedback \uff1a[\u53ef\u9009] [\u6587\u4ef6] \u53cd\u9988\u65b9\u5f0f \u4e0b\u9762\u662f\u4e24\u4e2a\u771f\u5b9e\u8303\u4f8b\uff0c\u53ef\u53c2\u8003\u3002 Redux \u624b\u518c Atom \u624b\u518c","title":"\u7ed3\u6784"},{"location":"more/document-style-guide/structure/#_3","text":"\u6587\u6863\u7684\u6587\u4ef6\u540d\u4e0d\u5f97\u542b\u6709\u7a7a\u683c\u3002 \u6587\u4ef6\u540d\u5fc5\u987b\u4f7f\u7528\u534a\u89d2\u5b57\u7b26\uff0c\u4e0d\u5f97\u4f7f\u7528\u5168\u89d2\u5b57\u7b26\u3002\u8fd9\u4e5f\u610f\u5473\u7740\uff0c\u4e2d\u6587\u4e0d\u80fd\u7528\u4e8e\u6587\u4ef6\u540d\u3002 \u9519\u8bef\uff1a \u540d\u8bcd\u89e3\u91ca.md \u6b63\u786e\uff1a glossary.md \u6587\u4ef6\u540d\u5efa\u8bae\u53ea\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e0d\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u3002 \u9519\u8bef\uff1aTroubleShooting.md \u6b63\u786e\uff1atroubleshooting.md \u4e3a\u4e86\u9192\u76ee\uff0c\u67d0\u4e9b\u8bf4\u660e\u6587\u4ef6\u7684\u6587\u4ef6\u540d\uff0c\u53ef\u4ee5\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\uff0c\u6bd4\u5982 README \u3001 LICENSE \u3002 \u6587\u4ef6\u540d\u5305\u542b\u591a\u4e2a\u5355\u8bcd\u65f6\uff0c\u5355\u8bcd\u4e4b\u95f4\u5efa\u8bae\u4f7f\u7528\u534a\u89d2\u7684\u8fde\u8bcd\u7ebf\uff08 - \uff09\u5206\u9694\u3002 \u4e0d\u4f73\uff1aadvanced_usage.md \u6b63\u786e\uff1aadvanced-usage.md","title":"\u6587\u4ef6\u540d"},{"location":"more/document-style-guide/text/","text":"\u6587\u672c # \u5b57\u95f4\u8ddd # \u5168\u89d2\u4e2d\u6587\u5b57\u7b26\u4e0e\u534a\u89d2\u82f1\u6587\u5b57\u7b26\u4e4b\u95f4\uff0c\u5e94\u6709\u4e00\u4e2a\u534a\u89d2\u7a7a\u683c\u3002 \u9519\u8bef\uff1a\u672c\u6587\u4ecb\u7ecd\u5982\u4f55\u5feb\u901f\u542f\u52a8Windows\u7cfb\u7edf\u3002 \u6b63\u786e\uff1a\u672c\u6587\u4ecb\u7ecd\u5982\u4f55\u5feb\u901f\u542f\u52a8 Windows \u7cfb\u7edf\u3002 \u5168\u89d2\u4e2d\u6587\u5b57\u7b26\u4e0e\u534a\u89d2\u963f\u62c9\u4f2f\u6570\u5b57\u4e4b\u95f4\uff0c\u6709\u6ca1\u6709\u534a\u89d2\u7a7a\u683c\u90fd\u53ef\uff0c\u4f46\u5fc5\u987b\u4fdd\u8bc1\u98ce\u683c\u7edf\u4e00\uff0c\u4e0d\u80fd\u4e24\u79cd\u98ce\u683c\u6df7\u6742\u3002 \u6b63\u786e\uff1a2011\u5e745\u670815\u65e5\uff0c\u6211\u8ba2\u8d2d\u4e865\u53f0\u7b14\u8bb0\u672c\u7535\u8111\u4e0e10\u53f0\u5e73\u677f\u7535\u8111\u3002 \u6b63\u786e\uff1a2011 \u5e74 5 \u6708 15 \u65e5\uff0c\u6211\u8ba2\u8d2d\u4e86 5 \u53f0\u7b14\u8bb0\u672c\u7535\u8111\u4e0e 10 \u53f0\u5e73\u677f\u7535\u8111\u3002 \u534a\u89d2\u7684\u767e\u5206\u53f7\uff0c\u89c6\u540c\u963f\u62c9\u4f2f\u6570\u5b57\u3002 \u82f1\u6587\u5355\u4f4d\u82e5\u4e0d\u7ffb\u8bd1\uff0c\u5355\u4f4d\u524d\u7684\u963f\u62c9\u4f2f\u6570\u5b57\u4e0e\u5355\u4f4d\u95f4\u4e0d\u7559\u7a7a\u683c\u3002 \u9519\u8bef\uff1a\u4e00\u90e8\u5bb9\u91cf\u4e3a 16 GB \u7684\u667a\u80fd\u624b\u673a \u6b63\u786e\uff1a\u4e00\u90e8\u5bb9\u91cf\u4e3a 16GB \u7684\u667a\u80fd\u624b\u673a \u534a\u89d2\u82f1\u6587\u5b57\u7b26\u548c\u534a\u89d2\u963f\u62c9\u4f2f\u6570\u5b57\uff0c\u4e0e\u5168\u89d2\u6807\u70b9\u7b26\u53f7\u4e4b\u95f4\u4e0d\u7559\u7a7a\u683c\u3002 \u9519\u8bef\uff1a\u4ed6\u7684\u7535\u8111\u662f MacBook Air \u3002 \u6b63\u786e\uff1a\u4ed6\u7684\u7535\u8111\u662f MacBook Air\u3002 \u53e5\u5b50 # \u907f\u514d\u4f7f\u7528\u957f\u53e5\u3002\u53e5\u5b50\u5185\u90e8\u4e0d\u4f7f\u7528\u9017\u53f7\u65f6\uff0c\u603b\u957f\u5ea6\u4e0d\u5e94\u8be5\u8d85\u8fc7 40 \u4e2a\u5b57\uff1b\u4f7f\u7528\u9017\u53f7\u65f6\uff0c\u603b\u957f\u5ea6\u4e0d\u5e94\u8be5\u8d85\u8fc7 100 \u5b57\u6216\u8005\u6b63\u6587\u7684 3 \u884c\u3002 \u5c3d\u91cf\u4f7f\u7528\u7b80\u5355\u53e5\u548c\u5e76\u5217\u53e5\uff0c\u907f\u514d\u4f7f\u7528\u590d\u5408\u53e5\u3002 \u5199\u4f5c\u98ce\u683c # 1\u3001\u5c3d\u91cf\u4e0d\u4f7f\u7528\u88ab\u52a8\u8bed\u6001\uff0c\u6539\u4e3a\u4f7f\u7528\u4e3b\u52a8\u8bed\u6001\u3002 \u9519\u8bef\uff1a\u5047\u5982\u6b64\u8f6f\u4ef6\u5c1a\u672a\u88ab\u5b89\u88c5\uff0c \u6b63\u786e\uff1a\u5047\u5982\u5c1a\u672a\u5b89\u88c5\u8fd9\u4e2a\u8f6f\u4ef6\uff0c 2\u3001\u4e0d\u4f7f\u7528\u975e\u6b63\u5f0f\u7684\u8bed\u8a00\u98ce\u683c\u3002 \u9519\u8bef\uff1aLady Gaga \u7684\u6f14\u5531\u4f1a\u771f\u662f\u9177\u6bd9\u4e86\uff0c\u4ece\u6ca1\u770b\u8fc7\u8fd9\u4e48\u7ed9\u529b\u7684\u8868\u6f14\uff01\uff01\uff01 \u6b63\u786e\uff1a\u65e0\u6cd5\u53c2\u52a0\u672c\u6b21\u6d3b\u52a8\uff0c\u6211\u6df1\u611f\u9057\u61be\u3002 3\u3001\u4e0d\u4f7f\u7528\u51b7\u50fb\u3001\u751f\u9020\u6216\u8005\u6587\u8a00\u6587\u7684\u8bcd\u8bed\uff0c\u800c\u8981\u4f7f\u7528\u73b0\u4ee3\u6c49\u8bed\u7684\u5e38\u7528\u8868\u8fbe\u65b9\u5f0f\u3002 \u9519\u8bef\uff1a\u8fd9\u662f\u552f\u4e8c\u7684\u5feb\u901f\u542f\u52a8\u7684\u65b9\u6cd5\u3002 \u6b63\u786e\uff1a\u8fd9\u662f\u4ec5\u6709\u7684\u4e24\u79cd\u5feb\u901f\u542f\u52a8\u7684\u65b9\u6cd5\u3002 4\u3001\u7528\u5bf9\u201c\u7684\u201d\u3001\u201c\u5730\u201d\u3001\u201c\u5f97\u201d\u3002 \u5979\u9732\u51fa\u4e86\u5f00\u5fc3\u7684\u7b11\u5bb9\u3002 \uff08\u5f62\u5bb9\u8bcd\uff0b\u7684\uff0b\u540d\u8bcd\uff09 \u5979\u5f00\u5fc3\u5730\u7b11\u4e86\u3002 \uff08\u526f\u8bcd\uff0b\u5730\uff0b\u52a8\u8bcd\uff09 \u5979\u7b11\u5f97\u5f88\u5f00\u5fc3\u3002 \uff08\u52a8\u8bcd\uff0b\u5f97\uff0b\u526f\u8bcd\uff09 5\u3001\u4f7f\u7528\u4ee3\u8bcd\u65f6\uff08\u6bd4\u5982\u201c\u5176\u201d\u3001\u201c\u8be5\u201d\u3001\u201c\u6b64\u201d\u3001\u201c\u8fd9\u201d\u7b49\u8bcd\uff09\uff0c\u5fc5\u987b\u660e\u786e\u6307\u4ee3\u7684\u5185\u5bb9\uff0c\u4fdd\u8bc1\u53ea\u6709\u4e00\u4e2a\u542b\u4e49\u3002 \u9519\u8bef\uff1a\u4ece\u7ba1\u7406\u7cfb\u7edf\u53ef\u4ee5\u76d1\u89c6\u4e2d\u7ee7\u7cfb\u7edf\u548c\u53d7\u5176\u76f4\u63a5\u63a7\u5236\u7684\u5206\u914d\u7cfb\u7edf\u3002 \u6b63\u786e\uff1a\u4ece\u7ba1\u7406\u7cfb\u7edf\u53ef\u4ee5\u76d1\u89c6\u4e24\u4e2a\u7cfb\u7edf\uff1a\u4e2d\u7ee7\u7cfb\u7edf\u548c\u53d7\u4e2d\u7ee7\u7cfb\u7edf\u76f4\u63a5\u63a7\u5236\u7684\u5206\u914d\u7cfb\u7edf\u3002 6\u3001\u540d\u8bcd\u524d\u4e0d\u8981\u4f7f\u7528\u8fc7\u591a\u7684\u5f62\u5bb9\u8bcd\u3002 \u9519\u8bef\uff1a\u6b64\u8bbe\u5907\u7684\u4f7f\u7528\u5fc5\u987b\u5728\u63a5\u53d7\u8fc7\u672c\u516c\u53f8\u4e3e\u529e\u7684\u6b63\u5f0f\u7684\u8bbe\u5907\u57f9\u8bad\u7684\u6280\u5e08\u7684\u6307\u5bfc\u4e0b\u8fdb\u884c\u3002 \u6b63\u786e\uff1a\u6b64\u8bbe\u5907\u5fc5\u987b\u5728\u6280\u5e08\u7684\u6307\u5bfc\u4e0b\u4f7f\u7528\uff0c\u4e14\u6307\u5bfc\u6280\u5e08\u5fc5\u987b\u63a5\u53d7\u8fc7\u7531\u672c\u516c\u53f8\u4e3e\u529e\u7684\u6b63\u5f0f\u8bbe\u5907\u57f9\u8bad\u3002 7\u3001\u4e0d\u5305\u542b\u4efb\u4f55\u6807\u70b9\u7b26\u53f7\u7684\u5355\u4e2a\u53e5\u5b50\uff0c\u6216\u8005\u4ee5\u9017\u53f7\u5206\u9694\u7684\u53e5\u5b50\u6784\u4ef6\uff0c\u957f\u5ea6\u5c3d\u91cf\u4fdd\u6301\u5728 20 \u4e2a\u5b57\u4ee5\u5185\uff1b20\uff5e29 \u4e2a\u5b57\u7684\u53e5\u5b50\uff0c\u53ef\u4ee5\u63a5\u53d7\uff1b30\uff5e39 \u4e2a\u5b57\u7684\u53e5\u5b50\uff0c\u8bed\u4e49\u5fc5\u987b\u660e\u786e\uff0c\u624d\u80fd\u63a5\u53d7\uff1b\u591a\u4e8e 40 \u4e2a\u5b57\u7684\u53e5\u5b50\uff0c\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u4e0d\u80fd\u63a5\u53d7\u3002 \u9519\u8bef\uff1a\u672c\u4ea7\u54c1\u9002\u7528\u4e8e\u4ece\u7531\u4e00\u53f0\u670d\u52a1\u5668\u8fdb\u884c\u52a8\u4f5c\u63a7\u5236\u7684\u5355\u4e00\u8282\u70b9\u7ed3\u6784\u5230\u7531\u591a\u53f0\u670d\u52a1\u5668\u8fdb\u884c\u52a8\u4f5c\u63a7\u5236\u7684\u5e76\u884c\u5904\u7406\u7a0b\u5e8f\u7ed3\u6784\u7b49\u591a\u79cd\u4f53\u7cfb\u7ed3\u6784\u3002 \u6b63\u786e\uff1a\u672c\u4ea7\u54c1\u9002\u7528\u4e8e\u591a\u79cd\u4f53\u7cfb\u7ed3\u6784\u3002\u65e0\u8bba\u662f\u7531\u4e00\u53f0\u670d\u52a1\u5668\uff08\u5355\u4e00\u8282\u70b9\u7ed3\u6784\uff09\uff0c\u8fd8\u662f\u7531\u591a\u53f0\u670d\u52a1\u5668\uff08\u5e76\u884c\u5904\u7406\u7ed3\u6784\uff09\u8fdb\u884c\u52a8\u4f5c\u63a7\u5236\uff0c\u5747\u53ef\u4ee5\u4f7f\u7528\u672c\u4ea7\u54c1\u3002 8\u3001\u540c\u6837\u4e00\u4e2a\u610f\u601d\uff0c\u5c3d\u91cf\u4f7f\u7528\u80af\u5b9a\u53e5\u8868\u8fbe\uff0c\u4e0d\u4f7f\u7528\u5426\u5b9a\u53e5\u8868\u8fbe\u3002 \u9519\u8bef\uff1a\u8bf7\u786e\u8ba4\u6ca1\u6709\u63a5\u901a\u88c5\u7f6e\u7684\u7535\u6e90\u3002 \u6b63\u786e\uff1a\u8bf7\u786e\u8ba4\u88c5\u7f6e\u7684\u7535\u6e90\u5df2\u5173\u95ed\u3002 9\u3001\u907f\u514d\u4f7f\u7528\u53cc\u91cd\u5426\u5b9a\u53e5\u3002 \u9519\u8bef\uff1a\u6ca1\u6709\u5220\u9664\u6743\u9650\u7684\u7528\u6237\uff0c\u4e0d\u80fd\u5220\u9664\u6b64\u6587\u4ef6\u3002 \u6b63\u786e\uff1a\u7528\u6237\u5fc5\u987b\u62e5\u6709\u5220\u9664\u6743\u9650\uff0c\u624d\u80fd\u5220\u9664\u6b64\u6587\u4ef6\u3002 \u82f1\u6587\u5904\u7406 # \u82f1\u6587\u539f\u6587\u5982\u679c\u4f7f\u7528\u4e86\u590d\u6570\u5f62\u5f0f\uff0c\u7ffb\u8bd1\u6210\u4e2d\u6587\u65f6\uff0c\u5e94\u8be5\u5c06\u5176\u8fd8\u539f\u4e3a\u5355\u6570\u5f62\u5f0f\u3002 \u82f1\u6587\uff1a\u22efinformation stored in random access memory (RAMs)\u22ef \u4e2d\u6587\uff1a\u2026\u2026\u5b58\u50a8\u5728\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668\uff08RAM\uff09\u91cc\u7684\u4fe1\u606f\u2026\u2026 \u5916\u6587\u7f29\u5199\u53ef\u4ee5\u4f7f\u7528\u534a\u89d2\u5706\u70b9( . )\u8868\u793a\u7f29\u5199\u3002 U.S.A. Apple, Inc. \u8868\u793a\u4e2d\u6587\u65f6\uff0c\u82f1\u6587\u7701\u7565\u53f7\uff08 \u22ef \uff09\u5e94\u6539\u4e3a\u4e2d\u6587\u7701\u7565\u53f7\uff08 \u2026\u2026 \uff09\u3002 \u82f1\u6587\uff1a5 minutes later\u22ef \u4e2d\u6587\uff1a5 \u5206\u949f\u8fc7\u53bb\u4e86\u22ef\u22ef \u82f1\u6587\u4e66\u540d\u6216\u7535\u5f71\u540d\u6539\u7528\u4e2d\u6587\u8868\u8fbe\u65f6\uff0c\u53cc\u5f15\u53f7\u5e94\u6539\u4e3a\u4e66\u540d\u53f7\u3002 \u82f1\u6587\uff1aHe published an article entitled \"The Future of the Aviation\". \u4e2d\u6587\uff1a\u4ed6\u53d1\u8868\u4e86\u4e00\u7bc7\u540d\u4e3a\u300a\u822a\u7a7a\u4e1a\u7684\u672a\u6765\u300b\u7684\u6587\u7ae0\u3002 \u7b2c\u4e00\u6b21\u51fa\u73b0\u82f1\u6587\u8bcd\u6c47\u65f6\uff0c\u5728\u62ec\u53f7\u4e2d\u7ed9\u51fa\u4e2d\u6587\u6807\u6ce8\u3002\u6b64\u540e\u518d\u6b21\u51fa\u73b0\u65f6\uff0c\u76f4\u63a5\u4f7f\u7528\u82f1\u6587\u7f29\u5199\u5373\u53ef\u3002 IOC\uff08International Olympic Committee\uff0c\u56fd\u9645\u5965\u6797\u5339\u514b\u59d4\u5458\u4f1a\uff09\u3002\u8fd9\u6837\u5b9a\u4e49\u540e\uff0c\u4fbf\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u201cIOC\u201d\u4e86\u3002 \u4e13\u6709\u540d\u8bcd\u4e2d\u6bcf\u4e2a\u8bcd\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u5747\u5e94\u5927\u5199\uff0c\u975e\u4e13\u6709\u540d\u8bcd\u5219\u4e0d\u9700\u8981\u5927\u5199\u3002 \u201cAmerican Association of Physicists in Medicine\u201d\uff08\u7f8e\u56fd\u533b\u5b66\u7269\u7406\u5b66\u5bb6\u534f\u4f1a\uff09\u662f\u4e13\u6709\u540d\u8bcd\uff0c\u9700\u8981\u5927\u5199\u3002 \u201conline transaction processing\u201d\uff08\u5728\u7ebf\u4e8b\u52a1\u5904\u7406\uff09\u4e0d\u662f\u4e13\u6709\u540d\u8bcd\uff0c\u4e0d\u5e94\u5927\u5199\u3002","title":"\u6587\u672c"},{"location":"more/document-style-guide/text/#_1","text":"","title":"\u6587\u672c"},{"location":"more/document-style-guide/text/#_2","text":"\u5168\u89d2\u4e2d\u6587\u5b57\u7b26\u4e0e\u534a\u89d2\u82f1\u6587\u5b57\u7b26\u4e4b\u95f4\uff0c\u5e94\u6709\u4e00\u4e2a\u534a\u89d2\u7a7a\u683c\u3002 \u9519\u8bef\uff1a\u672c\u6587\u4ecb\u7ecd\u5982\u4f55\u5feb\u901f\u542f\u52a8Windows\u7cfb\u7edf\u3002 \u6b63\u786e\uff1a\u672c\u6587\u4ecb\u7ecd\u5982\u4f55\u5feb\u901f\u542f\u52a8 Windows \u7cfb\u7edf\u3002 \u5168\u89d2\u4e2d\u6587\u5b57\u7b26\u4e0e\u534a\u89d2\u963f\u62c9\u4f2f\u6570\u5b57\u4e4b\u95f4\uff0c\u6709\u6ca1\u6709\u534a\u89d2\u7a7a\u683c\u90fd\u53ef\uff0c\u4f46\u5fc5\u987b\u4fdd\u8bc1\u98ce\u683c\u7edf\u4e00\uff0c\u4e0d\u80fd\u4e24\u79cd\u98ce\u683c\u6df7\u6742\u3002 \u6b63\u786e\uff1a2011\u5e745\u670815\u65e5\uff0c\u6211\u8ba2\u8d2d\u4e865\u53f0\u7b14\u8bb0\u672c\u7535\u8111\u4e0e10\u53f0\u5e73\u677f\u7535\u8111\u3002 \u6b63\u786e\uff1a2011 \u5e74 5 \u6708 15 \u65e5\uff0c\u6211\u8ba2\u8d2d\u4e86 5 \u53f0\u7b14\u8bb0\u672c\u7535\u8111\u4e0e 10 \u53f0\u5e73\u677f\u7535\u8111\u3002 \u534a\u89d2\u7684\u767e\u5206\u53f7\uff0c\u89c6\u540c\u963f\u62c9\u4f2f\u6570\u5b57\u3002 \u82f1\u6587\u5355\u4f4d\u82e5\u4e0d\u7ffb\u8bd1\uff0c\u5355\u4f4d\u524d\u7684\u963f\u62c9\u4f2f\u6570\u5b57\u4e0e\u5355\u4f4d\u95f4\u4e0d\u7559\u7a7a\u683c\u3002 \u9519\u8bef\uff1a\u4e00\u90e8\u5bb9\u91cf\u4e3a 16 GB \u7684\u667a\u80fd\u624b\u673a \u6b63\u786e\uff1a\u4e00\u90e8\u5bb9\u91cf\u4e3a 16GB \u7684\u667a\u80fd\u624b\u673a \u534a\u89d2\u82f1\u6587\u5b57\u7b26\u548c\u534a\u89d2\u963f\u62c9\u4f2f\u6570\u5b57\uff0c\u4e0e\u5168\u89d2\u6807\u70b9\u7b26\u53f7\u4e4b\u95f4\u4e0d\u7559\u7a7a\u683c\u3002 \u9519\u8bef\uff1a\u4ed6\u7684\u7535\u8111\u662f MacBook Air \u3002 \u6b63\u786e\uff1a\u4ed6\u7684\u7535\u8111\u662f MacBook Air\u3002","title":"\u5b57\u95f4\u8ddd"},{"location":"more/document-style-guide/text/#_3","text":"\u907f\u514d\u4f7f\u7528\u957f\u53e5\u3002\u53e5\u5b50\u5185\u90e8\u4e0d\u4f7f\u7528\u9017\u53f7\u65f6\uff0c\u603b\u957f\u5ea6\u4e0d\u5e94\u8be5\u8d85\u8fc7 40 \u4e2a\u5b57\uff1b\u4f7f\u7528\u9017\u53f7\u65f6\uff0c\u603b\u957f\u5ea6\u4e0d\u5e94\u8be5\u8d85\u8fc7 100 \u5b57\u6216\u8005\u6b63\u6587\u7684 3 \u884c\u3002 \u5c3d\u91cf\u4f7f\u7528\u7b80\u5355\u53e5\u548c\u5e76\u5217\u53e5\uff0c\u907f\u514d\u4f7f\u7528\u590d\u5408\u53e5\u3002","title":"\u53e5\u5b50"},{"location":"more/document-style-guide/text/#_4","text":"1\u3001\u5c3d\u91cf\u4e0d\u4f7f\u7528\u88ab\u52a8\u8bed\u6001\uff0c\u6539\u4e3a\u4f7f\u7528\u4e3b\u52a8\u8bed\u6001\u3002 \u9519\u8bef\uff1a\u5047\u5982\u6b64\u8f6f\u4ef6\u5c1a\u672a\u88ab\u5b89\u88c5\uff0c \u6b63\u786e\uff1a\u5047\u5982\u5c1a\u672a\u5b89\u88c5\u8fd9\u4e2a\u8f6f\u4ef6\uff0c 2\u3001\u4e0d\u4f7f\u7528\u975e\u6b63\u5f0f\u7684\u8bed\u8a00\u98ce\u683c\u3002 \u9519\u8bef\uff1aLady Gaga \u7684\u6f14\u5531\u4f1a\u771f\u662f\u9177\u6bd9\u4e86\uff0c\u4ece\u6ca1\u770b\u8fc7\u8fd9\u4e48\u7ed9\u529b\u7684\u8868\u6f14\uff01\uff01\uff01 \u6b63\u786e\uff1a\u65e0\u6cd5\u53c2\u52a0\u672c\u6b21\u6d3b\u52a8\uff0c\u6211\u6df1\u611f\u9057\u61be\u3002 3\u3001\u4e0d\u4f7f\u7528\u51b7\u50fb\u3001\u751f\u9020\u6216\u8005\u6587\u8a00\u6587\u7684\u8bcd\u8bed\uff0c\u800c\u8981\u4f7f\u7528\u73b0\u4ee3\u6c49\u8bed\u7684\u5e38\u7528\u8868\u8fbe\u65b9\u5f0f\u3002 \u9519\u8bef\uff1a\u8fd9\u662f\u552f\u4e8c\u7684\u5feb\u901f\u542f\u52a8\u7684\u65b9\u6cd5\u3002 \u6b63\u786e\uff1a\u8fd9\u662f\u4ec5\u6709\u7684\u4e24\u79cd\u5feb\u901f\u542f\u52a8\u7684\u65b9\u6cd5\u3002 4\u3001\u7528\u5bf9\u201c\u7684\u201d\u3001\u201c\u5730\u201d\u3001\u201c\u5f97\u201d\u3002 \u5979\u9732\u51fa\u4e86\u5f00\u5fc3\u7684\u7b11\u5bb9\u3002 \uff08\u5f62\u5bb9\u8bcd\uff0b\u7684\uff0b\u540d\u8bcd\uff09 \u5979\u5f00\u5fc3\u5730\u7b11\u4e86\u3002 \uff08\u526f\u8bcd\uff0b\u5730\uff0b\u52a8\u8bcd\uff09 \u5979\u7b11\u5f97\u5f88\u5f00\u5fc3\u3002 \uff08\u52a8\u8bcd\uff0b\u5f97\uff0b\u526f\u8bcd\uff09 5\u3001\u4f7f\u7528\u4ee3\u8bcd\u65f6\uff08\u6bd4\u5982\u201c\u5176\u201d\u3001\u201c\u8be5\u201d\u3001\u201c\u6b64\u201d\u3001\u201c\u8fd9\u201d\u7b49\u8bcd\uff09\uff0c\u5fc5\u987b\u660e\u786e\u6307\u4ee3\u7684\u5185\u5bb9\uff0c\u4fdd\u8bc1\u53ea\u6709\u4e00\u4e2a\u542b\u4e49\u3002 \u9519\u8bef\uff1a\u4ece\u7ba1\u7406\u7cfb\u7edf\u53ef\u4ee5\u76d1\u89c6\u4e2d\u7ee7\u7cfb\u7edf\u548c\u53d7\u5176\u76f4\u63a5\u63a7\u5236\u7684\u5206\u914d\u7cfb\u7edf\u3002 \u6b63\u786e\uff1a\u4ece\u7ba1\u7406\u7cfb\u7edf\u53ef\u4ee5\u76d1\u89c6\u4e24\u4e2a\u7cfb\u7edf\uff1a\u4e2d\u7ee7\u7cfb\u7edf\u548c\u53d7\u4e2d\u7ee7\u7cfb\u7edf\u76f4\u63a5\u63a7\u5236\u7684\u5206\u914d\u7cfb\u7edf\u3002 6\u3001\u540d\u8bcd\u524d\u4e0d\u8981\u4f7f\u7528\u8fc7\u591a\u7684\u5f62\u5bb9\u8bcd\u3002 \u9519\u8bef\uff1a\u6b64\u8bbe\u5907\u7684\u4f7f\u7528\u5fc5\u987b\u5728\u63a5\u53d7\u8fc7\u672c\u516c\u53f8\u4e3e\u529e\u7684\u6b63\u5f0f\u7684\u8bbe\u5907\u57f9\u8bad\u7684\u6280\u5e08\u7684\u6307\u5bfc\u4e0b\u8fdb\u884c\u3002 \u6b63\u786e\uff1a\u6b64\u8bbe\u5907\u5fc5\u987b\u5728\u6280\u5e08\u7684\u6307\u5bfc\u4e0b\u4f7f\u7528\uff0c\u4e14\u6307\u5bfc\u6280\u5e08\u5fc5\u987b\u63a5\u53d7\u8fc7\u7531\u672c\u516c\u53f8\u4e3e\u529e\u7684\u6b63\u5f0f\u8bbe\u5907\u57f9\u8bad\u3002 7\u3001\u4e0d\u5305\u542b\u4efb\u4f55\u6807\u70b9\u7b26\u53f7\u7684\u5355\u4e2a\u53e5\u5b50\uff0c\u6216\u8005\u4ee5\u9017\u53f7\u5206\u9694\u7684\u53e5\u5b50\u6784\u4ef6\uff0c\u957f\u5ea6\u5c3d\u91cf\u4fdd\u6301\u5728 20 \u4e2a\u5b57\u4ee5\u5185\uff1b20\uff5e29 \u4e2a\u5b57\u7684\u53e5\u5b50\uff0c\u53ef\u4ee5\u63a5\u53d7\uff1b30\uff5e39 \u4e2a\u5b57\u7684\u53e5\u5b50\uff0c\u8bed\u4e49\u5fc5\u987b\u660e\u786e\uff0c\u624d\u80fd\u63a5\u53d7\uff1b\u591a\u4e8e 40 \u4e2a\u5b57\u7684\u53e5\u5b50\uff0c\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u4e0d\u80fd\u63a5\u53d7\u3002 \u9519\u8bef\uff1a\u672c\u4ea7\u54c1\u9002\u7528\u4e8e\u4ece\u7531\u4e00\u53f0\u670d\u52a1\u5668\u8fdb\u884c\u52a8\u4f5c\u63a7\u5236\u7684\u5355\u4e00\u8282\u70b9\u7ed3\u6784\u5230\u7531\u591a\u53f0\u670d\u52a1\u5668\u8fdb\u884c\u52a8\u4f5c\u63a7\u5236\u7684\u5e76\u884c\u5904\u7406\u7a0b\u5e8f\u7ed3\u6784\u7b49\u591a\u79cd\u4f53\u7cfb\u7ed3\u6784\u3002 \u6b63\u786e\uff1a\u672c\u4ea7\u54c1\u9002\u7528\u4e8e\u591a\u79cd\u4f53\u7cfb\u7ed3\u6784\u3002\u65e0\u8bba\u662f\u7531\u4e00\u53f0\u670d\u52a1\u5668\uff08\u5355\u4e00\u8282\u70b9\u7ed3\u6784\uff09\uff0c\u8fd8\u662f\u7531\u591a\u53f0\u670d\u52a1\u5668\uff08\u5e76\u884c\u5904\u7406\u7ed3\u6784\uff09\u8fdb\u884c\u52a8\u4f5c\u63a7\u5236\uff0c\u5747\u53ef\u4ee5\u4f7f\u7528\u672c\u4ea7\u54c1\u3002 8\u3001\u540c\u6837\u4e00\u4e2a\u610f\u601d\uff0c\u5c3d\u91cf\u4f7f\u7528\u80af\u5b9a\u53e5\u8868\u8fbe\uff0c\u4e0d\u4f7f\u7528\u5426\u5b9a\u53e5\u8868\u8fbe\u3002 \u9519\u8bef\uff1a\u8bf7\u786e\u8ba4\u6ca1\u6709\u63a5\u901a\u88c5\u7f6e\u7684\u7535\u6e90\u3002 \u6b63\u786e\uff1a\u8bf7\u786e\u8ba4\u88c5\u7f6e\u7684\u7535\u6e90\u5df2\u5173\u95ed\u3002 9\u3001\u907f\u514d\u4f7f\u7528\u53cc\u91cd\u5426\u5b9a\u53e5\u3002 \u9519\u8bef\uff1a\u6ca1\u6709\u5220\u9664\u6743\u9650\u7684\u7528\u6237\uff0c\u4e0d\u80fd\u5220\u9664\u6b64\u6587\u4ef6\u3002 \u6b63\u786e\uff1a\u7528\u6237\u5fc5\u987b\u62e5\u6709\u5220\u9664\u6743\u9650\uff0c\u624d\u80fd\u5220\u9664\u6b64\u6587\u4ef6\u3002","title":"\u5199\u4f5c\u98ce\u683c"},{"location":"more/document-style-guide/text/#_5","text":"\u82f1\u6587\u539f\u6587\u5982\u679c\u4f7f\u7528\u4e86\u590d\u6570\u5f62\u5f0f\uff0c\u7ffb\u8bd1\u6210\u4e2d\u6587\u65f6\uff0c\u5e94\u8be5\u5c06\u5176\u8fd8\u539f\u4e3a\u5355\u6570\u5f62\u5f0f\u3002 \u82f1\u6587\uff1a\u22efinformation stored in random access memory (RAMs)\u22ef \u4e2d\u6587\uff1a\u2026\u2026\u5b58\u50a8\u5728\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668\uff08RAM\uff09\u91cc\u7684\u4fe1\u606f\u2026\u2026 \u5916\u6587\u7f29\u5199\u53ef\u4ee5\u4f7f\u7528\u534a\u89d2\u5706\u70b9( . )\u8868\u793a\u7f29\u5199\u3002 U.S.A. Apple, Inc. \u8868\u793a\u4e2d\u6587\u65f6\uff0c\u82f1\u6587\u7701\u7565\u53f7\uff08 \u22ef \uff09\u5e94\u6539\u4e3a\u4e2d\u6587\u7701\u7565\u53f7\uff08 \u2026\u2026 \uff09\u3002 \u82f1\u6587\uff1a5 minutes later\u22ef \u4e2d\u6587\uff1a5 \u5206\u949f\u8fc7\u53bb\u4e86\u22ef\u22ef \u82f1\u6587\u4e66\u540d\u6216\u7535\u5f71\u540d\u6539\u7528\u4e2d\u6587\u8868\u8fbe\u65f6\uff0c\u53cc\u5f15\u53f7\u5e94\u6539\u4e3a\u4e66\u540d\u53f7\u3002 \u82f1\u6587\uff1aHe published an article entitled \"The Future of the Aviation\". \u4e2d\u6587\uff1a\u4ed6\u53d1\u8868\u4e86\u4e00\u7bc7\u540d\u4e3a\u300a\u822a\u7a7a\u4e1a\u7684\u672a\u6765\u300b\u7684\u6587\u7ae0\u3002 \u7b2c\u4e00\u6b21\u51fa\u73b0\u82f1\u6587\u8bcd\u6c47\u65f6\uff0c\u5728\u62ec\u53f7\u4e2d\u7ed9\u51fa\u4e2d\u6587\u6807\u6ce8\u3002\u6b64\u540e\u518d\u6b21\u51fa\u73b0\u65f6\uff0c\u76f4\u63a5\u4f7f\u7528\u82f1\u6587\u7f29\u5199\u5373\u53ef\u3002 IOC\uff08International Olympic Committee\uff0c\u56fd\u9645\u5965\u6797\u5339\u514b\u59d4\u5458\u4f1a\uff09\u3002\u8fd9\u6837\u5b9a\u4e49\u540e\uff0c\u4fbf\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u201cIOC\u201d\u4e86\u3002 \u4e13\u6709\u540d\u8bcd\u4e2d\u6bcf\u4e2a\u8bcd\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u5747\u5e94\u5927\u5199\uff0c\u975e\u4e13\u6709\u540d\u8bcd\u5219\u4e0d\u9700\u8981\u5927\u5199\u3002 \u201cAmerican Association of Physicists in Medicine\u201d\uff08\u7f8e\u56fd\u533b\u5b66\u7269\u7406\u5b66\u5bb6\u534f\u4f1a\uff09\u662f\u4e13\u6709\u540d\u8bcd\uff0c\u9700\u8981\u5927\u5199\u3002 \u201conline transaction processing\u201d\uff08\u5728\u7ebf\u4e8b\u52a1\u5904\u7406\uff09\u4e0d\u662f\u4e13\u6709\u540d\u8bcd\uff0c\u4e0d\u5e94\u5927\u5199\u3002","title":"\u82f1\u6587\u5904\u7406"},{"location":"more/document-style-guide/title/","text":"\u6807\u9898 # \u5c42\u7ea7 # \u6807\u9898\u5206\u4e3a\u56db\u7ea7\u3002 \u4e00\u7ea7\u6807\u9898\uff1a\u6587\u7ae0\u7684\u6807\u9898 \u4e8c\u7ea7\u6807\u9898\uff1a\u6587\u7ae0\u4e3b\u8981\u90e8\u5206\u7684\u5927\u6807\u9898 \u4e09\u7ea7\u6807\u9898\uff1a\u4e8c\u7ea7\u6807\u9898\u4e0b\u9762\u4e00\u7ea7\u7684\u5c0f\u6807\u9898 \u56db\u7ea7\u6807\u9898\uff1a\u4e09\u7ea7\u6807\u9898\u4e0b\u9762\u67d0\u4e00\u65b9\u9762\u7684\u5c0f\u6807\u9898 \u4e0b\u9762\u662f\u793a\u4f8b\u3002 # \u4e00\u7ea7\u6807\u9898 ## \u4e8c\u7ea7\u6807\u9898 ### \u4e09\u7ea7\u6807\u9898 #### \u56db\u7ea7\u6807\u9898 \u539f\u5219 # \uff081\uff09\u4e00\u7ea7\u6807\u9898\u4e0b\uff0c\u4e0d\u80fd\u76f4\u63a5\u51fa\u73b0\u4e09\u7ea7\u6807\u9898\u3002 \u793a\u4f8b\uff1a\u4e0b\u9762\u7684\u6587\u7ae0\u7ed3\u6784\uff0c\u7f3a\u5c11\u4e8c\u7ea7\u6807\u9898\u3002 # \u4e00\u7ea7\u6807\u9898 ### \u4e09\u7ea7\u6807\u9898 \uff082\uff09\u6807\u9898\u8981\u907f\u514d\u5b64\u7acb\u7f16\u53f7\uff08\u5373\u540c\u7ea7\u6807\u9898\u53ea\u6709\u4e00\u4e2a\uff09\u3002 \u793a\u4f8b\uff1a\u4e0b\u9762\u7684\u6587\u7ae0\u7ed3\u6784\uff0c \u4e8c\u7ea7\u6807\u9898 A \u53ea\u5305\u542b\u4e00\u4e2a\u4e09\u7ea7\u6807\u9898\uff0c\u5b8c\u5168\u53ef\u4ee5\u7701\u7565 \u4e09\u7ea7\u6807\u9898 A \u3002 ## \u4e8c\u7ea7\u6807\u9898 A ### \u4e09\u7ea7\u6807\u9898 A ## \u4e8c\u7ea7\u6807\u9898 B \uff083\uff09\u4e0b\u7ea7\u6807\u9898\u4e0d\u91cd\u590d\u4e0a\u4e00\u7ea7\u6807\u9898\u7684\u540d\u5b57\u3002 \u793a\u4f8b\uff1a\u4e0b\u9762\u7684\u6587\u7ae0\u7ed3\u6784\uff0c\u4e8c\u7ea7\u6807\u9898\u4e0e\u4e0b\u5c5e\u7684\u4e09\u7ea7\u6807\u9898\u540c\u540d\uff0c\u5efa\u8bae\u907f\u514d\u3002 ## \u6982\u8ff0 ### \u6982\u8ff0 \uff084\uff09\u8c28\u614e\u4f7f\u7528\u56db\u7ea7\u6807\u9898\uff0c\u5c3d\u91cf\u907f\u514d\u51fa\u73b0\uff0c\u4fdd\u6301\u5c42\u7ea7\u7684\u7b80\u5355\uff0c\u9632\u6b62\u51fa\u73b0\u8fc7\u4e8e\u590d\u6742\u7684\u7ae0\u8282\u3002 \u5982\u679c\u4e09\u7ea7\u6807\u9898\u4e0b\u6709\u5e76\u5217\u6027\u7684\u5185\u5bb9\uff0c\u5efa\u8bae\u53ea\u4f7f\u7528\u9879\u76ee\u5217\u8868\uff08Item list\uff09\u3002 \u793a\u4f8b\uff1a\u4e0b\u9762\u7684\u7ed3\u6784\u4e8c\u8981\u597d\u4e8e\u7ed3\u6784\u4e00\u3002\u540e\u8005\u9002\u7528\u7684\u573a\u666f\uff0c\u4e3b\u8981\u662f\u8f83\u957f\u7bc7\u5e45\u7684\u5185\u5bb9\u3002 \u7ed3\u6784\u4e00 ### \u4e09\u7ea7\u6807\u9898 #### \u56db\u7ea7\u6807\u9898 A #### \u56db\u7ea7\u6807\u9898 B #### \u56db\u7ea7\u6807\u9898 C \u7ed3\u6784\u4e8c ### \u4e09\u7ea7\u6807\u9898 **\uff081\uff09A** **\uff082\uff09B** **\uff083\uff09C**","title":"\u6807\u9898"},{"location":"more/document-style-guide/title/#_1","text":"","title":"\u6807\u9898"},{"location":"more/document-style-guide/title/#_2","text":"\u6807\u9898\u5206\u4e3a\u56db\u7ea7\u3002 \u4e00\u7ea7\u6807\u9898\uff1a\u6587\u7ae0\u7684\u6807\u9898 \u4e8c\u7ea7\u6807\u9898\uff1a\u6587\u7ae0\u4e3b\u8981\u90e8\u5206\u7684\u5927\u6807\u9898 \u4e09\u7ea7\u6807\u9898\uff1a\u4e8c\u7ea7\u6807\u9898\u4e0b\u9762\u4e00\u7ea7\u7684\u5c0f\u6807\u9898 \u56db\u7ea7\u6807\u9898\uff1a\u4e09\u7ea7\u6807\u9898\u4e0b\u9762\u67d0\u4e00\u65b9\u9762\u7684\u5c0f\u6807\u9898 \u4e0b\u9762\u662f\u793a\u4f8b\u3002 # \u4e00\u7ea7\u6807\u9898 ## \u4e8c\u7ea7\u6807\u9898 ### \u4e09\u7ea7\u6807\u9898 #### \u56db\u7ea7\u6807\u9898","title":"\u5c42\u7ea7"},{"location":"more/document-style-guide/title/#_3","text":"\uff081\uff09\u4e00\u7ea7\u6807\u9898\u4e0b\uff0c\u4e0d\u80fd\u76f4\u63a5\u51fa\u73b0\u4e09\u7ea7\u6807\u9898\u3002 \u793a\u4f8b\uff1a\u4e0b\u9762\u7684\u6587\u7ae0\u7ed3\u6784\uff0c\u7f3a\u5c11\u4e8c\u7ea7\u6807\u9898\u3002 # \u4e00\u7ea7\u6807\u9898 ### \u4e09\u7ea7\u6807\u9898 \uff082\uff09\u6807\u9898\u8981\u907f\u514d\u5b64\u7acb\u7f16\u53f7\uff08\u5373\u540c\u7ea7\u6807\u9898\u53ea\u6709\u4e00\u4e2a\uff09\u3002 \u793a\u4f8b\uff1a\u4e0b\u9762\u7684\u6587\u7ae0\u7ed3\u6784\uff0c \u4e8c\u7ea7\u6807\u9898 A \u53ea\u5305\u542b\u4e00\u4e2a\u4e09\u7ea7\u6807\u9898\uff0c\u5b8c\u5168\u53ef\u4ee5\u7701\u7565 \u4e09\u7ea7\u6807\u9898 A \u3002 ## \u4e8c\u7ea7\u6807\u9898 A ### \u4e09\u7ea7\u6807\u9898 A ## \u4e8c\u7ea7\u6807\u9898 B \uff083\uff09\u4e0b\u7ea7\u6807\u9898\u4e0d\u91cd\u590d\u4e0a\u4e00\u7ea7\u6807\u9898\u7684\u540d\u5b57\u3002 \u793a\u4f8b\uff1a\u4e0b\u9762\u7684\u6587\u7ae0\u7ed3\u6784\uff0c\u4e8c\u7ea7\u6807\u9898\u4e0e\u4e0b\u5c5e\u7684\u4e09\u7ea7\u6807\u9898\u540c\u540d\uff0c\u5efa\u8bae\u907f\u514d\u3002 ## \u6982\u8ff0 ### \u6982\u8ff0 \uff084\uff09\u8c28\u614e\u4f7f\u7528\u56db\u7ea7\u6807\u9898\uff0c\u5c3d\u91cf\u907f\u514d\u51fa\u73b0\uff0c\u4fdd\u6301\u5c42\u7ea7\u7684\u7b80\u5355\uff0c\u9632\u6b62\u51fa\u73b0\u8fc7\u4e8e\u590d\u6742\u7684\u7ae0\u8282\u3002 \u5982\u679c\u4e09\u7ea7\u6807\u9898\u4e0b\u6709\u5e76\u5217\u6027\u7684\u5185\u5bb9\uff0c\u5efa\u8bae\u53ea\u4f7f\u7528\u9879\u76ee\u5217\u8868\uff08Item list\uff09\u3002 \u793a\u4f8b\uff1a\u4e0b\u9762\u7684\u7ed3\u6784\u4e8c\u8981\u597d\u4e8e\u7ed3\u6784\u4e00\u3002\u540e\u8005\u9002\u7528\u7684\u573a\u666f\uff0c\u4e3b\u8981\u662f\u8f83\u957f\u7bc7\u5e45\u7684\u5185\u5bb9\u3002 \u7ed3\u6784\u4e00 ### \u4e09\u7ea7\u6807\u9898 #### \u56db\u7ea7\u6807\u9898 A #### \u56db\u7ea7\u6807\u9898 B #### \u56db\u7ea7\u6807\u9898 C \u7ed3\u6784\u4e8c ### \u4e09\u7ea7\u6807\u9898 **\uff081\uff09A** **\uff082\uff09B** **\uff083\uff09C**","title":"\u539f\u5219"},{"location":"more/git/","text":"Git \u5e38\u7528\u547d\u4ee4 # GIT \u4f18\u52bf # \u7531\u4e8e\u662f\u5206\u5e03\u5f0f\uff0c\u6240\u6709\u672c\u5730\u5e93\u5305\u542b\u4e86\u8fdc\u7a0b\u5e93\u7684\u6240\u6709\u5185\u5bb9\u3002 \u4f18\u79c0\u7684\u5206\u652f\u6a21\u578b\uff0c\u6253\u5206\u652f\u4ee5\u53ca\u5408\u5e76\u5206\u652f\uff0c\u65b9\u4fbf\u3002 \u5feb\u901f\uff0cGit \u7531\u4e8e\u4ee3\u7801\u90fd\u5728\u672c\u5730\uff0c\u6253\u5206\u652f\u548c\u5408\u5e76\u5206\u652f\u5feb\u901f\uff0c\u4f7f\u7528\u4e2aSVN\u7684\u80fd\u6df1\u523b\u4f53\u4f1a\u5230\u8fd9\u79cd\u4f18\u52bf\u3002 GIT \u4e0e SVN \u6700\u4e3b\u8981\u7684\u533a\u522b # SVN \u662f\u96c6\u4e2d\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7edf \uff0c\u7248\u672c\u5e93\u662f\u96c6\u4e2d\u653e\u5728\u4e2d\u592e\u670d\u52a1\u5668\u7684\uff0c\u800c\u5e72\u6d3b\u7684\u65f6\u5019\uff0c\u7528\u7684\u90fd\u662f\u81ea\u5df1\u7684\u7535\u8111\uff0c\u6240\u4ee5\u9996\u5148\u8981\u4ece\u4e2d\u592e\u670d\u52a1\u5668\u54ea\u91cc\u5f97\u5230\u6700\u65b0\u7684\u7248\u672c\uff0c\u7136\u540e\u5e72\u6d3b\uff0c\u5e72\u5b8c\u540e\uff0c\u9700\u8981\u628a\u81ea\u5df1\u505a\u5b8c\u7684\u6d3b\u63a8\u9001\u5230\u4e2d\u592e\u670d\u52a1\u5668\u3002\u96c6\u4e2d\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u662f\u5fc5\u987b\u8054\u7f51\u624d\u80fd\u5de5\u4f5c\uff0c\u5982\u679c\u5728\u5c40\u57df\u7f51\u8fd8\u53ef\u4ee5\uff0c\u5e26\u5bbd\u591f\u5927\uff0c\u901f\u5ea6\u591f\u5feb\uff0c\u5982\u679c\u5728\u4e92\u8054\u7f51\u4e0b\uff0c\u5982\u679c\u7f51\u901f\u6162\u7684\u8bdd\uff0c\u5c31\u7eb3\u95f7\u4e86\u3002 Git \u662f\u5206\u5e03\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7edf \uff0c\u90a3\u4e48\u5b83\u5c31\u6ca1\u6709\u4e2d\u592e\u670d\u52a1\u5668\u7684\uff0c\u6bcf\u4e2a\u4eba\u7684\u7535\u8111\u5c31\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u7248\u672c\u5e93\uff0c\u8fd9\u6837\uff0c\u5de5\u4f5c\u7684\u65f6\u5019\u5c31\u4e0d\u9700\u8981\u8054\u7f51\u4e86\uff0c\u56e0\u4e3a\u7248\u672c\u90fd\u662f\u5728\u81ea\u5df1\u7684\u7535\u8111\u4e0a\u3002\u65e2\u7136\u6bcf\u4e2a\u4eba\u7684\u7535\u8111\u90fd\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u7248\u672c\u5e93\uff0c\u90a3\u591a\u4e2a\u4eba\u5982\u4f55\u534f\u4f5c\u5462\uff1f\u6bd4\u5982\u8bf4\u81ea\u5df1\u5728\u7535\u8111\u4e0a\u6539\u4e86\u6587\u4ef6A\uff0c\u5176\u4ed6\u4eba\u4e5f\u5728\u7535\u8111\u4e0a\u6539\u4e86\u6587\u4ef6A\uff0c\u8fd9\u65f6\uff0c\u4f60\u4eec\u4e24\u4e4b\u95f4\u53ea\u9700\u628a\u5404\u81ea\u7684\u4fee\u6539\u63a8\u9001\u7ed9\u5bf9\u65b9\uff0c\u5c31\u53ef\u4ee5\u4e92\u76f8\u770b\u5230\u5bf9\u65b9\u7684\u4fee\u6539\u4e86\u3002 GIT \u4e0b\u8f7d # \u4e0b\u8f7d\u5730\u5740\uff1a https://git-scm.com/download/ GIT \u5e38\u7528\u547d\u4ee4 # \u751f\u6210\u5bc6\u94a5 # ssh-keygen -t rsa -C '***@flc.io' # \u63093\u4e2a\u56de\u8f66\u3002 # \u6700\u540e\u5f97\u5230\u4e86\u4e24\u4e2a\u6587\u4ef6\uff1aid_rsa\u548cid_rsa.pub\uff08window\u548clinux\u5728\u5f53\u524d\u7528\u6237\u76ee\u5f55/.ssh\u76ee\u5f55\u4e0b\uff09 # \u5176\u4e2did_rsa.pub\u5373\u4e3a\u516c\u94a5 \u8bbe\u7f6e Git \u7684\u7528\u6237\u540d\u548c\u90ae\u7bb1 # git config --global user.name 'flc' git config --global user.email '***@flc.io' \u521b\u5efa\u7248\u672c\u5e93 # \u521d\u59cb\u5316\u4e00\u4e2a\u7248\u672c\u4ed3\u5e93 git init \u514b\u9686\u8fdc\u7a0b\u7248\u672c\u5e93\uff08\u540c\u65f6\u4f1a\u81ea\u52a8\u521d\u59cb\u5316\uff09 # \u5982\u514b\u9686thinkphp\u6e90\u7801 git clone https://github.com/top-think/thinkphp.git \u6dfb\u52a0\u8fdc\u7a0b\u7248\u672c\u5e93\uff08\u9700\u8981\u5148\u521d\u59cb\u5316\uff09 # \u8bed\u6cd5\u4e3a git remote add [shortname] [url] git remote add origin https://github.com/top-think/thinkphp.git \u63d0\u4ea4 / \u63a8\u9001\u4ee3\u7801 # # \u67e5\u770b\u6587\u4ef6\u72b6\u6001 git status # \u6dfb\u52a0\u5f53\u524d\u4fee\u6539\u7684\u6587\u4ef6\u5230\u6682\u5b58\u533a git add . git add [ file_path ] # \u6307\u5b9a\u6587\u4ef6 # \u63d0\u4ea4\u4f60\u7684\u4fee\u6539 git commit \u2013m \"\u4f60\u7684\u6ce8\u91ca\" # \u63a8\u9001\u4f60\u7684\u66f4\u65b0\u5230\u8fdc\u7a0b\u670d\u52a1\u5668,\u8bed\u6cd5\u4e3a git push [\u8fdc\u7a0b\u540d] [\u672c\u5730\u5206\u652f]:[\u8fdc\u7a0b\u5206\u652f] git push origin master # \u67e5\u770b\u63d0\u4ea4\u7684\u65e5\u5fd7 git log # \u4fee\u6539\u6700\u540e\u4e00\u6b21\u63d0\u4ea4\u6ce8\u91ca\u7684\uff0c\u5229\u7528\u2013amend\u53c2\u6570 git commit --amend \u5206\u652f\u7ba1\u7406 # \u672c\u5730\u5206\u652f\u7ba1\u7406\uff08\u67e5\u770b\u3001\u5207\u6362\u3001\u521b\u5efa\u548c\u5220\u9664\uff09 git branch -r # \u67e5\u770b\u8fdc\u7a0b\u5206\u652f git branch <new_branch> # \u521b\u5efa\u65b0\u7684\u5206\u652f git branch -v # \u67e5\u770b\u5404\u4e2a\u5206\u652f\u6700\u540e\u63d0\u4ea4\u4fe1\u606f git checkout <branch> # \u5207\u6362\u5230\u67d0\u4e2a\u5206\u652f git checkout -b <new_branch> # \u521b\u5efa\u65b0\u7684\u5206\u652f\uff0c\u5e76\u4e14\u5207\u6362\u8fc7\u53bb git checkout -b <new_branch> <branch> # \u57fa\u4e8ebranch\u521b\u5efa\u65b0\u7684new_branch git branch -d <branch> # \u5220\u9664\u67d0\u4e2a\u5206\u652f git branch -D <branch> # \u5f3a\u5236\u5220\u9664\u67d0\u4e2a\u5206\u652f (\u672a\u88ab\u5408\u5e76\u7684\u5206\u652f\u88ab\u5220\u9664\u7684\u65f6\u5019\u9700\u8981\u5f3a\u5236) git push origin --delete <branch> # \u5220\u9664\u8fdc\u7a0b\u5206\u652f \u5206\u652f\u5408\u5e76 git merge <branch> # \u5c06branch\u5206\u652f\u5408\u5e76\u5230\u5f53\u524d\u5206\u652f(Fast-Foward\u5408\u5e76\uff0c\u4e0d\u63a8\u8350) git merge <branch> --no-ff # \u4e0d\u8981Fast-Foward\u5408\u5e76\uff0c\u8fd9\u6837\u53ef\u4ee5\u751f\u6210merge\u63d0\u4ea4\uff08\u63a8\u8350\uff09 \u8fdc\u7a0b\u5206\u652f\u7ba1\u7406 git pull # \u6293\u53d6\u8fdc\u7a0b\u4ed3\u5e93\u6240\u6709\u5206\u652f\u66f4\u65b0\u5e76\u5408\u5e76\u5230\u672c\u5730 git pull --no-ff # \u6293\u53d6\u8fdc\u7a0b\u4ed3\u5e93\u6240\u6709\u5206\u652f\u66f4\u65b0\u5e76\u5408\u5e76\u5230\u672c\u5730\uff0c\u4e0d\u8981\u5feb\u8fdb\u5408\u5e76 git fetch origin # \u6293\u53d6\u8fdc\u7a0b\u4ed3\u5e93\u66f4\u65b0 git merge origin/master # \u5c06\u8fdc\u7a0b\u4e3b\u5206\u652f\u5408\u5e76\u5230\u672c\u5730\u5f53\u524d\u5206\u652f git checkout -b <local_branch> origin/<remote_branch> # \u57fa\u4e8e\u8fdc\u7a0b\u5206\u652f\u521b\u5efa\u672c\u5730\u5206\u652f git push # push\u6240\u6709\u5206\u652f git push origin <branch> # \u5c06\u672c\u5730\u4e3b\u5206\u652f\u63a8\u5230\u8fdc\u7a0b\u5206\u652f git push -u origin master # \u5c06\u672c\u5730\u4e3b\u5206\u652f\u63a8\u5230\u8fdc\u7a0b(\u5982\u65e0\u8fdc\u7a0b\u4e3b\u5206\u652f\u5219\u521b\u5efa\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u8fdc\u7a0b\u4ed3\u5e93) git push origin <local_branch> # \u521b\u5efa\u8fdc\u7a0b\u5206\u652f\uff0c origin\u662f\u8fdc\u7a0b\u4ed3\u5e93\u540d git push origin <local_branch>:<remote_branch> # \u521b\u5efa\u8fdc\u7a0b\u5206\u652f git push origin :<remote_branch> # \u5220\u9664\u8fdc\u7a0b\u5206\u652f\u3002\u5148\u5220\u9664\u672c\u5730\u5206\u652f(git br -d <branch>)\uff0c\u7136\u540e\u518dpush\u5220\u9664\u8fdc\u7a0b\u5206\u652f git push origin --delete <branch> # \u5220\u9664\u8fdc\u7a0b\u5206\u652f\uff0c\u529f\u80fd\u540c\u4e0a \u8fdc\u7a0b\u4ed3\u5e93\u7ba1\u7406 # git remote -v # \u67e5\u770b\u8fdc\u7a0b\u670d\u52a1\u5668\u5730\u5740\u548c\u4ed3\u5e93\u540d\u79f0 git remote show origin # \u67e5\u770b\u8fdc\u7a0b\u670d\u52a1\u5668\u4ed3\u5e93\u72b6\u6001 git remote add origin git@ github:robbin/robbin_site.git # \u6dfb\u52a0\u8fdc\u7a0b\u4ed3\u5e93\u5730\u5740 git remote set-url origin git@ github.com:robbin/robbin_site.git # \u8bbe\u7f6e\u8fdc\u7a0b\u4ed3\u5e93\u5730\u5740(\u7528\u4e8e\u4fee\u6539\u8fdc\u7a0b\u4ed3\u5e93\u5730\u5740) git remote rm <repository> # \u5220\u9664\u8fdc\u7a0b\u4ed3\u5e93 \u66f4\u591a\u6559\u7a0b # http://justcoding.iteye.com/blog/1830388 http://www.admin10000.com/document/5374.html \u5de5\u4f5c\u6d41\u4ecb\u7ecd # \u6d41\u7a0b\u56fe # \u53c2\u8003 # http://www.cnblogs.com/cnblogsfans/p/5075073.html?utm_source=tuicool&utm_medium=referral \u5173\u952e\u5b57\uff1a git flow \u5206\u652f\u547d\u540d\u89c4\u5219 # \u4e3b\u5206\u652f\uff1a master \u5f00\u53d1\u5206\u652f\uff1a develop \u529f\u80fd\u5206\u652f\uff1a feature/\u529f\u80fd\u6a21\u5757\u82f1\u6587\u540d \uff0c\u5982\uff1a feature/user \u7248\u672c\u5206\u652f\uff08\u9884\u4e0a\u7ebf\u5206\u652f\uff09\uff1a release/\u529f\u80fd\u6a21\u5757\u82f1\u6587\u540d\u6216\u7248\u672c\u53f7+\u5e74\u6708\u65e5 \uff0c\u5982\uff1a release/user_20160101 \u6216 release/v1.0.1_20160101 \u4fee\u590d\u5206\u652f\uff1a hotfix/\u4fee\u590d\u529f\u80fd\u82f1\u6587\u540d\u6216\u539f\u7248\u672c\u53f7+\u5e74\u6708\u65e5 \uff0c\u5982\uff1a hotfix/user_20160101 \u6216 hotfix/v1.0.1_20160101 \u7248\u672c\u53f7\u547d\u540d\u89c4\u5219 # \u5982\uff1a v1.1.1.1\u2192vA.B.C.D \u89c4\u5219\u8bf4\u660e A : \u5927\u7248\u672c\u66f4\u65b0\uff0c\u5982\u5927\u6539\u7248\u6216\u8005\u7ed3\u6784\u5927\u8c03\u6574\u3002\u7531\u9879\u76ee\u7ecf\u7406\u51b3\u5b9a\u6b64\u7248\u672c\u7f16\u53f7 B : \u529f\u80fd\u6a21\u5757\uff0c\u5982\u7528\u6237\u4e2d\u5fc3\uff0c\u8ba2\u5355\u4e2d\u5fc3\u7b49\u5927\u6a21\u5757\u66f4\u65b0\u6216\u8c03\u6574\u3002\u7531\u5f00\u53d1\u4e3b\u7ba1\u51b3\u5b9a\u6b64\u7248\u672c\u7f16\u53f7 C : \u529f\u80fd\u8fed\u4ee3\u66f4\u65b0\uff0c\u7531\u5f00\u53d1\u7ec4\u957f\u51b3\u5b9a\u6b64\u7248\u672c\u7f16\u53f7 D : hotfix \u4fee\u590d\u7248\u672c\u7f16\u53f7\uff0c\u7531\u5f00\u53d1\u7ec4\u957f\u51b3\u5b9a\u6b64\u7248\u672c\u7f16\u53f7\uff1b\u9ed8\u8ba4\u65b0\u8fed\u4ee3\u7684\u7248\u672c\uff0c\u6b64\u7248\u672c\u7f16\u53f7\u9ed8\u8ba4\u4e3a 0 \u6bcf\u4e2a\u72ec\u7acb\u7684\u7248\u672c\u7f16\u53f7\u66f4\u65b0\u540e\uff0c\u5f53\u524d\u7248\u672c\u53f7\u540e\u7684\u7248\u672c\u7f16\u53f7\u91cd\u7f6e\u4e3a0\uff0c\u4f18\u5148\u7ea7\uff1a A > B > C > D","title":"Git \u5e38\u7528\u547d\u4ee4"},{"location":"more/git/#git","text":"","title":"Git \u5e38\u7528\u547d\u4ee4"},{"location":"more/git/#git_1","text":"\u7531\u4e8e\u662f\u5206\u5e03\u5f0f\uff0c\u6240\u6709\u672c\u5730\u5e93\u5305\u542b\u4e86\u8fdc\u7a0b\u5e93\u7684\u6240\u6709\u5185\u5bb9\u3002 \u4f18\u79c0\u7684\u5206\u652f\u6a21\u578b\uff0c\u6253\u5206\u652f\u4ee5\u53ca\u5408\u5e76\u5206\u652f\uff0c\u65b9\u4fbf\u3002 \u5feb\u901f\uff0cGit \u7531\u4e8e\u4ee3\u7801\u90fd\u5728\u672c\u5730\uff0c\u6253\u5206\u652f\u548c\u5408\u5e76\u5206\u652f\u5feb\u901f\uff0c\u4f7f\u7528\u4e2aSVN\u7684\u80fd\u6df1\u523b\u4f53\u4f1a\u5230\u8fd9\u79cd\u4f18\u52bf\u3002","title":"GIT \u4f18\u52bf"},{"location":"more/git/#git-svn","text":"SVN \u662f\u96c6\u4e2d\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7edf \uff0c\u7248\u672c\u5e93\u662f\u96c6\u4e2d\u653e\u5728\u4e2d\u592e\u670d\u52a1\u5668\u7684\uff0c\u800c\u5e72\u6d3b\u7684\u65f6\u5019\uff0c\u7528\u7684\u90fd\u662f\u81ea\u5df1\u7684\u7535\u8111\uff0c\u6240\u4ee5\u9996\u5148\u8981\u4ece\u4e2d\u592e\u670d\u52a1\u5668\u54ea\u91cc\u5f97\u5230\u6700\u65b0\u7684\u7248\u672c\uff0c\u7136\u540e\u5e72\u6d3b\uff0c\u5e72\u5b8c\u540e\uff0c\u9700\u8981\u628a\u81ea\u5df1\u505a\u5b8c\u7684\u6d3b\u63a8\u9001\u5230\u4e2d\u592e\u670d\u52a1\u5668\u3002\u96c6\u4e2d\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u662f\u5fc5\u987b\u8054\u7f51\u624d\u80fd\u5de5\u4f5c\uff0c\u5982\u679c\u5728\u5c40\u57df\u7f51\u8fd8\u53ef\u4ee5\uff0c\u5e26\u5bbd\u591f\u5927\uff0c\u901f\u5ea6\u591f\u5feb\uff0c\u5982\u679c\u5728\u4e92\u8054\u7f51\u4e0b\uff0c\u5982\u679c\u7f51\u901f\u6162\u7684\u8bdd\uff0c\u5c31\u7eb3\u95f7\u4e86\u3002 Git \u662f\u5206\u5e03\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7edf \uff0c\u90a3\u4e48\u5b83\u5c31\u6ca1\u6709\u4e2d\u592e\u670d\u52a1\u5668\u7684\uff0c\u6bcf\u4e2a\u4eba\u7684\u7535\u8111\u5c31\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u7248\u672c\u5e93\uff0c\u8fd9\u6837\uff0c\u5de5\u4f5c\u7684\u65f6\u5019\u5c31\u4e0d\u9700\u8981\u8054\u7f51\u4e86\uff0c\u56e0\u4e3a\u7248\u672c\u90fd\u662f\u5728\u81ea\u5df1\u7684\u7535\u8111\u4e0a\u3002\u65e2\u7136\u6bcf\u4e2a\u4eba\u7684\u7535\u8111\u90fd\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u7248\u672c\u5e93\uff0c\u90a3\u591a\u4e2a\u4eba\u5982\u4f55\u534f\u4f5c\u5462\uff1f\u6bd4\u5982\u8bf4\u81ea\u5df1\u5728\u7535\u8111\u4e0a\u6539\u4e86\u6587\u4ef6A\uff0c\u5176\u4ed6\u4eba\u4e5f\u5728\u7535\u8111\u4e0a\u6539\u4e86\u6587\u4ef6A\uff0c\u8fd9\u65f6\uff0c\u4f60\u4eec\u4e24\u4e4b\u95f4\u53ea\u9700\u628a\u5404\u81ea\u7684\u4fee\u6539\u63a8\u9001\u7ed9\u5bf9\u65b9\uff0c\u5c31\u53ef\u4ee5\u4e92\u76f8\u770b\u5230\u5bf9\u65b9\u7684\u4fee\u6539\u4e86\u3002","title":"GIT \u4e0e SVN \u6700\u4e3b\u8981\u7684\u533a\u522b"},{"location":"more/git/#git_2","text":"\u4e0b\u8f7d\u5730\u5740\uff1a https://git-scm.com/download/","title":"GIT \u4e0b\u8f7d"},{"location":"more/git/#git_3","text":"","title":"GIT \u5e38\u7528\u547d\u4ee4"},{"location":"more/git/#_1","text":"ssh-keygen -t rsa -C '***@flc.io' # \u63093\u4e2a\u56de\u8f66\u3002 # \u6700\u540e\u5f97\u5230\u4e86\u4e24\u4e2a\u6587\u4ef6\uff1aid_rsa\u548cid_rsa.pub\uff08window\u548clinux\u5728\u5f53\u524d\u7528\u6237\u76ee\u5f55/.ssh\u76ee\u5f55\u4e0b\uff09 # \u5176\u4e2did_rsa.pub\u5373\u4e3a\u516c\u94a5","title":"\u751f\u6210\u5bc6\u94a5"},{"location":"more/git/#git_4","text":"git config --global user.name 'flc' git config --global user.email '***@flc.io'","title":"\u8bbe\u7f6e Git \u7684\u7528\u6237\u540d\u548c\u90ae\u7bb1"},{"location":"more/git/#_2","text":"\u521d\u59cb\u5316\u4e00\u4e2a\u7248\u672c\u4ed3\u5e93 git init \u514b\u9686\u8fdc\u7a0b\u7248\u672c\u5e93\uff08\u540c\u65f6\u4f1a\u81ea\u52a8\u521d\u59cb\u5316\uff09 # \u5982\u514b\u9686thinkphp\u6e90\u7801 git clone https://github.com/top-think/thinkphp.git \u6dfb\u52a0\u8fdc\u7a0b\u7248\u672c\u5e93\uff08\u9700\u8981\u5148\u521d\u59cb\u5316\uff09 # \u8bed\u6cd5\u4e3a git remote add [shortname] [url] git remote add origin https://github.com/top-think/thinkphp.git","title":"\u521b\u5efa\u7248\u672c\u5e93"},{"location":"more/git/#_3","text":"# \u67e5\u770b\u6587\u4ef6\u72b6\u6001 git status # \u6dfb\u52a0\u5f53\u524d\u4fee\u6539\u7684\u6587\u4ef6\u5230\u6682\u5b58\u533a git add . git add [ file_path ] # \u6307\u5b9a\u6587\u4ef6 # \u63d0\u4ea4\u4f60\u7684\u4fee\u6539 git commit \u2013m \"\u4f60\u7684\u6ce8\u91ca\" # \u63a8\u9001\u4f60\u7684\u66f4\u65b0\u5230\u8fdc\u7a0b\u670d\u52a1\u5668,\u8bed\u6cd5\u4e3a git push [\u8fdc\u7a0b\u540d] [\u672c\u5730\u5206\u652f]:[\u8fdc\u7a0b\u5206\u652f] git push origin master # \u67e5\u770b\u63d0\u4ea4\u7684\u65e5\u5fd7 git log # \u4fee\u6539\u6700\u540e\u4e00\u6b21\u63d0\u4ea4\u6ce8\u91ca\u7684\uff0c\u5229\u7528\u2013amend\u53c2\u6570 git commit --amend","title":"\u63d0\u4ea4 / \u63a8\u9001\u4ee3\u7801"},{"location":"more/git/#_4","text":"\u672c\u5730\u5206\u652f\u7ba1\u7406\uff08\u67e5\u770b\u3001\u5207\u6362\u3001\u521b\u5efa\u548c\u5220\u9664\uff09 git branch -r # \u67e5\u770b\u8fdc\u7a0b\u5206\u652f git branch <new_branch> # \u521b\u5efa\u65b0\u7684\u5206\u652f git branch -v # \u67e5\u770b\u5404\u4e2a\u5206\u652f\u6700\u540e\u63d0\u4ea4\u4fe1\u606f git checkout <branch> # \u5207\u6362\u5230\u67d0\u4e2a\u5206\u652f git checkout -b <new_branch> # \u521b\u5efa\u65b0\u7684\u5206\u652f\uff0c\u5e76\u4e14\u5207\u6362\u8fc7\u53bb git checkout -b <new_branch> <branch> # \u57fa\u4e8ebranch\u521b\u5efa\u65b0\u7684new_branch git branch -d <branch> # \u5220\u9664\u67d0\u4e2a\u5206\u652f git branch -D <branch> # \u5f3a\u5236\u5220\u9664\u67d0\u4e2a\u5206\u652f (\u672a\u88ab\u5408\u5e76\u7684\u5206\u652f\u88ab\u5220\u9664\u7684\u65f6\u5019\u9700\u8981\u5f3a\u5236) git push origin --delete <branch> # \u5220\u9664\u8fdc\u7a0b\u5206\u652f \u5206\u652f\u5408\u5e76 git merge <branch> # \u5c06branch\u5206\u652f\u5408\u5e76\u5230\u5f53\u524d\u5206\u652f(Fast-Foward\u5408\u5e76\uff0c\u4e0d\u63a8\u8350) git merge <branch> --no-ff # \u4e0d\u8981Fast-Foward\u5408\u5e76\uff0c\u8fd9\u6837\u53ef\u4ee5\u751f\u6210merge\u63d0\u4ea4\uff08\u63a8\u8350\uff09 \u8fdc\u7a0b\u5206\u652f\u7ba1\u7406 git pull # \u6293\u53d6\u8fdc\u7a0b\u4ed3\u5e93\u6240\u6709\u5206\u652f\u66f4\u65b0\u5e76\u5408\u5e76\u5230\u672c\u5730 git pull --no-ff # \u6293\u53d6\u8fdc\u7a0b\u4ed3\u5e93\u6240\u6709\u5206\u652f\u66f4\u65b0\u5e76\u5408\u5e76\u5230\u672c\u5730\uff0c\u4e0d\u8981\u5feb\u8fdb\u5408\u5e76 git fetch origin # \u6293\u53d6\u8fdc\u7a0b\u4ed3\u5e93\u66f4\u65b0 git merge origin/master # \u5c06\u8fdc\u7a0b\u4e3b\u5206\u652f\u5408\u5e76\u5230\u672c\u5730\u5f53\u524d\u5206\u652f git checkout -b <local_branch> origin/<remote_branch> # \u57fa\u4e8e\u8fdc\u7a0b\u5206\u652f\u521b\u5efa\u672c\u5730\u5206\u652f git push # push\u6240\u6709\u5206\u652f git push origin <branch> # \u5c06\u672c\u5730\u4e3b\u5206\u652f\u63a8\u5230\u8fdc\u7a0b\u5206\u652f git push -u origin master # \u5c06\u672c\u5730\u4e3b\u5206\u652f\u63a8\u5230\u8fdc\u7a0b(\u5982\u65e0\u8fdc\u7a0b\u4e3b\u5206\u652f\u5219\u521b\u5efa\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u8fdc\u7a0b\u4ed3\u5e93) git push origin <local_branch> # \u521b\u5efa\u8fdc\u7a0b\u5206\u652f\uff0c origin\u662f\u8fdc\u7a0b\u4ed3\u5e93\u540d git push origin <local_branch>:<remote_branch> # \u521b\u5efa\u8fdc\u7a0b\u5206\u652f git push origin :<remote_branch> # \u5220\u9664\u8fdc\u7a0b\u5206\u652f\u3002\u5148\u5220\u9664\u672c\u5730\u5206\u652f(git br -d <branch>)\uff0c\u7136\u540e\u518dpush\u5220\u9664\u8fdc\u7a0b\u5206\u652f git push origin --delete <branch> # \u5220\u9664\u8fdc\u7a0b\u5206\u652f\uff0c\u529f\u80fd\u540c\u4e0a","title":"\u5206\u652f\u7ba1\u7406"},{"location":"more/git/#_5","text":"git remote -v # \u67e5\u770b\u8fdc\u7a0b\u670d\u52a1\u5668\u5730\u5740\u548c\u4ed3\u5e93\u540d\u79f0 git remote show origin # \u67e5\u770b\u8fdc\u7a0b\u670d\u52a1\u5668\u4ed3\u5e93\u72b6\u6001 git remote add origin git@ github:robbin/robbin_site.git # \u6dfb\u52a0\u8fdc\u7a0b\u4ed3\u5e93\u5730\u5740 git remote set-url origin git@ github.com:robbin/robbin_site.git # \u8bbe\u7f6e\u8fdc\u7a0b\u4ed3\u5e93\u5730\u5740(\u7528\u4e8e\u4fee\u6539\u8fdc\u7a0b\u4ed3\u5e93\u5730\u5740) git remote rm <repository> # \u5220\u9664\u8fdc\u7a0b\u4ed3\u5e93","title":"\u8fdc\u7a0b\u4ed3\u5e93\u7ba1\u7406"},{"location":"more/git/#_6","text":"http://justcoding.iteye.com/blog/1830388 http://www.admin10000.com/document/5374.html","title":"\u66f4\u591a\u6559\u7a0b"},{"location":"more/git/#_7","text":"","title":"\u5de5\u4f5c\u6d41\u4ecb\u7ecd"},{"location":"more/git/#_8","text":"","title":"\u6d41\u7a0b\u56fe"},{"location":"more/git/#_9","text":"http://www.cnblogs.com/cnblogsfans/p/5075073.html?utm_source=tuicool&utm_medium=referral \u5173\u952e\u5b57\uff1a git flow","title":"\u53c2\u8003"},{"location":"more/git/#_10","text":"\u4e3b\u5206\u652f\uff1a master \u5f00\u53d1\u5206\u652f\uff1a develop \u529f\u80fd\u5206\u652f\uff1a feature/\u529f\u80fd\u6a21\u5757\u82f1\u6587\u540d \uff0c\u5982\uff1a feature/user \u7248\u672c\u5206\u652f\uff08\u9884\u4e0a\u7ebf\u5206\u652f\uff09\uff1a release/\u529f\u80fd\u6a21\u5757\u82f1\u6587\u540d\u6216\u7248\u672c\u53f7+\u5e74\u6708\u65e5 \uff0c\u5982\uff1a release/user_20160101 \u6216 release/v1.0.1_20160101 \u4fee\u590d\u5206\u652f\uff1a hotfix/\u4fee\u590d\u529f\u80fd\u82f1\u6587\u540d\u6216\u539f\u7248\u672c\u53f7+\u5e74\u6708\u65e5 \uff0c\u5982\uff1a hotfix/user_20160101 \u6216 hotfix/v1.0.1_20160101","title":"\u5206\u652f\u547d\u540d\u89c4\u5219"},{"location":"more/git/#_11","text":"\u5982\uff1a v1.1.1.1\u2192vA.B.C.D \u89c4\u5219\u8bf4\u660e A : \u5927\u7248\u672c\u66f4\u65b0\uff0c\u5982\u5927\u6539\u7248\u6216\u8005\u7ed3\u6784\u5927\u8c03\u6574\u3002\u7531\u9879\u76ee\u7ecf\u7406\u51b3\u5b9a\u6b64\u7248\u672c\u7f16\u53f7 B : \u529f\u80fd\u6a21\u5757\uff0c\u5982\u7528\u6237\u4e2d\u5fc3\uff0c\u8ba2\u5355\u4e2d\u5fc3\u7b49\u5927\u6a21\u5757\u66f4\u65b0\u6216\u8c03\u6574\u3002\u7531\u5f00\u53d1\u4e3b\u7ba1\u51b3\u5b9a\u6b64\u7248\u672c\u7f16\u53f7 C : \u529f\u80fd\u8fed\u4ee3\u66f4\u65b0\uff0c\u7531\u5f00\u53d1\u7ec4\u957f\u51b3\u5b9a\u6b64\u7248\u672c\u7f16\u53f7 D : hotfix \u4fee\u590d\u7248\u672c\u7f16\u53f7\uff0c\u7531\u5f00\u53d1\u7ec4\u957f\u51b3\u5b9a\u6b64\u7248\u672c\u7f16\u53f7\uff1b\u9ed8\u8ba4\u65b0\u8fed\u4ee3\u7684\u7248\u672c\uff0c\u6b64\u7248\u672c\u7f16\u53f7\u9ed8\u8ba4\u4e3a 0 \u6bcf\u4e2a\u72ec\u7acb\u7684\u7248\u672c\u7f16\u53f7\u66f4\u65b0\u540e\uff0c\u5f53\u524d\u7248\u672c\u53f7\u540e\u7684\u7248\u672c\u7f16\u53f7\u91cd\u7f6e\u4e3a0\uff0c\u4f18\u5148\u7ea7\uff1a A > B > C > D","title":"\u7248\u672c\u53f7\u547d\u540d\u89c4\u5219"},{"location":"php/features/5.3.x/","text":"PHP 5.3.x # 1. \u65b0\u7279\u6027 # PHP 5.3.0 \u63d0\u4f9b\u4e86\u5e7f\u6cdb\u7684\u65b0\u7279\u6027: \u6dfb\u52a0\u4e86 \u547d\u540d\u7a7a\u95f4 \u7684\u652f\u6301. \u6dfb\u52a0\u4e86 \u9759\u6001\u665a\u7ed1\u5b9a \u652f\u6301. \u6dfb\u52a0\u4e86 \u8df3\u6807\u7b7e \u652f\u6301. \u6dfb\u52a0\u4e86\u539f\u751f\u7684 \u95ed\u5305 (Lambda/\u533f\u540d\u51fd\u6570)\u652f\u6301. \u65b0\u589e\u4e86\u4e24\u4e2a\u9b54\u672f\u65b9\u6cd5, __callStatic \u548c __invoke . \u6dfb\u52a0\u4e86 Nowdoc \u8bed\u6cd5\u652f\u6301, \u7c7b\u4f3c\u4e8e Heredoc \u8bed\u6cd5, \u4f46\u662f\u5305\u542b\u5355\u5f15\u53f7. \u4f7f\u7528 Heredoc \u6765\u521d\u59cb\u5316\u9759\u6001\u53d8\u91cf\u548c\u7c7b\u5c5e\u6027/\u5e38\u91cf\u53d8\u4e3a\u53ef\u80fd. \u53ef\u4f7f\u7528\u53cc\u5f15\u53f7\u58f0\u660e Heredoc , \u8865\u5145\u4e86 Nowdoc \u8bed\u6cd5. \u53ef\u5728\u7c7b\u5916\u90e8\u4f7f\u7528 const \u5173\u952e\u8bcd\u58f0\u660e \u5e38\u91cf . \u4e09\u5143\u8fd0\u7b97 \u64cd\u4f5c\u7b26\u6709\u4e86\u7b80\u5199\u5f62\u5f0f: ?: . HTTP \u6d41\u5305\u88f9\u5668\u5c06\u4ece 200 \u5230 399 \u5168\u90e8\u7684\u72b6\u6001\u7801\u90fd\u89c6\u4e3a\u6210\u529f\u3002 \u52a8\u6001\u8bbf\u95ee\u9759\u6001\u65b9\u6cd5\u53d8\u4e3a\u53ef\u80fd. \u5f02\u5e38 \u53ef\u4ee5\u88ab\u5185\u5d4c. \u65b0\u589e\u4e86\u5faa\u73af\u5f15\u7528\u7684\u5783\u573e\u56de\u6536\u5668\u5e76\u4e14\u9ed8\u8ba4\u662f\u5f00\u542f\u7684. mail() \u73b0\u5728\u652f\u6301\u90ae\u4ef6\u53d1\u9001\u65e5\u5fd7. (\u6ce8\u610f: \u4ec5\u652f\u6301\u901a\u8fc7\u8be5\u51fd\u6570\u53d1\u9001\u7684\u90ae\u4ef6.) \u539f\u6587 \u65b0\u7279\u6027\uff1a http://php.net/manual/zh/migration53.new-features.php","title":"PHP 5.3.x"},{"location":"php/features/5.3.x/#php-53x","text":"","title":"PHP 5.3.x"},{"location":"php/features/5.3.x/#1","text":"PHP 5.3.0 \u63d0\u4f9b\u4e86\u5e7f\u6cdb\u7684\u65b0\u7279\u6027: \u6dfb\u52a0\u4e86 \u547d\u540d\u7a7a\u95f4 \u7684\u652f\u6301. \u6dfb\u52a0\u4e86 \u9759\u6001\u665a\u7ed1\u5b9a \u652f\u6301. \u6dfb\u52a0\u4e86 \u8df3\u6807\u7b7e \u652f\u6301. \u6dfb\u52a0\u4e86\u539f\u751f\u7684 \u95ed\u5305 (Lambda/\u533f\u540d\u51fd\u6570)\u652f\u6301. \u65b0\u589e\u4e86\u4e24\u4e2a\u9b54\u672f\u65b9\u6cd5, __callStatic \u548c __invoke . \u6dfb\u52a0\u4e86 Nowdoc \u8bed\u6cd5\u652f\u6301, \u7c7b\u4f3c\u4e8e Heredoc \u8bed\u6cd5, \u4f46\u662f\u5305\u542b\u5355\u5f15\u53f7. \u4f7f\u7528 Heredoc \u6765\u521d\u59cb\u5316\u9759\u6001\u53d8\u91cf\u548c\u7c7b\u5c5e\u6027/\u5e38\u91cf\u53d8\u4e3a\u53ef\u80fd. \u53ef\u4f7f\u7528\u53cc\u5f15\u53f7\u58f0\u660e Heredoc , \u8865\u5145\u4e86 Nowdoc \u8bed\u6cd5. \u53ef\u5728\u7c7b\u5916\u90e8\u4f7f\u7528 const \u5173\u952e\u8bcd\u58f0\u660e \u5e38\u91cf . \u4e09\u5143\u8fd0\u7b97 \u64cd\u4f5c\u7b26\u6709\u4e86\u7b80\u5199\u5f62\u5f0f: ?: . HTTP \u6d41\u5305\u88f9\u5668\u5c06\u4ece 200 \u5230 399 \u5168\u90e8\u7684\u72b6\u6001\u7801\u90fd\u89c6\u4e3a\u6210\u529f\u3002 \u52a8\u6001\u8bbf\u95ee\u9759\u6001\u65b9\u6cd5\u53d8\u4e3a\u53ef\u80fd. \u5f02\u5e38 \u53ef\u4ee5\u88ab\u5185\u5d4c. \u65b0\u589e\u4e86\u5faa\u73af\u5f15\u7528\u7684\u5783\u573e\u56de\u6536\u5668\u5e76\u4e14\u9ed8\u8ba4\u662f\u5f00\u542f\u7684. mail() \u73b0\u5728\u652f\u6301\u90ae\u4ef6\u53d1\u9001\u65e5\u5fd7. (\u6ce8\u610f: \u4ec5\u652f\u6301\u901a\u8fc7\u8be5\u51fd\u6570\u53d1\u9001\u7684\u90ae\u4ef6.) \u539f\u6587 \u65b0\u7279\u6027\uff1a http://php.net/manual/zh/migration53.new-features.php","title":"1. \u65b0\u7279\u6027"},{"location":"php/features/5.4.x/","text":"PHP 5.4.x # 1. \u65b0\u7279\u6027 # PHP 5.4.0 \u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u65b0\u7279\u6027\uff1a \u65b0\u589e\u652f\u6301 traits \u3002 \u65b0\u589e\u77ed\u6570\u7ec4\u8bed\u6cd5\uff0c\u6bd4\u5982 $a = [1, 2, 3, 4]; \u6216 $a = ['one' => 1, 'two' => 2, 'three' => 3, 'four' => 4]; \u3002 \u65b0\u589e\u652f\u6301\u5bf9\u51fd\u6570\u8fd4\u56de\u6570\u7ec4\u7684\u6210\u5458\u8bbf\u95ee\u89e3\u6790\uff0c\u4f8b\u5982 foo()[0] \u3002 \u73b0\u5728 \u95ed\u5305 \u652f\u6301 $this \u3002 \u73b0\u5728\u4e0d\u7ba1\u662f\u5426\u8bbe\u7f6e short open tag php.ini \u9009\u9879\uff0c <?= \u5c06\u603b\u662f\u53ef\u7528\u3002 \u65b0\u589e\u5728\u5b9e\u4f8b\u5316\u65f6\u8bbf\u95ee\u7c7b\u6210\u5458\uff0c\u4f8b\u5982\uff1a (new Foo)->bar() \u3002 \u73b0\u5728\u652f\u6301 Class::{expr}() \u8bed\u6cd5\u3002 \u65b0\u589e\u4e8c\u8fdb\u5236\u76f4\u63a5\u91cf\uff0c\u4f8b\u5982\uff1a 0b001001101 \u3002 \u6539\u8fdb\u89e3\u6790\u9519\u8bef\u4fe1\u606f\u548c\u4e0d\u517c\u5bb9\u53c2\u6570\u7684\u8b66\u544a\u3002 SESSION \u6269\u5c55\u73b0\u5728\u80fd\u8ffd\u8e2a\u6587\u4ef6\u7684 \u4e0a\u4f20\u8fdb\u5ea6 \u3002 \u5185\u7f6e\u7528\u4e8e\u5f00\u53d1\u7684 CLI \u6a21\u5f0f\u7684 web server \u3002 \u7528\u6237\u8d21\u732e\u7b14\u8bb0 PHP 5.4 also allows to use arrays in switch: <?php $foo = 1 ; $bar = 2 ; switch ([ $foo , $bar ]) { case [ 1 , 2 ] : echo 'case 1' ; break ; case [ 2 , 2 ] : echo 'case 2' ; break ; case [ 3 , 4 ] : echo 'case 3' ; break ; } // Will output \"case 1\" ?> \u539f\u6587 \u65b0\u7279\u6027\uff1a http://php.net/manual/zh/migration54.new-features.php#122886","title":"PHP 5.4.x"},{"location":"php/features/5.4.x/#php-54x","text":"","title":"PHP 5.4.x"},{"location":"php/features/5.4.x/#1","text":"PHP 5.4.0 \u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u65b0\u7279\u6027\uff1a \u65b0\u589e\u652f\u6301 traits \u3002 \u65b0\u589e\u77ed\u6570\u7ec4\u8bed\u6cd5\uff0c\u6bd4\u5982 $a = [1, 2, 3, 4]; \u6216 $a = ['one' => 1, 'two' => 2, 'three' => 3, 'four' => 4]; \u3002 \u65b0\u589e\u652f\u6301\u5bf9\u51fd\u6570\u8fd4\u56de\u6570\u7ec4\u7684\u6210\u5458\u8bbf\u95ee\u89e3\u6790\uff0c\u4f8b\u5982 foo()[0] \u3002 \u73b0\u5728 \u95ed\u5305 \u652f\u6301 $this \u3002 \u73b0\u5728\u4e0d\u7ba1\u662f\u5426\u8bbe\u7f6e short open tag php.ini \u9009\u9879\uff0c <?= \u5c06\u603b\u662f\u53ef\u7528\u3002 \u65b0\u589e\u5728\u5b9e\u4f8b\u5316\u65f6\u8bbf\u95ee\u7c7b\u6210\u5458\uff0c\u4f8b\u5982\uff1a (new Foo)->bar() \u3002 \u73b0\u5728\u652f\u6301 Class::{expr}() \u8bed\u6cd5\u3002 \u65b0\u589e\u4e8c\u8fdb\u5236\u76f4\u63a5\u91cf\uff0c\u4f8b\u5982\uff1a 0b001001101 \u3002 \u6539\u8fdb\u89e3\u6790\u9519\u8bef\u4fe1\u606f\u548c\u4e0d\u517c\u5bb9\u53c2\u6570\u7684\u8b66\u544a\u3002 SESSION \u6269\u5c55\u73b0\u5728\u80fd\u8ffd\u8e2a\u6587\u4ef6\u7684 \u4e0a\u4f20\u8fdb\u5ea6 \u3002 \u5185\u7f6e\u7528\u4e8e\u5f00\u53d1\u7684 CLI \u6a21\u5f0f\u7684 web server \u3002 \u7528\u6237\u8d21\u732e\u7b14\u8bb0 PHP 5.4 also allows to use arrays in switch: <?php $foo = 1 ; $bar = 2 ; switch ([ $foo , $bar ]) { case [ 1 , 2 ] : echo 'case 1' ; break ; case [ 2 , 2 ] : echo 'case 2' ; break ; case [ 3 , 4 ] : echo 'case 3' ; break ; } // Will output \"case 1\" ?> \u539f\u6587 \u65b0\u7279\u6027\uff1a http://php.net/manual/zh/migration54.new-features.php#122886","title":"1. \u65b0\u7279\u6027"},{"location":"php/features/5.5.x/","text":"PHP 5.5.x # 1. \u65b0\u7279\u6027 # 1.1. \u65b0\u589e Generators # Support for generators has been added via the yield keyword. Generators provide an easy way to implement simple iterators without the overhead or complexity of implementing a class that implements the Iterator interface. A simple example that reimplements the range() function as a generator (at least for positive step values): <?php function xrange ( $start , $limit , $step = 1 ) { for ( $i = $start ; $i <= $limit ; $i += $step ) { yield $i ; } } echo 'Single digit odd numbers: ' ; /* \u6ce8\u610f\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u6570\u7ec4\u7edd\u4e0d\u4f1a\u88ab\u521b\u5efa\u6216\u8fd4\u56de */ foreach ( xrange ( 1 , 9 , 2 ) as $number ) { echo \" $number \" ; } ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a Single digit odd numbers: 1 3 5 7 9 1.2. foreach \u73b0\u5728\u652f\u6301 list() # foreach \u63a7\u5236\u7ed3\u6784\u73b0\u5728\u652f\u6301\u901a\u8fc7 list() \u6784\u9020\u5c06\u5d4c\u5957\u6570\u7ec4\u5206\u79bb\u5230\u5355\u72ec\u7684\u53d8\u91cf\u3002\u4f8b\u5982\uff1a <?php $array = [ [ 1 , 2 ], [ 3 , 4 ], ]; foreach ( $array as list ( $a , $b )) { echo \"A: $a ; B: $b\\n \" ; } ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a A: 1; B: 2 A: 3; B: 4 \u5173\u4e8e foreach \u66f4\u6df1\u5165\u7684\u6587\u6863\u53ef\u53c2\u8003\u76f8\u5173\u624b\u518c\u9875\u9762\u3002 1.3. empty() \u652f\u6301\u4efb\u610f\u8868\u8fbe\u5f0f # empty() \u73b0\u5728\u652f\u6301\u4f20\u5165\u4e00\u4e2a\u4efb\u610f\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u4ec5\u662f\u4e00\u4e2a\u53d8\u91cf\u3002\u4f8b\u5982\uff1a <?php function always_false () { return false ; } if ( empty ( always_false ())) { echo 'This will be printed.' ; } if ( empty ( true )) { echo 'This will not be printed.' ; } ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a This will be printed. 1.4. array and string literal dereferencing # Array and string literals can now be dereferenced directly to access individual elements and characters: <?php echo 'Array dereferencing: ' ; echo [ 1 , 2 , 3 ][ 0 ]; echo \" \\n \" ; echo 'String dereferencing: ' ; echo 'PHP' [ 0 ]; echo \" \\n \" ; ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a Array dereferencing: 1 String dereferencing: P 1.5. \u65b0\u7684\u5bc6\u7801\u54c8\u5e0c API # A \u65b0\u7684\u5bc6\u7801\u54c8\u5e0c API that makes it easier to securely hash and manage passwords using the same underlying library as crypt() in PHP has been added. See the documentation for password_hash() for more detail. 1.6. \u6539\u8fdb GD # \u5bf9 GD \u6269\u5c55\u505a\u4e86\u591a\u65b9\u9762\u7684\u6539\u8fdb\uff0c\u5305\u62ec\uff1a \u7ffb\u8f6c\u652f\u6301\u4f7f\u7528\u65b0\u7684 imageflip() \u51fd\u6570\u3002 \u9ad8\u7ea7\u88c1\u526a\u652f\u6301\u4f7f\u7528 imagecrop() & imagecropauto() \u51fd\u6570\u3002 WebP \u7684\u8bfb\u5199\u5206\u522b\u652f\u6301\u4f7f\u7528 imagecreatefromwebp() & imagewebp() \u3002 \u539f\u6587 \u65b0\u7279\u6027\uff1a http://php.net/manual/zh/migration55.new-features.php","title":"PHP 5.5.x"},{"location":"php/features/5.5.x/#php-55x","text":"","title":"PHP 5.5.x"},{"location":"php/features/5.5.x/#1","text":"","title":"1. \u65b0\u7279\u6027"},{"location":"php/features/5.5.x/#11-generators","text":"Support for generators has been added via the yield keyword. Generators provide an easy way to implement simple iterators without the overhead or complexity of implementing a class that implements the Iterator interface. A simple example that reimplements the range() function as a generator (at least for positive step values): <?php function xrange ( $start , $limit , $step = 1 ) { for ( $i = $start ; $i <= $limit ; $i += $step ) { yield $i ; } } echo 'Single digit odd numbers: ' ; /* \u6ce8\u610f\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u6570\u7ec4\u7edd\u4e0d\u4f1a\u88ab\u521b\u5efa\u6216\u8fd4\u56de */ foreach ( xrange ( 1 , 9 , 2 ) as $number ) { echo \" $number \" ; } ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a Single digit odd numbers: 1 3 5 7 9","title":"1.1. \u65b0\u589e Generators"},{"location":"php/features/5.5.x/#12-foreach-list","text":"foreach \u63a7\u5236\u7ed3\u6784\u73b0\u5728\u652f\u6301\u901a\u8fc7 list() \u6784\u9020\u5c06\u5d4c\u5957\u6570\u7ec4\u5206\u79bb\u5230\u5355\u72ec\u7684\u53d8\u91cf\u3002\u4f8b\u5982\uff1a <?php $array = [ [ 1 , 2 ], [ 3 , 4 ], ]; foreach ( $array as list ( $a , $b )) { echo \"A: $a ; B: $b\\n \" ; } ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a A: 1; B: 2 A: 3; B: 4 \u5173\u4e8e foreach \u66f4\u6df1\u5165\u7684\u6587\u6863\u53ef\u53c2\u8003\u76f8\u5173\u624b\u518c\u9875\u9762\u3002","title":"1.2. foreach \u73b0\u5728\u652f\u6301 list()"},{"location":"php/features/5.5.x/#13-empty","text":"empty() \u73b0\u5728\u652f\u6301\u4f20\u5165\u4e00\u4e2a\u4efb\u610f\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u4ec5\u662f\u4e00\u4e2a\u53d8\u91cf\u3002\u4f8b\u5982\uff1a <?php function always_false () { return false ; } if ( empty ( always_false ())) { echo 'This will be printed.' ; } if ( empty ( true )) { echo 'This will not be printed.' ; } ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a This will be printed.","title":"1.3. empty() \u652f\u6301\u4efb\u610f\u8868\u8fbe\u5f0f"},{"location":"php/features/5.5.x/#14-array-and-string-literal-dereferencing","text":"Array and string literals can now be dereferenced directly to access individual elements and characters: <?php echo 'Array dereferencing: ' ; echo [ 1 , 2 , 3 ][ 0 ]; echo \" \\n \" ; echo 'String dereferencing: ' ; echo 'PHP' [ 0 ]; echo \" \\n \" ; ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a Array dereferencing: 1 String dereferencing: P","title":"1.4. array and string literal dereferencing"},{"location":"php/features/5.5.x/#15-api","text":"A \u65b0\u7684\u5bc6\u7801\u54c8\u5e0c API that makes it easier to securely hash and manage passwords using the same underlying library as crypt() in PHP has been added. See the documentation for password_hash() for more detail.","title":"1.5. \u65b0\u7684\u5bc6\u7801\u54c8\u5e0c API"},{"location":"php/features/5.5.x/#16-gd","text":"\u5bf9 GD \u6269\u5c55\u505a\u4e86\u591a\u65b9\u9762\u7684\u6539\u8fdb\uff0c\u5305\u62ec\uff1a \u7ffb\u8f6c\u652f\u6301\u4f7f\u7528\u65b0\u7684 imageflip() \u51fd\u6570\u3002 \u9ad8\u7ea7\u88c1\u526a\u652f\u6301\u4f7f\u7528 imagecrop() & imagecropauto() \u51fd\u6570\u3002 WebP \u7684\u8bfb\u5199\u5206\u522b\u652f\u6301\u4f7f\u7528 imagecreatefromwebp() & imagewebp() \u3002 \u539f\u6587 \u65b0\u7279\u6027\uff1a http://php.net/manual/zh/migration55.new-features.php","title":"1.6. \u6539\u8fdb GD"},{"location":"php/features/5.6.x/","text":"PHP 5.6.x # 1. \u65b0\u7279\u6027 # 1.1. \u4f7f\u7528\u8868\u8fbe\u5f0f\u5b9a\u4e49\u5e38\u91cf # \u5728\u4e4b\u524d\u7684 PHP \u7248\u672c\u4e2d\uff0c \u5fc5\u987b\u4f7f\u7528\u9759\u6001\u503c\u6765\u5b9a\u4e49\u5e38\u91cf\uff0c\u58f0\u660e\u5c5e\u6027\u4ee5\u53ca\u6307\u5b9a\u51fd\u6570\u53c2\u6570\u9ed8\u8ba4\u503c\u3002 \u73b0\u5728\u4f60\u53ef\u4ee5\u4f7f\u7528\u5305\u62ec\u6570\u503c\u3001\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u4ee5\u53ca\u5176\u4ed6\u5e38\u91cf\u5728\u5185\u7684\u6570\u503c\u8868\u8fbe\u5f0f\u6765 \u5b9a\u4e49\u5e38\u91cf\u3001\u58f0\u660e\u5c5e\u6027\u4ee5\u53ca\u8bbe\u7f6e\u51fd\u6570\u53c2\u6570\u9ed8\u8ba4\u503c\u3002 <?php const ONE = 1 ; const TWO = ONE * 2 ; class C { const THREE = TWO + 1 ; const ONE_THIRD = ONE / self :: THREE ; const SENTENCE = 'The value of THREE is ' . self :: THREE ; public function f ( $a = ONE + self :: THREE ) { return $a ; } } echo ( new C ) -> f () . \" \\n \" ; echo C :: SENTENCE ; ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a 4 The value of THREE is 3 \u73b0\u5728\u53ef\u4ee5\u901a\u8fc7 const \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u7c7b\u578b\u4e3a array \u7684\u5e38\u91cf\u3002 <?php const ARR = [ 'a' , 'b' ]; echo ARR [ 0 ]; ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a a 1.2. \u4f7f\u7528 ... \u8fd0\u7b97\u7b26\u5b9a\u4e49\u53d8\u957f\u53c2\u6570\u51fd\u6570 # \u73b0\u5728\u53ef\u4ee5\u4e0d\u4f9d\u8d56 func get args() \uff0c \u4f7f\u7528 ... \u8fd0\u7b97\u7b26 \u6765\u5b9e\u73b0 \u53d8\u957f\u53c2\u6570\u51fd\u6570 \u3002 <?php function f ( $req , $opt = null , ... $params ) { // $params \u662f\u4e00\u4e2a\u5305\u542b\u4e86\u5269\u4f59\u53c2\u6570\u7684\u6570\u7ec4 printf ( '$req: %d; $opt: %d; number of params: %d' . \" \\n \" , $req , $opt , count ( $params )); } f ( 1 ); f ( 1 , 2 ); f ( 1 , 2 , 3 ); f ( 1 , 2 , 3 , 4 ); f ( 1 , 2 , 3 , 4 , 5 ); ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a $req: 1; $opt: 0; number of params: 0 $req: 1; $opt: 2; number of params: 0 $req: 1; $opt: 2; number of params: 1 $req: 1; $opt: 2; number of params: 2 $req: 1; $opt: 2; number of params: 3 1.3. \u4f7f\u7528 ... \u8fd0\u7b97\u7b26\u8fdb\u884c\u53c2\u6570\u5c55\u5f00 # \u5728\u8c03\u7528\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4f7f\u7528 ... \u8fd0\u7b97\u7b26\uff0c \u5c06 \u6570\u7ec4 \u548c \u53ef\u904d\u5386 \u5bf9\u8c61\u5c55\u5f00\u4e3a\u51fd\u6570\u53c2\u6570\u3002 \u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\uff0c\u6bd4\u5982 Ruby \u4e2d\uff0c\u8fd9\u88ab\u79f0\u4e3a\u8fde\u63a5\u8fd0\u7b97\u7b26\u3002 <?php function add ( $a , $b , $c ) { return $a + $b + $c ; } $operators = [ 2 , 3 ]; echo add ( 1 , ... $operators ); ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a 6 1.4. \u4f7f\u7528 ** \u8fdb\u884c\u5e42\u8fd0\u7b97 # \u52a0\u5165\u53f3\u8fde\u63a5\u8fd0\u7b97\u7b26 ** \u6765\u8fdb\u884c\u5e42\u8fd0\u7b97\u3002 \u540c\u65f6\u8fd8\u652f\u6301\u7b80\u5199\u7684 **= \u8fd0\u7b97\u7b26\uff0c\u8868\u793a\u8fdb\u884c\u5e42\u8fd0\u7b97\u5e76\u8d4b\u503c\u3002 <?php printf ( \"2 ** 3 == %d \\n \" , 2 ** 3 ); printf ( \"2 ** 3 ** 2 == %d \\n \" , 2 ** 3 ** 2 ); $a = 2 ; $a **= 3 ; printf ( \"a == %d \\n \" , $a ); ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a 2 ** 3 == 8 2 ** 3 ** 2 == 512 a == 8 1.5. use function \u4ee5\u53ca use const # use \u8fd0\u7b97\u7b26 \u88ab\u8fdb\u884c\u4e86\u6269\u5c55\u4ee5\u652f\u6301\u5728\u7c7b\u4e2d\u5bfc\u5165\u5916\u90e8\u7684\u51fd\u6570\u548c\u5e38\u91cf\u3002 \u5bf9\u5e94\u7684\u7ed3\u6784\u4e3a use function \u548c use const \u3002 <?php namespace Name\\Space { const FOO = 42 ; function f () { echo __FUNCTION__ . \" \\n \" ; } } namespace { use const Name\\Space\\FOO ; use function Name\\Space\\f ; echo FOO . \" \\n \" ; f (); } ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a 42 Name\\Space\\f 1.6. php://input \u662f\u53ef\u91cd\u7528\u7684\u4e86 # \u53ea\u8981\u4f60\u9700\u8981\uff0c\u4f60\u53ef\u4ee5\u591a\u6b21\u6253\u5f00\u5e76\u8bfb\u53d6 php://input \u3002 \u540c\u65f6\uff0c\u8fd9\u4e2a\u7279\u6027\u4f7f\u5f97\u5728\u5904\u7406 POST \u7684\u6570\u636e\u7684\u65f6\u5019\uff0c \u53ef\u4ee5\u660e\u663e\u964d\u4f4e\u5bf9\u4e8e\u5185\u5b58\u7684\u9700\u6c42\u91cf\u3002 1.7. \u5927\u6587\u4ef6\u4e0a\u4f20 # \u73b0\u5728\u53ef\u4ee5\u652f\u6301\u5927\u4e8e 2GB \u7684\u6587\u4ef6\u4e0a\u4f20\u3002 1.8. GMP \u652f\u6301\u8fd0\u7b97\u7b26\u91cd\u8f7d # GMP \u652f\u6301\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c \u5e76\u4e14\u9020\u578b\u6210\u6570\u503c\u7c7b\u578b\u3002 \u8fd9\u4f7f\u5f97\u4f7f\u7528 GMP \u7684\u4ee3\u7801\u66f4\u52a0\u76f4\u89c2\u3002 <?php $a = gmp_init ( 42 ); $b = gmp_init ( 17 ); if ( version_compare ( PHP_VERSION , '5.6' , '<' )) { echo gmp_intval ( gmp_add ( $a , $b )), PHP_EOL ; echo gmp_intval ( gmp_add ( $a , 17 )), PHP_EOL ; echo gmp_intval ( gmp_add ( 42 , $b )), PHP_EOL ; } else { echo $a + $b , PHP_EOL ; echo $a + 17 , PHP_EOL ; echo 42 + $b , PHP_EOL ; } ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a 59 59 59 1.9. \u4f7f\u7528 hash_equals() \u6bd4\u8f83\u5b57\u7b26\u4e32\u907f\u514d\u65f6\u5e8f\u653b\u51fb # \u52a0\u5165 hash_equals() \u51fd\u6570\uff0c \u4ee5\u6052\u5b9a\u7684\u65f6\u95f4\u6d88\u8017\u6765\u8fdb\u884c\u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c \u4ee5\u907f\u514d\u65f6\u5e8f\u653b\u51fb\u3002 \u6bd4\u5982\u5f53\u6bd4\u8f83 crypt() \u5bc6\u7801\u6563\u5217\u503c\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u6b64\u51fd\u6570\u3002 \uff08\u5047\u5b9a\u4f60\u4e0d\u80fd\u4f7f\u7528 password_hash() \u548c password_verify() \uff0c \u8fd9\u4e24\u4e2a\u51fd\u6570\u4e5f\u53ef\u4ee5\u62b5\u6297\u65f6\u5e8f\u653b\u51fb\uff09 <?php $expected = crypt ( '12345' , '$2a$07$usesomesillystringforsalt$' ); $correct = crypt ( '12345' , '$2a$07$usesomesillystringforsalt$' ); $incorrect = crypt ( '1234' , '$2a$07$usesomesillystringforsalt$' ); var_dump ( hash_equals ( $expected , $correct )); var_dump ( hash_equals ( $expected , $incorrect )); ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a bool(true) bool(false) 1.10. __debugInfo() # \u52a0\u5165 __debugInfo() \uff0c \u5f53\u4f7f\u7528 var_dump() \u8f93\u51fa\u5bf9\u8c61\u7684\u65f6\u5019\uff0c \u53ef\u4ee5\u7528\u6765\u63a7\u5236\u8981\u8f93\u51fa\u7684\u5c5e\u6027\u548c\u503c\u3002 <?php class C { private $prop ; public function __construct ( $val ) { $this -> prop = $val ; } public function __debugInfo () { return [ 'propSquared' => $this -> prop ** 2 , ]; } } var_dump ( new C ( 42 )); ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a object(C)#1 (1) { [\"propSquared\"]=> int(1764) } \u539f\u6587 \u65b0\u7279\u6027\uff1a http://php.net/manual/zh/migration56.new-features.php","title":"PHP 5.6.x"},{"location":"php/features/5.6.x/#php-56x","text":"","title":"PHP 5.6.x"},{"location":"php/features/5.6.x/#1","text":"","title":"1. \u65b0\u7279\u6027"},{"location":"php/features/5.6.x/#11","text":"\u5728\u4e4b\u524d\u7684 PHP \u7248\u672c\u4e2d\uff0c \u5fc5\u987b\u4f7f\u7528\u9759\u6001\u503c\u6765\u5b9a\u4e49\u5e38\u91cf\uff0c\u58f0\u660e\u5c5e\u6027\u4ee5\u53ca\u6307\u5b9a\u51fd\u6570\u53c2\u6570\u9ed8\u8ba4\u503c\u3002 \u73b0\u5728\u4f60\u53ef\u4ee5\u4f7f\u7528\u5305\u62ec\u6570\u503c\u3001\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u4ee5\u53ca\u5176\u4ed6\u5e38\u91cf\u5728\u5185\u7684\u6570\u503c\u8868\u8fbe\u5f0f\u6765 \u5b9a\u4e49\u5e38\u91cf\u3001\u58f0\u660e\u5c5e\u6027\u4ee5\u53ca\u8bbe\u7f6e\u51fd\u6570\u53c2\u6570\u9ed8\u8ba4\u503c\u3002 <?php const ONE = 1 ; const TWO = ONE * 2 ; class C { const THREE = TWO + 1 ; const ONE_THIRD = ONE / self :: THREE ; const SENTENCE = 'The value of THREE is ' . self :: THREE ; public function f ( $a = ONE + self :: THREE ) { return $a ; } } echo ( new C ) -> f () . \" \\n \" ; echo C :: SENTENCE ; ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a 4 The value of THREE is 3 \u73b0\u5728\u53ef\u4ee5\u901a\u8fc7 const \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u7c7b\u578b\u4e3a array \u7684\u5e38\u91cf\u3002 <?php const ARR = [ 'a' , 'b' ]; echo ARR [ 0 ]; ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a a","title":"1.1. \u4f7f\u7528\u8868\u8fbe\u5f0f\u5b9a\u4e49\u5e38\u91cf"},{"location":"php/features/5.6.x/#12","text":"\u73b0\u5728\u53ef\u4ee5\u4e0d\u4f9d\u8d56 func get args() \uff0c \u4f7f\u7528 ... \u8fd0\u7b97\u7b26 \u6765\u5b9e\u73b0 \u53d8\u957f\u53c2\u6570\u51fd\u6570 \u3002 <?php function f ( $req , $opt = null , ... $params ) { // $params \u662f\u4e00\u4e2a\u5305\u542b\u4e86\u5269\u4f59\u53c2\u6570\u7684\u6570\u7ec4 printf ( '$req: %d; $opt: %d; number of params: %d' . \" \\n \" , $req , $opt , count ( $params )); } f ( 1 ); f ( 1 , 2 ); f ( 1 , 2 , 3 ); f ( 1 , 2 , 3 , 4 ); f ( 1 , 2 , 3 , 4 , 5 ); ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a $req: 1; $opt: 0; number of params: 0 $req: 1; $opt: 2; number of params: 0 $req: 1; $opt: 2; number of params: 1 $req: 1; $opt: 2; number of params: 2 $req: 1; $opt: 2; number of params: 3","title":"1.2. \u4f7f\u7528 ... \u8fd0\u7b97\u7b26\u5b9a\u4e49\u53d8\u957f\u53c2\u6570\u51fd\u6570"},{"location":"php/features/5.6.x/#13","text":"\u5728\u8c03\u7528\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4f7f\u7528 ... \u8fd0\u7b97\u7b26\uff0c \u5c06 \u6570\u7ec4 \u548c \u53ef\u904d\u5386 \u5bf9\u8c61\u5c55\u5f00\u4e3a\u51fd\u6570\u53c2\u6570\u3002 \u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\uff0c\u6bd4\u5982 Ruby \u4e2d\uff0c\u8fd9\u88ab\u79f0\u4e3a\u8fde\u63a5\u8fd0\u7b97\u7b26\u3002 <?php function add ( $a , $b , $c ) { return $a + $b + $c ; } $operators = [ 2 , 3 ]; echo add ( 1 , ... $operators ); ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a 6","title":"1.3. \u4f7f\u7528 ... \u8fd0\u7b97\u7b26\u8fdb\u884c\u53c2\u6570\u5c55\u5f00"},{"location":"php/features/5.6.x/#14","text":"\u52a0\u5165\u53f3\u8fde\u63a5\u8fd0\u7b97\u7b26 ** \u6765\u8fdb\u884c\u5e42\u8fd0\u7b97\u3002 \u540c\u65f6\u8fd8\u652f\u6301\u7b80\u5199\u7684 **= \u8fd0\u7b97\u7b26\uff0c\u8868\u793a\u8fdb\u884c\u5e42\u8fd0\u7b97\u5e76\u8d4b\u503c\u3002 <?php printf ( \"2 ** 3 == %d \\n \" , 2 ** 3 ); printf ( \"2 ** 3 ** 2 == %d \\n \" , 2 ** 3 ** 2 ); $a = 2 ; $a **= 3 ; printf ( \"a == %d \\n \" , $a ); ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a 2 ** 3 == 8 2 ** 3 ** 2 == 512 a == 8","title":"1.4. \u4f7f\u7528 ** \u8fdb\u884c\u5e42\u8fd0\u7b97"},{"location":"php/features/5.6.x/#15-use-function-use-const","text":"use \u8fd0\u7b97\u7b26 \u88ab\u8fdb\u884c\u4e86\u6269\u5c55\u4ee5\u652f\u6301\u5728\u7c7b\u4e2d\u5bfc\u5165\u5916\u90e8\u7684\u51fd\u6570\u548c\u5e38\u91cf\u3002 \u5bf9\u5e94\u7684\u7ed3\u6784\u4e3a use function \u548c use const \u3002 <?php namespace Name\\Space { const FOO = 42 ; function f () { echo __FUNCTION__ . \" \\n \" ; } } namespace { use const Name\\Space\\FOO ; use function Name\\Space\\f ; echo FOO . \" \\n \" ; f (); } ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a 42 Name\\Space\\f","title":"1.5. use function \u4ee5\u53ca use const"},{"location":"php/features/5.6.x/#16-phpinput","text":"\u53ea\u8981\u4f60\u9700\u8981\uff0c\u4f60\u53ef\u4ee5\u591a\u6b21\u6253\u5f00\u5e76\u8bfb\u53d6 php://input \u3002 \u540c\u65f6\uff0c\u8fd9\u4e2a\u7279\u6027\u4f7f\u5f97\u5728\u5904\u7406 POST \u7684\u6570\u636e\u7684\u65f6\u5019\uff0c \u53ef\u4ee5\u660e\u663e\u964d\u4f4e\u5bf9\u4e8e\u5185\u5b58\u7684\u9700\u6c42\u91cf\u3002","title":"1.6. php://input \u662f\u53ef\u91cd\u7528\u7684\u4e86"},{"location":"php/features/5.6.x/#17","text":"\u73b0\u5728\u53ef\u4ee5\u652f\u6301\u5927\u4e8e 2GB \u7684\u6587\u4ef6\u4e0a\u4f20\u3002","title":"1.7. \u5927\u6587\u4ef6\u4e0a\u4f20"},{"location":"php/features/5.6.x/#18-gmp","text":"GMP \u652f\u6301\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c \u5e76\u4e14\u9020\u578b\u6210\u6570\u503c\u7c7b\u578b\u3002 \u8fd9\u4f7f\u5f97\u4f7f\u7528 GMP \u7684\u4ee3\u7801\u66f4\u52a0\u76f4\u89c2\u3002 <?php $a = gmp_init ( 42 ); $b = gmp_init ( 17 ); if ( version_compare ( PHP_VERSION , '5.6' , '<' )) { echo gmp_intval ( gmp_add ( $a , $b )), PHP_EOL ; echo gmp_intval ( gmp_add ( $a , 17 )), PHP_EOL ; echo gmp_intval ( gmp_add ( 42 , $b )), PHP_EOL ; } else { echo $a + $b , PHP_EOL ; echo $a + 17 , PHP_EOL ; echo 42 + $b , PHP_EOL ; } ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a 59 59 59","title":"1.8. GMP \u652f\u6301\u8fd0\u7b97\u7b26\u91cd\u8f7d"},{"location":"php/features/5.6.x/#19-hash_equals","text":"\u52a0\u5165 hash_equals() \u51fd\u6570\uff0c \u4ee5\u6052\u5b9a\u7684\u65f6\u95f4\u6d88\u8017\u6765\u8fdb\u884c\u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c \u4ee5\u907f\u514d\u65f6\u5e8f\u653b\u51fb\u3002 \u6bd4\u5982\u5f53\u6bd4\u8f83 crypt() \u5bc6\u7801\u6563\u5217\u503c\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u6b64\u51fd\u6570\u3002 \uff08\u5047\u5b9a\u4f60\u4e0d\u80fd\u4f7f\u7528 password_hash() \u548c password_verify() \uff0c \u8fd9\u4e24\u4e2a\u51fd\u6570\u4e5f\u53ef\u4ee5\u62b5\u6297\u65f6\u5e8f\u653b\u51fb\uff09 <?php $expected = crypt ( '12345' , '$2a$07$usesomesillystringforsalt$' ); $correct = crypt ( '12345' , '$2a$07$usesomesillystringforsalt$' ); $incorrect = crypt ( '1234' , '$2a$07$usesomesillystringforsalt$' ); var_dump ( hash_equals ( $expected , $correct )); var_dump ( hash_equals ( $expected , $incorrect )); ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a bool(true) bool(false)","title":"1.9. \u4f7f\u7528 hash_equals() \u6bd4\u8f83\u5b57\u7b26\u4e32\u907f\u514d\u65f6\u5e8f\u653b\u51fb"},{"location":"php/features/5.6.x/#110-__debuginfo","text":"\u52a0\u5165 __debugInfo() \uff0c \u5f53\u4f7f\u7528 var_dump() \u8f93\u51fa\u5bf9\u8c61\u7684\u65f6\u5019\uff0c \u53ef\u4ee5\u7528\u6765\u63a7\u5236\u8981\u8f93\u51fa\u7684\u5c5e\u6027\u548c\u503c\u3002 <?php class C { private $prop ; public function __construct ( $val ) { $this -> prop = $val ; } public function __debugInfo () { return [ 'propSquared' => $this -> prop ** 2 , ]; } } var_dump ( new C ( 42 )); ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a object(C)#1 (1) { [\"propSquared\"]=> int(1764) } \u539f\u6587 \u65b0\u7279\u6027\uff1a http://php.net/manual/zh/migration56.new-features.php","title":"1.10. __debugInfo()"},{"location":"php/features/7.0.x/","text":"PHP 7.0.x # \u8bf4\u660e \u672c\u6587\u90e8\u5206\u5185\u5bb9\u6839\u636e\u5b98\u7f51\u8fdb\u884c\u5220\u51cf\uff0c\u4ec5\u6574\u7406\u5e38\u7528\u7279\u6027\u3002 1. \u65b0\u7279\u6027 # 1.1. \u6807\u91cf\u7c7b\u578b\u58f0\u660e # \u6807\u91cf \u7c7b\u578b\u58f0\u660e \u6709\u4e24\u79cd\u6a21\u5f0f: \u5f3a\u5236 (\u9ed8\u8ba4) \u548c \u4e25\u683c\u6a21\u5f0f\u3002 \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u4e0b\u5217\u7c7b\u578b\u53c2\u6570\uff08\u65e0\u8bba\u7528\u5f3a\u5236\u6a21\u5f0f\u8fd8\u662f\u4e25\u683c\u6a21\u5f0f\uff09\uff1a \u5b57\u7b26\u4e32( string ), \u6574\u6570 (int), \u6d6e\u70b9\u6570 ( float ), \u4ee5\u53ca\u5e03\u5c14\u503c (bool)\u3002\u5b83\u4eec\u6269\u5145\u4e86PHP5\u4e2d\u5f15\u5165\u7684\u5176\u4ed6\u7c7b\u578b\uff1a\u7c7b\u540d\uff0c\u63a5\u53e3\uff0c\u6570\u7ec4\u548c \u56de\u8c03\u7c7b\u578b\u3002 <?php // Coercive mode function sumOfInts ( int ... $ints ) { return array_sum ( $ints ); } var_dump ( sumOfInts ( 2 , '3' , 4.1 )); \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a int(9) \u8981\u4f7f\u7528\u4e25\u683c\u6a21\u5f0f\uff0c\u4e00\u4e2a declare \u58f0\u660e\u6307\u4ee4\u5fc5\u987b\u653e\u5728\u6587\u4ef6\u7684\u9876\u90e8\u3002\u8fd9\u610f\u5473\u7740\u4e25\u683c\u58f0\u660e\u6807\u91cf\u662f\u57fa\u4e8e\u6587\u4ef6\u53ef\u914d\u7684\u3002 \u8fd9\u4e2a\u6307\u4ee4\u4e0d\u4ec5\u5f71\u54cd\u53c2\u6570\u7684\u7c7b\u578b\u58f0\u660e\uff0c\u4e5f\u5f71\u54cd\u5230\u51fd\u6570\u7684\u8fd4\u56de\u503c\u58f0\u660e\uff08\u53c2\u89c1 \u8fd4\u56de\u503c\u7c7b\u578b\u58f0\u660e , \u5185\u7f6e\u7684PHP\u51fd\u6570\u4ee5\u53ca\u6269\u5c55\u4e2d\u52a0\u8f7d\u7684PHP\u51fd\u6570\uff09 \u5b8c\u6574\u7684\u6807\u91cf\u7c7b\u578b\u58f0\u660e\u6587\u6863\u548c\u793a\u4f8b\u53c2\u89c1 \u7c7b\u578b\u58f0\u660e \u7ae0\u8282\u3002 1.2. \u8fd4\u56de\u503c\u7c7b\u578b\u58f0\u660e # PHP 7 \u589e\u52a0\u4e86\u5bf9 \u8fd4\u56de\u7c7b\u578b\u58f0\u660e \u7684\u652f\u6301\u3002 \u7c7b\u4f3c\u4e8e \u53c2\u6570\u7c7b\u578b\u58f0\u660e \uff0c\u8fd4\u56de\u7c7b\u578b\u58f0\u660e\u6307\u660e\u4e86\u51fd\u6570\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u3002\u53ef\u7528\u7684 \u7c7b\u578b \u4e0e\u53c2\u6570\u58f0\u660e\u4e2d\u53ef\u7528\u7684\u7c7b\u578b\u76f8\u540c\u3002 <?php function arraysSum ( array ... $arrays ) : array { return array_map ( function ( array $array ) : int { return array_sum ( $array ); }, $arrays ); } print_r ( arraysSum ([ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ])); \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a Array ( [0] => 6 [1] => 15 [2] => 24 ) \u5b8c\u6574\u7684\u6807\u91cf\u7c7b\u578b\u58f0\u660e\u6587\u6863\u548c\u793a\u4f8b\u53ef\u53c2\u89c1 \u8fd4\u56de\u503c\u7c7b\u578b\u58f0\u660e . 1.3. null\u5408\u5e76\u8fd0\u7b97\u7b26 # \u7531\u4e8e\u65e5\u5e38\u4f7f\u7528\u4e2d\u5b58\u5728\u5927\u91cf\u540c\u65f6\u4f7f\u7528\u4e09\u5143\u8868\u8fbe\u5f0f\u548c isset() \u7684\u60c5\u51b5\uff0c \u6211\u4eec\u6dfb\u52a0\u4e86 null \u5408\u5e76\u8fd0\u7b97\u7b26 ( ?? ) \u8fd9\u4e2a\u8bed\u6cd5\u7cd6\u3002\u5982\u679c\u53d8\u91cf\u5b58\u5728\u4e14\u503c\u4e0d\u4e3a NULL \uff0c \u5b83\u5c31\u4f1a\u8fd4\u56de\u81ea\u8eab\u7684\u503c\uff0c\u5426\u5219\u8fd4\u56de\u5b83\u7684\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u3002 <?php // Fetches the value of $_GET['user'] and returns 'nobody' // if it does not exist. $username = $_GET [ 'user' ] ?? 'nobody' ; // This is equivalent to: $username = isset ( $_GET [ 'user' ]) ? $_GET [ 'user' ] : 'nobody' ; // Coalesces can be chained: this will return the first // defined value out of $_GET['user'], $_POST['user'], and // 'nobody'. $username = $_GET [ 'user' ] ?? $_POST [ 'user' ] ?? 'nobody' ; ?> 1.4. \u592a\u7a7a\u8239\u64cd\u4f5c\u7b26\uff08\u7ec4\u5408\u6bd4\u8f83\u7b26\uff09 # \u592a\u7a7a\u8239\u64cd\u4f5c\u7b26\u7528\u4e8e\u6bd4\u8f83\u4e24\u4e2a\u8868\u8fbe\u5f0f\u3002\u5f53 $a \u5c0f\u4e8e\u3001\u7b49\u4e8e\u6216\u5927\u4e8e $b \u65f6\u5b83\u5206\u522b\u8fd4\u56de-1\u30010\u62161\u3002 \u6bd4\u8f83\u7684\u539f\u5219\u662f\u6cbf\u7528 PHP \u7684 \u5e38\u89c4\u6bd4\u8f83\u89c4\u5219 \u8fdb\u884c\u7684\u3002 <?php // \u6574\u6570 echo 1 <=> 1 ; // 0 echo 1 <=> 2 ; // -1 echo 2 <=> 1 ; // 1 // \u6d6e\u70b9\u6570 echo 1.5 <=> 1.5 ; // 0 echo 1.5 <=> 2.5 ; // -1 echo 2.5 <=> 1.5 ; // 1 // \u5b57\u7b26\u4e32 echo \"a\" <=> \"a\" ; // 0 echo \"a\" <=> \"b\" ; // -1 echo \"b\" <=> \"a\" ; // 1 ?> 1.5. \u901a\u8fc7 define() \u5b9a\u4e49\u5e38\u91cf\u6570\u7ec4 # Array \u7c7b\u578b\u7684\u5e38\u91cf\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7 define() \u6765\u5b9a\u4e49\u3002\u5728 PHP5.6 \u4e2d\u4ec5\u80fd\u901a\u8fc7 const \u5b9a\u4e49\u3002 <?php define ( 'ANIMALS' , [ 'dog' , 'cat' , 'bird' ]); echo ANIMALS [ 1 ]; // \u8f93\u51fa \"cat\" ?> 1.6. \u533f\u540d\u7c7b # \u73b0\u5728\u652f\u6301\u901a\u8fc7 new class \u6765\u5b9e\u4f8b\u5316\u4e00\u4e2a\u533f\u540d\u7c7b\uff0c\u8fd9\u53ef\u4ee5\u7528\u6765\u66ff\u4ee3\u4e00\u4e9b\u201c\u7528\u540e\u5373\u711a\u201d\u7684\u5b8c\u6574\u7c7b\u5b9a\u4e49\u3002 <?php interface Logger { public function log ( string $msg ); } class Application { private $logger ; public function getLogger () : Logger { return $this -> logger ; } public function setLogger ( Logger $logger ) { $this -> logger = $logger ; } } $app = new Application ; $app -> setLogger ( new class implements Logger { public function log ( string $msg ) { echo $msg ; } }); var_dump ( $app -> getLogger ()); ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a object(class@anonymous)#2 (0) { } \u8be6\u7ec6\u6587\u6863\u53ef\u4ee5\u53c2\u8003 \u533f\u540d\u7c7b . 1.7. Closure::call() # Closure::call() \u73b0\u5728\u6709\u7740\u66f4\u597d\u7684\u6027\u80fd\uff0c\u7b80\u77ed\u5e72\u7ec3\u7684\u6682\u65f6\u7ed1\u5b9a\u4e00\u4e2a\u65b9\u6cd5\u5230\u5bf9\u8c61\u4e0a\u95ed\u5305\u5e76\u8c03\u7528\u5b83\u3002 <?php class A { private $x = 1 ;} // PHP 7 \u4e4b\u524d\u7248\u672c\u7684\u4ee3\u7801 $getXCB = function () { return $this -> x ;}; $getX = $getXCB -> bindTo ( new A , 'A' ); // \u4e2d\u95f4\u5c42\u95ed\u5305 echo $getX (); // PHP 7+ \u53ca\u66f4\u9ad8\u7248\u672c\u7684\u4ee3\u7801 $getX = function () { return $this -> x ;}; echo $getX -> call ( new A ); \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a 1 1 1.8. \u4e3a unserialize() \u63d0\u4f9b\u8fc7\u6ee4 # \u8fd9\u4e2a\u7279\u6027\u65e8\u5728\u63d0\u4f9b\u66f4\u5b89\u5168\u7684\u65b9\u5f0f\u89e3\u5305\u4e0d\u53ef\u9760\u7684\u6570\u636e\u3002\u5b83\u901a\u8fc7\u767d\u540d\u5355\u7684\u65b9\u5f0f\u6765\u9632\u6b62\u6f5c\u5728\u7684\u4ee3\u7801\u6ce8\u5165\u3002 <?php // \u5c06\u6240\u6709\u7684\u5bf9\u8c61\u90fd\u8f6c\u6362\u4e3a __PHP_Incomplete_Class \u5bf9\u8c61 $data = unserialize ( $foo , [ \"allowed_classes\" => false ]); // \u5c06\u9664 MyClass \u548c MyClass2 \u4e4b\u5916\u7684\u6240\u6709\u5bf9\u8c61\u90fd\u8f6c\u6362\u4e3a __PHP_Incomplete_Class \u5bf9\u8c61 $data = unserialize ( $foo , [ \"allowed_classes\" => [ \"MyClass\" , \"MyClass2\" ]); // \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6240\u6709\u7684\u7c7b\u90fd\u662f\u53ef\u63a5\u53d7\u7684\uff0c\u7b49\u540c\u4e8e\u7701\u7565\u7b2c\u4e8c\u4e2a\u53c2\u6570 $data = unserialize ( $foo , [ \"allowed_classes\" => true ]); 1.9. Group use declarations # \u4ece\u540c\u4e00 namespace \u5bfc\u5165\u7684\u7c7b\u3001\u51fd\u6570\u548c\u5e38\u91cf\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u5355\u4e2a use \u8bed\u53e5 \u4e00\u6b21\u6027\u5bfc\u5165\u4e86\u3002 <?php // PHP 7 \u4e4b\u524d\u7684\u4ee3\u7801 use some\\namespace\\ClassA ; use some\\namespace\\ClassB ; use some\\namespace\\ClassC as C ; use function some\\namespace\\fn_a ; use function some\\namespace\\fn_b ; use function some\\namespace\\fn_c ; use const some\\namespace\\ConstA ; use const some\\namespace\\ConstB ; use const some\\namespace\\ConstC ; // PHP 7+ \u53ca\u66f4\u9ad8\u7248\u672c\u7684\u4ee3\u7801 use some\\namespace\\ { ClassA , ClassB , ClassC as C }; use function some\\namespace\\ { fn_a , fn_b , fn_c }; use const some\\namespace\\ { ConstA , ConstB , ConstC }; ?> 1.10. \u6574\u6570\u9664\u6cd5\u51fd\u6570 intdiv() # \u65b0\u52a0\u7684\u51fd\u6570 intdiv() \u7528\u6765\u8fdb\u884c \u6574\u6570\u7684\u9664\u6cd5\u8fd0\u7b97\u3002 <?php var_dump ( intdiv ( 10 , 3 )); ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a int(3) 1.11. \u4f1a\u8bdd\u9009\u9879 # session_start() \u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a array \u4f5c\u4e3a\u53c2\u6570\uff0c \u7528\u6765\u8986\u76d6 php.ini \u6587\u4ef6\u4e2d\u8bbe\u7f6e\u7684 \u4f1a\u8bdd\u914d\u7f6e\u9009\u9879 \u3002 \u5728\u8c03\u7528 session_start() \u7684\u65f6\u5019\uff0c \u4f20\u5165\u7684\u9009\u9879\u53c2\u6570\u4e2d\u4e5f\u652f\u6301 session.lazy_write \u884c\u4e3a\uff0c \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd9\u4e2a\u914d\u7f6e\u9879\u662f\u6253\u5f00\u7684\u3002\u5b83\u7684\u4f5c\u7528\u662f\u63a7\u5236 PHP \u53ea\u6709\u5728\u4f1a\u8bdd\u4e2d\u7684\u6570\u636e\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\u624d \u5199\u5165\u4f1a\u8bdd\u5b58\u50a8\u6587\u4ef6\uff0c\u5982\u679c\u4f1a\u8bdd\u4e2d\u7684\u6570\u636e\u6ca1\u6709\u53d1\u751f\u6539\u53d8\uff0c\u90a3\u4e48 PHP \u4f1a\u5728\u8bfb\u53d6\u5b8c\u4f1a\u8bdd\u6570\u636e\u4e4b\u540e\uff0c \u7acb\u5373\u5173\u95ed\u4f1a\u8bdd\u5b58\u50a8\u6587\u4ef6\uff0c\u4e0d\u505a\u4efb\u4f55\u4fee\u6539\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e read_and_close \u6765\u5b9e\u73b0\u3002 \u4f8b\u5982\uff0c\u4e0b\u5217\u4ee3\u7801\u8bbe\u7f6e session.cache_limiter \u4e3a private \uff0c\u5e76\u4e14\u5728\u8bfb\u53d6\u5b8c\u6bd5\u4f1a\u8bdd\u6570\u636e\u4e4b\u540e\u9a6c\u4e0a\u5173\u95ed\u4f1a\u8bdd\u5b58\u50a8\u6587\u4ef6\u3002 <?php session_start ([ 'cache_limiter' => 'private' , 'read_and_close' => true , ]); ?> 1.12. preg_replace_callback_array() # \u5728 PHP 7 \u4e4b\u524d\uff0c\u5f53\u4f7f\u7528 preg_replace_callback() \u51fd\u6570\u7684\u65f6\u5019\uff0c \u7531\u4e8e\u9488\u5bf9\u6bcf\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u90fd\u8981\u6267\u884c\u56de\u8c03\u51fd\u6570\uff0c\u53ef\u80fd\u5bfc\u81f4\u8fc7\u591a\u7684\u5206\u652f\u4ee3\u7801\u3002 \u800c\u4f7f\u7528\u65b0\u52a0\u7684 preg_replace_callback_array() \u51fd\u6570\uff0c \u53ef\u4ee5\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\u3002 \u73b0\u5728\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5173\u8054\u6570\u7ec4\u6765\u5bf9\u6bcf\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u6ce8\u518c\u56de\u8c03\u51fd\u6570\uff0c \u6b63\u5219\u8868\u8fbe\u5f0f\u672c\u8eab\u4f5c\u4e3a\u5173\u8054\u6570\u7ec4\u7684\u952e\uff0c \u800c\u5bf9\u5e94\u7684\u56de\u8c03\u51fd\u6570\u5c31\u662f\u5173\u8054\u6570\u7ec4\u7684\u503c\u3002 1.13. CSPRNG Functions # \u65b0\u52a0\u5165\u4e24\u4e2a\u8de8\u5e73\u53f0\u7684\u51fd\u6570\uff1a random_bytes() \u548c random_int() \u7528\u6765\u4ea7\u751f\u9ad8\u5b89\u5168\u7ea7\u522b\u7684\u968f\u673a\u5b57\u7b26\u4e32\u548c\u968f\u673a\u6574\u6570\u3002 1.14. \u53ef\u4ee5\u4f7f\u7528 list() \u51fd\u6570\u6765\u5c55\u5f00\u5b9e\u73b0\u4e86 ArrayAccess \u63a5\u53e3\u7684\u5bf9\u8c61 # \u5728\u4e4b\u524d\u7248\u672c\u4e2d\uff0c list() \u51fd\u6570\u4e0d\u80fd\u4fdd\u8bc1 \u6b63\u786e\u7684\u5c55\u5f00\u5b9e\u73b0\u4e86 ArrayAccess \u63a5\u53e3\u7684\u5bf9\u8c61\uff0c \u73b0\u5728\u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf\u88ab\u4fee\u590d\u3002 1.15. \u5176\u4ed6\u7279\u6027 # \u5141\u8bb8\u5728\u514b\u9686\u8868\u8fbe\u5f0f\u4e0a\u8bbf\u95ee\u5bf9\u8c61\u6210\u5458\uff0c\u4f8b\u5982\uff1a (clone $foo)->bar() \u3002 2. \u5f03\u7528\u7684\u529f\u80fd # 2.1. PHP4 \u98ce\u683c\u7684\u6784\u9020\u51fd\u6570 # PHP4 \u98ce\u683c\u7684\u6784\u9020\u51fd\u6570\uff08\u65b9\u6cd5\u540d\u548c\u7c7b\u540d\u4e00\u6837\uff09\u5c06\u88ab\u5f03\u7528\uff0c\u5e76\u5728\u5c06\u6765\u79fb\u9664\u3002 \u5982\u679c\u5728\u7c7b\u4e2d\u4ec5\u4f7f\u7528\u4e86 PHP4 \u98ce\u683c\u7684\u6784\u9020\u51fd\u6570\uff0cPHP7 \u4f1a\u4ea7\u751f E_DEPRECATED \u8b66\u544a\u3002 \u5982\u679c\u8fd8\u5b9a\u4e49\u4e86 __construct() \u65b9\u6cd5\u5219\u4e0d\u53d7\u5f71\u54cd\u3002 <?php class foo { function foo () { echo 'I am the constructor' ; } } ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a Deprecated: Methods with the same name as their class will not be constructors in a future version of PHP; foo has a deprecated constructor in example.php on line 3 2.2. \u9759\u6001\u8c03\u7528\u975e\u9759\u6001\u7684\u65b9\u6cd5 # \u5e9f\u5f03\u4e86 \u9759\u6001\uff08Static\uff09 \u8c03\u7528\u672a\u58f0\u660e\u6210 static \u7684\u65b9\u6cd5\uff0c\u672a\u6765\u53ef\u80fd\u4f1a\u5f7b\u5e95\u79fb\u9664\u8be5\u529f\u80fd\u3002 <?php class foo { function bar () { echo 'I am not static!' ; } } foo :: bar (); ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a Deprecated: Non-static method foo::bar() should not be called statically in - on line 8 I am not static! 2.3. password_hash() \u76d0\u503c\u9009\u9879 # \u5e9f\u5f03\u4e86 password_hash() \u51fd\u6570\u4e2d\u7684\u76d0\u503c\u9009\u9879\uff0c\u963b\u6b62\u5f00\u53d1\u8005\u751f\u6210\u81ea\u5df1\u7684\u76d0\u503c\uff08\u901a\u5e38\u66f4\u4e0d\u5b89\u5168\uff09\u3002 \u5f00\u53d1\u8005\u4e0d\u4f20\u8be5\u503c\u65f6\uff0c\u8be5\u51fd\u6570\u81ea\u5df1\u4f1a\u751f\u6210\u5bc6\u7801\u5b66\u5b89\u5168\u7684\u76d0\u503c\u3002\u56e0\u6b64\u518d\u65e0\u5fc5\u8981\u4f20\u5165\u81ea\u5df1\u81ea\u5b9a\u4e49\u7684\u76d0\u503c\u3002 \u539f\u6587 \u65b0\u7279\u6027\uff1a http://php.net/manual/zh/migration70.new-features.php \u5f03\u7528\u7684\u529f\u80fd\uff1a http://php.net/manual/zh/migration70.deprecated.php","title":"PHP 7.0.x"},{"location":"php/features/7.0.x/#php-70x","text":"\u8bf4\u660e \u672c\u6587\u90e8\u5206\u5185\u5bb9\u6839\u636e\u5b98\u7f51\u8fdb\u884c\u5220\u51cf\uff0c\u4ec5\u6574\u7406\u5e38\u7528\u7279\u6027\u3002","title":"PHP 7.0.x"},{"location":"php/features/7.0.x/#1","text":"","title":"1. \u65b0\u7279\u6027"},{"location":"php/features/7.0.x/#11","text":"\u6807\u91cf \u7c7b\u578b\u58f0\u660e \u6709\u4e24\u79cd\u6a21\u5f0f: \u5f3a\u5236 (\u9ed8\u8ba4) \u548c \u4e25\u683c\u6a21\u5f0f\u3002 \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u4e0b\u5217\u7c7b\u578b\u53c2\u6570\uff08\u65e0\u8bba\u7528\u5f3a\u5236\u6a21\u5f0f\u8fd8\u662f\u4e25\u683c\u6a21\u5f0f\uff09\uff1a \u5b57\u7b26\u4e32( string ), \u6574\u6570 (int), \u6d6e\u70b9\u6570 ( float ), \u4ee5\u53ca\u5e03\u5c14\u503c (bool)\u3002\u5b83\u4eec\u6269\u5145\u4e86PHP5\u4e2d\u5f15\u5165\u7684\u5176\u4ed6\u7c7b\u578b\uff1a\u7c7b\u540d\uff0c\u63a5\u53e3\uff0c\u6570\u7ec4\u548c \u56de\u8c03\u7c7b\u578b\u3002 <?php // Coercive mode function sumOfInts ( int ... $ints ) { return array_sum ( $ints ); } var_dump ( sumOfInts ( 2 , '3' , 4.1 )); \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a int(9) \u8981\u4f7f\u7528\u4e25\u683c\u6a21\u5f0f\uff0c\u4e00\u4e2a declare \u58f0\u660e\u6307\u4ee4\u5fc5\u987b\u653e\u5728\u6587\u4ef6\u7684\u9876\u90e8\u3002\u8fd9\u610f\u5473\u7740\u4e25\u683c\u58f0\u660e\u6807\u91cf\u662f\u57fa\u4e8e\u6587\u4ef6\u53ef\u914d\u7684\u3002 \u8fd9\u4e2a\u6307\u4ee4\u4e0d\u4ec5\u5f71\u54cd\u53c2\u6570\u7684\u7c7b\u578b\u58f0\u660e\uff0c\u4e5f\u5f71\u54cd\u5230\u51fd\u6570\u7684\u8fd4\u56de\u503c\u58f0\u660e\uff08\u53c2\u89c1 \u8fd4\u56de\u503c\u7c7b\u578b\u58f0\u660e , \u5185\u7f6e\u7684PHP\u51fd\u6570\u4ee5\u53ca\u6269\u5c55\u4e2d\u52a0\u8f7d\u7684PHP\u51fd\u6570\uff09 \u5b8c\u6574\u7684\u6807\u91cf\u7c7b\u578b\u58f0\u660e\u6587\u6863\u548c\u793a\u4f8b\u53c2\u89c1 \u7c7b\u578b\u58f0\u660e \u7ae0\u8282\u3002","title":"1.1. \u6807\u91cf\u7c7b\u578b\u58f0\u660e"},{"location":"php/features/7.0.x/#12","text":"PHP 7 \u589e\u52a0\u4e86\u5bf9 \u8fd4\u56de\u7c7b\u578b\u58f0\u660e \u7684\u652f\u6301\u3002 \u7c7b\u4f3c\u4e8e \u53c2\u6570\u7c7b\u578b\u58f0\u660e \uff0c\u8fd4\u56de\u7c7b\u578b\u58f0\u660e\u6307\u660e\u4e86\u51fd\u6570\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u3002\u53ef\u7528\u7684 \u7c7b\u578b \u4e0e\u53c2\u6570\u58f0\u660e\u4e2d\u53ef\u7528\u7684\u7c7b\u578b\u76f8\u540c\u3002 <?php function arraysSum ( array ... $arrays ) : array { return array_map ( function ( array $array ) : int { return array_sum ( $array ); }, $arrays ); } print_r ( arraysSum ([ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ])); \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a Array ( [0] => 6 [1] => 15 [2] => 24 ) \u5b8c\u6574\u7684\u6807\u91cf\u7c7b\u578b\u58f0\u660e\u6587\u6863\u548c\u793a\u4f8b\u53ef\u53c2\u89c1 \u8fd4\u56de\u503c\u7c7b\u578b\u58f0\u660e .","title":"1.2. \u8fd4\u56de\u503c\u7c7b\u578b\u58f0\u660e"},{"location":"php/features/7.0.x/#13-null","text":"\u7531\u4e8e\u65e5\u5e38\u4f7f\u7528\u4e2d\u5b58\u5728\u5927\u91cf\u540c\u65f6\u4f7f\u7528\u4e09\u5143\u8868\u8fbe\u5f0f\u548c isset() \u7684\u60c5\u51b5\uff0c \u6211\u4eec\u6dfb\u52a0\u4e86 null \u5408\u5e76\u8fd0\u7b97\u7b26 ( ?? ) \u8fd9\u4e2a\u8bed\u6cd5\u7cd6\u3002\u5982\u679c\u53d8\u91cf\u5b58\u5728\u4e14\u503c\u4e0d\u4e3a NULL \uff0c \u5b83\u5c31\u4f1a\u8fd4\u56de\u81ea\u8eab\u7684\u503c\uff0c\u5426\u5219\u8fd4\u56de\u5b83\u7684\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u3002 <?php // Fetches the value of $_GET['user'] and returns 'nobody' // if it does not exist. $username = $_GET [ 'user' ] ?? 'nobody' ; // This is equivalent to: $username = isset ( $_GET [ 'user' ]) ? $_GET [ 'user' ] : 'nobody' ; // Coalesces can be chained: this will return the first // defined value out of $_GET['user'], $_POST['user'], and // 'nobody'. $username = $_GET [ 'user' ] ?? $_POST [ 'user' ] ?? 'nobody' ; ?>","title":"1.3. null\u5408\u5e76\u8fd0\u7b97\u7b26"},{"location":"php/features/7.0.x/#14","text":"\u592a\u7a7a\u8239\u64cd\u4f5c\u7b26\u7528\u4e8e\u6bd4\u8f83\u4e24\u4e2a\u8868\u8fbe\u5f0f\u3002\u5f53 $a \u5c0f\u4e8e\u3001\u7b49\u4e8e\u6216\u5927\u4e8e $b \u65f6\u5b83\u5206\u522b\u8fd4\u56de-1\u30010\u62161\u3002 \u6bd4\u8f83\u7684\u539f\u5219\u662f\u6cbf\u7528 PHP \u7684 \u5e38\u89c4\u6bd4\u8f83\u89c4\u5219 \u8fdb\u884c\u7684\u3002 <?php // \u6574\u6570 echo 1 <=> 1 ; // 0 echo 1 <=> 2 ; // -1 echo 2 <=> 1 ; // 1 // \u6d6e\u70b9\u6570 echo 1.5 <=> 1.5 ; // 0 echo 1.5 <=> 2.5 ; // -1 echo 2.5 <=> 1.5 ; // 1 // \u5b57\u7b26\u4e32 echo \"a\" <=> \"a\" ; // 0 echo \"a\" <=> \"b\" ; // -1 echo \"b\" <=> \"a\" ; // 1 ?>","title":"1.4. \u592a\u7a7a\u8239\u64cd\u4f5c\u7b26\uff08\u7ec4\u5408\u6bd4\u8f83\u7b26\uff09"},{"location":"php/features/7.0.x/#15-define","text":"Array \u7c7b\u578b\u7684\u5e38\u91cf\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7 define() \u6765\u5b9a\u4e49\u3002\u5728 PHP5.6 \u4e2d\u4ec5\u80fd\u901a\u8fc7 const \u5b9a\u4e49\u3002 <?php define ( 'ANIMALS' , [ 'dog' , 'cat' , 'bird' ]); echo ANIMALS [ 1 ]; // \u8f93\u51fa \"cat\" ?>","title":"1.5. \u901a\u8fc7 define() \u5b9a\u4e49\u5e38\u91cf\u6570\u7ec4"},{"location":"php/features/7.0.x/#16","text":"\u73b0\u5728\u652f\u6301\u901a\u8fc7 new class \u6765\u5b9e\u4f8b\u5316\u4e00\u4e2a\u533f\u540d\u7c7b\uff0c\u8fd9\u53ef\u4ee5\u7528\u6765\u66ff\u4ee3\u4e00\u4e9b\u201c\u7528\u540e\u5373\u711a\u201d\u7684\u5b8c\u6574\u7c7b\u5b9a\u4e49\u3002 <?php interface Logger { public function log ( string $msg ); } class Application { private $logger ; public function getLogger () : Logger { return $this -> logger ; } public function setLogger ( Logger $logger ) { $this -> logger = $logger ; } } $app = new Application ; $app -> setLogger ( new class implements Logger { public function log ( string $msg ) { echo $msg ; } }); var_dump ( $app -> getLogger ()); ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a object(class@anonymous)#2 (0) { } \u8be6\u7ec6\u6587\u6863\u53ef\u4ee5\u53c2\u8003 \u533f\u540d\u7c7b .","title":"1.6. \u533f\u540d\u7c7b"},{"location":"php/features/7.0.x/#17-closurecall","text":"Closure::call() \u73b0\u5728\u6709\u7740\u66f4\u597d\u7684\u6027\u80fd\uff0c\u7b80\u77ed\u5e72\u7ec3\u7684\u6682\u65f6\u7ed1\u5b9a\u4e00\u4e2a\u65b9\u6cd5\u5230\u5bf9\u8c61\u4e0a\u95ed\u5305\u5e76\u8c03\u7528\u5b83\u3002 <?php class A { private $x = 1 ;} // PHP 7 \u4e4b\u524d\u7248\u672c\u7684\u4ee3\u7801 $getXCB = function () { return $this -> x ;}; $getX = $getXCB -> bindTo ( new A , 'A' ); // \u4e2d\u95f4\u5c42\u95ed\u5305 echo $getX (); // PHP 7+ \u53ca\u66f4\u9ad8\u7248\u672c\u7684\u4ee3\u7801 $getX = function () { return $this -> x ;}; echo $getX -> call ( new A ); \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a 1 1","title":"1.7. Closure::call()"},{"location":"php/features/7.0.x/#18-unserialize","text":"\u8fd9\u4e2a\u7279\u6027\u65e8\u5728\u63d0\u4f9b\u66f4\u5b89\u5168\u7684\u65b9\u5f0f\u89e3\u5305\u4e0d\u53ef\u9760\u7684\u6570\u636e\u3002\u5b83\u901a\u8fc7\u767d\u540d\u5355\u7684\u65b9\u5f0f\u6765\u9632\u6b62\u6f5c\u5728\u7684\u4ee3\u7801\u6ce8\u5165\u3002 <?php // \u5c06\u6240\u6709\u7684\u5bf9\u8c61\u90fd\u8f6c\u6362\u4e3a __PHP_Incomplete_Class \u5bf9\u8c61 $data = unserialize ( $foo , [ \"allowed_classes\" => false ]); // \u5c06\u9664 MyClass \u548c MyClass2 \u4e4b\u5916\u7684\u6240\u6709\u5bf9\u8c61\u90fd\u8f6c\u6362\u4e3a __PHP_Incomplete_Class \u5bf9\u8c61 $data = unserialize ( $foo , [ \"allowed_classes\" => [ \"MyClass\" , \"MyClass2\" ]); // \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6240\u6709\u7684\u7c7b\u90fd\u662f\u53ef\u63a5\u53d7\u7684\uff0c\u7b49\u540c\u4e8e\u7701\u7565\u7b2c\u4e8c\u4e2a\u53c2\u6570 $data = unserialize ( $foo , [ \"allowed_classes\" => true ]);","title":"1.8. \u4e3a unserialize() \u63d0\u4f9b\u8fc7\u6ee4"},{"location":"php/features/7.0.x/#19-group-use-declarations","text":"\u4ece\u540c\u4e00 namespace \u5bfc\u5165\u7684\u7c7b\u3001\u51fd\u6570\u548c\u5e38\u91cf\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u5355\u4e2a use \u8bed\u53e5 \u4e00\u6b21\u6027\u5bfc\u5165\u4e86\u3002 <?php // PHP 7 \u4e4b\u524d\u7684\u4ee3\u7801 use some\\namespace\\ClassA ; use some\\namespace\\ClassB ; use some\\namespace\\ClassC as C ; use function some\\namespace\\fn_a ; use function some\\namespace\\fn_b ; use function some\\namespace\\fn_c ; use const some\\namespace\\ConstA ; use const some\\namespace\\ConstB ; use const some\\namespace\\ConstC ; // PHP 7+ \u53ca\u66f4\u9ad8\u7248\u672c\u7684\u4ee3\u7801 use some\\namespace\\ { ClassA , ClassB , ClassC as C }; use function some\\namespace\\ { fn_a , fn_b , fn_c }; use const some\\namespace\\ { ConstA , ConstB , ConstC }; ?>","title":"1.9. Group use declarations"},{"location":"php/features/7.0.x/#110-intdiv","text":"\u65b0\u52a0\u7684\u51fd\u6570 intdiv() \u7528\u6765\u8fdb\u884c \u6574\u6570\u7684\u9664\u6cd5\u8fd0\u7b97\u3002 <?php var_dump ( intdiv ( 10 , 3 )); ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a int(3)","title":"1.10. \u6574\u6570\u9664\u6cd5\u51fd\u6570 intdiv()"},{"location":"php/features/7.0.x/#111","text":"session_start() \u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a array \u4f5c\u4e3a\u53c2\u6570\uff0c \u7528\u6765\u8986\u76d6 php.ini \u6587\u4ef6\u4e2d\u8bbe\u7f6e\u7684 \u4f1a\u8bdd\u914d\u7f6e\u9009\u9879 \u3002 \u5728\u8c03\u7528 session_start() \u7684\u65f6\u5019\uff0c \u4f20\u5165\u7684\u9009\u9879\u53c2\u6570\u4e2d\u4e5f\u652f\u6301 session.lazy_write \u884c\u4e3a\uff0c \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd9\u4e2a\u914d\u7f6e\u9879\u662f\u6253\u5f00\u7684\u3002\u5b83\u7684\u4f5c\u7528\u662f\u63a7\u5236 PHP \u53ea\u6709\u5728\u4f1a\u8bdd\u4e2d\u7684\u6570\u636e\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\u624d \u5199\u5165\u4f1a\u8bdd\u5b58\u50a8\u6587\u4ef6\uff0c\u5982\u679c\u4f1a\u8bdd\u4e2d\u7684\u6570\u636e\u6ca1\u6709\u53d1\u751f\u6539\u53d8\uff0c\u90a3\u4e48 PHP \u4f1a\u5728\u8bfb\u53d6\u5b8c\u4f1a\u8bdd\u6570\u636e\u4e4b\u540e\uff0c \u7acb\u5373\u5173\u95ed\u4f1a\u8bdd\u5b58\u50a8\u6587\u4ef6\uff0c\u4e0d\u505a\u4efb\u4f55\u4fee\u6539\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e read_and_close \u6765\u5b9e\u73b0\u3002 \u4f8b\u5982\uff0c\u4e0b\u5217\u4ee3\u7801\u8bbe\u7f6e session.cache_limiter \u4e3a private \uff0c\u5e76\u4e14\u5728\u8bfb\u53d6\u5b8c\u6bd5\u4f1a\u8bdd\u6570\u636e\u4e4b\u540e\u9a6c\u4e0a\u5173\u95ed\u4f1a\u8bdd\u5b58\u50a8\u6587\u4ef6\u3002 <?php session_start ([ 'cache_limiter' => 'private' , 'read_and_close' => true , ]); ?>","title":"1.11. \u4f1a\u8bdd\u9009\u9879"},{"location":"php/features/7.0.x/#112-preg95replace95callback95array","text":"\u5728 PHP 7 \u4e4b\u524d\uff0c\u5f53\u4f7f\u7528 preg_replace_callback() \u51fd\u6570\u7684\u65f6\u5019\uff0c \u7531\u4e8e\u9488\u5bf9\u6bcf\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u90fd\u8981\u6267\u884c\u56de\u8c03\u51fd\u6570\uff0c\u53ef\u80fd\u5bfc\u81f4\u8fc7\u591a\u7684\u5206\u652f\u4ee3\u7801\u3002 \u800c\u4f7f\u7528\u65b0\u52a0\u7684 preg_replace_callback_array() \u51fd\u6570\uff0c \u53ef\u4ee5\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\u3002 \u73b0\u5728\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5173\u8054\u6570\u7ec4\u6765\u5bf9\u6bcf\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u6ce8\u518c\u56de\u8c03\u51fd\u6570\uff0c \u6b63\u5219\u8868\u8fbe\u5f0f\u672c\u8eab\u4f5c\u4e3a\u5173\u8054\u6570\u7ec4\u7684\u952e\uff0c \u800c\u5bf9\u5e94\u7684\u56de\u8c03\u51fd\u6570\u5c31\u662f\u5173\u8054\u6570\u7ec4\u7684\u503c\u3002","title":"1.12. preg_replace_callback_array()"},{"location":"php/features/7.0.x/#113-csprng-functions","text":"\u65b0\u52a0\u5165\u4e24\u4e2a\u8de8\u5e73\u53f0\u7684\u51fd\u6570\uff1a random_bytes() \u548c random_int() \u7528\u6765\u4ea7\u751f\u9ad8\u5b89\u5168\u7ea7\u522b\u7684\u968f\u673a\u5b57\u7b26\u4e32\u548c\u968f\u673a\u6574\u6570\u3002","title":"1.13. CSPRNG Functions"},{"location":"php/features/7.0.x/#114-list-arrayaccess","text":"\u5728\u4e4b\u524d\u7248\u672c\u4e2d\uff0c list() \u51fd\u6570\u4e0d\u80fd\u4fdd\u8bc1 \u6b63\u786e\u7684\u5c55\u5f00\u5b9e\u73b0\u4e86 ArrayAccess \u63a5\u53e3\u7684\u5bf9\u8c61\uff0c \u73b0\u5728\u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf\u88ab\u4fee\u590d\u3002","title":"1.14. \u53ef\u4ee5\u4f7f\u7528 list() \u51fd\u6570\u6765\u5c55\u5f00\u5b9e\u73b0\u4e86 ArrayAccess \u63a5\u53e3\u7684\u5bf9\u8c61"},{"location":"php/features/7.0.x/#115","text":"\u5141\u8bb8\u5728\u514b\u9686\u8868\u8fbe\u5f0f\u4e0a\u8bbf\u95ee\u5bf9\u8c61\u6210\u5458\uff0c\u4f8b\u5982\uff1a (clone $foo)->bar() \u3002","title":"1.15. \u5176\u4ed6\u7279\u6027"},{"location":"php/features/7.0.x/#2","text":"","title":"2. \u5f03\u7528\u7684\u529f\u80fd"},{"location":"php/features/7.0.x/#21-php4","text":"PHP4 \u98ce\u683c\u7684\u6784\u9020\u51fd\u6570\uff08\u65b9\u6cd5\u540d\u548c\u7c7b\u540d\u4e00\u6837\uff09\u5c06\u88ab\u5f03\u7528\uff0c\u5e76\u5728\u5c06\u6765\u79fb\u9664\u3002 \u5982\u679c\u5728\u7c7b\u4e2d\u4ec5\u4f7f\u7528\u4e86 PHP4 \u98ce\u683c\u7684\u6784\u9020\u51fd\u6570\uff0cPHP7 \u4f1a\u4ea7\u751f E_DEPRECATED \u8b66\u544a\u3002 \u5982\u679c\u8fd8\u5b9a\u4e49\u4e86 __construct() \u65b9\u6cd5\u5219\u4e0d\u53d7\u5f71\u54cd\u3002 <?php class foo { function foo () { echo 'I am the constructor' ; } } ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a Deprecated: Methods with the same name as their class will not be constructors in a future version of PHP; foo has a deprecated constructor in example.php on line 3","title":"2.1. PHP4 \u98ce\u683c\u7684\u6784\u9020\u51fd\u6570"},{"location":"php/features/7.0.x/#22","text":"\u5e9f\u5f03\u4e86 \u9759\u6001\uff08Static\uff09 \u8c03\u7528\u672a\u58f0\u660e\u6210 static \u7684\u65b9\u6cd5\uff0c\u672a\u6765\u53ef\u80fd\u4f1a\u5f7b\u5e95\u79fb\u9664\u8be5\u529f\u80fd\u3002 <?php class foo { function bar () { echo 'I am not static!' ; } } foo :: bar (); ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a Deprecated: Non-static method foo::bar() should not be called statically in - on line 8 I am not static!","title":"2.2. \u9759\u6001\u8c03\u7528\u975e\u9759\u6001\u7684\u65b9\u6cd5"},{"location":"php/features/7.0.x/#23-password_hash","text":"\u5e9f\u5f03\u4e86 password_hash() \u51fd\u6570\u4e2d\u7684\u76d0\u503c\u9009\u9879\uff0c\u963b\u6b62\u5f00\u53d1\u8005\u751f\u6210\u81ea\u5df1\u7684\u76d0\u503c\uff08\u901a\u5e38\u66f4\u4e0d\u5b89\u5168\uff09\u3002 \u5f00\u53d1\u8005\u4e0d\u4f20\u8be5\u503c\u65f6\uff0c\u8be5\u51fd\u6570\u81ea\u5df1\u4f1a\u751f\u6210\u5bc6\u7801\u5b66\u5b89\u5168\u7684\u76d0\u503c\u3002\u56e0\u6b64\u518d\u65e0\u5fc5\u8981\u4f20\u5165\u81ea\u5df1\u81ea\u5b9a\u4e49\u7684\u76d0\u503c\u3002 \u539f\u6587 \u65b0\u7279\u6027\uff1a http://php.net/manual/zh/migration70.new-features.php \u5f03\u7528\u7684\u529f\u80fd\uff1a http://php.net/manual/zh/migration70.deprecated.php","title":"2.3. password_hash() \u76d0\u503c\u9009\u9879"},{"location":"php/features/7.1.x/","text":"PHP 7.1.x # \u8bf4\u660e \u672c\u6587\u90e8\u5206\u5185\u5bb9\u6839\u636e\u5b98\u7f51\u8fdb\u884c\u5220\u51cf\uff0c\u4ec5\u6574\u7406\u5e38\u7528\u7279\u6027\u3002 1. \u65b0\u7279\u6027 # 1.1. \u53ef\u4e3a\u7a7a\uff08Nullable\uff09\u7c7b\u578b # \u53c2\u6570\u4ee5\u53ca\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u5728\u7c7b\u578b\u524d\u52a0\u4e0a\u4e00\u4e2a\u95ee\u53f7\u4f7f\u4e4b\u5141\u8bb8\u4e3a\u7a7a\u3002 \u5f53\u542f\u7528\u8fd9\u4e2a\u7279\u6027\u65f6\uff0c\u4f20\u5165\u7684\u53c2\u6570\u6216\u8005\u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u8981\u4e48\u662f\u7ed9\u5b9a\u7684\u7c7b\u578b\uff0c\u8981\u4e48\u662f null \u3002 <?php function testReturn () : ? string { return 'elePHPant' ; } var_dump ( testReturn ()); function testReturn () : ? string { return null ; } var_dump ( testReturn ()); function test ( ? string $name ) { var_dump ( $name ); } test ( 'elePHPant' ); test ( null ); test (); \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a string(10) \"elePHPant\" NULL string(10) \"elePHPant\" NULL Uncaught Error: Too few arguments to function test(), 0 passed in... 1.2. Void \u51fd\u6570 # \u4e00\u4e2a\u65b0\u7684\u8fd4\u56de\u503c\u7c7b\u578b void \u88ab\u5f15\u5165\u3002 \u8fd4\u56de\u503c\u58f0\u660e\u4e3a void \u7c7b\u578b\u7684\u65b9\u6cd5\u8981\u4e48\u5e72\u8106\u7701\u53bb return \u8bed\u53e5\uff0c\u8981\u4e48\u4f7f\u7528\u4e00\u4e2a\u7a7a\u7684 return \u8bed\u53e5\u3002 \u5bf9\u4e8e void \u51fd\u6570\u6765\u8bf4\uff0c NULL \u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8fd4\u56de\u503c\u3002 <?php function swap ( & $left , & $right ) : void { if ( $left === $right ) { return ; } $tmp = $left ; $left = $right ; $right = $tmp ; } $a = 1 ; $b = 2 ; var_dump ( swap ( $a , $b ), $a , $b ); \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a null int(2) int(1) \u8bd5\u56fe\u53bb\u83b7\u53d6\u4e00\u4e2a void \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u4f1a\u5f97\u5230 NULL \uff0c\u5e76\u4e14\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u8b66\u544a\u3002\u8fd9\u4e48\u505a\u7684\u539f\u56e0\u662f\u4e0d\u60f3\u5f71\u54cd\u66f4\u9ad8\u5c42\u6b21\u7684\u65b9\u6cd5\u3002 1.3. Symmetric array destructuring # \u77ed\u6570\u7ec4\u8bed\u6cd5\uff08 [] \uff09\u73b0\u5728\u4f5c\u4e3a list() \u8bed\u6cd5\u7684\u4e00\u4e2a\u5907\u9009\u9879\uff0c\u53ef\u4ee5\u7528\u4e8e\u5c06\u6570\u7ec4\u7684\u503c\u8d4b\u7ed9\u4e00\u4e9b\u53d8\u91cf\uff08\u5305\u62ec\u5728 foreach \u4e2d\uff09\u3002 <?php $data = [ [ 1 , 'Tom' ], [ 2 , 'Fred' ], ]; // list() style list ( $id1 , $name1 ) = $data [ 0 ]; // [] style [ $id1 , $name1 ] = $data [ 0 ]; // list() style foreach ( $data as list ( $id , $name )) { // logic here with $id and $name } // [] style foreach ( $data as [ $id , $name ]) { // logic here with $id and $name } 1.4. \u7c7b\u5e38\u91cf\u53ef\u89c1\u6027 # \u73b0\u5728\u8d77\u652f\u6301\u8bbe\u7f6e\u7c7b\u5e38\u91cf\u7684\u53ef\u89c1\u6027\u3002 <?php class ConstDemo { const PUBLIC_CONST_A = 1 ; public const PUBLIC_CONST_B = 2 ; protected const PROTECTED_CONST = 3 ; private const PRIVATE_CONST = 4 ; } 1.5. iterable \u4f2a\u7c7b # \u73b0\u5728\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u88ab\u79f0\u4e3a iterable \u7684\u4f2a\u7c7b (\u4e0e callable \u7c7b\u4f3c)\u3002 \u8fd9\u53ef\u4ee5\u88ab\u7528\u5728\u53c2\u6570\u6216\u8005\u8fd4\u56de\u503c\u7c7b\u578b\u4e2d\uff0c\u5b83\u4ee3\u8868\u63a5\u53d7\u6570\u7ec4\u6216\u8005\u5b9e\u73b0\u4e86 Traversable \u63a5\u53e3\u7684\u5bf9\u8c61\u3002 \u81f3\u4e8e\u5b50\u7c7b\uff0c\u5f53\u7528\u4f5c\u53c2\u6570\u65f6\uff0c\u5b50\u7c7b\u53ef\u4ee5\u6536\u7d27\u7236\u7c7b\u7684 iterable \u7c7b\u578b\u5230 array \u6216\u4e00\u4e2a\u5b9e\u73b0\u4e86 Traversable \u7684\u5bf9\u8c61\u3002\u5bf9\u4e8e\u8fd4\u56de\u503c\uff0c\u5b50\u7c7b\u53ef\u4ee5\u62d3\u5bbd\u7236\u7c7b\u7684 array \u6216\u5bf9\u8c61\u8fd4\u56de\u503c\u7c7b\u578b\u5230 iterable\u3002 <?php function iterator ( iterable $iter ) { foreach ( $iter as $val ) { // } } 1.6. \u591a\u5f02\u5e38\u6355\u83b7\u5904\u7406 # \u4e00\u4e2a catch \u8bed\u53e5\u5757\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u7ba1\u9053\u5b57\u7b26( | )\u6765\u5b9e\u73b0\u591a\u4e2a\u5f02\u5e38\u7684\u6355\u83b7\u3002 \u8fd9\u5bf9\u4e8e\u9700\u8981\u540c\u65f6\u5904\u7406\u6765\u81ea\u4e0d\u540c\u7c7b\u7684\u4e0d\u540c\u5f02\u5e38\u65f6\u5f88\u6709\u7528\u3002 <?php try { // some code } catch ( FirstException | SecondException $e ) { // handle first and second exceptions } 1.7. list() \u73b0\u5728\u652f\u6301\u952e\u540d # \u73b0\u5728 list() \u548c\u5b83\u7684\u65b0\u7684 [] \u8bed\u6cd5\u652f\u6301\u5728\u5b83\u5185\u90e8\u53bb\u6307\u5b9a\u952e\u540d\u3002\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u5c06\u4efb\u610f\u7c7b\u578b\u7684\u6570\u7ec4 \u90fd\u8d4b\u503c\u7ed9\u4e00\u4e9b\u53d8\u91cf\uff08\u4e0e\u77ed\u6570\u7ec4\u8bed\u6cd5\u7c7b\u4f3c\uff09 <?php $data = [ [ \"id\" => 1 , \"name\" => 'Tom' ], [ \"id\" => 2 , \"name\" => 'Fred' ], ]; // list() style list ( \"id\" => $id1 , \"name\" => $name1 ) = $data [ 0 ]; // [] style [ \"id\" => $id1 , \"name\" => $name1 ] = $data [ 0 ]; // list() style foreach ( $data as list ( \"id\" => $id , \"name\" => $name )) { // logic here with $id and $name } // [] style foreach ( $data as [ \"id\" => $id , \"name\" => $name ]) { // logic here with $id and $name } 1.8. \u652f\u6301\u4e3a\u8d1f\u7684\u5b57\u7b26\u4e32\u504f\u79fb\u91cf # \u73b0\u5728\u6240\u6709\u652f\u6301\u504f\u79fb\u91cf\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u51fd\u6570 \u90fd\u652f\u6301\u63a5\u53d7\u8d1f\u6570\u4f5c\u4e3a\u504f\u79fb\u91cf\uff0c\u5305\u62ec\u901a\u8fc7 [] \u6216 {} \u64cd\u4f5c\u5b57\u7b26\u4e32\u4e0b\u6807\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u8d1f\u6570\u7684\u504f\u79fb\u91cf\u4f1a\u88ab\u7406\u89e3\u4e3a\u4e00\u4e2a\u4ece\u5b57\u7b26\u4e32\u7ed3\u5c3e\u5f00\u59cb\u7684\u504f\u79fb\u91cf\u3002 <?php var_dump ( \"abcdef\" [ - 2 ]); var_dump ( strpos ( \"aabbcc\" , \"b\" , - 3 )); \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a string (1) \"e\" int(3) Negative string and array offsets are now also supported in the simple variable parsing syntax inside of strings. <?php $string = 'bar' ; echo \"The last character of ' $string ' is ' $string[-1] '. \\n \" ; ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a The last character of 'bar' is 'r'. \u539f\u6587 \u65b0\u7279\u6027\uff1a http://php.net/manual/zh/migration71.new-features.php","title":"PHP 7.1.x"},{"location":"php/features/7.1.x/#php-71x","text":"\u8bf4\u660e \u672c\u6587\u90e8\u5206\u5185\u5bb9\u6839\u636e\u5b98\u7f51\u8fdb\u884c\u5220\u51cf\uff0c\u4ec5\u6574\u7406\u5e38\u7528\u7279\u6027\u3002","title":"PHP 7.1.x"},{"location":"php/features/7.1.x/#1","text":"","title":"1. \u65b0\u7279\u6027"},{"location":"php/features/7.1.x/#11-nullable","text":"\u53c2\u6570\u4ee5\u53ca\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u5728\u7c7b\u578b\u524d\u52a0\u4e0a\u4e00\u4e2a\u95ee\u53f7\u4f7f\u4e4b\u5141\u8bb8\u4e3a\u7a7a\u3002 \u5f53\u542f\u7528\u8fd9\u4e2a\u7279\u6027\u65f6\uff0c\u4f20\u5165\u7684\u53c2\u6570\u6216\u8005\u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u8981\u4e48\u662f\u7ed9\u5b9a\u7684\u7c7b\u578b\uff0c\u8981\u4e48\u662f null \u3002 <?php function testReturn () : ? string { return 'elePHPant' ; } var_dump ( testReturn ()); function testReturn () : ? string { return null ; } var_dump ( testReturn ()); function test ( ? string $name ) { var_dump ( $name ); } test ( 'elePHPant' ); test ( null ); test (); \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a string(10) \"elePHPant\" NULL string(10) \"elePHPant\" NULL Uncaught Error: Too few arguments to function test(), 0 passed in...","title":"1.1. \u53ef\u4e3a\u7a7a\uff08Nullable\uff09\u7c7b\u578b"},{"location":"php/features/7.1.x/#12-void","text":"\u4e00\u4e2a\u65b0\u7684\u8fd4\u56de\u503c\u7c7b\u578b void \u88ab\u5f15\u5165\u3002 \u8fd4\u56de\u503c\u58f0\u660e\u4e3a void \u7c7b\u578b\u7684\u65b9\u6cd5\u8981\u4e48\u5e72\u8106\u7701\u53bb return \u8bed\u53e5\uff0c\u8981\u4e48\u4f7f\u7528\u4e00\u4e2a\u7a7a\u7684 return \u8bed\u53e5\u3002 \u5bf9\u4e8e void \u51fd\u6570\u6765\u8bf4\uff0c NULL \u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8fd4\u56de\u503c\u3002 <?php function swap ( & $left , & $right ) : void { if ( $left === $right ) { return ; } $tmp = $left ; $left = $right ; $right = $tmp ; } $a = 1 ; $b = 2 ; var_dump ( swap ( $a , $b ), $a , $b ); \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a null int(2) int(1) \u8bd5\u56fe\u53bb\u83b7\u53d6\u4e00\u4e2a void \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u4f1a\u5f97\u5230 NULL \uff0c\u5e76\u4e14\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u8b66\u544a\u3002\u8fd9\u4e48\u505a\u7684\u539f\u56e0\u662f\u4e0d\u60f3\u5f71\u54cd\u66f4\u9ad8\u5c42\u6b21\u7684\u65b9\u6cd5\u3002","title":"1.2. Void \u51fd\u6570"},{"location":"php/features/7.1.x/#13-symmetric-array-destructuring","text":"\u77ed\u6570\u7ec4\u8bed\u6cd5\uff08 [] \uff09\u73b0\u5728\u4f5c\u4e3a list() \u8bed\u6cd5\u7684\u4e00\u4e2a\u5907\u9009\u9879\uff0c\u53ef\u4ee5\u7528\u4e8e\u5c06\u6570\u7ec4\u7684\u503c\u8d4b\u7ed9\u4e00\u4e9b\u53d8\u91cf\uff08\u5305\u62ec\u5728 foreach \u4e2d\uff09\u3002 <?php $data = [ [ 1 , 'Tom' ], [ 2 , 'Fred' ], ]; // list() style list ( $id1 , $name1 ) = $data [ 0 ]; // [] style [ $id1 , $name1 ] = $data [ 0 ]; // list() style foreach ( $data as list ( $id , $name )) { // logic here with $id and $name } // [] style foreach ( $data as [ $id , $name ]) { // logic here with $id and $name }","title":"1.3. Symmetric array destructuring"},{"location":"php/features/7.1.x/#14","text":"\u73b0\u5728\u8d77\u652f\u6301\u8bbe\u7f6e\u7c7b\u5e38\u91cf\u7684\u53ef\u89c1\u6027\u3002 <?php class ConstDemo { const PUBLIC_CONST_A = 1 ; public const PUBLIC_CONST_B = 2 ; protected const PROTECTED_CONST = 3 ; private const PRIVATE_CONST = 4 ; }","title":"1.4. \u7c7b\u5e38\u91cf\u53ef\u89c1\u6027"},{"location":"php/features/7.1.x/#15-iterable","text":"\u73b0\u5728\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u88ab\u79f0\u4e3a iterable \u7684\u4f2a\u7c7b (\u4e0e callable \u7c7b\u4f3c)\u3002 \u8fd9\u53ef\u4ee5\u88ab\u7528\u5728\u53c2\u6570\u6216\u8005\u8fd4\u56de\u503c\u7c7b\u578b\u4e2d\uff0c\u5b83\u4ee3\u8868\u63a5\u53d7\u6570\u7ec4\u6216\u8005\u5b9e\u73b0\u4e86 Traversable \u63a5\u53e3\u7684\u5bf9\u8c61\u3002 \u81f3\u4e8e\u5b50\u7c7b\uff0c\u5f53\u7528\u4f5c\u53c2\u6570\u65f6\uff0c\u5b50\u7c7b\u53ef\u4ee5\u6536\u7d27\u7236\u7c7b\u7684 iterable \u7c7b\u578b\u5230 array \u6216\u4e00\u4e2a\u5b9e\u73b0\u4e86 Traversable \u7684\u5bf9\u8c61\u3002\u5bf9\u4e8e\u8fd4\u56de\u503c\uff0c\u5b50\u7c7b\u53ef\u4ee5\u62d3\u5bbd\u7236\u7c7b\u7684 array \u6216\u5bf9\u8c61\u8fd4\u56de\u503c\u7c7b\u578b\u5230 iterable\u3002 <?php function iterator ( iterable $iter ) { foreach ( $iter as $val ) { // } }","title":"1.5. iterable \u4f2a\u7c7b"},{"location":"php/features/7.1.x/#16","text":"\u4e00\u4e2a catch \u8bed\u53e5\u5757\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u7ba1\u9053\u5b57\u7b26( | )\u6765\u5b9e\u73b0\u591a\u4e2a\u5f02\u5e38\u7684\u6355\u83b7\u3002 \u8fd9\u5bf9\u4e8e\u9700\u8981\u540c\u65f6\u5904\u7406\u6765\u81ea\u4e0d\u540c\u7c7b\u7684\u4e0d\u540c\u5f02\u5e38\u65f6\u5f88\u6709\u7528\u3002 <?php try { // some code } catch ( FirstException | SecondException $e ) { // handle first and second exceptions }","title":"1.6. \u591a\u5f02\u5e38\u6355\u83b7\u5904\u7406"},{"location":"php/features/7.1.x/#17-list","text":"\u73b0\u5728 list() \u548c\u5b83\u7684\u65b0\u7684 [] \u8bed\u6cd5\u652f\u6301\u5728\u5b83\u5185\u90e8\u53bb\u6307\u5b9a\u952e\u540d\u3002\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u5c06\u4efb\u610f\u7c7b\u578b\u7684\u6570\u7ec4 \u90fd\u8d4b\u503c\u7ed9\u4e00\u4e9b\u53d8\u91cf\uff08\u4e0e\u77ed\u6570\u7ec4\u8bed\u6cd5\u7c7b\u4f3c\uff09 <?php $data = [ [ \"id\" => 1 , \"name\" => 'Tom' ], [ \"id\" => 2 , \"name\" => 'Fred' ], ]; // list() style list ( \"id\" => $id1 , \"name\" => $name1 ) = $data [ 0 ]; // [] style [ \"id\" => $id1 , \"name\" => $name1 ] = $data [ 0 ]; // list() style foreach ( $data as list ( \"id\" => $id , \"name\" => $name )) { // logic here with $id and $name } // [] style foreach ( $data as [ \"id\" => $id , \"name\" => $name ]) { // logic here with $id and $name }","title":"1.7. list() \u73b0\u5728\u652f\u6301\u952e\u540d"},{"location":"php/features/7.1.x/#18","text":"\u73b0\u5728\u6240\u6709\u652f\u6301\u504f\u79fb\u91cf\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u51fd\u6570 \u90fd\u652f\u6301\u63a5\u53d7\u8d1f\u6570\u4f5c\u4e3a\u504f\u79fb\u91cf\uff0c\u5305\u62ec\u901a\u8fc7 [] \u6216 {} \u64cd\u4f5c\u5b57\u7b26\u4e32\u4e0b\u6807\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u8d1f\u6570\u7684\u504f\u79fb\u91cf\u4f1a\u88ab\u7406\u89e3\u4e3a\u4e00\u4e2a\u4ece\u5b57\u7b26\u4e32\u7ed3\u5c3e\u5f00\u59cb\u7684\u504f\u79fb\u91cf\u3002 <?php var_dump ( \"abcdef\" [ - 2 ]); var_dump ( strpos ( \"aabbcc\" , \"b\" , - 3 )); \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a string (1) \"e\" int(3) Negative string and array offsets are now also supported in the simple variable parsing syntax inside of strings. <?php $string = 'bar' ; echo \"The last character of ' $string ' is ' $string[-1] '. \\n \" ; ?> \u4ee5\u4e0a\u4f8b\u7a0b\u4f1a\u8f93\u51fa\uff1a The last character of 'bar' is 'r'. \u539f\u6587 \u65b0\u7279\u6027\uff1a http://php.net/manual/zh/migration71.new-features.php","title":"1.8. \u652f\u6301\u4e3a\u8d1f\u7684\u5b57\u7b26\u4e32\u504f\u79fb\u91cf"},{"location":"php/features/7.2.x/","text":"PHP 7.2.x # \u8bf4\u660e \u672c\u6587\u90e8\u5206\u5185\u5bb9\u6839\u636e\u5b98\u7f51\u8fdb\u884c\u5220\u51cf\uff0c\u4ec5\u6574\u7406\u5e38\u7528\u7279\u6027\u3002 1. \u65b0\u7279\u6027 # 1.1. \u65b0\u7684\u5bf9\u8c61\u7c7b\u578b # \u8fd9\u79cd\u65b0\u7684\u5bf9\u8c61\u7c7b\u578b, object , \u5f15\u8fdb\u4e86\u53ef\u7528\u4e8e\u9006\u53d8\uff08contravariant\uff09\u53c2\u6570\u8f93\u5165\u548c\u534f\u53d8\uff08covariant\uff09\u8fd4\u56de\u4efb\u4f55\u5bf9\u8c61\u7c7b\u578b\u3002 <?php function test ( object $obj ) : object { return new SplQueue (); } test ( new StdClass ()); 1.2. \u5141\u8bb8\u91cd\u5199\u62bd\u8c61\u65b9\u6cd5(Abstract method) # \u5f53\u4e00\u4e2a\u62bd\u8c61\u7c7b\u7ee7\u627f\u4e8e\u53e6\u5916\u4e00\u4e2a\u62bd\u8c61\u7c7b\u7684\u65f6\u5019\uff0c\u7ee7\u627f\u540e\u7684\u62bd\u8c61\u7c7b\u53ef\u4ee5\u91cd\u5199\u88ab\u7ee7\u627f\u7684\u62bd\u8c61\u7c7b\u7684\u62bd\u8c61\u65b9\u6cd5\u3002 <?php abstract class A { abstract function test ( string $s ); } abstract class B extends A { // overridden - still maintaining contravariance for parameters and covariance for return abstract function test ( $s ) : int ; } 1.3. \u6269\u5c55\u4e86\u53c2\u6570\u7c7b\u578b # \u91cd\u5199\u65b9\u6cd5\u548c\u63a5\u53e3\u5b9e\u73b0\u7684\u53c2\u6570\u7c7b\u578b\u73b0\u5728\u53ef\u4ee5\u7701\u7565\u4e86\u3002\u4e0d\u8fc7\u8fd9\u4ecd\u7136\u662f\u7b26\u5408LSP\uff0c\u56e0\u4e3a\u73b0\u5728\u8fd9\u79cd\u53c2\u6570\u7c7b\u578b\u662f\u9006\u53d8\u7684\u3002 <?php interface A { public function Test ( array $input ); } class B implements A { public function Test ( $input ){} // type omitted for $input } 1.4. \u5141\u8bb8\u5206\u7ec4\u547d\u540d\u7a7a\u95f4\u7684\u5c3e\u90e8\u9017\u53f7 # \u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u5728PHP 7\u4e2d\u4f7f\u7528\u5c3e\u968f\u9017\u53f7\u8fdb\u884c\u5206\u7ec4\u5f15\u5165\u3002 <?php use Foo\\Bar\\ { Foo , Bar , Baz , }; 2. \u5e9f\u5f03\u7684\u529f\u80fd # 2.1. \u4e0d\u5e26\u5f15\u53f7\u7684\u5b57\u7b26\u4e32 # \u4e0d\u5e26\u5f15\u53f7\u7684\u5b57\u7b26\u4e32\u662f\u4e0d\u5b58\u5728\u7684\u5168\u5c40\u5e38\u91cf\uff0c\u8f6c\u5316\u6210\u4ed6\u4eec\u81ea\u8eab\u7684\u5b57\u7b26\u4e32\u3002 \u5728\u4ee5\u524d\uff0c\u8be5\u884c\u4e3a\u4f1a\u4ea7\u751f E_NOTICE \uff0c\u4f46\u73b0\u5728\u4f1a\u4ea7\u751f E_WARNING \u3002\u5728\u4e0b\u4e00\u4e2a PHP \u4e3b\u7248\u672c\u4e2d\uff0c\u5c06\u629b\u51fa Error \u5f02\u5e38\u3002 <?php var_dump ( NONEXISTENT ); /* Output: Warning: Use of undefined constant NONEXISTENT - assumed 'NONEXISTENT' (this will throw an Error in a future version of PHP) in %s on line %d string(11) \"NONEXISTENT\" */ 2.2. __autoload() \u65b9\u6cd5 # __autoload() \u65b9\u6cd5\u5df2\u88ab\u5e9f\u5f03\uff0c \u56e0\u4e3a\u548c spl_autoload_register() \u76f8\u6bd4\u529f\u80fd\u8f83\u5dee (\u56e0\u4e3a\u65e0\u6cd5\u94fe\u5f0f\u5904\u7406\u591a\u4e2a autoloader )\uff0c \u800c\u4e14\u4e5f\u65e0\u6cd5\u5728\u4e24\u79cd autoloading \u6837\u5f0f\u4e2d\u914d\u5408\u4f7f\u7528\u3002 2.3. create_function() \u51fd\u6570 # \u8003\u8651\u5230\u6b64\u51fd\u6570\u7684\u5b89\u5168\u9690\u60a3\u95ee\u9898\uff08\u5b83\u662f eval() \u7684\u7626\u5305\u88c5\u5668\uff09\uff0c\u8be5\u8fc7\u65f6\u7684\u51fd\u6570\u73b0\u5728\u5df2\u88ab\u5e9f\u5f03\u3002 \u66f4\u597d\u7684\u9009\u62e9\u662f \u533f\u540d\u51fd\u6570 \u3002 2.4. (unset) \u7c7b\u578b\u5f3a\u5236\u8f6c\u5316 # \u8f6c\u5316\u4efb\u610f\u8868\u8fbe\u5f0f\u4e3a\u6b64\u7c7b\u578b\uff0c\u7ed3\u679c\u603b\u662f NULL \uff0c\u6240\u4ee5\u8fd9\u4e2a\u591a\u4f59\u7684\u7c7b\u578b\u8f6c\u5316\u73b0\u5728\u4e5f\u5c31\u88ab\u5e9f\u5f03\u4e86\u3002 2.5. parse_str() \u4e0d\u52a0\u7b2c\u4e8c\u4e2a\u53c2\u6570 # \u4f7f\u7528 parse_str() \u65f6\uff0c\u4e0d\u52a0\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f1a\u5bfc\u81f4\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\u5bfc\u5165\u5f53\u524d\u7b26\u53f7\u8868\u3002 \u8003\u8651\u5230\u5b89\u5168\u9690\u60a3\u95ee\u9898\uff0c\u4e0d\u52a0\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f7f\u7528 parse_str() \u7684\u884c\u4e3a\u5df2\u88ab\u5e9f\u5f03\u3002 \u6b64\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u9009\u9879\u4e3a\u5fc5\u586b\u9879\uff0c\u5b83\u4f7f\u67e5\u8be2\u5b57\u7b26\u4e32\u8f6c\u4e3a Array\u3002 2.6. each() \u51fd\u6570 # \u4f7f\u7528\u6b64\u51fd\u6570\u904d\u5386\u65f6\uff0c\u6bd4\u666e\u901a\u7684 foreach \u66f4\u6162\uff0c \u5e76\u4e14\u7ed9\u65b0\u8bed\u6cd5\u7684\u53d8\u5316\u5e26\u6765\u5b9e\u73b0\u95ee\u9898\u3002\u56e0\u6b64\u5b83\u88ab\u5e9f\u5f03\u4e86\u3002 2.7. assert() \u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570 # assert() \u5b57\u7b26\u4e32\u53c2\u6570\u5c06\u8981\u6c42\u5b83\u80fd\u88ab eval() \u6267\u884c\u3002 \u8003\u8651\u5230\u53ef\u80fd\u88ab\u6267\u884c\u8fdc\u7a0b\u4ee3\u7801\uff0c\u5e9f\u5f03\u4e86\u5b57\u7b26\u4e32\u7684 assert() \uff0c\u6700\u597d\u63d0\u4f9b bool \u7684\u8868\u8fbe\u5f0f\u3002 \u539f\u6587 \u65b0\u7279\u6027\uff1a http://php.net/manual/zh/migration72.new-features.php \u5e9f\u5f03\u7684\u529f\u80fd\uff1a http://php.net/manual/zh/migration72.deprecated.php","title":"PHP 7.2.x"},{"location":"php/features/7.2.x/#php-72x","text":"\u8bf4\u660e \u672c\u6587\u90e8\u5206\u5185\u5bb9\u6839\u636e\u5b98\u7f51\u8fdb\u884c\u5220\u51cf\uff0c\u4ec5\u6574\u7406\u5e38\u7528\u7279\u6027\u3002","title":"PHP 7.2.x"},{"location":"php/features/7.2.x/#1","text":"","title":"1. \u65b0\u7279\u6027"},{"location":"php/features/7.2.x/#11","text":"\u8fd9\u79cd\u65b0\u7684\u5bf9\u8c61\u7c7b\u578b, object , \u5f15\u8fdb\u4e86\u53ef\u7528\u4e8e\u9006\u53d8\uff08contravariant\uff09\u53c2\u6570\u8f93\u5165\u548c\u534f\u53d8\uff08covariant\uff09\u8fd4\u56de\u4efb\u4f55\u5bf9\u8c61\u7c7b\u578b\u3002 <?php function test ( object $obj ) : object { return new SplQueue (); } test ( new StdClass ());","title":"1.1. \u65b0\u7684\u5bf9\u8c61\u7c7b\u578b"},{"location":"php/features/7.2.x/#12-abstract-method","text":"\u5f53\u4e00\u4e2a\u62bd\u8c61\u7c7b\u7ee7\u627f\u4e8e\u53e6\u5916\u4e00\u4e2a\u62bd\u8c61\u7c7b\u7684\u65f6\u5019\uff0c\u7ee7\u627f\u540e\u7684\u62bd\u8c61\u7c7b\u53ef\u4ee5\u91cd\u5199\u88ab\u7ee7\u627f\u7684\u62bd\u8c61\u7c7b\u7684\u62bd\u8c61\u65b9\u6cd5\u3002 <?php abstract class A { abstract function test ( string $s ); } abstract class B extends A { // overridden - still maintaining contravariance for parameters and covariance for return abstract function test ( $s ) : int ; }","title":"1.2. \u5141\u8bb8\u91cd\u5199\u62bd\u8c61\u65b9\u6cd5(Abstract method)"},{"location":"php/features/7.2.x/#13","text":"\u91cd\u5199\u65b9\u6cd5\u548c\u63a5\u53e3\u5b9e\u73b0\u7684\u53c2\u6570\u7c7b\u578b\u73b0\u5728\u53ef\u4ee5\u7701\u7565\u4e86\u3002\u4e0d\u8fc7\u8fd9\u4ecd\u7136\u662f\u7b26\u5408LSP\uff0c\u56e0\u4e3a\u73b0\u5728\u8fd9\u79cd\u53c2\u6570\u7c7b\u578b\u662f\u9006\u53d8\u7684\u3002 <?php interface A { public function Test ( array $input ); } class B implements A { public function Test ( $input ){} // type omitted for $input }","title":"1.3. \u6269\u5c55\u4e86\u53c2\u6570\u7c7b\u578b"},{"location":"php/features/7.2.x/#14","text":"\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u5728PHP 7\u4e2d\u4f7f\u7528\u5c3e\u968f\u9017\u53f7\u8fdb\u884c\u5206\u7ec4\u5f15\u5165\u3002 <?php use Foo\\Bar\\ { Foo , Bar , Baz , };","title":"1.4. \u5141\u8bb8\u5206\u7ec4\u547d\u540d\u7a7a\u95f4\u7684\u5c3e\u90e8\u9017\u53f7"},{"location":"php/features/7.2.x/#2","text":"","title":"2. \u5e9f\u5f03\u7684\u529f\u80fd"},{"location":"php/features/7.2.x/#21","text":"\u4e0d\u5e26\u5f15\u53f7\u7684\u5b57\u7b26\u4e32\u662f\u4e0d\u5b58\u5728\u7684\u5168\u5c40\u5e38\u91cf\uff0c\u8f6c\u5316\u6210\u4ed6\u4eec\u81ea\u8eab\u7684\u5b57\u7b26\u4e32\u3002 \u5728\u4ee5\u524d\uff0c\u8be5\u884c\u4e3a\u4f1a\u4ea7\u751f E_NOTICE \uff0c\u4f46\u73b0\u5728\u4f1a\u4ea7\u751f E_WARNING \u3002\u5728\u4e0b\u4e00\u4e2a PHP \u4e3b\u7248\u672c\u4e2d\uff0c\u5c06\u629b\u51fa Error \u5f02\u5e38\u3002 <?php var_dump ( NONEXISTENT ); /* Output: Warning: Use of undefined constant NONEXISTENT - assumed 'NONEXISTENT' (this will throw an Error in a future version of PHP) in %s on line %d string(11) \"NONEXISTENT\" */","title":"2.1. \u4e0d\u5e26\u5f15\u53f7\u7684\u5b57\u7b26\u4e32"},{"location":"php/features/7.2.x/#22-__autoload","text":"__autoload() \u65b9\u6cd5\u5df2\u88ab\u5e9f\u5f03\uff0c \u56e0\u4e3a\u548c spl_autoload_register() \u76f8\u6bd4\u529f\u80fd\u8f83\u5dee (\u56e0\u4e3a\u65e0\u6cd5\u94fe\u5f0f\u5904\u7406\u591a\u4e2a autoloader )\uff0c \u800c\u4e14\u4e5f\u65e0\u6cd5\u5728\u4e24\u79cd autoloading \u6837\u5f0f\u4e2d\u914d\u5408\u4f7f\u7528\u3002","title":"2.2. __autoload() \u65b9\u6cd5"},{"location":"php/features/7.2.x/#23-create_function","text":"\u8003\u8651\u5230\u6b64\u51fd\u6570\u7684\u5b89\u5168\u9690\u60a3\u95ee\u9898\uff08\u5b83\u662f eval() \u7684\u7626\u5305\u88c5\u5668\uff09\uff0c\u8be5\u8fc7\u65f6\u7684\u51fd\u6570\u73b0\u5728\u5df2\u88ab\u5e9f\u5f03\u3002 \u66f4\u597d\u7684\u9009\u62e9\u662f \u533f\u540d\u51fd\u6570 \u3002","title":"2.3. create_function() \u51fd\u6570"},{"location":"php/features/7.2.x/#24-unset","text":"\u8f6c\u5316\u4efb\u610f\u8868\u8fbe\u5f0f\u4e3a\u6b64\u7c7b\u578b\uff0c\u7ed3\u679c\u603b\u662f NULL \uff0c\u6240\u4ee5\u8fd9\u4e2a\u591a\u4f59\u7684\u7c7b\u578b\u8f6c\u5316\u73b0\u5728\u4e5f\u5c31\u88ab\u5e9f\u5f03\u4e86\u3002","title":"2.4. (unset) \u7c7b\u578b\u5f3a\u5236\u8f6c\u5316"},{"location":"php/features/7.2.x/#25-parse_str","text":"\u4f7f\u7528 parse_str() \u65f6\uff0c\u4e0d\u52a0\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f1a\u5bfc\u81f4\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\u5bfc\u5165\u5f53\u524d\u7b26\u53f7\u8868\u3002 \u8003\u8651\u5230\u5b89\u5168\u9690\u60a3\u95ee\u9898\uff0c\u4e0d\u52a0\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f7f\u7528 parse_str() \u7684\u884c\u4e3a\u5df2\u88ab\u5e9f\u5f03\u3002 \u6b64\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u9009\u9879\u4e3a\u5fc5\u586b\u9879\uff0c\u5b83\u4f7f\u67e5\u8be2\u5b57\u7b26\u4e32\u8f6c\u4e3a Array\u3002","title":"2.5. parse_str() \u4e0d\u52a0\u7b2c\u4e8c\u4e2a\u53c2\u6570"},{"location":"php/features/7.2.x/#26-each","text":"\u4f7f\u7528\u6b64\u51fd\u6570\u904d\u5386\u65f6\uff0c\u6bd4\u666e\u901a\u7684 foreach \u66f4\u6162\uff0c \u5e76\u4e14\u7ed9\u65b0\u8bed\u6cd5\u7684\u53d8\u5316\u5e26\u6765\u5b9e\u73b0\u95ee\u9898\u3002\u56e0\u6b64\u5b83\u88ab\u5e9f\u5f03\u4e86\u3002","title":"2.6. each() \u51fd\u6570"},{"location":"php/features/7.2.x/#27-assert","text":"assert() \u5b57\u7b26\u4e32\u53c2\u6570\u5c06\u8981\u6c42\u5b83\u80fd\u88ab eval() \u6267\u884c\u3002 \u8003\u8651\u5230\u53ef\u80fd\u88ab\u6267\u884c\u8fdc\u7a0b\u4ee3\u7801\uff0c\u5e9f\u5f03\u4e86\u5b57\u7b26\u4e32\u7684 assert() \uff0c\u6700\u597d\u63d0\u4f9b bool \u7684\u8868\u8fbe\u5f0f\u3002 \u539f\u6587 \u65b0\u7279\u6027\uff1a http://php.net/manual/zh/migration72.new-features.php \u5e9f\u5f03\u7684\u529f\u80fd\uff1a http://php.net/manual/zh/migration72.deprecated.php","title":"2.7. assert() \u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570"},{"location":"php/php-cs-fixer/","text":"PHP Coding Standards Fixer # \u5b98\u7f51 # \u5b98\u7f51\uff1a http://cs.sensiolabs.org/ Github: https://github.com/FriendsOfPHP/PHP-CS-Fixer \u4ecb\u7ecd # The PHP Coding Standards Fixer (PHP CS Fixer) tool fixes your code to follow standards; whether you want to follow PHP coding standards as defined in the PSR-1, PSR-2, etc., or other community driven ones like the Symfony one. You can also define your (teams) style through configuration. \u8bd1\u6587\uff08@\u8c37\u6b4c\u7ffb\u8bd1) PHP\u7f16\u7801\u6807\u51c6\u4fee\u590d\u7a0b\u5e8f\uff08PHP CS\u4fee\u590d\u7a0b\u5e8f\uff09\u5de5\u5177\u4fee\u590d\u60a8\u7684\u4ee3\u7801\u9075\u5faa\u6807\u51c6;\u662f\u5426\u8981\u9075\u5faaPSR-1\uff0cPSR-2\u7b49\u5b9a\u4e49\u7684PHP\u7f16\u7801\u6807\u51c6\uff0c\u6216\u8005\u50cfSymfony\u90a3\u6837\u9075\u5faa\u793e\u533a\u9a71\u52a8\u7684\u6807\u51c6\u3002\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u5b9a\u4e49\uff08\u56e2\u961f\uff09\u6837\u5f0f\u3002 \u82f1\u8bed\u6e23\u6e23\uff0c\u4f60\u61c2\u7684.. \u53c2\u8003\u547d\u4ee4 # php-cs-fixer fix --config = .php_cs -v --using-cache = no --path-mode = intersection -- PHP\u6587\u4ef6\u8def\u5f84 \u53c2\u8003\u914d\u7f6e # \u6587\u4ef6\u53e6\u5b58\u4e3a\u9879\u76ee\u6839\u76ee\u5f55\u7684 .php_cs <?php return PhpCsFixer\\Config :: create () -> setRiskyAllowed ( true ) -> setRules ( array ( '@Symfony' => true , 'array_syntax' => array ( 'syntax' => 'short' ), 'ordered_imports' => true , 'phpdoc_order' => true , 'no_useless_else' => true , 'no_useless_return' => true , 'php_unit_construct' => true , 'php_unit_strict' => true , 'yoda_style' => false , 'phpdoc_summary' => false , 'not_operator_with_successor_space' => true , 'no_extra_consecutive_blank_lines' => true , 'general_phpdoc_annotation_remove' => true , // 'ordered_class_elements' => true, 'binary_operator_spaces' => array ( // 'align_double_arrow' => true, // 'align_equals' => true, 'default' => 'align_single_space_minimal' , ), )) -> setFinder ( PhpCsFixer\\Finder :: create () -> exclude ( '_*' ) -> exclude ( 'vendor' ) -> exclude ( 'storage' ) -> exclude ( 'resources' ) -> exclude ( 'public' ) -> in ( __DIR__ ) ) ; \u66f4\u591a # http://flc.io/2018/05/746.html","title":"PHP Coding Standards Fixer"},{"location":"php/php-cs-fixer/#php-coding-standards-fixer","text":"","title":"PHP Coding Standards Fixer"},{"location":"php/php-cs-fixer/#_1","text":"\u5b98\u7f51\uff1a http://cs.sensiolabs.org/ Github: https://github.com/FriendsOfPHP/PHP-CS-Fixer","title":"\u5b98\u7f51"},{"location":"php/php-cs-fixer/#_2","text":"The PHP Coding Standards Fixer (PHP CS Fixer) tool fixes your code to follow standards; whether you want to follow PHP coding standards as defined in the PSR-1, PSR-2, etc., or other community driven ones like the Symfony one. You can also define your (teams) style through configuration. \u8bd1\u6587\uff08@\u8c37\u6b4c\u7ffb\u8bd1) PHP\u7f16\u7801\u6807\u51c6\u4fee\u590d\u7a0b\u5e8f\uff08PHP CS\u4fee\u590d\u7a0b\u5e8f\uff09\u5de5\u5177\u4fee\u590d\u60a8\u7684\u4ee3\u7801\u9075\u5faa\u6807\u51c6;\u662f\u5426\u8981\u9075\u5faaPSR-1\uff0cPSR-2\u7b49\u5b9a\u4e49\u7684PHP\u7f16\u7801\u6807\u51c6\uff0c\u6216\u8005\u50cfSymfony\u90a3\u6837\u9075\u5faa\u793e\u533a\u9a71\u52a8\u7684\u6807\u51c6\u3002\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u5b9a\u4e49\uff08\u56e2\u961f\uff09\u6837\u5f0f\u3002 \u82f1\u8bed\u6e23\u6e23\uff0c\u4f60\u61c2\u7684..","title":"\u4ecb\u7ecd"},{"location":"php/php-cs-fixer/#_3","text":"php-cs-fixer fix --config = .php_cs -v --using-cache = no --path-mode = intersection -- PHP\u6587\u4ef6\u8def\u5f84","title":"\u53c2\u8003\u547d\u4ee4"},{"location":"php/php-cs-fixer/#_4","text":"\u6587\u4ef6\u53e6\u5b58\u4e3a\u9879\u76ee\u6839\u76ee\u5f55\u7684 .php_cs <?php return PhpCsFixer\\Config :: create () -> setRiskyAllowed ( true ) -> setRules ( array ( '@Symfony' => true , 'array_syntax' => array ( 'syntax' => 'short' ), 'ordered_imports' => true , 'phpdoc_order' => true , 'no_useless_else' => true , 'no_useless_return' => true , 'php_unit_construct' => true , 'php_unit_strict' => true , 'yoda_style' => false , 'phpdoc_summary' => false , 'not_operator_with_successor_space' => true , 'no_extra_consecutive_blank_lines' => true , 'general_phpdoc_annotation_remove' => true , // 'ordered_class_elements' => true, 'binary_operator_spaces' => array ( // 'align_double_arrow' => true, // 'align_equals' => true, 'default' => 'align_single_space_minimal' , ), )) -> setFinder ( PhpCsFixer\\Finder :: create () -> exclude ( '_*' ) -> exclude ( 'vendor' ) -> exclude ( 'storage' ) -> exclude ( 'resources' ) -> exclude ( 'public' ) -> in ( __DIR__ ) ) ;","title":"\u53c2\u8003\u914d\u7f6e"},{"location":"php/php-cs-fixer/#_5","text":"http://flc.io/2018/05/746.html","title":"\u66f4\u591a"},{"location":"php/php-design-patterns/","text":"\u6982\u8ff0 # \u8f6c\u8f7d\u8bf4\u660e \u672c\u6587\u4ece \u300a PHP \u8bbe\u8ba1\u6a21\u5f0f\u5168\u96c6 \u300b \u8f6c\u8f7d\u800c\u6765\uff0c\u7ecf\u793e\u533a\u521b\u59cb\u4eba\u786e\u8ba4\uff0c\u8f6c\u8f7d\uff08 \u975e\u5546\u7528 \uff09\u65f6\uff0c\u9700 \u5907\u6ce8\u539f\u6587\u5730\u5740 \u5373\u53ef\u3002 \u611f\u8c22\u539f\u6587\u7684\u8bd1\u8005\u8f9b\u82e6\u8d21\u732e\u3002 \u6ce8\uff1a \u6587\u6863\u4f1a\u57fa\u4e8e\u539f\u6587\u8fdb\u884c\u9002\u5f53\u5220\u51cf\u3001\u7f16\u8f91\u5904\u7406 \u7b80\u4ecb # \u8fd9\u662f\u4e00\u7ec4\u5df2\u77e5\u7684 \u8bbe\u8ba1\u6a21\u5f0f \u548c\u4e00\u4e9b\u5728 PHP \u4e2d\u5b9e\u73b0\u5b83\u4eec\u7684\u793a\u4f8b\u4ee3\u7801\u3002 \u6bcf\u4e2a\u6a21\u5f0f\u90fd\u6709\u4e00\u4e2a\u4f8b\u5b50\u5217\u8868\uff08\u5176\u4e2d\u5927\u591a\u6570\u6765\u81ea Zend Framework\uff0cSymfony2 \u6216 Doctrine2\uff0c\u56e0\u4e3a\u6211\u6700\u719f\u6089\u8fd9\u4e9b\u8f6f\u4ef6\uff09\u3002 \u6211\u8ba4\u4e3a\u8bbe\u8ba1\u6a21\u5f0f\u65b9\u9762\u7684\u95ee\u9898\u662f\u4eba\u4eec\u901a\u5e38\u77e5\u9053\u4ed6\u4eec\uff0c\u4f46\u4e0d\u77e5\u9053\u4f55\u65f6\u5e94\u7528\u8fd9\u4e9b\u6a21\u5f0f\u3002 \u6a21\u5f0f # \u8fd9\u4e9b\u6a21\u5f0f\u53ef\u4ee5\u5206\u4e3a\u4e09\u4e2a\u5927\u7c7b\u3002 1. \u521b\u5efa\u578b # \u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\uff0c\u521b\u5efa\u578b\u8bbe\u8ba1\u6a21\u5f0f\u662f\u5904\u7406\u5bf9\u8c61\u521b\u5efa\u673a\u5236\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u8bd5\u56fe\u4ee5\u9002\u5f53\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u5bf9\u8c61\u3002\u5bf9\u8c61\u521b\u5efa\u7684\u57fa\u672c\u5f62\u5f0f\u53ef\u80fd\u4f1a\u5e26\u6765\u8bbe\u8ba1\u95ee\u9898\uff0c\u4ea6\u6216\u589e\u52a0\u4e86\u8bbe\u8ba1\u7684\u590d\u6742\u5ea6\u3002\u521b\u5efa\u578b\u8bbe\u8ba1\u6a21\u5f0f\u901a\u8fc7\u63a7\u5236\u8fd9\u4e2a\u5bf9\u8c61\u7684\u521b\u5efa\u65b9\u5f0f\u6765\u89e3\u51b3\u6b64\u95ee\u9898\u3002 2. \u7ed3\u6784\u578b # \u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\uff0c\u7ed3\u6784\u578b\u8bbe\u8ba1\u6a21\u5f0f\u662f\u901a\u8fc7\u8bc6\u522b\u5b9e\u4f53\u4e4b\u95f4\u5173\u7cfb\u6765\u7b80\u5316\u8bbe\u8ba1\u7684\u8bbe\u8ba1\u6a21\u5f0f\u3002 3. \u884c\u4e3a\u578b # \u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\uff0c\u884c\u4e3a\u8bbe\u8ba1\u6a21\u5f0f\u662f\u8bc6\u522b\u5bf9\u8c61\u4e4b\u95f4\u7684\u901a\u7528\u901a\u4fe1\u6a21\u5f0f\u5e76\u5b9e\u73b0\u8fd9\u4e9b\u6a21\u5f0f\u7684\u8bbe\u8ba1\u6a21\u5f0f\u3002 \u901a\u8fc7\u8fd9\u6837\u505a\uff0c\u8fd9\u4e9b\u6a21\u5f0f\u589e\u52a0\u4e86\u6267\u884c\u6b64\u901a\u4fe1\u7684\u7075\u6d3b\u6027\u3002","title":"\u6982\u8ff0"},{"location":"php/php-design-patterns/#_1","text":"\u8f6c\u8f7d\u8bf4\u660e \u672c\u6587\u4ece \u300a PHP \u8bbe\u8ba1\u6a21\u5f0f\u5168\u96c6 \u300b \u8f6c\u8f7d\u800c\u6765\uff0c\u7ecf\u793e\u533a\u521b\u59cb\u4eba\u786e\u8ba4\uff0c\u8f6c\u8f7d\uff08 \u975e\u5546\u7528 \uff09\u65f6\uff0c\u9700 \u5907\u6ce8\u539f\u6587\u5730\u5740 \u5373\u53ef\u3002 \u611f\u8c22\u539f\u6587\u7684\u8bd1\u8005\u8f9b\u82e6\u8d21\u732e\u3002 \u6ce8\uff1a \u6587\u6863\u4f1a\u57fa\u4e8e\u539f\u6587\u8fdb\u884c\u9002\u5f53\u5220\u51cf\u3001\u7f16\u8f91\u5904\u7406","title":"\u6982\u8ff0"},{"location":"php/php-design-patterns/#_2","text":"\u8fd9\u662f\u4e00\u7ec4\u5df2\u77e5\u7684 \u8bbe\u8ba1\u6a21\u5f0f \u548c\u4e00\u4e9b\u5728 PHP \u4e2d\u5b9e\u73b0\u5b83\u4eec\u7684\u793a\u4f8b\u4ee3\u7801\u3002 \u6bcf\u4e2a\u6a21\u5f0f\u90fd\u6709\u4e00\u4e2a\u4f8b\u5b50\u5217\u8868\uff08\u5176\u4e2d\u5927\u591a\u6570\u6765\u81ea Zend Framework\uff0cSymfony2 \u6216 Doctrine2\uff0c\u56e0\u4e3a\u6211\u6700\u719f\u6089\u8fd9\u4e9b\u8f6f\u4ef6\uff09\u3002 \u6211\u8ba4\u4e3a\u8bbe\u8ba1\u6a21\u5f0f\u65b9\u9762\u7684\u95ee\u9898\u662f\u4eba\u4eec\u901a\u5e38\u77e5\u9053\u4ed6\u4eec\uff0c\u4f46\u4e0d\u77e5\u9053\u4f55\u65f6\u5e94\u7528\u8fd9\u4e9b\u6a21\u5f0f\u3002","title":"\u7b80\u4ecb"},{"location":"php/php-design-patterns/#_3","text":"\u8fd9\u4e9b\u6a21\u5f0f\u53ef\u4ee5\u5206\u4e3a\u4e09\u4e2a\u5927\u7c7b\u3002","title":"\u6a21\u5f0f"},{"location":"php/php-design-patterns/#1","text":"\u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\uff0c\u521b\u5efa\u578b\u8bbe\u8ba1\u6a21\u5f0f\u662f\u5904\u7406\u5bf9\u8c61\u521b\u5efa\u673a\u5236\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u8bd5\u56fe\u4ee5\u9002\u5f53\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u5bf9\u8c61\u3002\u5bf9\u8c61\u521b\u5efa\u7684\u57fa\u672c\u5f62\u5f0f\u53ef\u80fd\u4f1a\u5e26\u6765\u8bbe\u8ba1\u95ee\u9898\uff0c\u4ea6\u6216\u589e\u52a0\u4e86\u8bbe\u8ba1\u7684\u590d\u6742\u5ea6\u3002\u521b\u5efa\u578b\u8bbe\u8ba1\u6a21\u5f0f\u901a\u8fc7\u63a7\u5236\u8fd9\u4e2a\u5bf9\u8c61\u7684\u521b\u5efa\u65b9\u5f0f\u6765\u89e3\u51b3\u6b64\u95ee\u9898\u3002","title":"1. \u521b\u5efa\u578b"},{"location":"php/php-design-patterns/#2","text":"\u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\uff0c\u7ed3\u6784\u578b\u8bbe\u8ba1\u6a21\u5f0f\u662f\u901a\u8fc7\u8bc6\u522b\u5b9e\u4f53\u4e4b\u95f4\u5173\u7cfb\u6765\u7b80\u5316\u8bbe\u8ba1\u7684\u8bbe\u8ba1\u6a21\u5f0f\u3002","title":"2. \u7ed3\u6784\u578b"},{"location":"php/php-design-patterns/#3","text":"\u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\uff0c\u884c\u4e3a\u8bbe\u8ba1\u6a21\u5f0f\u662f\u8bc6\u522b\u5bf9\u8c61\u4e4b\u95f4\u7684\u901a\u7528\u901a\u4fe1\u6a21\u5f0f\u5e76\u5b9e\u73b0\u8fd9\u4e9b\u6a21\u5f0f\u7684\u8bbe\u8ba1\u6a21\u5f0f\u3002 \u901a\u8fc7\u8fd9\u6837\u505a\uff0c\u8fd9\u4e9b\u6a21\u5f0f\u589e\u52a0\u4e86\u6267\u884c\u6b64\u901a\u4fe1\u7684\u7075\u6d3b\u6027\u3002","title":"3. \u884c\u4e3a\u578b"},{"location":"php/php-design-patterns/AbstractFactory/","text":"\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\uff08Abstract Factory\uff09 # 1. \u76ee\u7684 # \u5728\u4e0d\u6307\u5b9a\u5177\u4f53\u7c7b\u7684\u60c5\u51b5\u4e0b\u521b\u5efa\u4e00\u7cfb\u5217\u76f8\u5173\u6216\u4f9d\u8d56\u5bf9\u8c61\u3002 \u901a\u5e38\u521b\u5efa\u7684\u7c7b\u90fd\u5b9e\u73b0\u76f8\u540c\u7684\u63a5\u53e3\u3002 \u62bd\u8c61\u5de5\u5382\u7684\u5ba2\u6237\u5e76\u4e0d\u5173\u5fc3\u8fd9\u4e9b\u5bf9\u8c61\u662f\u5982\u4f55\u521b\u5efa\u7684\uff0c\u5b83\u53ea\u662f\u77e5\u9053\u5b83\u4eec\u662f\u5982\u4f55\u4e00\u8d77\u8fd0\u884c\u7684\u3002 2. UML \u56fe # 3. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e2a\u4ee3\u7801\u3002 AbstractFactory.php <?php namespace DesignPatterns\\Creational\\AbstractFactory ; /** * \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u62bd\u8c61\u5de5\u5382\u662f\u521b\u5efa\u4e00\u4e9b\u7ec4\u4ef6\u7684\u5951\u7ea6 * \u5728 Web \u4e2d\u3002 \u6709\u4e24\u79cd\u5448\u73b0\u6587\u672c\u7684\u65b9\u5f0f\uff1aHTML \u548c JSON */ abstract class AbstractFactory { abstract public function createText ( string $content ) : Text ; } JsonFactory.php <?php namespace DesignPatterns\\Creational\\AbstractFactory ; class JsonFactory extends AbstractFactory { public function createText ( string $content ) : Text { return new JsonText ( $content ); } } HtmlFactory.php <?php namespace DesignPatterns\\Creational\\AbstractFactory ; class HtmlFactory extends AbstractFactory { public function createText ( string $content ) : Text { return new HtmlText ( $content ); } } Text.php <?php namespace DesignPatterns\\Creational\\AbstractFactory ; abstract class Text { /** * @var string */ private $text ; public function __construct ( string $text ) { $this -> text = $text ; } } JsonText.php <?php namespace DesignPatterns\\Creational\\AbstractFactory ; class JsonText extends Text { // \u4f60\u7684\u903b\u8f91\u4ee3\u7801 } HtmlText.php <?php namespace DesignPatterns\\Creational\\AbstractFactory ; class HtmlText extends Text { // \u4f60\u7684\u903b\u8f91\u4ee3\u7801 } 4. \u6d4b\u8bd5 # Tests/AbstractFactoryTest.php <?php namespace DesignPatterns\\Creational\\AbstractFactory\\Tests ; use DesignPatterns\\Creational\\AbstractFactory\\HtmlFactory ; use DesignPatterns\\Creational\\AbstractFactory\\HtmlText ; use DesignPatterns\\Creational\\AbstractFactory\\JsonFactory ; use DesignPatterns\\Creational\\AbstractFactory\\JsonText ; use PHPUnit\\Framework\\TestCase ; class AbstractFactoryTest extends TestCase { public function testCanCreateHtmlText () { $factory = new HtmlFactory (); $text = $factory -> createText ( 'foobar' ); $this -> assertInstanceOf ( HtmlText :: class , $text ); } public function testCanCreateJsonText () { $factory = new JsonFactory (); $text = $factory -> createText ( 'foobar' ); $this -> assertInstanceOf ( JsonText :: class , $text ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/AbstractFactory/1487","title":"\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\uff08Abstract Factory\uff09"},{"location":"php/php-design-patterns/AbstractFactory/#abstract-factory","text":"","title":"\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\uff08Abstract Factory\uff09"},{"location":"php/php-design-patterns/AbstractFactory/#1","text":"\u5728\u4e0d\u6307\u5b9a\u5177\u4f53\u7c7b\u7684\u60c5\u51b5\u4e0b\u521b\u5efa\u4e00\u7cfb\u5217\u76f8\u5173\u6216\u4f9d\u8d56\u5bf9\u8c61\u3002 \u901a\u5e38\u521b\u5efa\u7684\u7c7b\u90fd\u5b9e\u73b0\u76f8\u540c\u7684\u63a5\u53e3\u3002 \u62bd\u8c61\u5de5\u5382\u7684\u5ba2\u6237\u5e76\u4e0d\u5173\u5fc3\u8fd9\u4e9b\u5bf9\u8c61\u662f\u5982\u4f55\u521b\u5efa\u7684\uff0c\u5b83\u53ea\u662f\u77e5\u9053\u5b83\u4eec\u662f\u5982\u4f55\u4e00\u8d77\u8fd0\u884c\u7684\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/AbstractFactory/#2-uml","text":"","title":"2. UML \u56fe"},{"location":"php/php-design-patterns/AbstractFactory/#3","text":"\u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e2a\u4ee3\u7801\u3002 AbstractFactory.php <?php namespace DesignPatterns\\Creational\\AbstractFactory ; /** * \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u62bd\u8c61\u5de5\u5382\u662f\u521b\u5efa\u4e00\u4e9b\u7ec4\u4ef6\u7684\u5951\u7ea6 * \u5728 Web \u4e2d\u3002 \u6709\u4e24\u79cd\u5448\u73b0\u6587\u672c\u7684\u65b9\u5f0f\uff1aHTML \u548c JSON */ abstract class AbstractFactory { abstract public function createText ( string $content ) : Text ; } JsonFactory.php <?php namespace DesignPatterns\\Creational\\AbstractFactory ; class JsonFactory extends AbstractFactory { public function createText ( string $content ) : Text { return new JsonText ( $content ); } } HtmlFactory.php <?php namespace DesignPatterns\\Creational\\AbstractFactory ; class HtmlFactory extends AbstractFactory { public function createText ( string $content ) : Text { return new HtmlText ( $content ); } } Text.php <?php namespace DesignPatterns\\Creational\\AbstractFactory ; abstract class Text { /** * @var string */ private $text ; public function __construct ( string $text ) { $this -> text = $text ; } } JsonText.php <?php namespace DesignPatterns\\Creational\\AbstractFactory ; class JsonText extends Text { // \u4f60\u7684\u903b\u8f91\u4ee3\u7801 } HtmlText.php <?php namespace DesignPatterns\\Creational\\AbstractFactory ; class HtmlText extends Text { // \u4f60\u7684\u903b\u8f91\u4ee3\u7801 }","title":"3. \u4ee3\u7801"},{"location":"php/php-design-patterns/AbstractFactory/#4","text":"Tests/AbstractFactoryTest.php <?php namespace DesignPatterns\\Creational\\AbstractFactory\\Tests ; use DesignPatterns\\Creational\\AbstractFactory\\HtmlFactory ; use DesignPatterns\\Creational\\AbstractFactory\\HtmlText ; use DesignPatterns\\Creational\\AbstractFactory\\JsonFactory ; use DesignPatterns\\Creational\\AbstractFactory\\JsonText ; use PHPUnit\\Framework\\TestCase ; class AbstractFactoryTest extends TestCase { public function testCanCreateHtmlText () { $factory = new HtmlFactory (); $text = $factory -> createText ( 'foobar' ); $this -> assertInstanceOf ( HtmlText :: class , $text ); } public function testCanCreateJsonText () { $factory = new JsonFactory (); $text = $factory -> createText ( 'foobar' ); $this -> assertInstanceOf ( JsonText :: class , $text ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/AbstractFactory/1487","title":"4. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Adapter/","text":"\u9002\u914d\u5668\u6a21\u5f0f\uff08Adapter\uff09 # 1. \u76ee\u7684 # \u5c06\u4e00\u4e2a\u7c7b\u7684\u63a5\u53e3\u8f6c\u6362\u6210\u53ef\u5e94\u7528\u7684\u517c\u5bb9\u63a5\u53e3\u3002\u9002\u914d\u5668\u4f7f\u539f\u672c\u7531\u4e8e\u63a5\u53e3\u4e0d\u517c\u5bb9\u800c\u4e0d\u80fd\u4e00\u8d77\u5de5\u4f5c\u7684\u90a3\u4e9b\u7c7b\u53ef\u4ee5\u4e00\u8d77\u5de5\u4f5c\u3002 2. \u4f8b\u5b50 # \u5ba2\u6237\u7aef\u6570\u636e\u5e93\u9002\u914d\u5668 \u4f7f\u7528\u591a\u4e2a\u4e0d\u540c\u7684\u7f51\u7edc\u670d\u52a1\u548c\u9002\u914d\u5668\u6765\u89c4\u8303\u6570\u636e\u4f7f\u5f97\u51fa\u7ed3\u679c\u662f\u76f8\u540c\u7684 3. UML \u56fe # 4. \u4ee3\u7801 # \u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u67e5\u770b\u4ee3\u7801 BookInterface.php <?php namespace DesignPatterns\\Structural\\Adapter ; interface BookInterface { public function turnPage (); public function open (); public function getPage () : int ; } Book.php <?php namespace DesignPatterns\\Structural\\Adapter ; class Book implements BookInterface { /** * @var int */ private $page ; public function open () { $this -> page = 1 ; } public function turnPage () { $this -> page ++ ; } public function getPage () : int { return $this -> page ; } } EBookAdapter.php <?php namespace DesignPatterns\\Structural\\Adapter ; /** * \u8fd9\u91cc\u662f\u4e00\u4e2a\u9002\u914d\u5668. \u6ce8\u610f\u4ed6\u5b9e\u73b0\u4e86 BookInterface, * \u56e0\u6b64\u4f60\u4e0d\u5fc5\u53bb\u66f4\u6539\u5ba2\u6237\u7aef\u4ee3\u7801\u5f53\u4f7f\u7528 Book */ class EBookAdapter implements BookInterface { /** * @var EBookInterface */ protected $eBook ; /** * @param EBookInterface $eBook */ public function __construct ( EBookInterface $eBook ) { $this -> eBook = $eBook ; } /** * \u8fd9\u4e2a\u7c7b\u4f7f\u63a5\u53e3\u8fdb\u884c\u9002\u5f53\u7684\u8f6c\u6362. */ public function open () { $this -> eBook -> unlock (); } public function turnPage () { $this -> eBook -> pressNext (); } /** * \u6ce8\u610f\u8fd9\u91cc\u9002\u914d\u5668\u7684\u884c\u4e3a\uff1a EBookInterface::getPage() \u5c06\u8fd4\u56de\u4e24\u4e2a\u6574\u578b\uff0c\u9664\u4e86 BookInterface * \u4ec5\u652f\u6301\u83b7\u5f97\u5f53\u524d\u9875\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u9002\u914d\u8fd9\u4e2a\u884c\u4e3a * * @return int */ public function getPage () : int { return $this -> eBook -> getPage ()[ 0 ]; } } EBookInterface.php <?php namespace DesignPatterns\\Structural\\Adapter ; interface EBookInterface { public function unlock (); public function pressNext (); /** * \u8fd4\u56de\u5f53\u524d\u9875\u548c\u603b\u9875\u6570\uff0c\u50cf [10, 100] \u662f\u603b\u9875\u6570100\u4e2d\u7684\u7b2c10\u9875\u3002 * * @return int[] */ public function getPage () : array ; } Kindle.php <?php namespace DesignPatterns\\Structural\\Adapter ; /** * \u8fd9\u91cc\u662f\u9002\u914d\u8fc7\u7684\u7c7b. \u5728\u751f\u4ea7\u4ee3\u7801\u4e2d, \u8fd9\u53ef\u80fd\u662f\u6765\u81ea\u53e6\u4e00\u4e2a\u5305\u7684\u7c7b\uff0c\u4e00\u4e9b\u4f9b\u5e94\u5546\u63d0\u4f9b\u7684\u4ee3\u7801\u3002 * \u6ce8\u610f\u5b83\u4f7f\u7528\u4e86\u53e6\u4e00\u79cd\u547d\u540d\u65b9\u6848\u5e76\u7528\u53e6\u4e00\u79cd\u65b9\u5f0f\u5b9e\u73b0\u4e86\u7c7b\u4f3c\u7684\u64cd\u4f5c */ class Kindle implements EBookInterface { /** * @var int */ private $page = 1 ; /** * @var int */ private $totalPages = 100 ; public function pressNext () { $this -> page ++ ; } public function unlock () { } /** * \u8fd4\u56de\u5f53\u524d\u9875\u548c\u603b\u9875\u6570\uff0c\u50cf [10, 100] \u662f\u603b\u9875\u6570100\u4e2d\u7684\u7b2c10\u9875\u3002 * * @return int[] */ public function getPage () : array { return [ $this -> page , $this -> totalPages ]; } } 5. \u6d4b\u8bd5 # Tests/AdapterTest.php <?php namespace DesignPatterns\\Structural\\Adapter\\Tests ; use DesignPatterns\\Structural\\Adapter\\Book ; use DesignPatterns\\Structural\\Adapter\\EBookAdapter ; use DesignPatterns\\Structural\\Adapter\\Kindle ; use PHPUnit\\Framework\\TestCase ; class AdapterTest extends TestCase { public function testCanTurnPageOnBook () { $book = new Book (); $book -> open (); $book -> turnPage (); $this -> assertEquals ( 2 , $book -> getPage ()); } public function testCanTurnPageOnKindleLikeInANormalBook () { $kindle = new Kindle (); $book = new EBookAdapter ( $kindle ); $book -> open (); $book -> turnPage (); $this -> assertEquals ( 2 , $book -> getPage ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Adapter/1496","title":"\u9002\u914d\u5668\u6a21\u5f0f\uff08Adapter\uff09"},{"location":"php/php-design-patterns/Adapter/#adapter","text":"","title":"\u9002\u914d\u5668\u6a21\u5f0f\uff08Adapter\uff09"},{"location":"php/php-design-patterns/Adapter/#1","text":"\u5c06\u4e00\u4e2a\u7c7b\u7684\u63a5\u53e3\u8f6c\u6362\u6210\u53ef\u5e94\u7528\u7684\u517c\u5bb9\u63a5\u53e3\u3002\u9002\u914d\u5668\u4f7f\u539f\u672c\u7531\u4e8e\u63a5\u53e3\u4e0d\u517c\u5bb9\u800c\u4e0d\u80fd\u4e00\u8d77\u5de5\u4f5c\u7684\u90a3\u4e9b\u7c7b\u53ef\u4ee5\u4e00\u8d77\u5de5\u4f5c\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Adapter/#2","text":"\u5ba2\u6237\u7aef\u6570\u636e\u5e93\u9002\u914d\u5668 \u4f7f\u7528\u591a\u4e2a\u4e0d\u540c\u7684\u7f51\u7edc\u670d\u52a1\u548c\u9002\u914d\u5668\u6765\u89c4\u8303\u6570\u636e\u4f7f\u5f97\u51fa\u7ed3\u679c\u662f\u76f8\u540c\u7684","title":"2. \u4f8b\u5b50"},{"location":"php/php-design-patterns/Adapter/#3-uml","text":"","title":"3. UML \u56fe"},{"location":"php/php-design-patterns/Adapter/#4","text":"\u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u67e5\u770b\u4ee3\u7801 BookInterface.php <?php namespace DesignPatterns\\Structural\\Adapter ; interface BookInterface { public function turnPage (); public function open (); public function getPage () : int ; } Book.php <?php namespace DesignPatterns\\Structural\\Adapter ; class Book implements BookInterface { /** * @var int */ private $page ; public function open () { $this -> page = 1 ; } public function turnPage () { $this -> page ++ ; } public function getPage () : int { return $this -> page ; } } EBookAdapter.php <?php namespace DesignPatterns\\Structural\\Adapter ; /** * \u8fd9\u91cc\u662f\u4e00\u4e2a\u9002\u914d\u5668. \u6ce8\u610f\u4ed6\u5b9e\u73b0\u4e86 BookInterface, * \u56e0\u6b64\u4f60\u4e0d\u5fc5\u53bb\u66f4\u6539\u5ba2\u6237\u7aef\u4ee3\u7801\u5f53\u4f7f\u7528 Book */ class EBookAdapter implements BookInterface { /** * @var EBookInterface */ protected $eBook ; /** * @param EBookInterface $eBook */ public function __construct ( EBookInterface $eBook ) { $this -> eBook = $eBook ; } /** * \u8fd9\u4e2a\u7c7b\u4f7f\u63a5\u53e3\u8fdb\u884c\u9002\u5f53\u7684\u8f6c\u6362. */ public function open () { $this -> eBook -> unlock (); } public function turnPage () { $this -> eBook -> pressNext (); } /** * \u6ce8\u610f\u8fd9\u91cc\u9002\u914d\u5668\u7684\u884c\u4e3a\uff1a EBookInterface::getPage() \u5c06\u8fd4\u56de\u4e24\u4e2a\u6574\u578b\uff0c\u9664\u4e86 BookInterface * \u4ec5\u652f\u6301\u83b7\u5f97\u5f53\u524d\u9875\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u9002\u914d\u8fd9\u4e2a\u884c\u4e3a * * @return int */ public function getPage () : int { return $this -> eBook -> getPage ()[ 0 ]; } } EBookInterface.php <?php namespace DesignPatterns\\Structural\\Adapter ; interface EBookInterface { public function unlock (); public function pressNext (); /** * \u8fd4\u56de\u5f53\u524d\u9875\u548c\u603b\u9875\u6570\uff0c\u50cf [10, 100] \u662f\u603b\u9875\u6570100\u4e2d\u7684\u7b2c10\u9875\u3002 * * @return int[] */ public function getPage () : array ; } Kindle.php <?php namespace DesignPatterns\\Structural\\Adapter ; /** * \u8fd9\u91cc\u662f\u9002\u914d\u8fc7\u7684\u7c7b. \u5728\u751f\u4ea7\u4ee3\u7801\u4e2d, \u8fd9\u53ef\u80fd\u662f\u6765\u81ea\u53e6\u4e00\u4e2a\u5305\u7684\u7c7b\uff0c\u4e00\u4e9b\u4f9b\u5e94\u5546\u63d0\u4f9b\u7684\u4ee3\u7801\u3002 * \u6ce8\u610f\u5b83\u4f7f\u7528\u4e86\u53e6\u4e00\u79cd\u547d\u540d\u65b9\u6848\u5e76\u7528\u53e6\u4e00\u79cd\u65b9\u5f0f\u5b9e\u73b0\u4e86\u7c7b\u4f3c\u7684\u64cd\u4f5c */ class Kindle implements EBookInterface { /** * @var int */ private $page = 1 ; /** * @var int */ private $totalPages = 100 ; public function pressNext () { $this -> page ++ ; } public function unlock () { } /** * \u8fd4\u56de\u5f53\u524d\u9875\u548c\u603b\u9875\u6570\uff0c\u50cf [10, 100] \u662f\u603b\u9875\u6570100\u4e2d\u7684\u7b2c10\u9875\u3002 * * @return int[] */ public function getPage () : array { return [ $this -> page , $this -> totalPages ]; } }","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/Adapter/#5","text":"Tests/AdapterTest.php <?php namespace DesignPatterns\\Structural\\Adapter\\Tests ; use DesignPatterns\\Structural\\Adapter\\Book ; use DesignPatterns\\Structural\\Adapter\\EBookAdapter ; use DesignPatterns\\Structural\\Adapter\\Kindle ; use PHPUnit\\Framework\\TestCase ; class AdapterTest extends TestCase { public function testCanTurnPageOnBook () { $book = new Book (); $book -> open (); $book -> turnPage (); $this -> assertEquals ( 2 , $book -> getPage ()); } public function testCanTurnPageOnKindleLikeInANormalBook () { $kindle = new Kindle (); $book = new EBookAdapter ( $kindle ); $book -> open (); $book -> turnPage (); $this -> assertEquals ( 2 , $book -> getPage ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Adapter/1496","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Anti-pattern/","text":"\u53cd\u9762\u6a21\u5f0f\uff08Anti-pattern\uff09 # \u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\uff0c\u4e00\u4e2a\u53cd\u9762\u6a21\u5f0f\uff08Anti-pattern \u6216 Antipattern\uff09\u6307\u7684\u662f\u5728\u5b9e\u8df5\u4e2d\u660e\u663e\u51fa\u73b0\u4f46\u53c8\u4f4e\u6548\u6216\u662f\u6709\u5f85\u4f18\u5316\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u662f\u7528\u6765\u89e3\u51b3\u95ee\u9898\u7684\u5e26\u6709\u5171\u540c\u6027\u7684\u4e0d\u826f\u65b9\u6cd5\u3002\u5b83\u4eec\u5df2\u7ecf\u7ecf\u8fc7\u7814\u7a76\u5e76\u5206\u7c7b\uff0c\u4ee5\u9632\u6b62\u65e5\u540e\u91cd\u8e48\u8986\u8f99\uff0c\u5e76\u80fd\u5728\u7814\u53d1\u5c1a\u672a\u6295\u4ea7\u7684\u7cfb\u7edf\u65f6\u8fa8\u8ba4\u51fa\u6765\u3002 Andrew Koenig \u5728 1995 \u5e74\u9020\u4e86 Anti-pattern \u8fd9\u4e2a\u8bcd\uff0c\u7075\u611f\u6765\u81ea\u4e8e GoF \u7684\u300a\u8bbe\u8ba1\u6a21\u5f0f\u300b\u4e00\u4e66\u3002\u800c\u8fd9\u672c\u4e66\u5219\u5728\u8f6f\u4ef6\u9886\u57df\u5f15\u5165\u4e86\u201c\u8bbe\u8ba1\u6a21\u5f0f\u201d\uff08Design Pattern\uff09\u7684\u6982\u5ff5\u3002\u4e09\u5e74\u540e Antipattern \u56e0\u300aAntiPatterns\u300b\u8fd9\u672c\u4e66\u800c\u83b7\u5f97\u666e\u53ca\uff0c\u800c\u5b83\u7684\u4f7f\u7528\u4e5f\u4ece\u8f6f\u4ef6\u8bbe\u8ba1\u9886\u57df\u6269\u5c55\u5230\u4e86\u65e5\u5e38\u7684\u793e\u4f1a\u4e92\u52a8\u4e2d\u3002\u6309\u300aAntiPatterns\u300b\u4f5c\u8005\u7684\u8bf4\u6cd5\uff0c\u53ef\u4ee5\u7528\u81f3\u5c11\u4e24\u4e2a\u5173\u952e\u56e0\u7d20\u6765\u628a\u53cd\u9762\u6a21\u5f0f\u548c\u4e0d\u826f\u4e60\u60ef\u3001\u9519\u8bef\u7684\u5b9e\u8df5\u6216\u7cdf\u7cd5\u7684\u60f3\u6cd5\u533a\u5206\u5f00\u6765\uff1a \u884c\u52a8\u3001\u8fc7\u7a0b\u548c\u7ed3\u6784\u4e2d\u7684\u4e00\u4e9b\u91cd\u590d\u51fa\u73b0\u7684\u4e4d\u4e00\u770b\u662f\u6709\u76ca\u7684\uff0c\u4f46\u6700\u7ec8\u5f97\u4e0d\u507f\u5931\u7684\u6a21\u5f0f \u5728\u5b9e\u8df5\u4e2d\u8bc1\u660e\u4e14\u53ef\u91cd\u590d\u7684\u6e05\u6670\u8bb0\u5f55\u7684\u91cd\u6784\u65b9\u6848 \u5f88\u591a\u53cd\u9762\u6a21\u5f0f\u53ea\u76f8\u5f53\u4e8e\u662f\u9519\u8bef\u3001\u5486\u54ee\u3001\u4e0d\u53ef\u89e3\u7684\u95ee\u9898\u3001\u6216\u662f\u53ef\u80fd\u53ef\u4ee5\u907f\u514d\u7684\u7cdf\u7cd5\u7684\u5b9e\u8df5\uff0c\u5b83\u4eec\u7684\u540d\u5b57\u901a\u5e38\u90fd\u662f\u4e00\u4e9b\u7528\u53cd\u8bdd\u6784\u6210\u7684\u8bcd\u8bed\u3002\u6709\u4e9b\u65f6\u5019\u9677\u9631\uff08Pitfalls\uff09\u6216\u9ed1\u8272\u6a21\u5f0f\uff08Dark Patterns\uff09\u8fd9\u4e9b\u4e0d\u6b63\u5f0f\u7684\u8bf4\u6cd5\u4f1a\u88ab\u7528\u6765\u6307\u4ee3\u5404\u7c7b\u53cd\u590d\u51fa\u73b0\u7684\u7cdf\u7cd5\u7684\u89e3\u51b3\u65b9\u6cd5\u3002\u56e0\u6b64\uff0c\u4e00\u4e9b\u6709\u4e89\u8bae\u7684\u5019\u9009\u7684\u53cd\u9762\u6a21\u5f0f\u4e0d\u4f1a\u88ab\u6b63\u5f0f\u627f\u8ba4\u3002 \u2014\u2014 \u4ee5\u4e0a\u6458\u81ea wikipedia \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/anti-pattern/1526","title":"\u53cd\u9762\u6a21\u5f0f\uff08Anti-pattern\uff09"},{"location":"php/php-design-patterns/Anti-pattern/#anti-pattern","text":"\u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\uff0c\u4e00\u4e2a\u53cd\u9762\u6a21\u5f0f\uff08Anti-pattern \u6216 Antipattern\uff09\u6307\u7684\u662f\u5728\u5b9e\u8df5\u4e2d\u660e\u663e\u51fa\u73b0\u4f46\u53c8\u4f4e\u6548\u6216\u662f\u6709\u5f85\u4f18\u5316\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u662f\u7528\u6765\u89e3\u51b3\u95ee\u9898\u7684\u5e26\u6709\u5171\u540c\u6027\u7684\u4e0d\u826f\u65b9\u6cd5\u3002\u5b83\u4eec\u5df2\u7ecf\u7ecf\u8fc7\u7814\u7a76\u5e76\u5206\u7c7b\uff0c\u4ee5\u9632\u6b62\u65e5\u540e\u91cd\u8e48\u8986\u8f99\uff0c\u5e76\u80fd\u5728\u7814\u53d1\u5c1a\u672a\u6295\u4ea7\u7684\u7cfb\u7edf\u65f6\u8fa8\u8ba4\u51fa\u6765\u3002 Andrew Koenig \u5728 1995 \u5e74\u9020\u4e86 Anti-pattern \u8fd9\u4e2a\u8bcd\uff0c\u7075\u611f\u6765\u81ea\u4e8e GoF \u7684\u300a\u8bbe\u8ba1\u6a21\u5f0f\u300b\u4e00\u4e66\u3002\u800c\u8fd9\u672c\u4e66\u5219\u5728\u8f6f\u4ef6\u9886\u57df\u5f15\u5165\u4e86\u201c\u8bbe\u8ba1\u6a21\u5f0f\u201d\uff08Design Pattern\uff09\u7684\u6982\u5ff5\u3002\u4e09\u5e74\u540e Antipattern \u56e0\u300aAntiPatterns\u300b\u8fd9\u672c\u4e66\u800c\u83b7\u5f97\u666e\u53ca\uff0c\u800c\u5b83\u7684\u4f7f\u7528\u4e5f\u4ece\u8f6f\u4ef6\u8bbe\u8ba1\u9886\u57df\u6269\u5c55\u5230\u4e86\u65e5\u5e38\u7684\u793e\u4f1a\u4e92\u52a8\u4e2d\u3002\u6309\u300aAntiPatterns\u300b\u4f5c\u8005\u7684\u8bf4\u6cd5\uff0c\u53ef\u4ee5\u7528\u81f3\u5c11\u4e24\u4e2a\u5173\u952e\u56e0\u7d20\u6765\u628a\u53cd\u9762\u6a21\u5f0f\u548c\u4e0d\u826f\u4e60\u60ef\u3001\u9519\u8bef\u7684\u5b9e\u8df5\u6216\u7cdf\u7cd5\u7684\u60f3\u6cd5\u533a\u5206\u5f00\u6765\uff1a \u884c\u52a8\u3001\u8fc7\u7a0b\u548c\u7ed3\u6784\u4e2d\u7684\u4e00\u4e9b\u91cd\u590d\u51fa\u73b0\u7684\u4e4d\u4e00\u770b\u662f\u6709\u76ca\u7684\uff0c\u4f46\u6700\u7ec8\u5f97\u4e0d\u507f\u5931\u7684\u6a21\u5f0f \u5728\u5b9e\u8df5\u4e2d\u8bc1\u660e\u4e14\u53ef\u91cd\u590d\u7684\u6e05\u6670\u8bb0\u5f55\u7684\u91cd\u6784\u65b9\u6848 \u5f88\u591a\u53cd\u9762\u6a21\u5f0f\u53ea\u76f8\u5f53\u4e8e\u662f\u9519\u8bef\u3001\u5486\u54ee\u3001\u4e0d\u53ef\u89e3\u7684\u95ee\u9898\u3001\u6216\u662f\u53ef\u80fd\u53ef\u4ee5\u907f\u514d\u7684\u7cdf\u7cd5\u7684\u5b9e\u8df5\uff0c\u5b83\u4eec\u7684\u540d\u5b57\u901a\u5e38\u90fd\u662f\u4e00\u4e9b\u7528\u53cd\u8bdd\u6784\u6210\u7684\u8bcd\u8bed\u3002\u6709\u4e9b\u65f6\u5019\u9677\u9631\uff08Pitfalls\uff09\u6216\u9ed1\u8272\u6a21\u5f0f\uff08Dark Patterns\uff09\u8fd9\u4e9b\u4e0d\u6b63\u5f0f\u7684\u8bf4\u6cd5\u4f1a\u88ab\u7528\u6765\u6307\u4ee3\u5404\u7c7b\u53cd\u590d\u51fa\u73b0\u7684\u7cdf\u7cd5\u7684\u89e3\u51b3\u65b9\u6cd5\u3002\u56e0\u6b64\uff0c\u4e00\u4e9b\u6709\u4e89\u8bae\u7684\u5019\u9009\u7684\u53cd\u9762\u6a21\u5f0f\u4e0d\u4f1a\u88ab\u6b63\u5f0f\u627f\u8ba4\u3002 \u2014\u2014 \u4ee5\u4e0a\u6458\u81ea wikipedia \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/anti-pattern/1526","title":"\u53cd\u9762\u6a21\u5f0f\uff08Anti-pattern\uff09"},{"location":"php/php-design-patterns/Bridge/","text":"\u6865\u6881\u6a21\u5f0f\uff08Bridge\uff09 # 1. \u76ee\u7684 # \u5c06\u62bd\u8c61\u4e0e\u5b9e\u73b0\u5206\u79bb\uff0c\u8fd9\u6837\u4e24\u8005\u53ef\u4ee5\u72ec\u7acb\u5730\u6539\u53d8\u3002 2. \u4f8b\u5b50 # Symfony \u5b66\u672f\u6865\u6881 3. UML \u56fe # 4. \u4ee3\u7801 # \u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u67e5\u770b\u4ee3\u7801 FormatterInterface.php <?php namespace DesignPatterns\\Structural\\Bridge ; /** * \u521b\u5efa\u683c\u5f0f\u5316\u63a5\u53e3\u3002 */ interface FormatterInterface { public function format ( string $text ); } PlainTextFormatter.php <?php namespace DesignPatterns\\Structural\\Bridge ; /** * \u521b\u5efa PlainTextFormatter \u6587\u672c\u683c\u5f0f\u7c7b\u5b9e\u73b0 FormatterInterface \u63a5\u53e3\u3002 */ class PlainTextFormatter implements FormatterInterface { /** * \u8fd4\u56de\u5b57\u7b26\u4e32\u683c\u5f0f\u3002 */ public function format ( string $text ) { return $text ; } } HtmlFormatter.php <?php namespace DesignPatterns\\Structural\\Bridge ; /** * \u521b\u5efa HtmlFormatter HTML \u683c\u5f0f\u7c7b\u5b9e\u73b0 FormatterInterface \u63a5\u53e3\u3002 */ class HtmlFormatter implements FormatterInterface { /** * \u8fd4\u56de HTML \u683c\u5f0f\u3002 */ public function format ( string $text ) { return sprintf ( '<p>%s</p>' , $text ); } } Service.php <?php namespace DesignPatterns\\Structural\\Bridge ; /** * \u521b\u5efa\u62bd\u8c61\u7c7b Service\u3002 */ abstract class Service { /** * @var FormatterInterface * \u5b9a\u4e49\u5b9e\u73b0\u5c5e\u6027\u3002 */ protected $implementation ; /** * @param FormatterInterface $printer * \u4f20\u5165 FormatterInterface \u5b9e\u73b0\u7c7b\u5bf9\u8c61\u3002 */ public function __construct ( FormatterInterface $printer ) { $this -> implementation = $printer ; } /** * @param FormatterInterface $printer * \u548c\u6784\u9020\u65b9\u6cd5\u7684\u4f5c\u7528\u76f8\u540c\u3002 */ public function setImplementation ( FormatterInterface $printer ) { $this -> implementation = $printer ; } /** * \u521b\u5efa\u62bd\u8c61\u65b9\u6cd5 get() \u3002 */ abstract public function get (); } HelloWorldService.php <?php namespace DesignPatterns\\Structural\\Bridge ; /** * \u521b\u5efa Service \u5b50\u7c7b HelloWorldService \u3002 */ class HelloWorldService extends Service { /** * \u5b9a\u4e49\u62bd\u8c61\u65b9\u6cd5 get() \u3002 * \u6839\u636e\u4f20\u5165\u7684\u683c\u5f0f\u7c7b\u5b9a\u4e49\u6765\u683c\u5f0f\u5316\u8f93\u51fa 'Hello World' \u3002 */ public function get () { return $this -> implementation -> format ( 'Hello World' ); } } 5. \u6d4b\u8bd5 # Tests/BridgeTest.php <?php namespace DesignPatterns\\Structural\\Bridge\\Tests ; use DesignPatterns\\Structural\\Bridge\\HelloWorldService ; use DesignPatterns\\Structural\\Bridge\\HtmlFormatter ; use DesignPatterns\\Structural\\Bridge\\PlainTextFormatter ; use PHPUnit\\Framework\\TestCase ; /** * \u521b\u5efa\u81ea\u52a8\u5316\u6d4b\u8bd5\u5355\u5143 BridgeTest \u3002 */ class BridgeTest extends TestCase { /** * \u4f7f\u7528 HelloWorldService \u5206\u522b\u6d4b\u8bd5\u6587\u672c\u683c\u5f0f\u5b9e\u73b0\u7c7b\u548c HTML \u683c\u5f0f\u5b9e * \u73b0\u7c7b\u3002 */ public function testCanPrintUsingThePlainTextPrinter () { $service = new HelloWorldService ( new PlainTextFormatter ()); $this -> assertEquals ( 'Hello World' , $service -> get ()); // \u73b0\u5728\u66f4\u6539\u5b9e\u73b0\u65b9\u6cd5\u4e3a\u4f7f\u7528 HTML \u683c\u5f0f\u5668\u3002 $service -> setImplementation ( new HtmlFormatter ()); $this -> assertEquals ( '<p>Hello World</p>' , $service -> get ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Bridge/1497","title":"\u6865\u6881\u6a21\u5f0f\uff08Bridge\uff09"},{"location":"php/php-design-patterns/Bridge/#bridge","text":"","title":"\u6865\u6881\u6a21\u5f0f\uff08Bridge\uff09"},{"location":"php/php-design-patterns/Bridge/#1","text":"\u5c06\u62bd\u8c61\u4e0e\u5b9e\u73b0\u5206\u79bb\uff0c\u8fd9\u6837\u4e24\u8005\u53ef\u4ee5\u72ec\u7acb\u5730\u6539\u53d8\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Bridge/#2","text":"Symfony \u5b66\u672f\u6865\u6881","title":"2. \u4f8b\u5b50"},{"location":"php/php-design-patterns/Bridge/#3-uml","text":"","title":"3. UML \u56fe"},{"location":"php/php-design-patterns/Bridge/#4","text":"\u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u67e5\u770b\u4ee3\u7801 FormatterInterface.php <?php namespace DesignPatterns\\Structural\\Bridge ; /** * \u521b\u5efa\u683c\u5f0f\u5316\u63a5\u53e3\u3002 */ interface FormatterInterface { public function format ( string $text ); } PlainTextFormatter.php <?php namespace DesignPatterns\\Structural\\Bridge ; /** * \u521b\u5efa PlainTextFormatter \u6587\u672c\u683c\u5f0f\u7c7b\u5b9e\u73b0 FormatterInterface \u63a5\u53e3\u3002 */ class PlainTextFormatter implements FormatterInterface { /** * \u8fd4\u56de\u5b57\u7b26\u4e32\u683c\u5f0f\u3002 */ public function format ( string $text ) { return $text ; } } HtmlFormatter.php <?php namespace DesignPatterns\\Structural\\Bridge ; /** * \u521b\u5efa HtmlFormatter HTML \u683c\u5f0f\u7c7b\u5b9e\u73b0 FormatterInterface \u63a5\u53e3\u3002 */ class HtmlFormatter implements FormatterInterface { /** * \u8fd4\u56de HTML \u683c\u5f0f\u3002 */ public function format ( string $text ) { return sprintf ( '<p>%s</p>' , $text ); } } Service.php <?php namespace DesignPatterns\\Structural\\Bridge ; /** * \u521b\u5efa\u62bd\u8c61\u7c7b Service\u3002 */ abstract class Service { /** * @var FormatterInterface * \u5b9a\u4e49\u5b9e\u73b0\u5c5e\u6027\u3002 */ protected $implementation ; /** * @param FormatterInterface $printer * \u4f20\u5165 FormatterInterface \u5b9e\u73b0\u7c7b\u5bf9\u8c61\u3002 */ public function __construct ( FormatterInterface $printer ) { $this -> implementation = $printer ; } /** * @param FormatterInterface $printer * \u548c\u6784\u9020\u65b9\u6cd5\u7684\u4f5c\u7528\u76f8\u540c\u3002 */ public function setImplementation ( FormatterInterface $printer ) { $this -> implementation = $printer ; } /** * \u521b\u5efa\u62bd\u8c61\u65b9\u6cd5 get() \u3002 */ abstract public function get (); } HelloWorldService.php <?php namespace DesignPatterns\\Structural\\Bridge ; /** * \u521b\u5efa Service \u5b50\u7c7b HelloWorldService \u3002 */ class HelloWorldService extends Service { /** * \u5b9a\u4e49\u62bd\u8c61\u65b9\u6cd5 get() \u3002 * \u6839\u636e\u4f20\u5165\u7684\u683c\u5f0f\u7c7b\u5b9a\u4e49\u6765\u683c\u5f0f\u5316\u8f93\u51fa 'Hello World' \u3002 */ public function get () { return $this -> implementation -> format ( 'Hello World' ); } }","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/Bridge/#5","text":"Tests/BridgeTest.php <?php namespace DesignPatterns\\Structural\\Bridge\\Tests ; use DesignPatterns\\Structural\\Bridge\\HelloWorldService ; use DesignPatterns\\Structural\\Bridge\\HtmlFormatter ; use DesignPatterns\\Structural\\Bridge\\PlainTextFormatter ; use PHPUnit\\Framework\\TestCase ; /** * \u521b\u5efa\u81ea\u52a8\u5316\u6d4b\u8bd5\u5355\u5143 BridgeTest \u3002 */ class BridgeTest extends TestCase { /** * \u4f7f\u7528 HelloWorldService \u5206\u522b\u6d4b\u8bd5\u6587\u672c\u683c\u5f0f\u5b9e\u73b0\u7c7b\u548c HTML \u683c\u5f0f\u5b9e * \u73b0\u7c7b\u3002 */ public function testCanPrintUsingThePlainTextPrinter () { $service = new HelloWorldService ( new PlainTextFormatter ()); $this -> assertEquals ( 'Hello World' , $service -> get ()); // \u73b0\u5728\u66f4\u6539\u5b9e\u73b0\u65b9\u6cd5\u4e3a\u4f7f\u7528 HTML \u683c\u5f0f\u5668\u3002 $service -> setImplementation ( new HtmlFormatter ()); $this -> assertEquals ( '<p>Hello World</p>' , $service -> get ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Bridge/1497","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Builder/","text":"\u5efa\u9020\u8005\u6a21\u5f0f\uff08Builder\uff09 # 1. \u76ee\u7684 # \u5efa\u9020\u8005\u662f\u521b\u5efa\u4e00\u4e2a\u590d\u6742\u5bf9\u8c61\u7684\u4e00\u90e8\u5206\u63a5\u53e3\u3002 \u6709\u65f6\u5019\uff0c\u5982\u679c\u5efa\u9020\u8005\u5bf9\u4ed6\u6240\u521b\u5efa\u7684\u4e1c\u897f\u62e5\u6709\u8f83\u597d\u7684\u77e5\u8bc6\u50a8\u5907\uff0c\u8fd9\u4e2a\u63a5\u53e3\u5c31\u53ef\u80fd\u6210\u4e3a\u4e00\u4e2a\u6709\u9ed8\u8ba4\u65b9\u6cd5\u7684\u62bd\u8c61\u7c7b\uff08\u53c8\u79f0\u4e3a\u9002\u914d\u5668\uff09\u3002 \u5982\u679c\u5bf9\u8c61\u6709\u590d\u6742\u7684\u7ee7\u627f\u6811\uff0c\u90a3\u4e48\u5bf9\u4e8e\u5efa\u9020\u8005\u6765\u8bf4\uff0c\u6709\u4e00\u4e2a\u590d\u6742\u7ee7\u627f\u6811\u4e5f\u662f\u7b26\u5408\u903b\u8f91\u7684\u3002 \u6ce8\u610f\uff1a\u5efa\u9020\u8005\u901a\u5e38\u6709\u4e00\u4e2a\u300c \u6d41\u5f0f\u63a5\u53e3 \u300d\uff0c\u4f8b\u5982 PHPUnit \u6a21\u62df\u751f\u6210\u5668\u3002 2. \u4f8b\u5b50 # PHPUnit: \u6a21\u62df\u751f\u6210\u5668 3. UML \u56fe # 4. \u4ee3\u7801 # \u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e2a\u4ee3\u7801\u3002 Director.php <?php namespace DesignPatterns\\Creational\\Builder ; use DesignPatterns\\Creational\\Builder\\Parts\\Vehicle ; /** * Director \u7c7b\u662f\u5efa\u9020\u8005\u6a21\u5f0f\u7684\u4e00\u90e8\u5206\u3002 \u5b83\u53ef\u4ee5\u5b9e\u73b0\u5efa\u9020\u8005\u6a21\u5f0f\u7684\u63a5\u53e3 * \u5e76\u5728\u6784\u5efa\u5668\u7684\u5e2e\u52a9\u4e0b\u6784\u5efa\u4e00\u4e2a\u590d\u6742\u7684\u5bf9\u8c61 * * \u60a8\u4e5f\u53ef\u4ee5\u6ce8\u5165\u8bb8\u591a\u6784\u5efa\u5668\u800c\u4e0d\u662f\u6784\u5efa\u66f4\u590d\u6742\u7684\u5bf9\u8c61 */ class Director { public function build ( BuilderInterface $builder ) : Vehicle { $builder -> createVehicle (); $builder -> addDoors (); $builder -> addEngine (); $builder -> addWheel (); return $builder -> getVehicle (); } } BuilderInterface.php <?php namespace DesignPatterns\\Creational\\Builder ; use DesignPatterns\\Creational\\Builder\\Parts\\Vehicle ; interface BuilderInterface { public function createVehicle (); public function addWheel (); public function addEngine (); public function addDoors (); public function getVehicle () : Vehicle ; } TruckBuilder.php <?php namespace DesignPatterns\\Creational\\Builder ; use DesignPatterns\\Creational\\Builder\\Parts\\Vehicle ; class TruckBuilder implements BuilderInterface { /** * @var Parts\\Truck */ private $truck ; public function addDoors () { $this -> truck -> setPart ( 'rightDoor' , new Parts\\Door ()); $this -> truck -> setPart ( 'leftDoor' , new Parts\\Door ()); } public function addEngine () { $this -> truck -> setPart ( 'truckEngine' , new Parts\\Engine ()); } public function addWheel () { $this -> truck -> setPart ( 'wheel1' , new Parts\\Wheel ()); $this -> truck -> setPart ( 'wheel2' , new Parts\\Wheel ()); $this -> truck -> setPart ( 'wheel3' , new Parts\\Wheel ()); $this -> truck -> setPart ( 'wheel4' , new Parts\\Wheel ()); $this -> truck -> setPart ( 'wheel5' , new Parts\\Wheel ()); $this -> truck -> setPart ( 'wheel6' , new Parts\\Wheel ()); } public function createVehicle () { $this -> truck = new Parts\\Truck (); } public function getVehicle () : Vehicle { return $this -> truck ; } } CarBuilder.php <?php namespace DesignPatterns\\Creational\\Builder ; use DesignPatterns\\Creational\\Builder\\Parts\\Vehicle ; class CarBuilder implements BuilderInterface { /** * @var Parts\\Car */ private $car ; public function addDoors () { $this -> car -> setPart ( 'rightDoor' , new Parts\\Door ()); $this -> car -> setPart ( 'leftDoor' , new Parts\\Door ()); $this -> car -> setPart ( 'trunkLid' , new Parts\\Door ()); } public function addEngine () { $this -> car -> setPart ( 'engine' , new Parts\\Engine ()); } public function addWheel () { $this -> car -> setPart ( 'wheelLF' , new Parts\\Wheel ()); $this -> car -> setPart ( 'wheelRF' , new Parts\\Wheel ()); $this -> car -> setPart ( 'wheelLR' , new Parts\\Wheel ()); $this -> car -> setPart ( 'wheelRR' , new Parts\\Wheel ()); } public function createVehicle () { $this -> car = new Parts\\Car (); } public function getVehicle () : Vehicle { return $this -> car ; } } Parts/Vehicle.php <?php namespace DesignPatterns\\Creational\\Builder\\Parts ; abstract class Vehicle { /** * @var object[] */ private $data = []; /** * @param string $key * @param object $value */ public function setPart ( $key , $value ) { $this -> data [ $key ] = $value ; } } Parts/Truck.php <?php namespace DesignPatterns\\Creational\\Builder\\Parts ; class Truck extends Vehicle { } Parts/Car.php <?php namespace DesignPatterns\\Creational\\Builder\\Parts ; class Car extends Vehicle { } Parts/Engine.php <?php namespace DesignPatterns\\Creational\\Builder\\Parts ; class Engine { } Parts/Wheel.php <?php namespace DesignPatterns\\Creational\\Builder\\Parts ; class Wheel { } Parts/Door.php <?php namespace DesignPatterns\\Creational\\Builder\\Parts ; class Door { } 5. \u6d4b\u8bd5 # Tests/DirectorTest.php <?php namespace DesignPatterns\\Creational\\Builder\\Tests ; use DesignPatterns\\Creational\\Builder\\Parts\\Car ; use DesignPatterns\\Creational\\Builder\\Parts\\Truck ; use DesignPatterns\\Creational\\Builder\\TruckBuilder ; use DesignPatterns\\Creational\\Builder\\CarBuilder ; use DesignPatterns\\Creational\\Builder\\Director ; use PHPUnit\\Framework\\TestCase ; class DirectorTest extends TestCase { public function testCanBuildTruck () { $truckBuilder = new TruckBuilder (); $newVehicle = ( new Director ()) -> build ( $truckBuilder ); $this -> assertInstanceOf ( Truck :: class , $newVehicle ); } public function testCanBuildCar () { $carBuilder = new CarBuilder (); $newVehicle = ( new Director ()) -> build ( $carBuilder ); $this -> assertInstanceOf ( Car :: class , $newVehicle ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Builder/1488","title":"\u5efa\u9020\u8005\u6a21\u5f0f\uff08Builder\uff09"},{"location":"php/php-design-patterns/Builder/#builder","text":"","title":"\u5efa\u9020\u8005\u6a21\u5f0f\uff08Builder\uff09"},{"location":"php/php-design-patterns/Builder/#1","text":"\u5efa\u9020\u8005\u662f\u521b\u5efa\u4e00\u4e2a\u590d\u6742\u5bf9\u8c61\u7684\u4e00\u90e8\u5206\u63a5\u53e3\u3002 \u6709\u65f6\u5019\uff0c\u5982\u679c\u5efa\u9020\u8005\u5bf9\u4ed6\u6240\u521b\u5efa\u7684\u4e1c\u897f\u62e5\u6709\u8f83\u597d\u7684\u77e5\u8bc6\u50a8\u5907\uff0c\u8fd9\u4e2a\u63a5\u53e3\u5c31\u53ef\u80fd\u6210\u4e3a\u4e00\u4e2a\u6709\u9ed8\u8ba4\u65b9\u6cd5\u7684\u62bd\u8c61\u7c7b\uff08\u53c8\u79f0\u4e3a\u9002\u914d\u5668\uff09\u3002 \u5982\u679c\u5bf9\u8c61\u6709\u590d\u6742\u7684\u7ee7\u627f\u6811\uff0c\u90a3\u4e48\u5bf9\u4e8e\u5efa\u9020\u8005\u6765\u8bf4\uff0c\u6709\u4e00\u4e2a\u590d\u6742\u7ee7\u627f\u6811\u4e5f\u662f\u7b26\u5408\u903b\u8f91\u7684\u3002 \u6ce8\u610f\uff1a\u5efa\u9020\u8005\u901a\u5e38\u6709\u4e00\u4e2a\u300c \u6d41\u5f0f\u63a5\u53e3 \u300d\uff0c\u4f8b\u5982 PHPUnit \u6a21\u62df\u751f\u6210\u5668\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Builder/#2","text":"PHPUnit: \u6a21\u62df\u751f\u6210\u5668","title":"2. \u4f8b\u5b50"},{"location":"php/php-design-patterns/Builder/#3-uml","text":"","title":"3. UML \u56fe"},{"location":"php/php-design-patterns/Builder/#4","text":"\u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e2a\u4ee3\u7801\u3002 Director.php <?php namespace DesignPatterns\\Creational\\Builder ; use DesignPatterns\\Creational\\Builder\\Parts\\Vehicle ; /** * Director \u7c7b\u662f\u5efa\u9020\u8005\u6a21\u5f0f\u7684\u4e00\u90e8\u5206\u3002 \u5b83\u53ef\u4ee5\u5b9e\u73b0\u5efa\u9020\u8005\u6a21\u5f0f\u7684\u63a5\u53e3 * \u5e76\u5728\u6784\u5efa\u5668\u7684\u5e2e\u52a9\u4e0b\u6784\u5efa\u4e00\u4e2a\u590d\u6742\u7684\u5bf9\u8c61 * * \u60a8\u4e5f\u53ef\u4ee5\u6ce8\u5165\u8bb8\u591a\u6784\u5efa\u5668\u800c\u4e0d\u662f\u6784\u5efa\u66f4\u590d\u6742\u7684\u5bf9\u8c61 */ class Director { public function build ( BuilderInterface $builder ) : Vehicle { $builder -> createVehicle (); $builder -> addDoors (); $builder -> addEngine (); $builder -> addWheel (); return $builder -> getVehicle (); } } BuilderInterface.php <?php namespace DesignPatterns\\Creational\\Builder ; use DesignPatterns\\Creational\\Builder\\Parts\\Vehicle ; interface BuilderInterface { public function createVehicle (); public function addWheel (); public function addEngine (); public function addDoors (); public function getVehicle () : Vehicle ; } TruckBuilder.php <?php namespace DesignPatterns\\Creational\\Builder ; use DesignPatterns\\Creational\\Builder\\Parts\\Vehicle ; class TruckBuilder implements BuilderInterface { /** * @var Parts\\Truck */ private $truck ; public function addDoors () { $this -> truck -> setPart ( 'rightDoor' , new Parts\\Door ()); $this -> truck -> setPart ( 'leftDoor' , new Parts\\Door ()); } public function addEngine () { $this -> truck -> setPart ( 'truckEngine' , new Parts\\Engine ()); } public function addWheel () { $this -> truck -> setPart ( 'wheel1' , new Parts\\Wheel ()); $this -> truck -> setPart ( 'wheel2' , new Parts\\Wheel ()); $this -> truck -> setPart ( 'wheel3' , new Parts\\Wheel ()); $this -> truck -> setPart ( 'wheel4' , new Parts\\Wheel ()); $this -> truck -> setPart ( 'wheel5' , new Parts\\Wheel ()); $this -> truck -> setPart ( 'wheel6' , new Parts\\Wheel ()); } public function createVehicle () { $this -> truck = new Parts\\Truck (); } public function getVehicle () : Vehicle { return $this -> truck ; } } CarBuilder.php <?php namespace DesignPatterns\\Creational\\Builder ; use DesignPatterns\\Creational\\Builder\\Parts\\Vehicle ; class CarBuilder implements BuilderInterface { /** * @var Parts\\Car */ private $car ; public function addDoors () { $this -> car -> setPart ( 'rightDoor' , new Parts\\Door ()); $this -> car -> setPart ( 'leftDoor' , new Parts\\Door ()); $this -> car -> setPart ( 'trunkLid' , new Parts\\Door ()); } public function addEngine () { $this -> car -> setPart ( 'engine' , new Parts\\Engine ()); } public function addWheel () { $this -> car -> setPart ( 'wheelLF' , new Parts\\Wheel ()); $this -> car -> setPart ( 'wheelRF' , new Parts\\Wheel ()); $this -> car -> setPart ( 'wheelLR' , new Parts\\Wheel ()); $this -> car -> setPart ( 'wheelRR' , new Parts\\Wheel ()); } public function createVehicle () { $this -> car = new Parts\\Car (); } public function getVehicle () : Vehicle { return $this -> car ; } } Parts/Vehicle.php <?php namespace DesignPatterns\\Creational\\Builder\\Parts ; abstract class Vehicle { /** * @var object[] */ private $data = []; /** * @param string $key * @param object $value */ public function setPart ( $key , $value ) { $this -> data [ $key ] = $value ; } } Parts/Truck.php <?php namespace DesignPatterns\\Creational\\Builder\\Parts ; class Truck extends Vehicle { } Parts/Car.php <?php namespace DesignPatterns\\Creational\\Builder\\Parts ; class Car extends Vehicle { } Parts/Engine.php <?php namespace DesignPatterns\\Creational\\Builder\\Parts ; class Engine { } Parts/Wheel.php <?php namespace DesignPatterns\\Creational\\Builder\\Parts ; class Wheel { } Parts/Door.php <?php namespace DesignPatterns\\Creational\\Builder\\Parts ; class Door { }","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/Builder/#5","text":"Tests/DirectorTest.php <?php namespace DesignPatterns\\Creational\\Builder\\Tests ; use DesignPatterns\\Creational\\Builder\\Parts\\Car ; use DesignPatterns\\Creational\\Builder\\Parts\\Truck ; use DesignPatterns\\Creational\\Builder\\TruckBuilder ; use DesignPatterns\\Creational\\Builder\\CarBuilder ; use DesignPatterns\\Creational\\Builder\\Director ; use PHPUnit\\Framework\\TestCase ; class DirectorTest extends TestCase { public function testCanBuildTruck () { $truckBuilder = new TruckBuilder (); $newVehicle = ( new Director ()) -> build ( $truckBuilder ); $this -> assertInstanceOf ( Truck :: class , $newVehicle ); } public function testCanBuildCar () { $carBuilder = new CarBuilder (); $newVehicle = ( new Director ()) -> build ( $carBuilder ); $this -> assertInstanceOf ( Car :: class , $newVehicle ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Builder/1488","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/ChainOfResponsibilities/","text":"\u8d23\u4efb\u94fe\u6a21\u5f0f\uff08Chain Of Responsibilities\uff09 # 1. \u76ee\u7684 # \u5efa\u7acb\u4e00\u4e2a\u5bf9\u8c61\u94fe\u6765\u6309\u6307\u5b9a\u987a\u5e8f\u5904\u7406\u8c03\u7528\u3002\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u5bf9\u8c61\u65e0\u6cd5\u5904\u7406\u547d\u4ee4\uff0c\u5b83\u4f1a\u59d4\u6258\u8fd9\u4e2a\u8c03\u7528\u7ed9\u5b83\u7684\u4e0b\u4e00\u4e2a\u5bf9\u8c61\u6765\u8fdb\u884c\u5904\u7406\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 2. \u4f8b\u5b50 # \u65e5\u5fd7\u6846\u67b6\uff0c\u6bcf\u4e2a\u94fe\u5143\u7d20\u81ea\u4e3b\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u65e5\u5fd7\u6d88\u606f\u3002 \u5783\u573e\u90ae\u4ef6\u8fc7\u6ee4\u5668\u3002 \u7f13\u5b58\uff1a\u4f8b\u5982\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u662f\u4e00\u4e2a Memcached \u63a5\u53e3\u5b9e\u4f8b\uff0c\u5982\u679c \u201c\u4e22\u5931\u201d \u5b83\u4f1a\u59d4\u6258\u6570\u636e\u5e93\u63a5\u53e3\u5904\u7406\u8fd9\u4e2a\u8c03\u7528\u3002 Yii \u6846\u67b6: CFilterChain \u662f\u4e00\u4e2a\u63a7\u5236\u5668\u884c\u4e3a\u8fc7\u6ee4\u5668\u94fe\u3002\u6267\u884c\u70b9\u4f1a\u6709\u94fe\u4e0a\u7684\u8fc7\u6ee4\u5668\u9010\u4e2a\u4f20\u9012\uff0c\u5e76\u4e14\u53ea\u6709\u5f53\u6240\u6709\u7684\u8fc7\u6ee4\u5668\u9a8c\u8bc1\u901a\u8fc7\uff0c\u8fd9\u4e2a\u884c\u4e3a\u6700\u540e\u624d\u4f1a\u88ab\u8c03\u7528\u3002 3. UML \u56fe # 4. \u4ee3\u7801 # \u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u67e5\u770b\u6b64\u4ee3\u7801 Handler.php <?php namespace DesignPatterns\\Behavioral\\ChainOfResponsibilities ; use Psr\\Http\\Message\\RequestInterface ; use Psr\\Http\\Message\\ResponseInterface ; /** * \u521b\u5efa\u5904\u7406\u5668\u62bd\u8c61\u7c7b Handler \u3002 */ abstract class Handler { /** * @var Handler|null * \u5b9a\u4e49\u7ee7\u627f\u5904\u7406\u5668 */ private $successor = null ; /** * \u8f93\u5165\u96c6\u6210\u5904\u7406\u5668\u5bf9\u8c61\u3002 */ public function __construct ( Handler $handler = null ) { $this -> successor = $handler ; } /** * \u901a\u8fc7\u4f7f\u7528\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f\u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u6bcf\u4e2a\u5b50\u7c7b\u4e0d\u4f1a\u5ffd\u7565\u8c03\u7528\u7ee7 * \u627f\u3002 * * @param RequestInterface $request * \u5b9a\u4e49\u5904\u7406\u8bf7\u6c42\u65b9\u6cd5\u3002 * * @return string|null */ final public function handle ( RequestInterface $request ) { $processed = $this -> processing ( $request ); if ( $processed === null ) { // \u8bf7\u6c42\u5c1a\u672a\u88ab\u76ee\u524d\u7684\u5904\u7406\u5668\u5904\u7406 => \u4f20\u9012\u5230\u4e0b\u4e00\u4e2a\u5904\u7406\u5668\u3002 if ( $this -> successor !== null ) { $processed = $this -> successor -> handle ( $request ); } } return $processed ; } /** * \u58f0\u660e\u5904\u7406\u65b9\u6cd5\u3002 */ abstract protected function processing ( RequestInterface $request ); } Responsible/FastStorage.php <?php namespace DesignPatterns\\Behavioral\\ChainOfResponsibilities\\Responsible ; use DesignPatterns\\Behavioral\\ChainOfResponsibilities\\Handler ; use Psr\\Http\\Message\\RequestInterface ; /** * \u521b\u5efa http \u7f13\u5b58\u5904\u7406\u7c7b\u3002 */ class HttpInMemoryCacheHandler extends Handler { /** * @var array */ private $data ; /** * @param array $data * \u4f20\u5165\u6570\u636e\u6570\u7ec4\u53c2\u6570\u3002 * @param Handler|null $successor * \u4f20\u5165\u5904\u7406\u5668\u7c7b\u5bf9\u8c61 $successor \u3002 */ public function __construct ( array $data , Handler $successor = null ) { parent :: __construct ( $successor ); $this -> data = $data ; } /** * @param RequestInterface $request * \u4f20\u5165\u8bf7\u6c42\u7c7b\u5bf9\u8c61\u53c2\u6570 $request \u3002 * @return string|null * * \u8fd4\u56de\u7f13\u5b58\u4e2d\u5bf9\u5e94\u8def\u5f84\u5b58\u50a8\u7684\u6570\u636e\u3002 */ protected function processing ( RequestInterface $request ) { $key = sprintf ( '%s?%s' , $request -> getUri () -> getPath (), $request -> getUri () -> getQuery () ); if ( $request -> getMethod () == 'GET' && isset ( $this -> data [ $key ])) { return $this -> data [ $key ]; } return null ; } } Responsible/SlowStorage.php <?php namespace DesignPatterns\\Behavioral\\ChainOfResponsibilities\\Responsible ; use DesignPatterns\\Behavioral\\ChainOfResponsibilities\\Handler ; use Psr\\Http\\Message\\RequestInterface ; /** * \u521b\u5efa\u6570\u636e\u5e93\u5904\u7406\u5668\u3002 */ class SlowDatabaseHandler extends Handler { /** * @param RequestInterface $request * \u4f20\u5165\u8bf7\u6c42\u7c7b\u5bf9\u8c61 $request \u3002 * * @return string|null * \u5b9a\u4e49\u5904\u7406\u65b9\u6cd5\uff0c\u4e0b\u9762\u5e94\u8be5\u662f\u4e2a\u6570\u636e\u5e93\u67e5\u8be2\u52a8\u4f5c\uff0c\u4f46\u662f\u7b80\u5355\u5316\u6a21\u62df\uff0c\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a 'Hello World' \u5b57\u7b26\u4e32\u4f5c\u67e5\u8be2\u7ed3\u679c\u3002 */ protected function processing ( RequestInterface $request ) { // \u8fd9\u662f\u4e00\u4e2a\u6a21\u62df\u8f93\u51fa\uff0c \u5728\u751f\u4ea7\u4ee3\u7801\u4e2d\u4f60\u5e94\u8be5\u8c03\u7528\u4e00\u4e2a\u7f13\u6162\u7684 \uff08\u76f8\u5bf9\u4e8e\u5185\u5b58\u6765\u8bf4\uff09 \u6570\u636e\u5e93\u67e5\u8be2\u7ed3\u679c\u3002 return 'Hello World!' ; } } 5. \u6d4b\u8bd5 # Tests/ChainTest.php <?php namespace DesignPatterns\\Behavioral\\ChainOfResponsibilities\\Tests ; use DesignPatterns\\Behavioral\\ChainOfResponsibilities\\Handler ; use DesignPatterns\\Behavioral\\ChainOfResponsibilities\\Responsible\\HttpInMemoryCacheHandler ; use DesignPatterns\\Behavioral\\ChainOfResponsibilities\\Responsible\\SlowDatabaseHandler ; use PHPUnit\\Framework\\TestCase ; /** * \u521b\u5efa\u4e00\u4e2a\u81ea\u52a8\u5316\u6d4b\u8bd5\u5355\u5143 ChainTest \u3002 */ class ChainTest extends TestCase { /** * @var Handler */ private $chain ; /** * \u6a21\u62df\u8bbe\u7f6e\u7f13\u5b58\u5904\u7406\u5668\u7684\u7f13\u5b58\u6570\u636e\u3002 */ protected function setUp () { $this -> chain = new HttpInMemoryCacheHandler ( [ '/foo/bar?index=1' => 'Hello In Memory!' ], new SlowDatabaseHandler () ); } /** * \u6a21\u62df\u4ece\u7f13\u5b58\u4e2d\u62c9\u53d6\u6570\u636e\u3002 */ public function testCanRequestKeyInFastStorage () { $uri = $this -> createMock ( 'Psr\\Http\\Message\\UriInterface' ); $uri -> method ( 'getPath' ) -> willReturn ( '/foo/bar' ); $uri -> method ( 'getQuery' ) -> willReturn ( 'index=1' ); $request = $this -> createMock ( 'Psr\\Http\\Message\\RequestInterface' ); $request -> method ( 'getMethod' ) -> willReturn ( 'GET' ); $request -> method ( 'getUri' ) -> willReturn ( $uri ); $this -> assertEquals ( 'Hello In Memory!' , $this -> chain -> handle ( $request )); } /** * \u6a21\u62df\u4ece\u6570\u636e\u5e93\u4e2d\u62c9\u53d6\u6570\u636e\u3002 */ public function testCanRequestKeyInSlowStorage () { $uri = $this -> createMock ( 'Psr\\Http\\Message\\UriInterface' ); $uri -> method ( 'getPath' ) -> willReturn ( '/foo/baz' ); $uri -> method ( 'getQuery' ) -> willReturn ( '' ); $request = $this -> createMock ( 'Psr\\Http\\Message\\RequestInterface' ); $request -> method ( 'getMethod' ) -> willReturn ( 'GET' ); $request -> method ( 'getUri' ) -> willReturn ( $uri ); $this -> assertEquals ( 'Hello World!' , $this -> chain -> handle ( $request )); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/ChainOfResponsibilities/1507","title":"\u8d23\u4efb\u94fe\u6a21\u5f0f\uff08Chain Of Responsibilities\uff09"},{"location":"php/php-design-patterns/ChainOfResponsibilities/#chain-of-responsibilities","text":"","title":"\u8d23\u4efb\u94fe\u6a21\u5f0f\uff08Chain Of Responsibilities\uff09"},{"location":"php/php-design-patterns/ChainOfResponsibilities/#1","text":"\u5efa\u7acb\u4e00\u4e2a\u5bf9\u8c61\u94fe\u6765\u6309\u6307\u5b9a\u987a\u5e8f\u5904\u7406\u8c03\u7528\u3002\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u5bf9\u8c61\u65e0\u6cd5\u5904\u7406\u547d\u4ee4\uff0c\u5b83\u4f1a\u59d4\u6258\u8fd9\u4e2a\u8c03\u7528\u7ed9\u5b83\u7684\u4e0b\u4e00\u4e2a\u5bf9\u8c61\u6765\u8fdb\u884c\u5904\u7406\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/ChainOfResponsibilities/#2","text":"\u65e5\u5fd7\u6846\u67b6\uff0c\u6bcf\u4e2a\u94fe\u5143\u7d20\u81ea\u4e3b\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u65e5\u5fd7\u6d88\u606f\u3002 \u5783\u573e\u90ae\u4ef6\u8fc7\u6ee4\u5668\u3002 \u7f13\u5b58\uff1a\u4f8b\u5982\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u662f\u4e00\u4e2a Memcached \u63a5\u53e3\u5b9e\u4f8b\uff0c\u5982\u679c \u201c\u4e22\u5931\u201d \u5b83\u4f1a\u59d4\u6258\u6570\u636e\u5e93\u63a5\u53e3\u5904\u7406\u8fd9\u4e2a\u8c03\u7528\u3002 Yii \u6846\u67b6: CFilterChain \u662f\u4e00\u4e2a\u63a7\u5236\u5668\u884c\u4e3a\u8fc7\u6ee4\u5668\u94fe\u3002\u6267\u884c\u70b9\u4f1a\u6709\u94fe\u4e0a\u7684\u8fc7\u6ee4\u5668\u9010\u4e2a\u4f20\u9012\uff0c\u5e76\u4e14\u53ea\u6709\u5f53\u6240\u6709\u7684\u8fc7\u6ee4\u5668\u9a8c\u8bc1\u901a\u8fc7\uff0c\u8fd9\u4e2a\u884c\u4e3a\u6700\u540e\u624d\u4f1a\u88ab\u8c03\u7528\u3002","title":"2. \u4f8b\u5b50"},{"location":"php/php-design-patterns/ChainOfResponsibilities/#3-uml","text":"","title":"3. UML \u56fe"},{"location":"php/php-design-patterns/ChainOfResponsibilities/#4","text":"\u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u67e5\u770b\u6b64\u4ee3\u7801 Handler.php <?php namespace DesignPatterns\\Behavioral\\ChainOfResponsibilities ; use Psr\\Http\\Message\\RequestInterface ; use Psr\\Http\\Message\\ResponseInterface ; /** * \u521b\u5efa\u5904\u7406\u5668\u62bd\u8c61\u7c7b Handler \u3002 */ abstract class Handler { /** * @var Handler|null * \u5b9a\u4e49\u7ee7\u627f\u5904\u7406\u5668 */ private $successor = null ; /** * \u8f93\u5165\u96c6\u6210\u5904\u7406\u5668\u5bf9\u8c61\u3002 */ public function __construct ( Handler $handler = null ) { $this -> successor = $handler ; } /** * \u901a\u8fc7\u4f7f\u7528\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f\u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u6bcf\u4e2a\u5b50\u7c7b\u4e0d\u4f1a\u5ffd\u7565\u8c03\u7528\u7ee7 * \u627f\u3002 * * @param RequestInterface $request * \u5b9a\u4e49\u5904\u7406\u8bf7\u6c42\u65b9\u6cd5\u3002 * * @return string|null */ final public function handle ( RequestInterface $request ) { $processed = $this -> processing ( $request ); if ( $processed === null ) { // \u8bf7\u6c42\u5c1a\u672a\u88ab\u76ee\u524d\u7684\u5904\u7406\u5668\u5904\u7406 => \u4f20\u9012\u5230\u4e0b\u4e00\u4e2a\u5904\u7406\u5668\u3002 if ( $this -> successor !== null ) { $processed = $this -> successor -> handle ( $request ); } } return $processed ; } /** * \u58f0\u660e\u5904\u7406\u65b9\u6cd5\u3002 */ abstract protected function processing ( RequestInterface $request ); } Responsible/FastStorage.php <?php namespace DesignPatterns\\Behavioral\\ChainOfResponsibilities\\Responsible ; use DesignPatterns\\Behavioral\\ChainOfResponsibilities\\Handler ; use Psr\\Http\\Message\\RequestInterface ; /** * \u521b\u5efa http \u7f13\u5b58\u5904\u7406\u7c7b\u3002 */ class HttpInMemoryCacheHandler extends Handler { /** * @var array */ private $data ; /** * @param array $data * \u4f20\u5165\u6570\u636e\u6570\u7ec4\u53c2\u6570\u3002 * @param Handler|null $successor * \u4f20\u5165\u5904\u7406\u5668\u7c7b\u5bf9\u8c61 $successor \u3002 */ public function __construct ( array $data , Handler $successor = null ) { parent :: __construct ( $successor ); $this -> data = $data ; } /** * @param RequestInterface $request * \u4f20\u5165\u8bf7\u6c42\u7c7b\u5bf9\u8c61\u53c2\u6570 $request \u3002 * @return string|null * * \u8fd4\u56de\u7f13\u5b58\u4e2d\u5bf9\u5e94\u8def\u5f84\u5b58\u50a8\u7684\u6570\u636e\u3002 */ protected function processing ( RequestInterface $request ) { $key = sprintf ( '%s?%s' , $request -> getUri () -> getPath (), $request -> getUri () -> getQuery () ); if ( $request -> getMethod () == 'GET' && isset ( $this -> data [ $key ])) { return $this -> data [ $key ]; } return null ; } } Responsible/SlowStorage.php <?php namespace DesignPatterns\\Behavioral\\ChainOfResponsibilities\\Responsible ; use DesignPatterns\\Behavioral\\ChainOfResponsibilities\\Handler ; use Psr\\Http\\Message\\RequestInterface ; /** * \u521b\u5efa\u6570\u636e\u5e93\u5904\u7406\u5668\u3002 */ class SlowDatabaseHandler extends Handler { /** * @param RequestInterface $request * \u4f20\u5165\u8bf7\u6c42\u7c7b\u5bf9\u8c61 $request \u3002 * * @return string|null * \u5b9a\u4e49\u5904\u7406\u65b9\u6cd5\uff0c\u4e0b\u9762\u5e94\u8be5\u662f\u4e2a\u6570\u636e\u5e93\u67e5\u8be2\u52a8\u4f5c\uff0c\u4f46\u662f\u7b80\u5355\u5316\u6a21\u62df\uff0c\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a 'Hello World' \u5b57\u7b26\u4e32\u4f5c\u67e5\u8be2\u7ed3\u679c\u3002 */ protected function processing ( RequestInterface $request ) { // \u8fd9\u662f\u4e00\u4e2a\u6a21\u62df\u8f93\u51fa\uff0c \u5728\u751f\u4ea7\u4ee3\u7801\u4e2d\u4f60\u5e94\u8be5\u8c03\u7528\u4e00\u4e2a\u7f13\u6162\u7684 \uff08\u76f8\u5bf9\u4e8e\u5185\u5b58\u6765\u8bf4\uff09 \u6570\u636e\u5e93\u67e5\u8be2\u7ed3\u679c\u3002 return 'Hello World!' ; } }","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/ChainOfResponsibilities/#5","text":"Tests/ChainTest.php <?php namespace DesignPatterns\\Behavioral\\ChainOfResponsibilities\\Tests ; use DesignPatterns\\Behavioral\\ChainOfResponsibilities\\Handler ; use DesignPatterns\\Behavioral\\ChainOfResponsibilities\\Responsible\\HttpInMemoryCacheHandler ; use DesignPatterns\\Behavioral\\ChainOfResponsibilities\\Responsible\\SlowDatabaseHandler ; use PHPUnit\\Framework\\TestCase ; /** * \u521b\u5efa\u4e00\u4e2a\u81ea\u52a8\u5316\u6d4b\u8bd5\u5355\u5143 ChainTest \u3002 */ class ChainTest extends TestCase { /** * @var Handler */ private $chain ; /** * \u6a21\u62df\u8bbe\u7f6e\u7f13\u5b58\u5904\u7406\u5668\u7684\u7f13\u5b58\u6570\u636e\u3002 */ protected function setUp () { $this -> chain = new HttpInMemoryCacheHandler ( [ '/foo/bar?index=1' => 'Hello In Memory!' ], new SlowDatabaseHandler () ); } /** * \u6a21\u62df\u4ece\u7f13\u5b58\u4e2d\u62c9\u53d6\u6570\u636e\u3002 */ public function testCanRequestKeyInFastStorage () { $uri = $this -> createMock ( 'Psr\\Http\\Message\\UriInterface' ); $uri -> method ( 'getPath' ) -> willReturn ( '/foo/bar' ); $uri -> method ( 'getQuery' ) -> willReturn ( 'index=1' ); $request = $this -> createMock ( 'Psr\\Http\\Message\\RequestInterface' ); $request -> method ( 'getMethod' ) -> willReturn ( 'GET' ); $request -> method ( 'getUri' ) -> willReturn ( $uri ); $this -> assertEquals ( 'Hello In Memory!' , $this -> chain -> handle ( $request )); } /** * \u6a21\u62df\u4ece\u6570\u636e\u5e93\u4e2d\u62c9\u53d6\u6570\u636e\u3002 */ public function testCanRequestKeyInSlowStorage () { $uri = $this -> createMock ( 'Psr\\Http\\Message\\UriInterface' ); $uri -> method ( 'getPath' ) -> willReturn ( '/foo/baz' ); $uri -> method ( 'getQuery' ) -> willReturn ( '' ); $request = $this -> createMock ( 'Psr\\Http\\Message\\RequestInterface' ); $request -> method ( 'getMethod' ) -> willReturn ( 'GET' ); $request -> method ( 'getUri' ) -> willReturn ( $uri ); $this -> assertEquals ( 'Hello World!' , $this -> chain -> handle ( $request )); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/ChainOfResponsibilities/1507","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Command/","text":"\u547d\u4ee4\u884c\u6a21\u5f0f\uff08Command\uff09 # 1. \u76ee\u7684 # \u4e3a\u4e86\u5c01\u88c5\u8c03\u7528\u548c\u89e3\u8026\u3002 \u6211\u4eec\u6709\u4e00\u4e2a\u8c03\u7528\u7a0b\u5e8f\u548c\u4e00\u4e2a\u63a5\u6536\u5668\u3002 \u8fd9\u79cd\u6a21\u5f0f\u4f7f\u7528\u300c\u547d\u4ee4\u884c\u300d\u5c06\u65b9\u6cd5\u8c03\u7528\u59d4\u6258\u7ed9\u63a5\u6536\u5668\u5e76\u4e14\u5448\u73b0\u76f8\u540c\u7684\u300c\u6267\u884c\u300d\u65b9\u6cd5\u3002 \u56e0\u6b64\uff0c\u8c03\u7528\u7a0b\u5e8f\u53ea\u77e5\u9053\u8c03\u7528\u300c\u6267\u884c\u300d\u53bb\u5904\u7406\u5ba2\u6237\u7aef\u7684\u547d\u4ee4\u3002\u63a5\u6536\u5668\u4f1a\u4ece\u8c03\u7528\u7a0b\u5e8f\u4e2d\u5206\u79bb\u51fa\u6765\u3002 \u8fd9\u4e2a\u6a21\u5f0f\u7684\u53e6\u4e00\u9762\u662f\u53d6\u6d88\u65b9\u6cd5\u7684 execute()\uff0c\u4e5f\u5c31\u662f undo() \u3002\u547d\u4ee4\u884c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6700\u5c0f\u91cf\u7684\u590d\u5236\u7c98\u8d34\u548c\u4f9d\u8d56\u7ec4\u5408\uff08\u4e0d\u662f\u7ee7\u627f\uff09\u88ab\u805a\u5408\uff0c\u4ece\u800c\u7ec4\u5408\u6210\u66f4\u590d\u6742\u7684\u547d\u4ee4\u96c6\u3002 2. \u4f8b\u5b50 # \u6587\u672c\u7f16\u8f91\u5668\uff1a\u6240\u6709\u4e8b\u4ef6\u90fd\u662f\u53ef\u4ee5\u88ab\u89e3\u9664\u3001\u5806\u653e\uff0c\u4fdd\u5b58\u7684\u547d\u4ee4\u3002 Symfony2\uff1aSF2 \u547d\u4ee4\u53ef\u4ee5\u4ece CLI \u8fd0\u884c\uff0c\u5b83\u7684\u5efa\u7acb\u53ea\u9700\u8003\u8651\u5230\u547d\u4ee4\u884c\u6a21\u5f0f\u3002 \u5927\u578b CLI \u5de5\u5177\u4f7f\u7528\u5b50\u7a0b\u5e8f\u6765\u5206\u53d1\u4e0d\u540c\u7684\u4efb\u52a1\u5e76\u5c06\u5b83\u4eec\u5c01\u88c5\u5728\u300c\u6a21\u578b\u300d\u4e2d\uff0c\u6bcf\u4e2a\u6a21\u5757\u90fd\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u6a21\u5f0f\u5b9e\u73b0\uff08\u4f8b\u5982\uff1a vagrant \uff09\u3002 3. UML \u56fe # 4. \u4ee3\u7801 # \u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u67e5\u770b\u6e90\u7801 CommandInterface.php <?php namespace DesignPatterns\\Behavioral\\Command ; interface CommandInterface { /** * \u8fd9\u662f\u5728\u547d\u4ee4\u884c\u6a21\u5f0f\u4e2d\u5f88\u91cd\u8981\u7684\u65b9\u6cd5\uff0c * \u8fd9\u4e2a\u63a5\u6536\u8005\u4f1a\u88ab\u8f7d\u5165\u6784\u9020\u5668 */ public function execute (); } HelloCommand.php <?php namespace DesignPatterns\\Behavioral\\Command ; /** * \u8fd9\u4e2a\u5177\u4f53\u547d\u4ee4\uff0c\u5728\u63a5\u6536\u5668\u4e0a\u8c03\u7528 \"print\" \uff0c * \u4f46\u662f\u5916\u90e8\u8c03\u7528\u8005\u53ea\u77e5\u9053\uff0c\u8fd9\u4e2a\u662f\u5426\u53ef\u4ee5\u6267\u884c\u3002 */ class HelloCommand implements CommandInterface { /** * @var Receiver */ private $output ; /** * \u6bcf\u4e2a\u5177\u4f53\u7684\u547d\u4ee4\u90fd\u6765\u81ea\u4e8e\u4e0d\u540c\u7684\u63a5\u6536\u8005\u3002 * \u8fd9\u4e2a\u53ef\u4ee5\u662f\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u63a5\u6536\u8005\uff0c\u4f46\u662f\u53c2\u6570\u91cc\u5fc5\u987b\u662f\u53ef\u4ee5\u88ab\u6267\u884c\u7684\u547d\u4ee4\u3002 * * @param Receiver $console */ public function __construct ( Receiver $console ) { $this -> output = $console ; } /** * \u6267\u884c\u548c\u8f93\u51fa \"Hello World\". */ public function execute () { // \u6709\u65f6\u5019\uff0c\u8fd9\u91cc\u6ca1\u6709\u63a5\u6536\u8005\uff0c\u5e76\u4e14\u8fd9\u4e2a\u547d\u4ee4\u6267\u884c\u6240\u6709\u5de5\u4f5c\u3002 $this -> output -> write ( 'Hello World' ); } } Receiver.php <?php namespace DesignPatterns\\Behavioral\\Command ; /** * \u63a5\u6536\u65b9\u662f\u7279\u5b9a\u7684\u670d\u52a1\uff0c\u6709\u81ea\u5df1\u7684 contract \uff0c\u53ea\u80fd\u662f\u5177\u4f53\u7684\u5b9e\u4f8b\u3002 */ class Receiver { /** * @var bool */ private $enableDate = false ; /** * @var string[] */ private $output = []; /** * @param string $str */ public function write ( string $str ) { if ( $this -> enableDate ) { $str .= ' [' . date ( 'Y-m-d' ) . ']' ; } $this -> output [] = $str ; } public function getOutput () : string { return join ( \" \\n \" , $this -> output ); } /** * \u53ef\u4ee5\u663e\u793a\u6d88\u606f\u7684\u65f6\u95f4 */ public function enableDate () { $this -> enableDate = true ; } /** * \u7981\u6b62\u663e\u793a\u6d88\u606f\u7684\u65f6\u95f4 */ public function disableDate () { $this -> enableDate = false ; } } Invoker.php <?php namespace DesignPatterns\\Behavioral\\Command ; /** *\u8c03\u7528\u8005\u4f7f\u7528\u8fd9\u79cd\u547d\u4ee4\u3002 * \u6bd4\u4f8b : \u4e00\u4e2a\u5728 SF2 \u4e2d\u7684\u5e94\u7528 */ class Invoker { /** * @var CommandInterface */ private $command ; /** * \u5728\u8fd9\u79cd\u8c03\u7528\u8005\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u8ba2\u9605\u547d\u4ee4\u4e5f\u662f\u8fd9\u79cd\u65b9\u6cd5 * \u8fd8\u5305\u62ec\uff1a\u5806\u6808\u3001\u5217\u8868\u3001\u96c6\u5408\u7b49\u7b49 * * @param CommandInterface $cmd */ public function setCommand ( CommandInterface $cmd ) { $this -> command = $cmd ; } /** * \u6267\u884c\u8fd9\u4e2a\u547d\u4ee4\uff1b * \u8c03\u7528\u8005\u4e5f\u662f\u7528\u8fd9\u4e2a\u547d\u4ee4\u3002 */ public function run () { $this -> command -> execute (); } } 5. \u6d4b\u8bd5 # Tests/CommandTest.php <?php namespace DesignPatterns\\Behavioral\\Command\\Tests ; use DesignPatterns\\Behavioral\\Command\\HelloCommand ; use DesignPatterns\\Behavioral\\Command\\Invoker ; use DesignPatterns\\Behavioral\\Command\\Receiver ; use PHPUnit\\Framework\\TestCase ; class CommandTest extends TestCase { public function testInvocation () { $invoker = new Invoker (); $receiver = new Receiver (); $invoker -> setCommand ( new HelloCommand ( $receiver )); $invoker -> run (); $this -> assertEquals ( 'Hello World' , $receiver -> getOutput ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Command/1508","title":"\u547d\u4ee4\u884c\u6a21\u5f0f\uff08Command\uff09"},{"location":"php/php-design-patterns/Command/#command","text":"","title":"\u547d\u4ee4\u884c\u6a21\u5f0f\uff08Command\uff09"},{"location":"php/php-design-patterns/Command/#1","text":"\u4e3a\u4e86\u5c01\u88c5\u8c03\u7528\u548c\u89e3\u8026\u3002 \u6211\u4eec\u6709\u4e00\u4e2a\u8c03\u7528\u7a0b\u5e8f\u548c\u4e00\u4e2a\u63a5\u6536\u5668\u3002 \u8fd9\u79cd\u6a21\u5f0f\u4f7f\u7528\u300c\u547d\u4ee4\u884c\u300d\u5c06\u65b9\u6cd5\u8c03\u7528\u59d4\u6258\u7ed9\u63a5\u6536\u5668\u5e76\u4e14\u5448\u73b0\u76f8\u540c\u7684\u300c\u6267\u884c\u300d\u65b9\u6cd5\u3002 \u56e0\u6b64\uff0c\u8c03\u7528\u7a0b\u5e8f\u53ea\u77e5\u9053\u8c03\u7528\u300c\u6267\u884c\u300d\u53bb\u5904\u7406\u5ba2\u6237\u7aef\u7684\u547d\u4ee4\u3002\u63a5\u6536\u5668\u4f1a\u4ece\u8c03\u7528\u7a0b\u5e8f\u4e2d\u5206\u79bb\u51fa\u6765\u3002 \u8fd9\u4e2a\u6a21\u5f0f\u7684\u53e6\u4e00\u9762\u662f\u53d6\u6d88\u65b9\u6cd5\u7684 execute()\uff0c\u4e5f\u5c31\u662f undo() \u3002\u547d\u4ee4\u884c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6700\u5c0f\u91cf\u7684\u590d\u5236\u7c98\u8d34\u548c\u4f9d\u8d56\u7ec4\u5408\uff08\u4e0d\u662f\u7ee7\u627f\uff09\u88ab\u805a\u5408\uff0c\u4ece\u800c\u7ec4\u5408\u6210\u66f4\u590d\u6742\u7684\u547d\u4ee4\u96c6\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Command/#2","text":"\u6587\u672c\u7f16\u8f91\u5668\uff1a\u6240\u6709\u4e8b\u4ef6\u90fd\u662f\u53ef\u4ee5\u88ab\u89e3\u9664\u3001\u5806\u653e\uff0c\u4fdd\u5b58\u7684\u547d\u4ee4\u3002 Symfony2\uff1aSF2 \u547d\u4ee4\u53ef\u4ee5\u4ece CLI \u8fd0\u884c\uff0c\u5b83\u7684\u5efa\u7acb\u53ea\u9700\u8003\u8651\u5230\u547d\u4ee4\u884c\u6a21\u5f0f\u3002 \u5927\u578b CLI \u5de5\u5177\u4f7f\u7528\u5b50\u7a0b\u5e8f\u6765\u5206\u53d1\u4e0d\u540c\u7684\u4efb\u52a1\u5e76\u5c06\u5b83\u4eec\u5c01\u88c5\u5728\u300c\u6a21\u578b\u300d\u4e2d\uff0c\u6bcf\u4e2a\u6a21\u5757\u90fd\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u6a21\u5f0f\u5b9e\u73b0\uff08\u4f8b\u5982\uff1a vagrant \uff09\u3002","title":"2. \u4f8b\u5b50"},{"location":"php/php-design-patterns/Command/#3-uml","text":"","title":"3. UML \u56fe"},{"location":"php/php-design-patterns/Command/#4","text":"\u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u67e5\u770b\u6e90\u7801 CommandInterface.php <?php namespace DesignPatterns\\Behavioral\\Command ; interface CommandInterface { /** * \u8fd9\u662f\u5728\u547d\u4ee4\u884c\u6a21\u5f0f\u4e2d\u5f88\u91cd\u8981\u7684\u65b9\u6cd5\uff0c * \u8fd9\u4e2a\u63a5\u6536\u8005\u4f1a\u88ab\u8f7d\u5165\u6784\u9020\u5668 */ public function execute (); } HelloCommand.php <?php namespace DesignPatterns\\Behavioral\\Command ; /** * \u8fd9\u4e2a\u5177\u4f53\u547d\u4ee4\uff0c\u5728\u63a5\u6536\u5668\u4e0a\u8c03\u7528 \"print\" \uff0c * \u4f46\u662f\u5916\u90e8\u8c03\u7528\u8005\u53ea\u77e5\u9053\uff0c\u8fd9\u4e2a\u662f\u5426\u53ef\u4ee5\u6267\u884c\u3002 */ class HelloCommand implements CommandInterface { /** * @var Receiver */ private $output ; /** * \u6bcf\u4e2a\u5177\u4f53\u7684\u547d\u4ee4\u90fd\u6765\u81ea\u4e8e\u4e0d\u540c\u7684\u63a5\u6536\u8005\u3002 * \u8fd9\u4e2a\u53ef\u4ee5\u662f\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u63a5\u6536\u8005\uff0c\u4f46\u662f\u53c2\u6570\u91cc\u5fc5\u987b\u662f\u53ef\u4ee5\u88ab\u6267\u884c\u7684\u547d\u4ee4\u3002 * * @param Receiver $console */ public function __construct ( Receiver $console ) { $this -> output = $console ; } /** * \u6267\u884c\u548c\u8f93\u51fa \"Hello World\". */ public function execute () { // \u6709\u65f6\u5019\uff0c\u8fd9\u91cc\u6ca1\u6709\u63a5\u6536\u8005\uff0c\u5e76\u4e14\u8fd9\u4e2a\u547d\u4ee4\u6267\u884c\u6240\u6709\u5de5\u4f5c\u3002 $this -> output -> write ( 'Hello World' ); } } Receiver.php <?php namespace DesignPatterns\\Behavioral\\Command ; /** * \u63a5\u6536\u65b9\u662f\u7279\u5b9a\u7684\u670d\u52a1\uff0c\u6709\u81ea\u5df1\u7684 contract \uff0c\u53ea\u80fd\u662f\u5177\u4f53\u7684\u5b9e\u4f8b\u3002 */ class Receiver { /** * @var bool */ private $enableDate = false ; /** * @var string[] */ private $output = []; /** * @param string $str */ public function write ( string $str ) { if ( $this -> enableDate ) { $str .= ' [' . date ( 'Y-m-d' ) . ']' ; } $this -> output [] = $str ; } public function getOutput () : string { return join ( \" \\n \" , $this -> output ); } /** * \u53ef\u4ee5\u663e\u793a\u6d88\u606f\u7684\u65f6\u95f4 */ public function enableDate () { $this -> enableDate = true ; } /** * \u7981\u6b62\u663e\u793a\u6d88\u606f\u7684\u65f6\u95f4 */ public function disableDate () { $this -> enableDate = false ; } } Invoker.php <?php namespace DesignPatterns\\Behavioral\\Command ; /** *\u8c03\u7528\u8005\u4f7f\u7528\u8fd9\u79cd\u547d\u4ee4\u3002 * \u6bd4\u4f8b : \u4e00\u4e2a\u5728 SF2 \u4e2d\u7684\u5e94\u7528 */ class Invoker { /** * @var CommandInterface */ private $command ; /** * \u5728\u8fd9\u79cd\u8c03\u7528\u8005\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u8ba2\u9605\u547d\u4ee4\u4e5f\u662f\u8fd9\u79cd\u65b9\u6cd5 * \u8fd8\u5305\u62ec\uff1a\u5806\u6808\u3001\u5217\u8868\u3001\u96c6\u5408\u7b49\u7b49 * * @param CommandInterface $cmd */ public function setCommand ( CommandInterface $cmd ) { $this -> command = $cmd ; } /** * \u6267\u884c\u8fd9\u4e2a\u547d\u4ee4\uff1b * \u8c03\u7528\u8005\u4e5f\u662f\u7528\u8fd9\u4e2a\u547d\u4ee4\u3002 */ public function run () { $this -> command -> execute (); } }","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/Command/#5","text":"Tests/CommandTest.php <?php namespace DesignPatterns\\Behavioral\\Command\\Tests ; use DesignPatterns\\Behavioral\\Command\\HelloCommand ; use DesignPatterns\\Behavioral\\Command\\Invoker ; use DesignPatterns\\Behavioral\\Command\\Receiver ; use PHPUnit\\Framework\\TestCase ; class CommandTest extends TestCase { public function testInvocation () { $invoker = new Invoker (); $receiver = new Receiver (); $invoker -> setCommand ( new HelloCommand ( $receiver )); $invoker -> run (); $this -> assertEquals ( 'Hello World' , $receiver -> getOutput ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Command/1508","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Composite/","text":"\u7ec4\u5408\u6a21\u5f0f\uff08Composite\uff09 # 1. \u76ee\u7684 # \u4e00\u7ec4\u5bf9\u8c61\u4e0e\u8be5\u5bf9\u8c61\u7684\u5355\u4e2a\u5b9e\u4f8b\u7684\u5904\u7406\u65b9\u5f0f\u4e00\u81f4\u3002 2. \u793a\u4f8b # \u4e00\u4e2a\u8868\u5355\u7c7b\u5b9e\u4f8b\u5728\u5904\u7406\u5176\u8868\u5355\u6240\u6709\u5143\u7d20\u7684\u65b9\u6cd5\u4e0e\u5904\u7406\u8be5\u8868\u5355\u81ea\u8eab\u5b9e\u4f8b\u65b9\u6cd5\u76f8\u540c\uff0c\u5728\u8c03\u7528\u65b9\u6cd5 render() \u65f6\uff0c\u4f1a\u968f\u4e4b\u904d\u5386\u5b83\u7684\u6240\u6709\u5b50\u5143\u7d20\u5e76\u5bf9\u4ed6\u4eec\u8c03\u7528 render() \u65b9\u6cd5 Zend_Config : \u4e00\u4e2a\u914d\u7f6e\u9009\u9879\u6811\uff0c\u6bcf\u4e2a\u9009\u9879\u81ea\u8eab\u5c31\u662f\u4e00\u4e2a Zend_Config \u5bf9\u8c61 3. UML \u56fe # 4. \u4ee3\u7801 # \u76f8\u5173\u4ee3\u7801\u53c2\u89c1 GitHub RenderableInterface.php <?php namespace DesignPatterns\\Structural\\Composite ; interface RenderableInterface { public function render () : string ; } Form.php <?php namespace DesignPatterns\\Structural\\Composite ; /** * \u8be5\u7ec4\u5408\u5185\u7684\u8282\u70b9\u5fc5\u987b\u6d3e\u751f\u4e8e\u8be5\u7ec4\u4ef6\u5951\u7ea6\u3002\u4e3a\u4e86\u6784\u5efa\u6210\u4e00\u4e2a\u7ec4\u4ef6\u6811\uff0c * \u6b64\u4e3a\u5f3a\u5236\u6027\u64cd\u4f5c\u3002 */ class Form implements RenderableInterface { /** * @var RenderableInterface[] */ private $elements ; /** * \u904d\u5386\u6240\u6709\u5143\u7d20\uff0c\u5e76\u5bf9\u4ed6\u4eec\u8c03\u7528 render() \u65b9\u6cd5\uff0c\u7136\u540e\u8fd4\u56de\u8868\u5355\u7684\u5b8c\u6574 * \u7684\u89e3\u6790\u8868\u8fbe\u3002 * * \u4ece\u5916\u90e8\u4e0a\u770b\uff0c\u6211\u4eec\u4e0d\u4f1a\u770b\u5230\u904d\u5386\u8fc7\u7a0b\uff0c\u8be5\u8868\u5355\u7684\u64cd\u4f5c\u8fc7\u7a0b\u4e0e\u5355\u4e00\u5bf9 * \u8c61\u5b9e\u4f8b\u4e00\u6837 * * @return string */ public function render () : string { $formCode = '<form>' ; foreach ( $this -> elements as $element ) { $formCode .= $element -> render (); } $formCode .= '</form>' ; return $formCode ; } /** * @param RenderableInterface $element */ public function addElement ( RenderableInterface $element ) { $this -> elements [] = $element ; } } InputElement.php <?php namespace DesignPatterns\\Structural\\Composite ; class InputElement implements RenderableInterface { public function render () : string { return '<input type=\"text\" />' ; } } TextElement.php <?php namespace DesignPatterns\\Structural\\Composite ; class TextElement implements RenderableInterface { /** * @var string */ private $text ; public function __construct ( string $text ) { $this -> text = $text ; } public function render () : string { return $this -> text ; } } 5. \u6d4b\u8bd5 # Tests/CompositeTest.php <?php namespace DesignPatterns\\Structural\\Composite\\Tests ; use DesignPatterns\\Structural\\Composite ; use PHPUnit\\Framework\\TestCase ; class CompositeTest extends TestCase { public function testRender () { $form = new Composite\\Form (); $form -> addElement ( new Composite\\TextElement ( 'Email:' )); $form -> addElement ( new Composite\\InputElement ()); $embed = new Composite\\Form (); $embed -> addElement ( new Composite\\TextElement ( 'Password:' )); $embed -> addElement ( new Composite\\InputElement ()); $form -> addElement ( $embed ); // \u6b64\u4ee3\u7801\u4ec5\u4f5c\u793a\u4f8b\u3002\u5728\u5b9e\u9645\u573a\u666f\u4e2d\uff0c\u73b0\u5728\u7684\u7f51\u9875\u6d4f\u89c8\u5668\u6839\u672c\u4e0d\u652f\u6301 // \u591a\u8868\u5355\u5d4c\u5957\uff0c\u7262\u8bb0\u8be5\u70b9\u975e\u5e38\u91cd\u8981 $this -> assertEquals ( '<form>Email:<input type=\"text\" /><form>Password:<input type=\"text\" /></form></form>' , $form -> render () ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Composite/1498","title":"\u7ec4\u5408\u6a21\u5f0f\uff08Composite\uff09"},{"location":"php/php-design-patterns/Composite/#composite","text":"","title":"\u7ec4\u5408\u6a21\u5f0f\uff08Composite\uff09"},{"location":"php/php-design-patterns/Composite/#1","text":"\u4e00\u7ec4\u5bf9\u8c61\u4e0e\u8be5\u5bf9\u8c61\u7684\u5355\u4e2a\u5b9e\u4f8b\u7684\u5904\u7406\u65b9\u5f0f\u4e00\u81f4\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Composite/#2","text":"\u4e00\u4e2a\u8868\u5355\u7c7b\u5b9e\u4f8b\u5728\u5904\u7406\u5176\u8868\u5355\u6240\u6709\u5143\u7d20\u7684\u65b9\u6cd5\u4e0e\u5904\u7406\u8be5\u8868\u5355\u81ea\u8eab\u5b9e\u4f8b\u65b9\u6cd5\u76f8\u540c\uff0c\u5728\u8c03\u7528\u65b9\u6cd5 render() \u65f6\uff0c\u4f1a\u968f\u4e4b\u904d\u5386\u5b83\u7684\u6240\u6709\u5b50\u5143\u7d20\u5e76\u5bf9\u4ed6\u4eec\u8c03\u7528 render() \u65b9\u6cd5 Zend_Config : \u4e00\u4e2a\u914d\u7f6e\u9009\u9879\u6811\uff0c\u6bcf\u4e2a\u9009\u9879\u81ea\u8eab\u5c31\u662f\u4e00\u4e2a Zend_Config \u5bf9\u8c61","title":"2. \u793a\u4f8b"},{"location":"php/php-design-patterns/Composite/#3-uml","text":"","title":"3. UML \u56fe"},{"location":"php/php-design-patterns/Composite/#4","text":"\u76f8\u5173\u4ee3\u7801\u53c2\u89c1 GitHub RenderableInterface.php <?php namespace DesignPatterns\\Structural\\Composite ; interface RenderableInterface { public function render () : string ; } Form.php <?php namespace DesignPatterns\\Structural\\Composite ; /** * \u8be5\u7ec4\u5408\u5185\u7684\u8282\u70b9\u5fc5\u987b\u6d3e\u751f\u4e8e\u8be5\u7ec4\u4ef6\u5951\u7ea6\u3002\u4e3a\u4e86\u6784\u5efa\u6210\u4e00\u4e2a\u7ec4\u4ef6\u6811\uff0c * \u6b64\u4e3a\u5f3a\u5236\u6027\u64cd\u4f5c\u3002 */ class Form implements RenderableInterface { /** * @var RenderableInterface[] */ private $elements ; /** * \u904d\u5386\u6240\u6709\u5143\u7d20\uff0c\u5e76\u5bf9\u4ed6\u4eec\u8c03\u7528 render() \u65b9\u6cd5\uff0c\u7136\u540e\u8fd4\u56de\u8868\u5355\u7684\u5b8c\u6574 * \u7684\u89e3\u6790\u8868\u8fbe\u3002 * * \u4ece\u5916\u90e8\u4e0a\u770b\uff0c\u6211\u4eec\u4e0d\u4f1a\u770b\u5230\u904d\u5386\u8fc7\u7a0b\uff0c\u8be5\u8868\u5355\u7684\u64cd\u4f5c\u8fc7\u7a0b\u4e0e\u5355\u4e00\u5bf9 * \u8c61\u5b9e\u4f8b\u4e00\u6837 * * @return string */ public function render () : string { $formCode = '<form>' ; foreach ( $this -> elements as $element ) { $formCode .= $element -> render (); } $formCode .= '</form>' ; return $formCode ; } /** * @param RenderableInterface $element */ public function addElement ( RenderableInterface $element ) { $this -> elements [] = $element ; } } InputElement.php <?php namespace DesignPatterns\\Structural\\Composite ; class InputElement implements RenderableInterface { public function render () : string { return '<input type=\"text\" />' ; } } TextElement.php <?php namespace DesignPatterns\\Structural\\Composite ; class TextElement implements RenderableInterface { /** * @var string */ private $text ; public function __construct ( string $text ) { $this -> text = $text ; } public function render () : string { return $this -> text ; } }","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/Composite/#5","text":"Tests/CompositeTest.php <?php namespace DesignPatterns\\Structural\\Composite\\Tests ; use DesignPatterns\\Structural\\Composite ; use PHPUnit\\Framework\\TestCase ; class CompositeTest extends TestCase { public function testRender () { $form = new Composite\\Form (); $form -> addElement ( new Composite\\TextElement ( 'Email:' )); $form -> addElement ( new Composite\\InputElement ()); $embed = new Composite\\Form (); $embed -> addElement ( new Composite\\TextElement ( 'Password:' )); $embed -> addElement ( new Composite\\InputElement ()); $form -> addElement ( $embed ); // \u6b64\u4ee3\u7801\u4ec5\u4f5c\u793a\u4f8b\u3002\u5728\u5b9e\u9645\u573a\u666f\u4e2d\uff0c\u73b0\u5728\u7684\u7f51\u9875\u6d4f\u89c8\u5668\u6839\u672c\u4e0d\u652f\u6301 // \u591a\u8868\u5355\u5d4c\u5957\uff0c\u7262\u8bb0\u8be5\u70b9\u975e\u5e38\u91cd\u8981 $this -> assertEquals ( '<form>Email:<input type=\"text\" /><form>Password:<input type=\"text\" /></form></form>' , $form -> render () ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Composite/1498","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/DataMapper/","text":"\u6570\u636e\u6620\u5c04\u6a21\u5f0f\uff08Data Mapper\uff09 # 1. \u76ee\u6807 # \u6570\u636e\u6620\u5c04\u5668\u662f\u4e00\u79cd\u6570\u636e\u8bbf\u95ee\u5c42\uff0c\u5b83\u6267\u884c\u6301\u4e45\u6027\u6570\u636e\u5b58\u50a8\uff08\u901a\u5e38\u662f\u5173\u7cfb\u6570\u636e\u5e93\uff09\u548c\u5185\u5b58\u6570\u636e\u8868\u793a\uff08\u57df\u5c42\uff09\u4e4b\u95f4\u7684\u6570\u636e\u53cc\u5411\u4f20\u8f93\u3002 \u8be5\u6a21\u5f0f\u7684\u76ee\u6807\u662f\u4fdd\u6301\u5185\u5b58\u8868\u793a\u548c\u6301\u4e45\u6570\u636e\u5b58\u50a8\u76f8\u4e92\u72ec\u7acb\uff0c\u5e76\u4fdd\u6301\u6570\u636e\u6620\u5c04\u5668\u672c\u8eab\u3002 \u8be5\u5c42\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u6620\u5c04\u5668\uff08\u6216\u6570\u636e\u8bbf\u95ee\u5bf9\u8c61\uff09\u7ec4\u6210\uff0c\u6267\u884c\u6570\u636e\u4f20\u8f93\u3002 \u6620\u5c04\u5668\u5b9e\u73b0\u7684\u8303\u56f4\u6709\u6240\u4e0d\u540c\u3002 \u901a\u7528\u6620\u5c04\u5668\u5c06\u5904\u7406\u8bb8\u591a\u4e0d\u540c\u7684\u57df\u5b9e\u4f53\u7c7b\u578b\uff0c\u4e13\u7528\u6620\u5c04\u5668\u5c06\u5904\u7406\u4e00\u4e2a\u6216\u51e0\u4e2a\u3002 \u8fd9\u79cd\u6a21\u5f0f\u7684\u5173\u952e\u70b9\u5728\u4e8e\uff0c\u4e0e\u6d3b\u52a8\u8bb0\u5f55\u6a21\u5f0f\u4e0d\u540c\uff0c\u6570\u636e\u6a21\u578b\u9075\u5faa\u5355\u4e00\u8d23\u4efb\u539f\u5219\u3002 2. \u4f8b\u5b50 # \u6570\u636e\u5e93\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\u5668\uff08 ORM \uff09\uff1a Doctrine2 \u4f7f\u7528\u7684 DAO \uff0c\u540d\u5b57\u53eb\u505a \u201c EntityRepository \u201d\u3002 3. UML \u56fe # 4. \u4ee3\u7801 # \u4f60\u80fd\u5728 GitHub \u4e0a\u9762\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 User.php <?php namespace DesignPatterns\\Structural\\DataMapper ; class User { /** * @var string */ private $username ; /** * @var string */ private $email ; public static function fromState ( array $state ) : User { // \u5728\u4f60\u8bbf\u95ee\u7684\u65f6\u5019\u9a8c\u8bc1\u72b6\u6001 return new self ( $state [ 'username' ], $state [ 'email' ] ); } public function __construct ( string $username , string $email ) { // \u5148\u9a8c\u8bc1\u53c2\u6570\u5728\u8bbe\u7f6e\u4ed6\u4eec $this -> username = $username ; $this -> email = $email ; } /** * @return string */ public function getUsername () { return $this -> username ; } /** * @return string */ public function getEmail () { return $this -> email ; } } UserMapper.php <?php namespace DesignPatterns\\Structural\\DataMapper ; class UserMapper { /** * @var StorageAdapter */ private $adapter ; /** * @param StorageAdapter $storage */ public function __construct ( StorageAdapter $storage ) { $this -> adapter = $storage ; } /** * \u6839\u636e id \u4ece\u5b58\u50a8\u5668\u4e2d\u627e\u5230\u7528\u6237\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7528\u6237\u5bf9\u8c61 * \u5728\u5185\u5b58\u4e2d\uff0c\u901a\u5e38\u8fd9\u79cd\u903b\u8f91\u5c06\u4f7f\u7528 Repository \u6a21\u5f0f\u6765\u5b9e\u73b0 * \u7136\u800c\uff0c\u91cd\u8981\u7684\u90e8\u5206\u662f\u5728\u4e0b\u9762\u7684 mapRowToUser() \u4e2d\uff0c\u5b83\u5c06\u4ece\u4e2d\u521b\u5efa\u4e00\u4e2a\u4e1a\u52a1\u5bf9\u8c61 * \u4ece\u5b58\u50a8\u4e2d\u83b7\u53d6\u7684\u6570\u636e * * @param int $id * * @return User */ public function findById ( int $id ) : User { $result = $this -> adapter -> find ( $id ); if ( $result === null ) { throw new \\InvalidArgumentException ( \"User # $id not found\" ); } return $this -> mapRowToUser ( $result ); } private function mapRowToUser ( array $row ) : User { return User :: fromState ( $row ); } } StorageAdapter.php <?php namespace DesignPatterns\\Structural\\DataMapper ; class StorageAdapter { /** * @var array */ private $data = []; public function __construct ( array $data ) { $this -> data = $data ; } /** * @param int $id * * @return array|null */ public function find ( int $id ) { if ( isset ( $this -> data [ $id ])) { return $this -> data [ $id ]; } return null ; } } 5. \u6d4b\u8bd5 # Tests/DataMapperTest.php <?php namespace DesignPatterns\\Structural\\DataMapper\\Tests ; use DesignPatterns\\Structural\\DataMapper\\StorageAdapter ; use DesignPatterns\\Structural\\DataMapper\\User ; use DesignPatterns\\Structural\\DataMapper\\UserMapper ; use PHPUnit\\Framework\\TestCase ; class DataMapperTest extends TestCase { public function testCanMapUserFromStorage () { $storage = new StorageAdapter ([ 1 => [ 'username' => 'domnikl' , 'email' => 'liebler.dominik@gmail.com' ]]); $mapper = new UserMapper ( $storage ); $user = $mapper -> findById ( 1 ); $this -> assertInstanceOf ( User :: class , $user ); } /** * @expectedException \\InvalidArgumentException */ public function testWillNotMapInvalidData () { $storage = new StorageAdapter ([]); $mapper = new UserMapper ( $storage ); $mapper -> findById ( 1 ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/DataMapper/1499","title":"\u6570\u636e\u6620\u5c04\u6a21\u5f0f\uff08Data Mapper\uff09"},{"location":"php/php-design-patterns/DataMapper/#data-mapper","text":"","title":"\u6570\u636e\u6620\u5c04\u6a21\u5f0f\uff08Data Mapper\uff09"},{"location":"php/php-design-patterns/DataMapper/#1","text":"\u6570\u636e\u6620\u5c04\u5668\u662f\u4e00\u79cd\u6570\u636e\u8bbf\u95ee\u5c42\uff0c\u5b83\u6267\u884c\u6301\u4e45\u6027\u6570\u636e\u5b58\u50a8\uff08\u901a\u5e38\u662f\u5173\u7cfb\u6570\u636e\u5e93\uff09\u548c\u5185\u5b58\u6570\u636e\u8868\u793a\uff08\u57df\u5c42\uff09\u4e4b\u95f4\u7684\u6570\u636e\u53cc\u5411\u4f20\u8f93\u3002 \u8be5\u6a21\u5f0f\u7684\u76ee\u6807\u662f\u4fdd\u6301\u5185\u5b58\u8868\u793a\u548c\u6301\u4e45\u6570\u636e\u5b58\u50a8\u76f8\u4e92\u72ec\u7acb\uff0c\u5e76\u4fdd\u6301\u6570\u636e\u6620\u5c04\u5668\u672c\u8eab\u3002 \u8be5\u5c42\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u6620\u5c04\u5668\uff08\u6216\u6570\u636e\u8bbf\u95ee\u5bf9\u8c61\uff09\u7ec4\u6210\uff0c\u6267\u884c\u6570\u636e\u4f20\u8f93\u3002 \u6620\u5c04\u5668\u5b9e\u73b0\u7684\u8303\u56f4\u6709\u6240\u4e0d\u540c\u3002 \u901a\u7528\u6620\u5c04\u5668\u5c06\u5904\u7406\u8bb8\u591a\u4e0d\u540c\u7684\u57df\u5b9e\u4f53\u7c7b\u578b\uff0c\u4e13\u7528\u6620\u5c04\u5668\u5c06\u5904\u7406\u4e00\u4e2a\u6216\u51e0\u4e2a\u3002 \u8fd9\u79cd\u6a21\u5f0f\u7684\u5173\u952e\u70b9\u5728\u4e8e\uff0c\u4e0e\u6d3b\u52a8\u8bb0\u5f55\u6a21\u5f0f\u4e0d\u540c\uff0c\u6570\u636e\u6a21\u578b\u9075\u5faa\u5355\u4e00\u8d23\u4efb\u539f\u5219\u3002","title":"1. \u76ee\u6807"},{"location":"php/php-design-patterns/DataMapper/#2","text":"\u6570\u636e\u5e93\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\u5668\uff08 ORM \uff09\uff1a Doctrine2 \u4f7f\u7528\u7684 DAO \uff0c\u540d\u5b57\u53eb\u505a \u201c EntityRepository \u201d\u3002","title":"2. \u4f8b\u5b50"},{"location":"php/php-design-patterns/DataMapper/#3-uml","text":"","title":"3. UML \u56fe"},{"location":"php/php-design-patterns/DataMapper/#4","text":"\u4f60\u80fd\u5728 GitHub \u4e0a\u9762\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 User.php <?php namespace DesignPatterns\\Structural\\DataMapper ; class User { /** * @var string */ private $username ; /** * @var string */ private $email ; public static function fromState ( array $state ) : User { // \u5728\u4f60\u8bbf\u95ee\u7684\u65f6\u5019\u9a8c\u8bc1\u72b6\u6001 return new self ( $state [ 'username' ], $state [ 'email' ] ); } public function __construct ( string $username , string $email ) { // \u5148\u9a8c\u8bc1\u53c2\u6570\u5728\u8bbe\u7f6e\u4ed6\u4eec $this -> username = $username ; $this -> email = $email ; } /** * @return string */ public function getUsername () { return $this -> username ; } /** * @return string */ public function getEmail () { return $this -> email ; } } UserMapper.php <?php namespace DesignPatterns\\Structural\\DataMapper ; class UserMapper { /** * @var StorageAdapter */ private $adapter ; /** * @param StorageAdapter $storage */ public function __construct ( StorageAdapter $storage ) { $this -> adapter = $storage ; } /** * \u6839\u636e id \u4ece\u5b58\u50a8\u5668\u4e2d\u627e\u5230\u7528\u6237\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7528\u6237\u5bf9\u8c61 * \u5728\u5185\u5b58\u4e2d\uff0c\u901a\u5e38\u8fd9\u79cd\u903b\u8f91\u5c06\u4f7f\u7528 Repository \u6a21\u5f0f\u6765\u5b9e\u73b0 * \u7136\u800c\uff0c\u91cd\u8981\u7684\u90e8\u5206\u662f\u5728\u4e0b\u9762\u7684 mapRowToUser() \u4e2d\uff0c\u5b83\u5c06\u4ece\u4e2d\u521b\u5efa\u4e00\u4e2a\u4e1a\u52a1\u5bf9\u8c61 * \u4ece\u5b58\u50a8\u4e2d\u83b7\u53d6\u7684\u6570\u636e * * @param int $id * * @return User */ public function findById ( int $id ) : User { $result = $this -> adapter -> find ( $id ); if ( $result === null ) { throw new \\InvalidArgumentException ( \"User # $id not found\" ); } return $this -> mapRowToUser ( $result ); } private function mapRowToUser ( array $row ) : User { return User :: fromState ( $row ); } } StorageAdapter.php <?php namespace DesignPatterns\\Structural\\DataMapper ; class StorageAdapter { /** * @var array */ private $data = []; public function __construct ( array $data ) { $this -> data = $data ; } /** * @param int $id * * @return array|null */ public function find ( int $id ) { if ( isset ( $this -> data [ $id ])) { return $this -> data [ $id ]; } return null ; } }","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/DataMapper/#5","text":"Tests/DataMapperTest.php <?php namespace DesignPatterns\\Structural\\DataMapper\\Tests ; use DesignPatterns\\Structural\\DataMapper\\StorageAdapter ; use DesignPatterns\\Structural\\DataMapper\\User ; use DesignPatterns\\Structural\\DataMapper\\UserMapper ; use PHPUnit\\Framework\\TestCase ; class DataMapperTest extends TestCase { public function testCanMapUserFromStorage () { $storage = new StorageAdapter ([ 1 => [ 'username' => 'domnikl' , 'email' => 'liebler.dominik@gmail.com' ]]); $mapper = new UserMapper ( $storage ); $user = $mapper -> findById ( 1 ); $this -> assertInstanceOf ( User :: class , $user ); } /** * @expectedException \\InvalidArgumentException */ public function testWillNotMapInvalidData () { $storage = new StorageAdapter ([]); $mapper = new UserMapper ( $storage ); $mapper -> findById ( 1 ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/DataMapper/1499","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Decorator/","text":"\u88c5\u9970\u6a21\u5f0f\uff08Decorator\uff09 # 1. \u76ee\u7684 # \u4e3a\u7c7b\u5b9e\u4f8b\u52a8\u6001\u589e\u52a0\u65b0\u7684\u65b9\u6cd5\u3002 2. \u4f8b\u5b50 # Zend Framework: Zend_Form_Element \u5b9e\u4f8b\u7684\u88c5\u9970\u8005 Web Service Layer: \u7528\u4e8e REST \u670d\u52a1\u7684 JSON \u548c XML \u88c5\u9970\u8005 (\u5f53\u7136\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7406\u5e94\u53ea\u6709\u4e00\u4e2a\u662f\u88ab\u5141\u8bb8\u7684) 3. UML \u56fe # 4. \u4ee3\u7801 # \u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u67e5\u770b\u4ee3\u7801 RenderableInterface.php <?php namespace DesignPatterns\\Structural\\Decorator ; /** * \u521b\u5efa\u6e32\u67d3\u63a5\u53e3\u3002 * \u8fd9\u91cc\u7684\u88c5\u9970\u65b9\u6cd5 renderData() \u8fd4\u56de\u7684\u662f\u5b57\u7b26\u4e32\u683c\u5f0f\u6570\u636e\u3002 */ interface RenderableInterface { public function renderData () : string ; } Webservice.php <?php namespace DesignPatterns\\Structural\\Decorator ; /** * \u521b\u5efa Webservice \u670d\u52a1\u7c7b\u5b9e\u73b0 RenderableInterface\u3002 * \u8be5\u7c7b\u5c06\u5728\u540e\u9762\u4e3a\u88c5\u9970\u8005\u5b9e\u73b0\u6570\u636e\u7684\u8f93\u5165\u3002 */ class Webservice implements RenderableInterface { /** * @var string */ private $data ; /** * \u4f20\u5165\u5b57\u7b26\u4e32\u683c\u5f0f\u6570\u636e\u3002 */ public function __construct ( string $data ) { $this -> data = $data ; } /** * \u5b9e\u73b0 RenderableInterface \u6e32\u67d3\u63a5\u53e3\u4e2d\u7684 renderData() \u65b9\u6cd5\u3002 * \u8fd4\u56de\u4f20\u5165\u7684\u6570\u636e\u3002 */ public function renderData () : string { return $this -> data ; } } RendererDecorator.php <?php namespace DesignPatterns\\Structural\\Decorator ; /** * \u88c5\u9970\u8005\u5fc5\u987b\u5b9e\u73b0\u6e32\u67d3\u63a5\u53e3\u7c7b RenderableInterface \u5951\u7ea6\uff0c\u8fd9\u662f\u8be5\u8bbe\u8ba1 * \u6a21\u5f0f\u7684\u5173\u952e\u70b9\u3002\u5426\u5219\uff0c\u8fd9\u5c06\u4e0d\u662f\u4e00\u4e2a\u88c5\u9970\u8005\u800c\u53ea\u662f\u4e00\u4e2a\u81ea\u6b3a\u6b3a\u4eba\u7684\u5305 * \u88c5\u3002 * * \u521b\u5efa\u62bd\u8c61\u7c7b RendererDecorator \uff08\u6e32\u67d3\u5668\u88c5\u9970\u8005\uff09\u5b9e\u73b0\u6e32\u67d3\u63a5\u53e3\u3002 */ abstract class RendererDecorator implements RenderableInterface { /** * @var RenderableInterface * \u5b9a\u4e49\u6e32\u67d3\u63a5\u53e3\u53d8\u91cf\u3002 */ protected $wrapped ; /** * @param RenderableInterface $renderer * \u4f20\u5165\u6e32\u67d3\u63a5\u53e3\u7c7b\u5bf9\u8c61 $renderer\u3002 */ public function __construct ( RenderableInterface $renderer ) { $this -> wrapped = $renderer ; } } XmlRenderer.php <?php namespace DesignPatterns\\Structural\\Decorator ; /** * \u521b\u5efa Xml \u4fee\u9970\u8005\u5e76\u7ee7\u627f\u62bd\u8c61\u7c7b RendererDecorator \u3002 */ class XmlRenderer extends RendererDecorator { /** * \u5bf9\u4f20\u5165\u7684\u6e32\u67d3\u63a5\u53e3\u5bf9\u8c61\u8fdb\u884c\u5904\u7406\uff0c\u751f\u6210 DOM \u6570\u636e\u6587\u4ef6\u3002 */ public function renderData () : string { $doc = new \\DOMDocument (); $data = $this -> wrapped -> renderData (); $doc -> appendChild ( $doc -> createElement ( 'content' , $data )); return $doc -> saveXML (); } } JsonRenderer.php <?php namespace DesignPatterns\\Structural\\Decorator ; /** * \u521b\u5efa Json \u4fee\u9970\u8005\u5e76\u7ee7\u627f\u62bd\u8c61\u7c7b RendererDecorator \u3002 */ class JsonRenderer extends RendererDecorator { /** * \u5bf9\u4f20\u5165\u7684\u6e32\u67d3\u63a5\u53e3\u5bf9\u8c61\u8fdb\u884c\u5904\u7406\uff0c\u751f\u6210 JSON \u6570\u636e\u3002 */ public function renderData () : string { return json_encode ( $this -> wrapped -> renderData ()); } } 5. \u6d4b\u8bd5 # Tests/DecoratorTest.php <?php namespace DesignPatterns\\Structural\\Decorator\\Tests ; use DesignPatterns\\Structural\\Decorator ; use PHPUnit\\Framework\\TestCase ; /** * \u521b\u5efa\u81ea\u52a8\u5316\u6d4b\u8bd5\u5355\u5143 DecoratorTest \u3002 */ class DecoratorTest extends TestCase { /** * @var Decorator\\Webservice */ private $service ; /** * \u4f20\u5165\u5b57\u7b26\u4e32 'foobar' \u3002 */ protected function setUp () { $this -> service = new Decorator\\Webservice ( 'foobar' ); } /** * \u6d4b\u8bd5 JSON \u88c5\u9970\u8005\u3002 * \u8fd9\u91cc\u7684 assertEquals \u662f\u4e3a\u4e86\u5224\u65ad\u8fd4\u56de\u7684\u7ed3\u679c\u662f\u5426\u7b26\u5408\u9884\u671f\u3002 */ public function testJsonDecorator () { $service = new Decorator\\JsonRenderer ( $this -> service ); $this -> assertEquals ( '\"foobar\"' , $service -> renderData ()); } /** * \u6d4b\u8bd5 Xml \u88c5\u9970\u8005\u3002 */ public function testXmlDecorator () { $service = new Decorator\\XmlRenderer ( $this -> service ); $this -> assertXmlStringEqualsXmlString ( '<?xml version=\"1.0\"?><content>foobar</content>' , $service -> renderData ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Decorator/1500","title":"\u88c5\u9970\u6a21\u5f0f\uff08Decorator\uff09"},{"location":"php/php-design-patterns/Decorator/#decorator","text":"","title":"\u88c5\u9970\u6a21\u5f0f\uff08Decorator\uff09"},{"location":"php/php-design-patterns/Decorator/#1","text":"\u4e3a\u7c7b\u5b9e\u4f8b\u52a8\u6001\u589e\u52a0\u65b0\u7684\u65b9\u6cd5\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Decorator/#2","text":"Zend Framework: Zend_Form_Element \u5b9e\u4f8b\u7684\u88c5\u9970\u8005 Web Service Layer: \u7528\u4e8e REST \u670d\u52a1\u7684 JSON \u548c XML \u88c5\u9970\u8005 (\u5f53\u7136\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7406\u5e94\u53ea\u6709\u4e00\u4e2a\u662f\u88ab\u5141\u8bb8\u7684)","title":"2. \u4f8b\u5b50"},{"location":"php/php-design-patterns/Decorator/#3-uml","text":"","title":"3. UML \u56fe"},{"location":"php/php-design-patterns/Decorator/#4","text":"\u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u67e5\u770b\u4ee3\u7801 RenderableInterface.php <?php namespace DesignPatterns\\Structural\\Decorator ; /** * \u521b\u5efa\u6e32\u67d3\u63a5\u53e3\u3002 * \u8fd9\u91cc\u7684\u88c5\u9970\u65b9\u6cd5 renderData() \u8fd4\u56de\u7684\u662f\u5b57\u7b26\u4e32\u683c\u5f0f\u6570\u636e\u3002 */ interface RenderableInterface { public function renderData () : string ; } Webservice.php <?php namespace DesignPatterns\\Structural\\Decorator ; /** * \u521b\u5efa Webservice \u670d\u52a1\u7c7b\u5b9e\u73b0 RenderableInterface\u3002 * \u8be5\u7c7b\u5c06\u5728\u540e\u9762\u4e3a\u88c5\u9970\u8005\u5b9e\u73b0\u6570\u636e\u7684\u8f93\u5165\u3002 */ class Webservice implements RenderableInterface { /** * @var string */ private $data ; /** * \u4f20\u5165\u5b57\u7b26\u4e32\u683c\u5f0f\u6570\u636e\u3002 */ public function __construct ( string $data ) { $this -> data = $data ; } /** * \u5b9e\u73b0 RenderableInterface \u6e32\u67d3\u63a5\u53e3\u4e2d\u7684 renderData() \u65b9\u6cd5\u3002 * \u8fd4\u56de\u4f20\u5165\u7684\u6570\u636e\u3002 */ public function renderData () : string { return $this -> data ; } } RendererDecorator.php <?php namespace DesignPatterns\\Structural\\Decorator ; /** * \u88c5\u9970\u8005\u5fc5\u987b\u5b9e\u73b0\u6e32\u67d3\u63a5\u53e3\u7c7b RenderableInterface \u5951\u7ea6\uff0c\u8fd9\u662f\u8be5\u8bbe\u8ba1 * \u6a21\u5f0f\u7684\u5173\u952e\u70b9\u3002\u5426\u5219\uff0c\u8fd9\u5c06\u4e0d\u662f\u4e00\u4e2a\u88c5\u9970\u8005\u800c\u53ea\u662f\u4e00\u4e2a\u81ea\u6b3a\u6b3a\u4eba\u7684\u5305 * \u88c5\u3002 * * \u521b\u5efa\u62bd\u8c61\u7c7b RendererDecorator \uff08\u6e32\u67d3\u5668\u88c5\u9970\u8005\uff09\u5b9e\u73b0\u6e32\u67d3\u63a5\u53e3\u3002 */ abstract class RendererDecorator implements RenderableInterface { /** * @var RenderableInterface * \u5b9a\u4e49\u6e32\u67d3\u63a5\u53e3\u53d8\u91cf\u3002 */ protected $wrapped ; /** * @param RenderableInterface $renderer * \u4f20\u5165\u6e32\u67d3\u63a5\u53e3\u7c7b\u5bf9\u8c61 $renderer\u3002 */ public function __construct ( RenderableInterface $renderer ) { $this -> wrapped = $renderer ; } } XmlRenderer.php <?php namespace DesignPatterns\\Structural\\Decorator ; /** * \u521b\u5efa Xml \u4fee\u9970\u8005\u5e76\u7ee7\u627f\u62bd\u8c61\u7c7b RendererDecorator \u3002 */ class XmlRenderer extends RendererDecorator { /** * \u5bf9\u4f20\u5165\u7684\u6e32\u67d3\u63a5\u53e3\u5bf9\u8c61\u8fdb\u884c\u5904\u7406\uff0c\u751f\u6210 DOM \u6570\u636e\u6587\u4ef6\u3002 */ public function renderData () : string { $doc = new \\DOMDocument (); $data = $this -> wrapped -> renderData (); $doc -> appendChild ( $doc -> createElement ( 'content' , $data )); return $doc -> saveXML (); } } JsonRenderer.php <?php namespace DesignPatterns\\Structural\\Decorator ; /** * \u521b\u5efa Json \u4fee\u9970\u8005\u5e76\u7ee7\u627f\u62bd\u8c61\u7c7b RendererDecorator \u3002 */ class JsonRenderer extends RendererDecorator { /** * \u5bf9\u4f20\u5165\u7684\u6e32\u67d3\u63a5\u53e3\u5bf9\u8c61\u8fdb\u884c\u5904\u7406\uff0c\u751f\u6210 JSON \u6570\u636e\u3002 */ public function renderData () : string { return json_encode ( $this -> wrapped -> renderData ()); } }","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/Decorator/#5","text":"Tests/DecoratorTest.php <?php namespace DesignPatterns\\Structural\\Decorator\\Tests ; use DesignPatterns\\Structural\\Decorator ; use PHPUnit\\Framework\\TestCase ; /** * \u521b\u5efa\u81ea\u52a8\u5316\u6d4b\u8bd5\u5355\u5143 DecoratorTest \u3002 */ class DecoratorTest extends TestCase { /** * @var Decorator\\Webservice */ private $service ; /** * \u4f20\u5165\u5b57\u7b26\u4e32 'foobar' \u3002 */ protected function setUp () { $this -> service = new Decorator\\Webservice ( 'foobar' ); } /** * \u6d4b\u8bd5 JSON \u88c5\u9970\u8005\u3002 * \u8fd9\u91cc\u7684 assertEquals \u662f\u4e3a\u4e86\u5224\u65ad\u8fd4\u56de\u7684\u7ed3\u679c\u662f\u5426\u7b26\u5408\u9884\u671f\u3002 */ public function testJsonDecorator () { $service = new Decorator\\JsonRenderer ( $this -> service ); $this -> assertEquals ( '\"foobar\"' , $service -> renderData ()); } /** * \u6d4b\u8bd5 Xml \u88c5\u9970\u8005\u3002 */ public function testXmlDecorator () { $service = new Decorator\\XmlRenderer ( $this -> service ); $this -> assertXmlStringEqualsXmlString ( '<?xml version=\"1.0\"?><content>foobar</content>' , $service -> renderData ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Decorator/1500","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Delegation/","text":"\u59d4\u6258\u6a21\u5f0f\uff08Delegation\uff09 # 1. \u76ee\u7684 # \u5728\u59d4\u6258\u6a21\u5f0f\u7684\u793a\u4f8b\u91cc\uff0c\u4e00\u4e2a\u5bf9\u8c61\u5c06\u5b83\u8981\u6267\u884c\u7684\u4efb\u52a1\u59d4\u6d3e\u7ed9\u4e0e\u4e4b\u5173\u8054\u7684\u5e2e\u52a9\u5bf9\u8c61\u53bb\u6267\u884c\u3002\u5728\u793a\u4f8b\u4e2d\uff0c\u300c\u7ec4\u957f\u300d\u58f0\u660e\u4e86 writeCode \u65b9\u6cd5\u5e76\u4f7f\u7528\u5b83\uff0c\u5176\u5b9e\u300c\u7ec4\u957f\u300d\u628a writeCode \u59d4\u6258\u7ed9\u300c\u83dc\u9e1f\u5f00\u53d1\u8005\u300d\u7684 writeBadCode \u65b9\u6cd5\u505a\u4e86\u3002\u8fd9\u79cd\u53cd\u8f6c\u8d23\u4efb\u7684\u505a\u6cd5\u9690\u85cf\u4e86\u5176\u5185\u90e8\u6267\u884c writeBadCode \u7684\u7ec6\u8282\u3002 2. \u4f8b\u5b50 # \u8bf7\u9605\u8bfb JuniorDeveloper.php \uff0c TeamLead.php \u4e2d\u7684\u4ee3\u7801\uff0c\u7136\u540e\u5728 Usage.php \u4e2d\u7ed3\u5408\u5728\u4e00\u8d77\u3002 3. UML \u56fe # 4. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 TeamLead.php <?php namespace DesignPatterns\\More\\Delegation ; class TeamLead { /** * @var JuniorDeveloper */ private $junior ; /** * @param JuniorDeveloper $junior */ public function __construct ( JuniorDeveloper $junior ) { $this -> junior = $junior ; } public function writeCode () : string { return $this -> junior -> writeBadCode (); } } JuniorDeveloper.php <?php namespace DesignPatterns\\More\\Delegation ; class JuniorDeveloper { public function writeBadCode () : string { return 'Some junior developer generated code...' ; } } 5. \u6d4b\u8bd5 # Tests/DelegationTest.php <?php namespace DesignPatterns\\More\\Delegation\\Tests ; use DesignPatterns\\More\\Delegation ; use PHPUnit\\Framework\\TestCase ; class DelegationTest extends TestCase { public function testHowTeamLeadWriteCode () { $junior = new Delegation\\JuniorDeveloper (); $teamLead = new Delegation\\TeamLead ( $junior ); $this -> assertEquals ( $junior -> writeBadCode (), $teamLead -> writeCode ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Delegation/1520","title":"\u59d4\u6258\u6a21\u5f0f\uff08Delegation\uff09"},{"location":"php/php-design-patterns/Delegation/#delegation","text":"","title":"\u59d4\u6258\u6a21\u5f0f\uff08Delegation\uff09"},{"location":"php/php-design-patterns/Delegation/#1","text":"\u5728\u59d4\u6258\u6a21\u5f0f\u7684\u793a\u4f8b\u91cc\uff0c\u4e00\u4e2a\u5bf9\u8c61\u5c06\u5b83\u8981\u6267\u884c\u7684\u4efb\u52a1\u59d4\u6d3e\u7ed9\u4e0e\u4e4b\u5173\u8054\u7684\u5e2e\u52a9\u5bf9\u8c61\u53bb\u6267\u884c\u3002\u5728\u793a\u4f8b\u4e2d\uff0c\u300c\u7ec4\u957f\u300d\u58f0\u660e\u4e86 writeCode \u65b9\u6cd5\u5e76\u4f7f\u7528\u5b83\uff0c\u5176\u5b9e\u300c\u7ec4\u957f\u300d\u628a writeCode \u59d4\u6258\u7ed9\u300c\u83dc\u9e1f\u5f00\u53d1\u8005\u300d\u7684 writeBadCode \u65b9\u6cd5\u505a\u4e86\u3002\u8fd9\u79cd\u53cd\u8f6c\u8d23\u4efb\u7684\u505a\u6cd5\u9690\u85cf\u4e86\u5176\u5185\u90e8\u6267\u884c writeBadCode \u7684\u7ec6\u8282\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Delegation/#2","text":"\u8bf7\u9605\u8bfb JuniorDeveloper.php \uff0c TeamLead.php \u4e2d\u7684\u4ee3\u7801\uff0c\u7136\u540e\u5728 Usage.php \u4e2d\u7ed3\u5408\u5728\u4e00\u8d77\u3002","title":"2. \u4f8b\u5b50"},{"location":"php/php-design-patterns/Delegation/#3-uml","text":"","title":"3. UML \u56fe"},{"location":"php/php-design-patterns/Delegation/#4","text":"\u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 TeamLead.php <?php namespace DesignPatterns\\More\\Delegation ; class TeamLead { /** * @var JuniorDeveloper */ private $junior ; /** * @param JuniorDeveloper $junior */ public function __construct ( JuniorDeveloper $junior ) { $this -> junior = $junior ; } public function writeCode () : string { return $this -> junior -> writeBadCode (); } } JuniorDeveloper.php <?php namespace DesignPatterns\\More\\Delegation ; class JuniorDeveloper { public function writeBadCode () : string { return 'Some junior developer generated code...' ; } }","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/Delegation/#5","text":"Tests/DelegationTest.php <?php namespace DesignPatterns\\More\\Delegation\\Tests ; use DesignPatterns\\More\\Delegation ; use PHPUnit\\Framework\\TestCase ; class DelegationTest extends TestCase { public function testHowTeamLeadWriteCode () { $junior = new Delegation\\JuniorDeveloper (); $teamLead = new Delegation\\TeamLead ( $junior ); $this -> assertEquals ( $junior -> writeBadCode (), $teamLead -> writeCode ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Delegation/1520","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/DependencyInjection/","text":"\u4f9d\u8d56\u6ce8\u5165\u6a21\u5f0f\uff08Dependency Injection\uff09 # 1. \u76ee\u7684 # \u7528\u677e\u6563\u8026\u5408\u7684\u65b9\u5f0f\u6765\u66f4\u597d\u7684\u5b9e\u73b0\u53ef\u6d4b\u8bd5\u3001\u53ef\u7ef4\u62a4\u548c\u53ef\u6269\u5c55\u7684\u4ee3\u7801\u3002 2. \u7528\u6cd5 # DatabaseConfiguration \u88ab\u6ce8\u5165 DatabaseConnection \u5e76\u83b7\u53d6\u6240\u9700\u7684 $config \u3002\u5982\u679c\u6ca1\u6709\u4f9d\u8d56\u6ce8\u5165\u6a21\u5f0f\uff0c \u914d\u7f6e\u5c06\u76f4\u63a5\u521b\u5efa DatabaseConnection \u3002\u8fd9\u5bf9\u6d4b\u8bd5\u548c\u6269\u5c55\u6765\u8bf4\u5f88\u4e0d\u597d\u3002 3. \u4f8b\u5b50 # Doctrine2 ORM \u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u3002 \u4f8b\u5982\uff0c\u6ce8\u5165\u5230 Connection \u5bf9\u8c61\u7684\u914d\u7f6e\u3002 \u5bf9\u4e8e\u6d4b\u8bd5\u800c\u8a00\uff0c \u53ef\u4ee5\u8f7b\u677e\u7684\u521b\u5efa\u53ef\u6269\u5c55\u7684\u6a21\u62df\u6570\u636e\u5e76\u6ce8\u5165\u5230 Connection \u5bf9\u8c61\u4e2d\u3002 Symfony \u548c Zend Framework 2 \u5df2\u7ecf\u6709\u4e86\u4f9d\u8d56\u6ce8\u5165\u7684\u5bb9\u5668\u3002\u4ed6\u4eec\u901a\u8fc7\u914d\u7f6e\u7684\u6570\u7ec4\u6765\u521b\u5efa\u5bf9\u8c61\uff0c\u5e76\u5728\u9700\u8981\u7684\u5730\u65b9\u6ce8\u5165 (\u5728\u63a7\u5236\u5668\u4e2d)\u3002 4. UML \u56fe # 5. \u4ee3\u7801 # \u60a8\u53ef\u4ee5\u5728 GitHub \u67e5\u770b\u8fd9\u6bb5\u4ee3\u7801 DatabaseConfiguration.php <?php namespace DesignPatterns\\Structural\\DependencyInjection ; class DatabaseConfiguration { /** * @var string */ private $host ; /** * @var int */ private $port ; /** * @var string */ private $username ; /** * @var string */ private $password ; public function __construct ( string $host , int $port , string $username , string $password ) { $this -> host = $host ; $this -> port = $port ; $this -> username = $username ; $this -> password = $password ; } public function getHost () : string { return $this -> host ; } public function getPort () : int { return $this -> port ; } public function getUsername () : string { return $this -> username ; } public function getPassword () : string { return $this -> password ; } } DatabaseConnection.php <?php namespace DesignPatterns\\Structural\\DependencyInjection ; class DatabaseConnection { /** * @var DatabaseConfiguration */ private $configuration ; /** * @param DatabaseConfiguration $config */ public function __construct ( DatabaseConfiguration $config ) { $this -> configuration = $config ; } public function getDsn () : string { // \u8fd9\u4ec5\u4ec5\u662f\u6f14\u793a\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u771f\u6b63\u7684 DSN // \u6ce8\u610f\uff0c\u8fd9\u91cc\u53ea\u4f7f\u7528\u4e86\u6ce8\u5165\u7684\u914d\u7f6e\u3002 \u6240\u4ee5\uff0c // \u8fd9\u91cc\u662f\u5173\u952e\u7684\u5206\u79bb\u5173\u6ce8\u70b9\u3002 return sprintf ( '%s:%s@%s:%d' , $this -> configuration -> getUsername (), $this -> configuration -> getPassword (), $this -> configuration -> getHost (), $this -> configuration -> getPort () ); } } 6. \u6d4b\u8bd5 # Tests/DependencyInjectionTest.php <?php namespace DesignPatterns\\Structural\\DependencyInjection\\Tests ; use DesignPatterns\\Structural\\DependencyInjection\\DatabaseConfiguration ; use DesignPatterns\\Structural\\DependencyInjection\\DatabaseConnection ; use PHPUnit\\Framework\\TestCase ; class DependencyInjectionTest extends TestCase { public function testDependencyInjection () { $config = new DatabaseConfiguration ( 'localhost' , 3306 , 'domnikl' , '1234' ); $connection = new DatabaseConnection ( $config ); $this -> assertEquals ( 'domnikl:1234@localhost:3306' , $connection -> getDsn ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/DependencyInjection/1501","title":"\u4f9d\u8d56\u6ce8\u5165\u6a21\u5f0f\uff08Dependency Injection\uff09"},{"location":"php/php-design-patterns/DependencyInjection/#dependency-injection","text":"","title":"\u4f9d\u8d56\u6ce8\u5165\u6a21\u5f0f\uff08Dependency Injection\uff09"},{"location":"php/php-design-patterns/DependencyInjection/#1","text":"\u7528\u677e\u6563\u8026\u5408\u7684\u65b9\u5f0f\u6765\u66f4\u597d\u7684\u5b9e\u73b0\u53ef\u6d4b\u8bd5\u3001\u53ef\u7ef4\u62a4\u548c\u53ef\u6269\u5c55\u7684\u4ee3\u7801\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/DependencyInjection/#2","text":"DatabaseConfiguration \u88ab\u6ce8\u5165 DatabaseConnection \u5e76\u83b7\u53d6\u6240\u9700\u7684 $config \u3002\u5982\u679c\u6ca1\u6709\u4f9d\u8d56\u6ce8\u5165\u6a21\u5f0f\uff0c \u914d\u7f6e\u5c06\u76f4\u63a5\u521b\u5efa DatabaseConnection \u3002\u8fd9\u5bf9\u6d4b\u8bd5\u548c\u6269\u5c55\u6765\u8bf4\u5f88\u4e0d\u597d\u3002","title":"2. \u7528\u6cd5"},{"location":"php/php-design-patterns/DependencyInjection/#3","text":"Doctrine2 ORM \u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u3002 \u4f8b\u5982\uff0c\u6ce8\u5165\u5230 Connection \u5bf9\u8c61\u7684\u914d\u7f6e\u3002 \u5bf9\u4e8e\u6d4b\u8bd5\u800c\u8a00\uff0c \u53ef\u4ee5\u8f7b\u677e\u7684\u521b\u5efa\u53ef\u6269\u5c55\u7684\u6a21\u62df\u6570\u636e\u5e76\u6ce8\u5165\u5230 Connection \u5bf9\u8c61\u4e2d\u3002 Symfony \u548c Zend Framework 2 \u5df2\u7ecf\u6709\u4e86\u4f9d\u8d56\u6ce8\u5165\u7684\u5bb9\u5668\u3002\u4ed6\u4eec\u901a\u8fc7\u914d\u7f6e\u7684\u6570\u7ec4\u6765\u521b\u5efa\u5bf9\u8c61\uff0c\u5e76\u5728\u9700\u8981\u7684\u5730\u65b9\u6ce8\u5165 (\u5728\u63a7\u5236\u5668\u4e2d)\u3002","title":"3. \u4f8b\u5b50"},{"location":"php/php-design-patterns/DependencyInjection/#4-uml","text":"","title":"4. UML \u56fe"},{"location":"php/php-design-patterns/DependencyInjection/#5","text":"\u60a8\u53ef\u4ee5\u5728 GitHub \u67e5\u770b\u8fd9\u6bb5\u4ee3\u7801 DatabaseConfiguration.php <?php namespace DesignPatterns\\Structural\\DependencyInjection ; class DatabaseConfiguration { /** * @var string */ private $host ; /** * @var int */ private $port ; /** * @var string */ private $username ; /** * @var string */ private $password ; public function __construct ( string $host , int $port , string $username , string $password ) { $this -> host = $host ; $this -> port = $port ; $this -> username = $username ; $this -> password = $password ; } public function getHost () : string { return $this -> host ; } public function getPort () : int { return $this -> port ; } public function getUsername () : string { return $this -> username ; } public function getPassword () : string { return $this -> password ; } } DatabaseConnection.php <?php namespace DesignPatterns\\Structural\\DependencyInjection ; class DatabaseConnection { /** * @var DatabaseConfiguration */ private $configuration ; /** * @param DatabaseConfiguration $config */ public function __construct ( DatabaseConfiguration $config ) { $this -> configuration = $config ; } public function getDsn () : string { // \u8fd9\u4ec5\u4ec5\u662f\u6f14\u793a\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u771f\u6b63\u7684 DSN // \u6ce8\u610f\uff0c\u8fd9\u91cc\u53ea\u4f7f\u7528\u4e86\u6ce8\u5165\u7684\u914d\u7f6e\u3002 \u6240\u4ee5\uff0c // \u8fd9\u91cc\u662f\u5173\u952e\u7684\u5206\u79bb\u5173\u6ce8\u70b9\u3002 return sprintf ( '%s:%s@%s:%d' , $this -> configuration -> getUsername (), $this -> configuration -> getPassword (), $this -> configuration -> getHost (), $this -> configuration -> getPort () ); } }","title":"5. \u4ee3\u7801"},{"location":"php/php-design-patterns/DependencyInjection/#6","text":"Tests/DependencyInjectionTest.php <?php namespace DesignPatterns\\Structural\\DependencyInjection\\Tests ; use DesignPatterns\\Structural\\DependencyInjection\\DatabaseConfiguration ; use DesignPatterns\\Structural\\DependencyInjection\\DatabaseConnection ; use PHPUnit\\Framework\\TestCase ; class DependencyInjectionTest extends TestCase { public function testDependencyInjection () { $config = new DatabaseConfiguration ( 'localhost' , 3306 , 'domnikl' , '1234' ); $connection = new DatabaseConnection ( $config ); $this -> assertEquals ( 'domnikl:1234@localhost:3306' , $connection -> getDsn ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/DependencyInjection/1501","title":"6. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/EAV/","text":"\u5b9e\u4f53\u5c5e\u6027\u503c\u6a21\u5f0f\uff08EAV \u6a21\u5f0f\uff09 # \u5b9e\u4f53\u5c5e\u6027\u503c\uff08Entity--attribute--value EAV\uff09\u6a21\u5f0f\uff0c\u53ef\u4ee5\u65b9\u4fbf PHP \u5b9e\u73b0 EAV \u6a21\u578b\u3002 1. \u76ee\u7684 # \u5b9e\u4f53\u5c5e\u6027\u503c\u6a21\u578b\uff08Entity-attribute-value EAV\uff09\u662f\u4e00\u79cd\u7528\u6570\u636e\u6a21\u578b\u63cf\u8ff0\u5b9e\u4f53\u7684\u5c5e\u6027\uff08\u5c5e\u6027\uff0c\u53c2\u6570\uff09\uff0c\u53ef\u4ee5\u7528\u6765\u5f62\u5bb9\u4ed6\u4eec\u6f5c\u5728\u5de8\u5927\uff0c\u4f46\u5b9e\u9645\u4e0a\u5c06\u9002\u7528\u4e8e\u7ed9\u5b9a\u7684\u5b9e\u4f53\u7684\u6570\u91cf\u662f\u76f8\u5bf9\u8f83\u5c11\u3002 \u5728\u6570\u5b66\u4e2d\uff0c\u8fd9\u79cd\u6a21\u5f0f\u88ab\u79f0\u4e3a\u4e00\u4e2a\u7a00\u758f\u77e9\u9635 \u3002 EAV\u4e5f\u88ab\u79f0\u4e3a\u5bf9\u8c61\u7684\u5c5e\u6027\u503c\u7684\u6a21\u5f0f\uff0c\u5782\u76f4\u7684\u6570\u636e\u5e93\u6a21\u578b\u548c\u5f00\u653e\u5f0f\u67b6\u6784\u3002 2. UML \u56fe # 4. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 Entity.php <?php namespace DesignPatterns\\More\\EAV ; class Entity { /** * @var \\SplObjectStorage */ private $values ; /** * @var string */ private $name ; /** * @param string $name * @param Value[] $values */ public function __construct ( string $name , $values ) { $this -> values = new \\SplObjectStorage (); $this -> name = $name ; foreach ( $values as $value ) { $this -> values -> attach ( $value ); } } public function __toString () : string { $text = [ $this -> name ]; foreach ( $this -> values as $value ) { $text [] = ( string ) $value ; } return join ( ', ' , $text ); } } Attribute.php <?php namespace DesignPatterns\\More\\EAV ; class Attribute { /** * @var \\SplObjectStorage */ private $values ; /** * @var string */ private $name ; public function __construct ( string $name ) { $this -> values = new \\SplObjectStorage (); $this -> name = $name ; } public function addValue ( Value $value ) { $this -> values -> attach ( $value ); } /** * @return \\SplObjectStorage */ public function getValues () : \\SplObjectStorage { return $this -> values ; } public function __toString () : string { return $this -> name ; } } Value.php <?php namespace DesignPatterns\\More\\EAV ; class Value { /** * @var Attribute */ private $attribute ; /** * @var string */ private $name ; public function __construct ( Attribute $attribute , string $name ) { $this -> name = $name ; $this -> attribute = $attribute ; $attribute -> addValue ( $this ); } public function __toString () : string { return sprintf ( '%s: %s' , $this -> attribute , $this -> name ); } } 4. \u6d4b\u8bd5 # Tests/EAVTest.php <?php namespace DesignPatterns\\More\\EAV\\Tests ; use DesignPatterns\\More\\EAV\\Attribute ; use DesignPatterns\\More\\EAV\\Entity ; use DesignPatterns\\More\\EAV\\Value ; use PHPUnit\\Framework\\TestCase ; class EAVTest extends TestCase { public function testCanAddAttributeToEntity () { $colorAttribute = new Attribute ( 'color' ); $colorSilver = new Value ( $colorAttribute , 'silver' ); $colorBlack = new Value ( $colorAttribute , 'black' ); $memoryAttribute = new Attribute ( 'memory' ); $memory8Gb = new Value ( $memoryAttribute , '8GB' ); $entity = new Entity ( 'MacBook Pro' , [ $colorSilver , $colorBlack , $memory8Gb ]); $this -> assertEquals ( 'MacBook Pro, color: silver, color: black, memory: 8GB' , ( string ) $entity ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/EAV/1523","title":"\u5b9e\u4f53\u5c5e\u6027\u503c\u6a21\u5f0f\uff08EAV \u6a21\u5f0f\uff09"},{"location":"php/php-design-patterns/EAV/#eav","text":"\u5b9e\u4f53\u5c5e\u6027\u503c\uff08Entity--attribute--value EAV\uff09\u6a21\u5f0f\uff0c\u53ef\u4ee5\u65b9\u4fbf PHP \u5b9e\u73b0 EAV \u6a21\u578b\u3002","title":"\u5b9e\u4f53\u5c5e\u6027\u503c\u6a21\u5f0f\uff08EAV \u6a21\u5f0f\uff09"},{"location":"php/php-design-patterns/EAV/#1","text":"\u5b9e\u4f53\u5c5e\u6027\u503c\u6a21\u578b\uff08Entity-attribute-value EAV\uff09\u662f\u4e00\u79cd\u7528\u6570\u636e\u6a21\u578b\u63cf\u8ff0\u5b9e\u4f53\u7684\u5c5e\u6027\uff08\u5c5e\u6027\uff0c\u53c2\u6570\uff09\uff0c\u53ef\u4ee5\u7528\u6765\u5f62\u5bb9\u4ed6\u4eec\u6f5c\u5728\u5de8\u5927\uff0c\u4f46\u5b9e\u9645\u4e0a\u5c06\u9002\u7528\u4e8e\u7ed9\u5b9a\u7684\u5b9e\u4f53\u7684\u6570\u91cf\u662f\u76f8\u5bf9\u8f83\u5c11\u3002 \u5728\u6570\u5b66\u4e2d\uff0c\u8fd9\u79cd\u6a21\u5f0f\u88ab\u79f0\u4e3a\u4e00\u4e2a\u7a00\u758f\u77e9\u9635 \u3002 EAV\u4e5f\u88ab\u79f0\u4e3a\u5bf9\u8c61\u7684\u5c5e\u6027\u503c\u7684\u6a21\u5f0f\uff0c\u5782\u76f4\u7684\u6570\u636e\u5e93\u6a21\u578b\u548c\u5f00\u653e\u5f0f\u67b6\u6784\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/EAV/#2-uml","text":"","title":"2. UML \u56fe"},{"location":"php/php-design-patterns/EAV/#4","text":"\u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 Entity.php <?php namespace DesignPatterns\\More\\EAV ; class Entity { /** * @var \\SplObjectStorage */ private $values ; /** * @var string */ private $name ; /** * @param string $name * @param Value[] $values */ public function __construct ( string $name , $values ) { $this -> values = new \\SplObjectStorage (); $this -> name = $name ; foreach ( $values as $value ) { $this -> values -> attach ( $value ); } } public function __toString () : string { $text = [ $this -> name ]; foreach ( $this -> values as $value ) { $text [] = ( string ) $value ; } return join ( ', ' , $text ); } } Attribute.php <?php namespace DesignPatterns\\More\\EAV ; class Attribute { /** * @var \\SplObjectStorage */ private $values ; /** * @var string */ private $name ; public function __construct ( string $name ) { $this -> values = new \\SplObjectStorage (); $this -> name = $name ; } public function addValue ( Value $value ) { $this -> values -> attach ( $value ); } /** * @return \\SplObjectStorage */ public function getValues () : \\SplObjectStorage { return $this -> values ; } public function __toString () : string { return $this -> name ; } } Value.php <?php namespace DesignPatterns\\More\\EAV ; class Value { /** * @var Attribute */ private $attribute ; /** * @var string */ private $name ; public function __construct ( Attribute $attribute , string $name ) { $this -> name = $name ; $this -> attribute = $attribute ; $attribute -> addValue ( $this ); } public function __toString () : string { return sprintf ( '%s: %s' , $this -> attribute , $this -> name ); } }","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/EAV/#4_1","text":"Tests/EAVTest.php <?php namespace DesignPatterns\\More\\EAV\\Tests ; use DesignPatterns\\More\\EAV\\Attribute ; use DesignPatterns\\More\\EAV\\Entity ; use DesignPatterns\\More\\EAV\\Value ; use PHPUnit\\Framework\\TestCase ; class EAVTest extends TestCase { public function testCanAddAttributeToEntity () { $colorAttribute = new Attribute ( 'color' ); $colorSilver = new Value ( $colorAttribute , 'silver' ); $colorBlack = new Value ( $colorAttribute , 'black' ); $memoryAttribute = new Attribute ( 'memory' ); $memory8Gb = new Value ( $memoryAttribute , '8GB' ); $entity = new Entity ( 'MacBook Pro' , [ $colorSilver , $colorBlack , $memory8Gb ]); $this -> assertEquals ( 'MacBook Pro, color: silver, color: black, memory: 8GB' , ( string ) $entity ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/EAV/1523","title":"4. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Facade/","text":"\u95e8\u9762\u6a21\u5f0f\uff08Facade\uff09 # 1. \u76ee\u7684 # \u95e8\u9762\u6a21\u5f0f\u7684\u6700\u521d\u76ee\u7684\u5e76\u4e0d\u662f\u4e3a\u4e86\u907f\u514d\u8ba9\u4f60\u9605\u8bfb\u590d\u6742\u7684 API \u6587\u6863\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u9644\u5e26\u4f5c\u7528\u3002\u5176\u5b9e\u5b83\u7684\u672c\u610f\u662f\u4e3a\u4e86\u964d\u4f4e\u8026\u5408\u6027\u5e76\u4e14\u9075\u5faa Demeter \u5b9a\u5f8b\u3002 \u4e00\u4e2a\u95e8\u9762\u65e8\u5728\u901a\u8fc7\u5d4c\u5165\u8bb8\u591a\uff08\u4f46\u6709\u65f6\u53ea\u6709\u4e00\u4e2a\uff09\u63a5\u53e3\u6765\u5206\u79bb\u5ba2\u6237\u7aef\u548c\u5b50\u7cfb\u7edf\u3002\u5f53\u7136\uff0c\u4e5f\u662f\u4e3a\u4e86\u964d\u4f4e\u590d\u6742\u5ea6\u3002 \u95e8\u9762\u4e0d\u4f1a\u7981\u6b62\u4f60\u8bbf\u95ee\u5b50\u7cfb\u7edf\u3002 \u4f60\u53ef\u4ee5\uff08\u5e94\u8be5\uff09\u6709\u591a\u4e2a\u95e8\u9762\u5bf9\u5e94\u4e00\u4e2a\u5b50\u7cfb\u7edf\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4e00\u4e2a\u597d\u7684\u95e8\u9762\u91cc\u6ca1\u6709 new \u7684\u539f\u56e0\u3002\u5982\u679c\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u6709\u591a\u79cd\u521b\u5efa\uff0c\u90a3\u5e76\u4e0d\u662f\u4e00\u4e2a\u95e8\u9762\uff0c\u800c\u662f\u4e00\u4e2a\u6784\u5efa\u5668 [\u62bd\u8c61\u7684|\u9759\u6001\u7684|\u7b80\u5355\u7684] \u6216\u662f\u4e00\u4e2a\u5de5\u5382 [\u65b9\u6cd5] \u3002 \u6700\u597d\u7684\u95e8\u9762\u662f\u6ca1\u6709 new \u7684\uff0c\u5e76\u4e14\u5176\u6784\u9020\u51fd\u6570\u5e26\u6709\u63a5\u53e3\u7c7b\u578b\u63d0\u793a\u7684\u53c2\u6570\u3002 \u5982\u679c\u4f60\u9700\u8981\u521b\u5efa\u65b0\u7684\u5b9e\u4f8b\uff0c\u53ef\u4ee5\u4f7f\u7528\u5de5\u5382\u4f5c\u4e3a\u53d8\u91cf\u3002 2. UML \u56fe # 3. \u4ee3\u7801 # \u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u67e5\u770b\u6b64\u4ee3\u7801 Facade.php <?php namespace DesignPatterns\\Structural\\Facade ; class Facade { /** * @var OsInterface * \u5b9a\u4e49\u64cd\u4f5c\u7cfb\u7edf\u63a5\u53e3\u53d8\u91cf\u3002 */ private $os ; /** * @var BiosInterface * \u5b9a\u4e49\u57fa\u7840\u8f93\u5165\u8f93\u51fa\u7cfb\u7edf\u63a5\u53e3\u53d8\u91cf\u3002 */ private $bios ; /** * @param BiosInterface $bios * @param OsInterface $os * \u4f20\u5165\u57fa\u7840\u8f93\u5165\u8f93\u51fa\u7cfb\u7edf\u63a5\u53e3\u5bf9\u8c61 $bios \u3002 * \u4f20\u5165\u64cd\u4f5c\u7cfb\u7edf\u63a5\u53e3\u5bf9\u8c61 $os \u3002 */ public function __construct ( BiosInterface $bios , OsInterface $os ) { $this -> bios = $bios ; $this -> os = $os ; } /** * \u6784\u5efa\u57fa\u7840\u8f93\u5165\u8f93\u51fa\u7cfb\u7edf\u6267\u884c\u542f\u52a8\u65b9\u6cd5\u3002 */ public function turnOn () { $this -> bios -> execute (); $this -> bios -> waitForKeyPress (); $this -> bios -> launch ( $this -> os ); } /** * \u6784\u5efa\u7cfb\u7edf\u5173\u95ed\u65b9\u6cd5\u3002 */ public function turnOff () { $this -> os -> halt (); $this -> bios -> powerDown (); } } OsInterface.php <?php namespace DesignPatterns\\Structural\\Facade ; /** * \u521b\u5efa\u64cd\u4f5c\u7cfb\u7edf\u63a5\u53e3\u7c7b OsInterface \u3002 */ interface OsInterface { /** * \u58f0\u660e\u5173\u673a\u65b9\u6cd5\u3002 */ public function halt (); /** * \u58f0\u660e\u83b7\u53d6\u540d\u79f0\u65b9\u6cd5\uff0c\u8fd4\u56de\u5b57\u7b26\u4e32\u683c\u5f0f\u6570\u636e\u3002 */ public function getName () : string ; } BiosInterface.php <?php namespace DesignPatterns\\Structural\\Facade ; /** * \u521b\u5efa\u57fa\u7840\u8f93\u5165\u8f93\u51fa\u7cfb\u7edf\u63a5\u53e3\u7c7b BiosInterface \u3002 */ interface BiosInterface { /** * \u58f0\u660e\u6267\u884c\u65b9\u6cd5\u3002 */ public function execute (); /** * \u58f0\u660e\u7b49\u5f85\u5bc6\u7801\u8f93\u5165\u65b9\u6cd5 */ public function waitForKeyPress (); /** * \u58f0\u660e\u767b\u5f55\u65b9\u6cd5\u3002 */ public function launch ( OsInterface $os ); /** * \u58f0\u660e\u5173\u673a\u65b9\u6cd5\u3002 */ public function powerDown (); } 4. \u6d4b\u8bd5 # Tests/FacadeTest.php <?php namespace DesignPatterns\\Structural\\Facade\\Tests ; use DesignPatterns\\Structural\\Facade\\Facade ; use DesignPatterns\\Structural\\Facade\\OsInterface ; use PHPUnit\\Framework\\TestCase ; /** * \u521b\u5efa\u81ea\u52a8\u5316\u6d4b\u8bd5\u5355\u5143 FacadeTest \u3002 */ class FacadeTest extends TestCase { public function testComputerOn () { /** @var OsInterface|\\PHPUnit_Framework_MockObject_MockObject $os */ $os = $this -> createMock ( 'DesignPatterns\\Structural\\Facade\\OsInterface' ); $os -> method ( 'getName' ) -> will ( $this -> returnValue ( 'Linux' )); $bios = $this -> getMockBuilder ( 'DesignPatterns\\Structural\\Facade\\BiosInterface' ) -> setMethods ([ 'launch' , 'execute' , 'waitForKeyPress' ]) -> disableAutoload () -> getMock (); $bios -> expects ( $this -> once ()) -> method ( 'launch' ) -> with ( $os ); $facade = new Facade ( $bios , $os ); // \u95e8\u9762\u63a5\u53e3\u5f88\u7b80\u5355\u3002 $facade -> turnOn (); // \u4f46\u4f60\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u5e95\u5c42\u7ec4\u4ef6\u3002 $this -> assertEquals ( 'Linux' , $os -> getName ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Facade/1502","title":"\u95e8\u9762\u6a21\u5f0f\uff08Facade\uff09"},{"location":"php/php-design-patterns/Facade/#facade","text":"","title":"\u95e8\u9762\u6a21\u5f0f\uff08Facade\uff09"},{"location":"php/php-design-patterns/Facade/#1","text":"\u95e8\u9762\u6a21\u5f0f\u7684\u6700\u521d\u76ee\u7684\u5e76\u4e0d\u662f\u4e3a\u4e86\u907f\u514d\u8ba9\u4f60\u9605\u8bfb\u590d\u6742\u7684 API \u6587\u6863\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u9644\u5e26\u4f5c\u7528\u3002\u5176\u5b9e\u5b83\u7684\u672c\u610f\u662f\u4e3a\u4e86\u964d\u4f4e\u8026\u5408\u6027\u5e76\u4e14\u9075\u5faa Demeter \u5b9a\u5f8b\u3002 \u4e00\u4e2a\u95e8\u9762\u65e8\u5728\u901a\u8fc7\u5d4c\u5165\u8bb8\u591a\uff08\u4f46\u6709\u65f6\u53ea\u6709\u4e00\u4e2a\uff09\u63a5\u53e3\u6765\u5206\u79bb\u5ba2\u6237\u7aef\u548c\u5b50\u7cfb\u7edf\u3002\u5f53\u7136\uff0c\u4e5f\u662f\u4e3a\u4e86\u964d\u4f4e\u590d\u6742\u5ea6\u3002 \u95e8\u9762\u4e0d\u4f1a\u7981\u6b62\u4f60\u8bbf\u95ee\u5b50\u7cfb\u7edf\u3002 \u4f60\u53ef\u4ee5\uff08\u5e94\u8be5\uff09\u6709\u591a\u4e2a\u95e8\u9762\u5bf9\u5e94\u4e00\u4e2a\u5b50\u7cfb\u7edf\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4e00\u4e2a\u597d\u7684\u95e8\u9762\u91cc\u6ca1\u6709 new \u7684\u539f\u56e0\u3002\u5982\u679c\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u6709\u591a\u79cd\u521b\u5efa\uff0c\u90a3\u5e76\u4e0d\u662f\u4e00\u4e2a\u95e8\u9762\uff0c\u800c\u662f\u4e00\u4e2a\u6784\u5efa\u5668 [\u62bd\u8c61\u7684|\u9759\u6001\u7684|\u7b80\u5355\u7684] \u6216\u662f\u4e00\u4e2a\u5de5\u5382 [\u65b9\u6cd5] \u3002 \u6700\u597d\u7684\u95e8\u9762\u662f\u6ca1\u6709 new \u7684\uff0c\u5e76\u4e14\u5176\u6784\u9020\u51fd\u6570\u5e26\u6709\u63a5\u53e3\u7c7b\u578b\u63d0\u793a\u7684\u53c2\u6570\u3002 \u5982\u679c\u4f60\u9700\u8981\u521b\u5efa\u65b0\u7684\u5b9e\u4f8b\uff0c\u53ef\u4ee5\u4f7f\u7528\u5de5\u5382\u4f5c\u4e3a\u53d8\u91cf\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Facade/#2-uml","text":"","title":"2. UML \u56fe"},{"location":"php/php-design-patterns/Facade/#3","text":"\u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u67e5\u770b\u6b64\u4ee3\u7801 Facade.php <?php namespace DesignPatterns\\Structural\\Facade ; class Facade { /** * @var OsInterface * \u5b9a\u4e49\u64cd\u4f5c\u7cfb\u7edf\u63a5\u53e3\u53d8\u91cf\u3002 */ private $os ; /** * @var BiosInterface * \u5b9a\u4e49\u57fa\u7840\u8f93\u5165\u8f93\u51fa\u7cfb\u7edf\u63a5\u53e3\u53d8\u91cf\u3002 */ private $bios ; /** * @param BiosInterface $bios * @param OsInterface $os * \u4f20\u5165\u57fa\u7840\u8f93\u5165\u8f93\u51fa\u7cfb\u7edf\u63a5\u53e3\u5bf9\u8c61 $bios \u3002 * \u4f20\u5165\u64cd\u4f5c\u7cfb\u7edf\u63a5\u53e3\u5bf9\u8c61 $os \u3002 */ public function __construct ( BiosInterface $bios , OsInterface $os ) { $this -> bios = $bios ; $this -> os = $os ; } /** * \u6784\u5efa\u57fa\u7840\u8f93\u5165\u8f93\u51fa\u7cfb\u7edf\u6267\u884c\u542f\u52a8\u65b9\u6cd5\u3002 */ public function turnOn () { $this -> bios -> execute (); $this -> bios -> waitForKeyPress (); $this -> bios -> launch ( $this -> os ); } /** * \u6784\u5efa\u7cfb\u7edf\u5173\u95ed\u65b9\u6cd5\u3002 */ public function turnOff () { $this -> os -> halt (); $this -> bios -> powerDown (); } } OsInterface.php <?php namespace DesignPatterns\\Structural\\Facade ; /** * \u521b\u5efa\u64cd\u4f5c\u7cfb\u7edf\u63a5\u53e3\u7c7b OsInterface \u3002 */ interface OsInterface { /** * \u58f0\u660e\u5173\u673a\u65b9\u6cd5\u3002 */ public function halt (); /** * \u58f0\u660e\u83b7\u53d6\u540d\u79f0\u65b9\u6cd5\uff0c\u8fd4\u56de\u5b57\u7b26\u4e32\u683c\u5f0f\u6570\u636e\u3002 */ public function getName () : string ; } BiosInterface.php <?php namespace DesignPatterns\\Structural\\Facade ; /** * \u521b\u5efa\u57fa\u7840\u8f93\u5165\u8f93\u51fa\u7cfb\u7edf\u63a5\u53e3\u7c7b BiosInterface \u3002 */ interface BiosInterface { /** * \u58f0\u660e\u6267\u884c\u65b9\u6cd5\u3002 */ public function execute (); /** * \u58f0\u660e\u7b49\u5f85\u5bc6\u7801\u8f93\u5165\u65b9\u6cd5 */ public function waitForKeyPress (); /** * \u58f0\u660e\u767b\u5f55\u65b9\u6cd5\u3002 */ public function launch ( OsInterface $os ); /** * \u58f0\u660e\u5173\u673a\u65b9\u6cd5\u3002 */ public function powerDown (); }","title":"3. \u4ee3\u7801"},{"location":"php/php-design-patterns/Facade/#4","text":"Tests/FacadeTest.php <?php namespace DesignPatterns\\Structural\\Facade\\Tests ; use DesignPatterns\\Structural\\Facade\\Facade ; use DesignPatterns\\Structural\\Facade\\OsInterface ; use PHPUnit\\Framework\\TestCase ; /** * \u521b\u5efa\u81ea\u52a8\u5316\u6d4b\u8bd5\u5355\u5143 FacadeTest \u3002 */ class FacadeTest extends TestCase { public function testComputerOn () { /** @var OsInterface|\\PHPUnit_Framework_MockObject_MockObject $os */ $os = $this -> createMock ( 'DesignPatterns\\Structural\\Facade\\OsInterface' ); $os -> method ( 'getName' ) -> will ( $this -> returnValue ( 'Linux' )); $bios = $this -> getMockBuilder ( 'DesignPatterns\\Structural\\Facade\\BiosInterface' ) -> setMethods ([ 'launch' , 'execute' , 'waitForKeyPress' ]) -> disableAutoload () -> getMock (); $bios -> expects ( $this -> once ()) -> method ( 'launch' ) -> with ( $os ); $facade = new Facade ( $bios , $os ); // \u95e8\u9762\u63a5\u53e3\u5f88\u7b80\u5355\u3002 $facade -> turnOn (); // \u4f46\u4f60\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u5e95\u5c42\u7ec4\u4ef6\u3002 $this -> assertEquals ( 'Linux' , $os -> getName ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Facade/1502","title":"4. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/FactoryMethod/","text":"\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\uff08Factory Method\uff09 # 1. \u76ee\u7684 # \u5bf9\u6bd4\u7b80\u5355\u5de5\u5382\u6a21\u5f0f\u7684\u4f18\u70b9\u662f\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u5b50\u7c7b\u7528\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u3002 \u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u8fd9\u4e2a\u62bd\u8c61\u7c7b\u53ef\u80fd\u53ea\u662f\u4e00\u4e2a\u63a5\u53e3\u3002 \u8fd9\u79cd\u6a21\u5f0f\u662f\u300c\u771f\u6b63\u300d\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c \u56e0\u4e3a\u4ed6\u5b9e\u73b0\u4e86S.O.L.I.D\u539f\u5219\u4e2d\u300cD\u300d\u7684 \u300c\u4f9d\u8d56\u5012\u7f6e\u300d\u3002 \u8fd9\u610f\u5473\u7740\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u53d6\u51b3\u4e8e\u62bd\u8c61\u7c7b\uff0c\u800c\u4e0d\u662f\u5177\u4f53\u7684\u7c7b\u3002 \u8fd9\u662f\u4e0e\u7b80\u5355\u5de5\u5382\u6a21\u5f0f\u548c\u9759\u6001\u5de5\u5382\u6a21\u5f0f\u76f8\u6bd4\u7684\u4f18\u52bf\u3002 2. UML\u56fe # 3. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728 GitHub \u67e5\u770b\u8fd9\u6bb5\u4ee3\u7801 FactoryMethod.php <?php namespace DesignPatterns\\Creational\\FactoryMethod ; abstract class FactoryMethod { const CHEAP = 'cheap' ; const FAST = 'fast' ; abstract protected function createVehicle ( string $type ) : VehicleInterface ; public function create ( string $type ) : VehicleInterface { $obj = $this -> createVehicle ( $type ); $obj -> setColor ( 'black' ); return $obj ; } } ItalianFactory.php <?php namespace DesignPatterns\\Creational\\FactoryMethod ; class ItalianFactory extends FactoryMethod { protected function createVehicle ( string $type ) : VehicleInterface { switch ( $type ) { case parent :: CHEAP : return new Bicycle (); case parent :: FAST : return new CarFerrari (); default : throw new \\InvalidArgumentException ( \" $type is not a valid vehicle\" ); } } } GermanFactory.php <?php namespace DesignPatterns\\Creational\\FactoryMethod ; class GermanFactory extends FactoryMethod { protected function createVehicle ( string $type ) : VehicleInterface { switch ( $type ) { case parent :: CHEAP : return new Bicycle (); case parent :: FAST : $carMercedes = new CarMercedes (); // \u6211\u4eec\u53ef\u4ee5\u4ece\u5df2\u77e5\u7684\u7684\u7c7b\u4e2d\u627e\u5230\u5177\u4f53\u7684\u4ea4\u901a\u5de5\u5177 $carMercedes -> addAMGTuning (); return $carMercedes ; default : throw new \\InvalidArgumentException ( \" $type is not a valid vehicle\" ); } } } VehicleInterface.php <?php namespace DesignPatterns\\Creational\\FactoryMethod ; interface VehicleInterface { public function setColor ( string $rgb ); } CarMercedes.php <?php namespace DesignPatterns\\Creational\\FactoryMethod ; class CarMercedes implements VehicleInterface { /** * @var string */ private $color ; public function setColor ( string $rgb ) { $this -> color = $rgb ; } public function addAMGTuning () { // \u5728\u8fd9\u91cc\u505a\u989d\u5916\u7684\u8c03\u6574 } } CarFerrari.php <?php namespace DesignPatterns\\Creational\\FactoryMethod ; class CarFerrari implements VehicleInterface { /** * @var string */ private $color ; public function setColor ( string $rgb ) { $this -> color = $rgb ; } } Bicycle.php <?php namespace DesignPatterns\\Creational\\FactoryMethod ; class Bicycle implements VehicleInterface { /** * @var string */ private $color ; public function setColor ( string $rgb ) { $this -> color = $rgb ; } } 4. \u6d4b\u8bd5 # Tests/FactoryMethodTest.php <?php namespace DesignPatterns\\Creational\\FactoryMethod\\Tests ; use DesignPatterns\\Creational\\FactoryMethod\\Bicycle ; use DesignPatterns\\Creational\\FactoryMethod\\CarFerrari ; use DesignPatterns\\Creational\\FactoryMethod\\CarMercedes ; use DesignPatterns\\Creational\\FactoryMethod\\FactoryMethod ; use DesignPatterns\\Creational\\FactoryMethod\\GermanFactory ; use DesignPatterns\\Creational\\FactoryMethod\\ItalianFactory ; use PHPUnit\\Framework\\TestCase ; class FactoryMethodTest extends TestCase { public function testCanCreateCheapVehicleInGermany () { $factory = new GermanFactory (); $result = $factory -> create ( FactoryMethod :: CHEAP ); $this -> assertInstanceOf ( Bicycle :: class , $result ); } public function testCanCreateFastVehicleInGermany () { $factory = new GermanFactory (); $result = $factory -> create ( FactoryMethod :: FAST ); $this -> assertInstanceOf ( CarMercedes :: class , $result ); } public function testCanCreateCheapVehicleInItaly () { $factory = new ItalianFactory (); $result = $factory -> create ( FactoryMethod :: CHEAP ); $this -> assertInstanceOf ( Bicycle :: class , $result ); } public function testCanCreateFastVehicleInItaly () { $factory = new ItalianFactory (); $result = $factory -> create ( FactoryMethod :: FAST ); $this -> assertInstanceOf ( CarFerrari :: class , $result ); } /** * @expectedException \\InvalidArgumentException * @expectedExceptionMessage spaceship is not a valid vehicle */ public function testUnknownType () { ( new ItalianFactory ()) -> create ( 'spaceship' ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/FactoryMethod/1489","title":"\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\uff08Factory Method\uff09"},{"location":"php/php-design-patterns/FactoryMethod/#factory-method","text":"","title":"\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\uff08Factory Method\uff09"},{"location":"php/php-design-patterns/FactoryMethod/#1","text":"\u5bf9\u6bd4\u7b80\u5355\u5de5\u5382\u6a21\u5f0f\u7684\u4f18\u70b9\u662f\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u5b50\u7c7b\u7528\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u3002 \u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u8fd9\u4e2a\u62bd\u8c61\u7c7b\u53ef\u80fd\u53ea\u662f\u4e00\u4e2a\u63a5\u53e3\u3002 \u8fd9\u79cd\u6a21\u5f0f\u662f\u300c\u771f\u6b63\u300d\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c \u56e0\u4e3a\u4ed6\u5b9e\u73b0\u4e86S.O.L.I.D\u539f\u5219\u4e2d\u300cD\u300d\u7684 \u300c\u4f9d\u8d56\u5012\u7f6e\u300d\u3002 \u8fd9\u610f\u5473\u7740\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u53d6\u51b3\u4e8e\u62bd\u8c61\u7c7b\uff0c\u800c\u4e0d\u662f\u5177\u4f53\u7684\u7c7b\u3002 \u8fd9\u662f\u4e0e\u7b80\u5355\u5de5\u5382\u6a21\u5f0f\u548c\u9759\u6001\u5de5\u5382\u6a21\u5f0f\u76f8\u6bd4\u7684\u4f18\u52bf\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/FactoryMethod/#2-uml","text":"","title":"2. UML\u56fe"},{"location":"php/php-design-patterns/FactoryMethod/#3","text":"\u4f60\u53ef\u4ee5\u5728 GitHub \u67e5\u770b\u8fd9\u6bb5\u4ee3\u7801 FactoryMethod.php <?php namespace DesignPatterns\\Creational\\FactoryMethod ; abstract class FactoryMethod { const CHEAP = 'cheap' ; const FAST = 'fast' ; abstract protected function createVehicle ( string $type ) : VehicleInterface ; public function create ( string $type ) : VehicleInterface { $obj = $this -> createVehicle ( $type ); $obj -> setColor ( 'black' ); return $obj ; } } ItalianFactory.php <?php namespace DesignPatterns\\Creational\\FactoryMethod ; class ItalianFactory extends FactoryMethod { protected function createVehicle ( string $type ) : VehicleInterface { switch ( $type ) { case parent :: CHEAP : return new Bicycle (); case parent :: FAST : return new CarFerrari (); default : throw new \\InvalidArgumentException ( \" $type is not a valid vehicle\" ); } } } GermanFactory.php <?php namespace DesignPatterns\\Creational\\FactoryMethod ; class GermanFactory extends FactoryMethod { protected function createVehicle ( string $type ) : VehicleInterface { switch ( $type ) { case parent :: CHEAP : return new Bicycle (); case parent :: FAST : $carMercedes = new CarMercedes (); // \u6211\u4eec\u53ef\u4ee5\u4ece\u5df2\u77e5\u7684\u7684\u7c7b\u4e2d\u627e\u5230\u5177\u4f53\u7684\u4ea4\u901a\u5de5\u5177 $carMercedes -> addAMGTuning (); return $carMercedes ; default : throw new \\InvalidArgumentException ( \" $type is not a valid vehicle\" ); } } } VehicleInterface.php <?php namespace DesignPatterns\\Creational\\FactoryMethod ; interface VehicleInterface { public function setColor ( string $rgb ); } CarMercedes.php <?php namespace DesignPatterns\\Creational\\FactoryMethod ; class CarMercedes implements VehicleInterface { /** * @var string */ private $color ; public function setColor ( string $rgb ) { $this -> color = $rgb ; } public function addAMGTuning () { // \u5728\u8fd9\u91cc\u505a\u989d\u5916\u7684\u8c03\u6574 } } CarFerrari.php <?php namespace DesignPatterns\\Creational\\FactoryMethod ; class CarFerrari implements VehicleInterface { /** * @var string */ private $color ; public function setColor ( string $rgb ) { $this -> color = $rgb ; } } Bicycle.php <?php namespace DesignPatterns\\Creational\\FactoryMethod ; class Bicycle implements VehicleInterface { /** * @var string */ private $color ; public function setColor ( string $rgb ) { $this -> color = $rgb ; } }","title":"3. \u4ee3\u7801"},{"location":"php/php-design-patterns/FactoryMethod/#4","text":"Tests/FactoryMethodTest.php <?php namespace DesignPatterns\\Creational\\FactoryMethod\\Tests ; use DesignPatterns\\Creational\\FactoryMethod\\Bicycle ; use DesignPatterns\\Creational\\FactoryMethod\\CarFerrari ; use DesignPatterns\\Creational\\FactoryMethod\\CarMercedes ; use DesignPatterns\\Creational\\FactoryMethod\\FactoryMethod ; use DesignPatterns\\Creational\\FactoryMethod\\GermanFactory ; use DesignPatterns\\Creational\\FactoryMethod\\ItalianFactory ; use PHPUnit\\Framework\\TestCase ; class FactoryMethodTest extends TestCase { public function testCanCreateCheapVehicleInGermany () { $factory = new GermanFactory (); $result = $factory -> create ( FactoryMethod :: CHEAP ); $this -> assertInstanceOf ( Bicycle :: class , $result ); } public function testCanCreateFastVehicleInGermany () { $factory = new GermanFactory (); $result = $factory -> create ( FactoryMethod :: FAST ); $this -> assertInstanceOf ( CarMercedes :: class , $result ); } public function testCanCreateCheapVehicleInItaly () { $factory = new ItalianFactory (); $result = $factory -> create ( FactoryMethod :: CHEAP ); $this -> assertInstanceOf ( Bicycle :: class , $result ); } public function testCanCreateFastVehicleInItaly () { $factory = new ItalianFactory (); $result = $factory -> create ( FactoryMethod :: FAST ); $this -> assertInstanceOf ( CarFerrari :: class , $result ); } /** * @expectedException \\InvalidArgumentException * @expectedExceptionMessage spaceship is not a valid vehicle */ public function testUnknownType () { ( new ItalianFactory ()) -> create ( 'spaceship' ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/FactoryMethod/1489","title":"4. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/FluentInterface/","text":"\u6d41\u63a5\u53e3\u6a21\u5f0f\uff08Fluent Interface\uff09 # 1. \u76ee\u7684 # \u7528\u6765\u7f16\u5199\u6613\u4e8e\u9605\u8bfb\u7684\u4ee3\u7801\uff0c\u5c31\u50cf\u81ea\u7136\u8bed\u8a00\u4e00\u6837\uff08\u5982\u82f1\u8bed\uff09 2. \u4f8b\u5b50 # Doctrine2 \u7684 QueryBuilder \uff0c\u5c31\u50cf\u4e0b\u9762\u4f8b\u5b50\u4e2d\u7c7b\u4f3c PHPUnit \u4f7f\u7528\u8fde\u8d2f\u63a5\u53e3\u6765\u521b\u5efa mock \u5bf9\u8c61 Yii \u6846\u67b6\uff1a CDbCommand \u4e0e CActiveRecord \u4e5f\u4f7f\u7528\u6b64\u6a21\u5f0f 3. UML \u56fe # 4. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 Sql.php <?php namespace DesignPatterns\\Structural\\FluentInterface ; class Sql { /** * @var array */ private $fields = []; /** * @var array */ private $from = []; /** * @var array */ private $where = []; public function select ( array $fields ) : Sql { $this -> fields = $fields ; return $this ; } public function from ( string $table , string $alias ) : Sql { $this -> from [] = $table . ' AS ' . $alias ; return $this ; } public function where ( string $condition ) : Sql { $this -> where [] = $condition ; return $this ; } public function __toString () : string { return sprintf ( 'SELECT %s FROM %s WHERE %s' , join ( ', ' , $this -> fields ), join ( ', ' , $this -> from ), join ( ' AND ' , $this -> where ) ); } } 5. \u6d4b\u8bd5 # Tests/FluentInterfaceTest.php <?php namespace DesignPatterns\\Structural\\FluentInterface\\Tests ; use DesignPatterns\\Structural\\FluentInterface\\Sql ; use PHPUnit\\Framework\\TestCase ; class FluentInterfaceTest extends TestCase { public function testBuildSQL () { $query = ( new Sql ()) -> select ([ 'foo' , 'bar' ]) -> from ( 'foobar' , 'f' ) -> where ( 'f.bar = ?' ); $this -> assertEquals ( 'SELECT foo, bar FROM foobar AS f WHERE f.bar = ?' , ( string ) $query ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/FluentInterface/1503","title":"\u6d41\u63a5\u53e3\u6a21\u5f0f\uff08Fluent Interface\uff09"},{"location":"php/php-design-patterns/FluentInterface/#fluent-interface","text":"","title":"\u6d41\u63a5\u53e3\u6a21\u5f0f\uff08Fluent Interface\uff09"},{"location":"php/php-design-patterns/FluentInterface/#1","text":"\u7528\u6765\u7f16\u5199\u6613\u4e8e\u9605\u8bfb\u7684\u4ee3\u7801\uff0c\u5c31\u50cf\u81ea\u7136\u8bed\u8a00\u4e00\u6837\uff08\u5982\u82f1\u8bed\uff09","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/FluentInterface/#2","text":"Doctrine2 \u7684 QueryBuilder \uff0c\u5c31\u50cf\u4e0b\u9762\u4f8b\u5b50\u4e2d\u7c7b\u4f3c PHPUnit \u4f7f\u7528\u8fde\u8d2f\u63a5\u53e3\u6765\u521b\u5efa mock \u5bf9\u8c61 Yii \u6846\u67b6\uff1a CDbCommand \u4e0e CActiveRecord \u4e5f\u4f7f\u7528\u6b64\u6a21\u5f0f","title":"2. \u4f8b\u5b50"},{"location":"php/php-design-patterns/FluentInterface/#3-uml","text":"","title":"3. UML \u56fe"},{"location":"php/php-design-patterns/FluentInterface/#4","text":"\u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 Sql.php <?php namespace DesignPatterns\\Structural\\FluentInterface ; class Sql { /** * @var array */ private $fields = []; /** * @var array */ private $from = []; /** * @var array */ private $where = []; public function select ( array $fields ) : Sql { $this -> fields = $fields ; return $this ; } public function from ( string $table , string $alias ) : Sql { $this -> from [] = $table . ' AS ' . $alias ; return $this ; } public function where ( string $condition ) : Sql { $this -> where [] = $condition ; return $this ; } public function __toString () : string { return sprintf ( 'SELECT %s FROM %s WHERE %s' , join ( ', ' , $this -> fields ), join ( ', ' , $this -> from ), join ( ' AND ' , $this -> where ) ); } }","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/FluentInterface/#5","text":"Tests/FluentInterfaceTest.php <?php namespace DesignPatterns\\Structural\\FluentInterface\\Tests ; use DesignPatterns\\Structural\\FluentInterface\\Sql ; use PHPUnit\\Framework\\TestCase ; class FluentInterfaceTest extends TestCase { public function testBuildSQL () { $query = ( new Sql ()) -> select ([ 'foo' , 'bar' ]) -> from ( 'foobar' , 'f' ) -> where ( 'f.bar = ?' ); $this -> assertEquals ( 'SELECT foo, bar FROM foobar AS f WHERE f.bar = ?' , ( string ) $query ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/FluentInterface/1503","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Flyweight/","text":"\u4eab\u5143\u6a21\u5f0f\uff08Flyweight\uff09 # 1. \u76ee\u7684 # \u4e3a\u4e86\u8282\u7ea6\u5185\u5b58\u7684\u4f7f\u7528\uff0c\u4eab\u5143\u6a21\u5f0f\u4f1a\u5c3d\u91cf\u4f7f\u7c7b\u4f3c\u7684\u5bf9\u8c61\u5171\u4eab\u5185\u5b58\u3002\u5728\u5927\u91cf\u7c7b\u4f3c\u5bf9\u8c61\u88ab\u4f7f\u7528\u7684\u60c5\u51b5\u4e2d\u8fd9\u662f\u5341\u5206\u5fc5\u8981\u7684\u3002\u5e38\u7528\u505a\u6cd5\u662f\u5728\u5916\u90e8\u6570\u636e\u7ed3\u6784\u4e2d\u4fdd\u5b58\u7c7b\u4f3c\u5bf9\u8c61\u7684\u72b6\u6001\uff0c\u5e76\u5728\u9700\u8981\u65f6\u5c06\u4ed6\u4eec\u4f20\u9012\u7ed9\u4eab\u5143\u5bf9\u8c61\u3002 2. UML \u56fe # 3. \u4ee3\u7801 # \u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u67e5\u770b\u6b64\u4ee3\u7801 FlyweightInterface.php <?php namespace DesignPatterns\\Structural\\Flyweight ; /** * \u521b\u5efa\u4eab\u5143\u63a5\u53e3 FlyweightInterface \u3002 */ interface FlyweightInterface { /** * \u521b\u5efa\u4f20\u9012\u51fd\u6570\u3002 * \u8fd4\u56de\u5b57\u7b26\u4e32\u683c\u5f0f\u6570\u636e\u3002 */ public function render ( string $extrinsicState ) : string ; } CharacterFlyweight.php <?php namespace DesignPatterns\\Structural\\Flyweight ; /** * \u5047\u5982\u53ef\u4ee5\u7684\u8bdd\uff0c\u5b9e\u73b0\u4eab\u5143\u63a5\u53e3\u5e76\u589e\u52a0\u5185\u5b58\u5b58\u50a8\u5185\u90e8\u72b6\u6001\u3002 * \u5177\u4f53\u7684\u4eab\u5143\u5b9e\u4f8b\u88ab\u5de5\u5382\u7c7b\u7684\u65b9\u6cd5\u5171\u4eab\u3002 */ class CharacterFlyweight implements FlyweightInterface { /** * \u4efb\u4f55\u5177\u4f53\u7684\u4eab\u5143\u5bf9\u8c61\u5b58\u50a8\u7684\u72b6\u6001\u5fc5\u987b\u72ec\u7acb\u4e8e\u5176\u8fd0\u884c\u73af\u5883\u3002 * \u4eab\u5143\u5bf9\u8c61\u5448\u73b0\u7684\u7279\u70b9\uff0c\u5f80\u5f80\u5c31\u662f\u5bf9\u5e94\u7684\u7f16\u7801\u7684\u7279\u70b9\u3002 * * @var string */ private $name ; /** * \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u5bf9\u8c61 $name\u3002 */ public function __construct ( string $name ) { $this -> name = $name ; } /** * \u5b9e\u73b0 FlyweightInterface \u4e2d\u7684\u4f20\u9012\u65b9\u6cd5 render() \u3002 */ public function render ( string $font ) : string { // \u4eab\u5143\u5bf9\u8c61\u9700\u8981\u5ba2\u6237\u7aef\u63d0\u4f9b\u73af\u5883\u4f9d\u8d56\u4fe1\u606f\u6765\u81ea\u6211\u5b9a\u5236\u3002 // \u5916\u5728\u72b6\u6001\u7ecf\u5e38\u5305\u542b\u4eab\u5143\u5bf9\u8c61\u5448\u73b0\u7684\u7279\u70b9\uff0c\u4f8b\u5982\u5b57\u7b26\u3002 return sprintf ( 'Character %s with font %s' , $this -> name , $font ); } } FlyweightFactory.php <?php namespace DesignPatterns\\Structural\\Flyweight ; /** * \u5de5\u5382\u7c7b\u4f1a\u7ba1\u7406\u5206\u4eab\u4eab\u5143\u7c7b\uff0c\u5ba2\u6237\u7aef\u4e0d\u5e94\u8be5\u76f4\u63a5\u5c06\u4ed6\u4eec\u5b9e\u4f8b\u5316\u3002 * \u4f46\u53ef\u4ee5\u8ba9\u5de5\u5382\u7c7b\u8d1f\u8d23\u8fd4\u56de\u73b0\u6709\u7684\u5bf9\u8c61\u6216\u521b\u5efa\u65b0\u7684\u5bf9\u8c61\u3002 */ class FlyweightFactory implements \\Countable { /** * @var CharacterFlyweight[] * \u5b9a\u4e49\u4eab\u5143\u7279\u5f81\u6570\u7ec4\u3002 * \u7528\u4e8e\u5b58\u50a8\u4e0d\u540c\u7684\u4eab\u5143\u7279\u5f81\u3002 */ private $pool = []; /** * \u8f93\u5165\u5b57\u7b26\u4e32\u683c\u5f0f\u6570\u636e $name\u3002 * \u8fd4\u56de CharacterFlyweight \u5bf9\u8c61\u3002 */ public function get ( string $name ) : CharacterFlyweight { if ( ! isset ( $this -> pool [ $name ])) { $this -> pool [ $name ] = new CharacterFlyweight ( $name ); } return $this -> pool [ $name ]; } /** * \u8fd4\u56de\u4eab\u5143\u7279\u5f81\u4e2a\u6570\u3002 */ public function count () : int { return count ( $this -> pool ); } } 4. \u6d4b\u8bd5 # Tests/FlyweightTest.php <?php namespace DesignPatterns\\Structural\\Flyweight\\Tests ; use DesignPatterns\\Structural\\Flyweight\\FlyweightFactory ; use PHPUnit\\Framework\\TestCase ; /** * \u521b\u5efa\u81ea\u52a8\u5316\u6d4b\u8bd5\u5355\u5143 FlyweightTest \u3002 */ class FlyweightTest extends TestCase { private $characters = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' , 'k' , 'l' , 'm' , 'n' , 'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' , 'w' , 'x' , 'y' , 'z' ]; private $fonts = [ 'Arial' , 'Times New Roman' , 'Verdana' , 'Helvetica' ]; public function testFlyweight () { $factory = new FlyweightFactory (); foreach ( $this -> characters as $char ) { foreach ( $this -> fonts as $font ) { $flyweight = $factory -> get ( $char ); $rendered = $flyweight -> render ( $font ); $this -> assertEquals ( sprintf ( 'Character %s with font %s' , $char , $font ), $rendered ); } } // \u4eab\u5143\u6a21\u5f0f\u4f1a\u4fdd\u8bc1\u5b9e\u4f8b\u88ab\u5206\u4eab\u3002 // \u76f8\u6bd4\u62e5\u6709\u6210\u767e\u4e0a\u5343\u7684\u79c1\u6709\u5bf9\u8c61\uff0c // \u5fc5\u987b\u8981\u6709\u4e00\u4e2a\u5b9e\u4f8b\u4ee3\u8868\u6240\u6709\u88ab\u91cd\u590d\u4f7f\u7528\u6765\u663e\u793a\u4e0d\u540c\u5355\u8bcd\u7684\u5b57\u7b26\u3002 $this -> assertCount ( count ( $this -> characters ), $factory ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Flyweight/1504","title":"\u4eab\u5143\u6a21\u5f0f\uff08Flyweight\uff09"},{"location":"php/php-design-patterns/Flyweight/#flyweight","text":"","title":"\u4eab\u5143\u6a21\u5f0f\uff08Flyweight\uff09"},{"location":"php/php-design-patterns/Flyweight/#1","text":"\u4e3a\u4e86\u8282\u7ea6\u5185\u5b58\u7684\u4f7f\u7528\uff0c\u4eab\u5143\u6a21\u5f0f\u4f1a\u5c3d\u91cf\u4f7f\u7c7b\u4f3c\u7684\u5bf9\u8c61\u5171\u4eab\u5185\u5b58\u3002\u5728\u5927\u91cf\u7c7b\u4f3c\u5bf9\u8c61\u88ab\u4f7f\u7528\u7684\u60c5\u51b5\u4e2d\u8fd9\u662f\u5341\u5206\u5fc5\u8981\u7684\u3002\u5e38\u7528\u505a\u6cd5\u662f\u5728\u5916\u90e8\u6570\u636e\u7ed3\u6784\u4e2d\u4fdd\u5b58\u7c7b\u4f3c\u5bf9\u8c61\u7684\u72b6\u6001\uff0c\u5e76\u5728\u9700\u8981\u65f6\u5c06\u4ed6\u4eec\u4f20\u9012\u7ed9\u4eab\u5143\u5bf9\u8c61\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Flyweight/#2-uml","text":"","title":"2. UML \u56fe"},{"location":"php/php-design-patterns/Flyweight/#3","text":"\u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u67e5\u770b\u6b64\u4ee3\u7801 FlyweightInterface.php <?php namespace DesignPatterns\\Structural\\Flyweight ; /** * \u521b\u5efa\u4eab\u5143\u63a5\u53e3 FlyweightInterface \u3002 */ interface FlyweightInterface { /** * \u521b\u5efa\u4f20\u9012\u51fd\u6570\u3002 * \u8fd4\u56de\u5b57\u7b26\u4e32\u683c\u5f0f\u6570\u636e\u3002 */ public function render ( string $extrinsicState ) : string ; } CharacterFlyweight.php <?php namespace DesignPatterns\\Structural\\Flyweight ; /** * \u5047\u5982\u53ef\u4ee5\u7684\u8bdd\uff0c\u5b9e\u73b0\u4eab\u5143\u63a5\u53e3\u5e76\u589e\u52a0\u5185\u5b58\u5b58\u50a8\u5185\u90e8\u72b6\u6001\u3002 * \u5177\u4f53\u7684\u4eab\u5143\u5b9e\u4f8b\u88ab\u5de5\u5382\u7c7b\u7684\u65b9\u6cd5\u5171\u4eab\u3002 */ class CharacterFlyweight implements FlyweightInterface { /** * \u4efb\u4f55\u5177\u4f53\u7684\u4eab\u5143\u5bf9\u8c61\u5b58\u50a8\u7684\u72b6\u6001\u5fc5\u987b\u72ec\u7acb\u4e8e\u5176\u8fd0\u884c\u73af\u5883\u3002 * \u4eab\u5143\u5bf9\u8c61\u5448\u73b0\u7684\u7279\u70b9\uff0c\u5f80\u5f80\u5c31\u662f\u5bf9\u5e94\u7684\u7f16\u7801\u7684\u7279\u70b9\u3002 * * @var string */ private $name ; /** * \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u5bf9\u8c61 $name\u3002 */ public function __construct ( string $name ) { $this -> name = $name ; } /** * \u5b9e\u73b0 FlyweightInterface \u4e2d\u7684\u4f20\u9012\u65b9\u6cd5 render() \u3002 */ public function render ( string $font ) : string { // \u4eab\u5143\u5bf9\u8c61\u9700\u8981\u5ba2\u6237\u7aef\u63d0\u4f9b\u73af\u5883\u4f9d\u8d56\u4fe1\u606f\u6765\u81ea\u6211\u5b9a\u5236\u3002 // \u5916\u5728\u72b6\u6001\u7ecf\u5e38\u5305\u542b\u4eab\u5143\u5bf9\u8c61\u5448\u73b0\u7684\u7279\u70b9\uff0c\u4f8b\u5982\u5b57\u7b26\u3002 return sprintf ( 'Character %s with font %s' , $this -> name , $font ); } } FlyweightFactory.php <?php namespace DesignPatterns\\Structural\\Flyweight ; /** * \u5de5\u5382\u7c7b\u4f1a\u7ba1\u7406\u5206\u4eab\u4eab\u5143\u7c7b\uff0c\u5ba2\u6237\u7aef\u4e0d\u5e94\u8be5\u76f4\u63a5\u5c06\u4ed6\u4eec\u5b9e\u4f8b\u5316\u3002 * \u4f46\u53ef\u4ee5\u8ba9\u5de5\u5382\u7c7b\u8d1f\u8d23\u8fd4\u56de\u73b0\u6709\u7684\u5bf9\u8c61\u6216\u521b\u5efa\u65b0\u7684\u5bf9\u8c61\u3002 */ class FlyweightFactory implements \\Countable { /** * @var CharacterFlyweight[] * \u5b9a\u4e49\u4eab\u5143\u7279\u5f81\u6570\u7ec4\u3002 * \u7528\u4e8e\u5b58\u50a8\u4e0d\u540c\u7684\u4eab\u5143\u7279\u5f81\u3002 */ private $pool = []; /** * \u8f93\u5165\u5b57\u7b26\u4e32\u683c\u5f0f\u6570\u636e $name\u3002 * \u8fd4\u56de CharacterFlyweight \u5bf9\u8c61\u3002 */ public function get ( string $name ) : CharacterFlyweight { if ( ! isset ( $this -> pool [ $name ])) { $this -> pool [ $name ] = new CharacterFlyweight ( $name ); } return $this -> pool [ $name ]; } /** * \u8fd4\u56de\u4eab\u5143\u7279\u5f81\u4e2a\u6570\u3002 */ public function count () : int { return count ( $this -> pool ); } }","title":"3. \u4ee3\u7801"},{"location":"php/php-design-patterns/Flyweight/#4","text":"Tests/FlyweightTest.php <?php namespace DesignPatterns\\Structural\\Flyweight\\Tests ; use DesignPatterns\\Structural\\Flyweight\\FlyweightFactory ; use PHPUnit\\Framework\\TestCase ; /** * \u521b\u5efa\u81ea\u52a8\u5316\u6d4b\u8bd5\u5355\u5143 FlyweightTest \u3002 */ class FlyweightTest extends TestCase { private $characters = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' , 'k' , 'l' , 'm' , 'n' , 'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' , 'w' , 'x' , 'y' , 'z' ]; private $fonts = [ 'Arial' , 'Times New Roman' , 'Verdana' , 'Helvetica' ]; public function testFlyweight () { $factory = new FlyweightFactory (); foreach ( $this -> characters as $char ) { foreach ( $this -> fonts as $font ) { $flyweight = $factory -> get ( $char ); $rendered = $flyweight -> render ( $font ); $this -> assertEquals ( sprintf ( 'Character %s with font %s' , $char , $font ), $rendered ); } } // \u4eab\u5143\u6a21\u5f0f\u4f1a\u4fdd\u8bc1\u5b9e\u4f8b\u88ab\u5206\u4eab\u3002 // \u76f8\u6bd4\u62e5\u6709\u6210\u767e\u4e0a\u5343\u7684\u79c1\u6709\u5bf9\u8c61\uff0c // \u5fc5\u987b\u8981\u6709\u4e00\u4e2a\u5b9e\u4f8b\u4ee3\u8868\u6240\u6709\u88ab\u91cd\u590d\u4f7f\u7528\u6765\u663e\u793a\u4e0d\u540c\u5355\u8bcd\u7684\u5b57\u7b26\u3002 $this -> assertCount ( count ( $this -> characters ), $factory ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Flyweight/1504","title":"4. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Iterator/","text":"\u8fed\u4ee3\u5668\u6a21\u5f0f\uff08Iterator\uff09 # 1. \u76ee\u7684 # \u8ba9\u5bf9\u8c61\u53d8\u5f97\u53ef\u8fed\u4ee3\u5e76\u8868\u73b0\u5f97\u50cf\u5bf9\u8c61\u96c6\u5408\u3002 2. \u4f8b\u5b50 # \u5728\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u884c\uff08\u5bf9\u8c61\u8868\u793a\u5f62\u5f0f\u7684\uff09\u4e0a\u9010\u884c\u5904\u7406\u6587\u4ef6\uff08\u4e5f\u662f\u5bf9\u8c61\uff09 3. \u6ce8\u610f # PHP \u6807\u51c6\u5e93 (SPL) \u5b9a\u4e49\u4e86\u4e00\u4e2a\u6700\u9002\u5408\u6b64\u6a21\u5f0f\u7684\u63a5\u53e3\u8fed\u4ee3\u5668\uff01\u5f80\u5f80\u4e5f\u9700\u8981\u5b9e\u73b0 Countable \u63a5\u53e3\uff0c\u5141\u8bb8\u5728\u8fed\u4ee3\u5668\u5bf9\u8c61\u4e0a\u4f7f\u7528 count($object) \u65b9\u6cd5\u3002 4. UML \u7c7b\u56fe # 5. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 Book.php <?php namespace DesignPatterns\\Behavioral\\Iterator ; class Book { /** * @var string */ private $author ; /** * @var string */ private $title ; public function __construct ( string $title , string $author ) { $this -> author = $author ; $this -> title = $title ; } public function getAuthor () : string { return $this -> author ; } public function getTitle () : string { return $this -> title ; } public function getAuthorAndTitle () : string { return $this -> getTitle () . ' by ' . $this -> getAuthor (); } } BookList.php <?php namespace DesignPatterns\\Behavioral\\Iterator ; class BookList implements \\Countable , \\Iterator { /** * @var Book[] */ private $books = []; /** * @var int */ private $currentIndex = 0 ; public function addBook ( Book $book ) { $this -> books [] = $book ; } public function removeBook ( Book $bookToRemove ) { foreach ( $this -> books as $key => $book ) { if ( $book -> getAuthorAndTitle () === $bookToRemove -> getAuthorAndTitle ()) { unset ( $this -> books [ $key ]); } } $this -> books = array_values ( $this -> books ); } public function count () : int { return count ( $this -> books ); } public function current () : Book { return $this -> books [ $this -> currentIndex ]; } public function key () : int { return $this -> currentIndex ; } public function next () { $this -> currentIndex ++ ; } public function rewind () { $this -> currentIndex = 0 ; } public function valid () : bool { return isset ( $this -> books [ $this -> currentIndex ]); } } 6. \u6d4b\u8bd5 # Tests/IteratorTest.php <?php namespace DesignPatterns\\Behavioral\\Iterator\\Tests ; use DesignPatterns\\Behavioral\\Iterator\\Book ; use DesignPatterns\\Behavioral\\Iterator\\BookList ; use DesignPatterns\\Behavioral\\Iterator\\BookListIterator ; use DesignPatterns\\Behavioral\\Iterator\\BookListReverseIterator ; use PHPUnit\\Framework\\TestCase ; class IteratorTest extends TestCase { public function testCanIterateOverBookList () { $bookList = new BookList (); $bookList -> addBook ( new Book ( 'Learning PHP Design Patterns' , 'William Sanders' )); $bookList -> addBook ( new Book ( 'Professional Php Design Patterns' , 'Aaron Saray' )); $bookList -> addBook ( new Book ( 'Clean Code' , 'Robert C. Martin' )); $books = []; foreach ( $bookList as $book ) { $books [] = $book -> getAuthorAndTitle (); } $this -> assertEquals ( [ 'Learning PHP Design Patterns by William Sanders' , 'Professional Php Design Patterns by Aaron Saray' , 'Clean Code by Robert C. Martin' , ], $books ); } public function testCanIterateOverBookListAfterRemovingBook () { $book = new Book ( 'Clean Code' , 'Robert C. Martin' ); $book2 = new Book ( 'Professional Php Design Patterns' , 'Aaron Saray' ); $bookList = new BookList (); $bookList -> addBook ( $book ); $bookList -> addBook ( $book2 ); $bookList -> removeBook ( $book ); $books = []; foreach ( $bookList as $book ) { $books [] = $book -> getAuthorAndTitle (); } $this -> assertEquals ( [ 'Professional Php Design Patterns by Aaron Saray' ], $books ); } public function testCanAddBookToList () { $book = new Book ( 'Clean Code' , 'Robert C. Martin' ); $bookList = new BookList (); $bookList -> addBook ( $book ); $this -> assertCount ( 1 , $bookList ); } public function testCanRemoveBookFromList () { $book = new Book ( 'Clean Code' , 'Robert C. Martin' ); $bookList = new BookList (); $bookList -> addBook ( $book ); $bookList -> removeBook ( $book ); $this -> assertCount ( 0 , $bookList ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Iterator/1509","title":"\u8fed\u4ee3\u5668\u6a21\u5f0f\uff08Iterator\uff09"},{"location":"php/php-design-patterns/Iterator/#iterator","text":"","title":"\u8fed\u4ee3\u5668\u6a21\u5f0f\uff08Iterator\uff09"},{"location":"php/php-design-patterns/Iterator/#1","text":"\u8ba9\u5bf9\u8c61\u53d8\u5f97\u53ef\u8fed\u4ee3\u5e76\u8868\u73b0\u5f97\u50cf\u5bf9\u8c61\u96c6\u5408\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Iterator/#2","text":"\u5728\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u884c\uff08\u5bf9\u8c61\u8868\u793a\u5f62\u5f0f\u7684\uff09\u4e0a\u9010\u884c\u5904\u7406\u6587\u4ef6\uff08\u4e5f\u662f\u5bf9\u8c61\uff09","title":"2. \u4f8b\u5b50"},{"location":"php/php-design-patterns/Iterator/#3","text":"PHP \u6807\u51c6\u5e93 (SPL) \u5b9a\u4e49\u4e86\u4e00\u4e2a\u6700\u9002\u5408\u6b64\u6a21\u5f0f\u7684\u63a5\u53e3\u8fed\u4ee3\u5668\uff01\u5f80\u5f80\u4e5f\u9700\u8981\u5b9e\u73b0 Countable \u63a5\u53e3\uff0c\u5141\u8bb8\u5728\u8fed\u4ee3\u5668\u5bf9\u8c61\u4e0a\u4f7f\u7528 count($object) \u65b9\u6cd5\u3002","title":"3. \u6ce8\u610f"},{"location":"php/php-design-patterns/Iterator/#4-uml","text":"","title":"4. UML \u7c7b\u56fe"},{"location":"php/php-design-patterns/Iterator/#5","text":"\u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 Book.php <?php namespace DesignPatterns\\Behavioral\\Iterator ; class Book { /** * @var string */ private $author ; /** * @var string */ private $title ; public function __construct ( string $title , string $author ) { $this -> author = $author ; $this -> title = $title ; } public function getAuthor () : string { return $this -> author ; } public function getTitle () : string { return $this -> title ; } public function getAuthorAndTitle () : string { return $this -> getTitle () . ' by ' . $this -> getAuthor (); } } BookList.php <?php namespace DesignPatterns\\Behavioral\\Iterator ; class BookList implements \\Countable , \\Iterator { /** * @var Book[] */ private $books = []; /** * @var int */ private $currentIndex = 0 ; public function addBook ( Book $book ) { $this -> books [] = $book ; } public function removeBook ( Book $bookToRemove ) { foreach ( $this -> books as $key => $book ) { if ( $book -> getAuthorAndTitle () === $bookToRemove -> getAuthorAndTitle ()) { unset ( $this -> books [ $key ]); } } $this -> books = array_values ( $this -> books ); } public function count () : int { return count ( $this -> books ); } public function current () : Book { return $this -> books [ $this -> currentIndex ]; } public function key () : int { return $this -> currentIndex ; } public function next () { $this -> currentIndex ++ ; } public function rewind () { $this -> currentIndex = 0 ; } public function valid () : bool { return isset ( $this -> books [ $this -> currentIndex ]); } }","title":"5. \u4ee3\u7801"},{"location":"php/php-design-patterns/Iterator/#6","text":"Tests/IteratorTest.php <?php namespace DesignPatterns\\Behavioral\\Iterator\\Tests ; use DesignPatterns\\Behavioral\\Iterator\\Book ; use DesignPatterns\\Behavioral\\Iterator\\BookList ; use DesignPatterns\\Behavioral\\Iterator\\BookListIterator ; use DesignPatterns\\Behavioral\\Iterator\\BookListReverseIterator ; use PHPUnit\\Framework\\TestCase ; class IteratorTest extends TestCase { public function testCanIterateOverBookList () { $bookList = new BookList (); $bookList -> addBook ( new Book ( 'Learning PHP Design Patterns' , 'William Sanders' )); $bookList -> addBook ( new Book ( 'Professional Php Design Patterns' , 'Aaron Saray' )); $bookList -> addBook ( new Book ( 'Clean Code' , 'Robert C. Martin' )); $books = []; foreach ( $bookList as $book ) { $books [] = $book -> getAuthorAndTitle (); } $this -> assertEquals ( [ 'Learning PHP Design Patterns by William Sanders' , 'Professional Php Design Patterns by Aaron Saray' , 'Clean Code by Robert C. Martin' , ], $books ); } public function testCanIterateOverBookListAfterRemovingBook () { $book = new Book ( 'Clean Code' , 'Robert C. Martin' ); $book2 = new Book ( 'Professional Php Design Patterns' , 'Aaron Saray' ); $bookList = new BookList (); $bookList -> addBook ( $book ); $bookList -> addBook ( $book2 ); $bookList -> removeBook ( $book ); $books = []; foreach ( $bookList as $book ) { $books [] = $book -> getAuthorAndTitle (); } $this -> assertEquals ( [ 'Professional Php Design Patterns by Aaron Saray' ], $books ); } public function testCanAddBookToList () { $book = new Book ( 'Clean Code' , 'Robert C. Martin' ); $bookList = new BookList (); $bookList -> addBook ( $book ); $this -> assertCount ( 1 , $bookList ); } public function testCanRemoveBookFromList () { $book = new Book ( 'Clean Code' , 'Robert C. Martin' ); $bookList = new BookList (); $bookList -> addBook ( $book ); $bookList -> removeBook ( $book ); $this -> assertCount ( 0 , $bookList ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Iterator/1509","title":"6. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Mediator/","text":"\u4e2d\u4ecb\u8005\u6a21\u5f0f\uff08Mediator\uff09 # 1. \u76ee\u7684 # \u672c\u6a21\u5f0f\u63d0\u4f9b\u4e86\u4e00\u79cd\u8f7b\u677e\u7684\u591a\u7ec4\u4ef6\u4e4b\u95f4\u5f31\u8026\u5408\u7684\u534f\u540c\u65b9\u5f0f\u3002\u5982\u679c\u4f60\u6709\u4e2a\u201c\u60c5\u62a5\u4e2d\u5fc3\u201d\uff0c\u89c2\u5bdf\u8005\u6a21\u5f0f\u4e5f\u662f\u4e2a\u597d\u9009\u62e9\uff0c\u7c7b\u4f3c\u4e8e\u63a7\u5236\u5668\uff08\u5e76\u975e MVC \u610f\u4e49\u4e0a\u7684\u63a7\u5236\u5668\uff09\u3002 \u6240\u6709\u5173\u8054\u534f\u540c\u7684\u7ec4\u4ef6\uff08\u79f0\u4f5c Colleague \uff09\u4ec5\u4e0e MediatorInterface \u63a5\u53e3\u5efa\u7acb\u8026\u5408\uff0c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\u8fd9\u662f\u597d\u4e8b\uff0c\u4e00\u4e2a\u826f\u53cb\u80dc\u4e8e\u6709\u591a\u4e2a\u670b\u53cb\u3002\u8fd9\u662f\u8be5\u6a21\u5f0f\u7684\u91cd\u8981\u7279\u6027\u3002 2. UML \u56fe # 3. \u4ee3\u7801 # \u4ee3\u7801\u67e5\u770b GitHub MediatorInterface.php <?php namespace DesignPatterns\\Behavioral\\Mediator ; /** * MediatorInterface \u63a5\u53e3\u4e3a Mediator \u7c7b\u5efa\u7acb\u5951\u7ea6 * \u8be5\u63a5\u53e3\u867d\u975e\u5f3a\u5236\uff0c\u4f46\u4f18\u4e8e Liskov \u66ff\u6362\u539f\u5219\u3002 */ interface MediatorInterface { /** * \u53d1\u51fa\u54cd\u5e94 * * @param string $content */ public function sendResponse ( $content ); /** * \u505a\u51fa\u8bf7\u6c42 */ public function makeRequest (); /** * \u67e5\u8be2\u6570\u636e\u5e93 */ public function queryDb (); } Mediator.php <?php namespace DesignPatterns\\Behavioral\\Mediator ; /** * Mediator \u662f\u7528\u4e8e\u8bbf\u8bbe\u8ba1\u6a21\u5f0f\u7684\u4e2d\u4ecb\u8005\u6a21\u5f0f\u7684\u5b9e\u4f53 * * \u672c\u793a\u4f8b\u4e2d\uff0c\u6211\u7528\u4e2d\u4ecb\u8005\u6a21\u5f0f\u505a\u4e86\u4e00\u4e2a \u201cHello World\u201d \u7684\u54cd\u5e94 */ class Mediator implements MediatorInterface { /** * @var Subsystem\\Server */ private $server ; /** * @var Subsystem\\Database */ private $database ; /** * @var Subsystem\\Client */ private $client ; /** * @param Subsystem\\Database $database * @param Subsystem\\Client $client * @param Subsystem\\Server $server */ public function __construct ( Subsystem\\Database $database , Subsystem\\Client $client , Subsystem\\Server $server ) { $this -> database = $database ; $this -> server = $server ; $this -> client = $client ; $this -> database -> setMediator ( $this ); $this -> server -> setMediator ( $this ); $this -> client -> setMediator ( $this ); } public function makeRequest () { $this -> server -> process (); } public function queryDb () : string { return $this -> database -> getData (); } /** * @param string $content */ public function sendResponse ( $content ) { $this -> client -> output ( $content ); } } Colleague.php <?php namespace DesignPatterns\\Behavioral\\Mediator ; /** * Colleague \u662f\u4e2a\u62bd\u8c61\u7c7b\uff0c\u8be5\u7c7b\u5bf9\u8c61\u867d\u5f7c\u6b64\u534f\u540c\u5374\u4e0d\u77e5\u5f7c\u6b64\uff0c\u53ea\u77e5\u4e2d\u4ecb\u8005 Mediator \u7c7b */ abstract class Colleague { /** * \u786e\u4fdd\u5b50\u7c7b\u4e0d\u53d8\u5316\u3002 * * @var MediatorInterface */ protected $mediator ; /** * @param MediatorInterface $mediator */ public function setMediator ( MediatorInterface $mediator ) { $this -> mediator = $mediator ; } } Subsystem/Client.php <?php namespace DesignPatterns\\Behavioral\\Mediator\\Subsystem ; use DesignPatterns\\Behavioral\\Mediator\\Colleague ; /** * Client \u7c7b\u662f\u4e00\u4e2a\u53d1\u51fa\u8bf7\u6c42\u5e76\u83b7\u5f97\u54cd\u5e94\u7684\u5ba2\u6237\u7aef\u3002 */ class Client extends Colleague { public function request () { $this -> mediator -> makeRequest (); } public function output ( string $content ) { echo $content ; } } Subsystem/Database.php <?php namespace DesignPatterns\\Behavioral\\Mediator\\Subsystem ; use DesignPatterns\\Behavioral\\Mediator\\Colleague ; class Database extends Colleague { public function getData () : string { return 'World' ; } } Subsystem/Server.php <?php namespace DesignPatterns\\Behavioral\\Mediator\\Subsystem ; use DesignPatterns\\Behavioral\\Mediator\\Colleague ; class Server extends Colleague { public function process () { $data = $this -> mediator -> queryDb (); $this -> mediator -> sendResponse ( sprintf ( \"Hello %s\" , $data )); } } 4. \u6d4b\u8bd5 # Tests/MediatorTest.php <?php namespace DesignPatterns\\Tests\\Mediator\\Tests ; use DesignPatterns\\Behavioral\\Mediator\\Mediator ; use DesignPatterns\\Behavioral\\Mediator\\Subsystem\\Client ; use DesignPatterns\\Behavioral\\Mediator\\Subsystem\\Database ; use DesignPatterns\\Behavioral\\Mediator\\Subsystem\\Server ; use PHPUnit\\Framework\\TestCase ; class MediatorTest extends TestCase { public function testOutputHelloWorld () { $client = new Client (); new Mediator ( new Database (), $client , new Server ()); $this -> expectOutputString ( 'Hello World' ); $client -> request (); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Mediator/1510","title":"\u4e2d\u4ecb\u8005\u6a21\u5f0f\uff08Mediator\uff09"},{"location":"php/php-design-patterns/Mediator/#mediator","text":"","title":"\u4e2d\u4ecb\u8005\u6a21\u5f0f\uff08Mediator\uff09"},{"location":"php/php-design-patterns/Mediator/#1","text":"\u672c\u6a21\u5f0f\u63d0\u4f9b\u4e86\u4e00\u79cd\u8f7b\u677e\u7684\u591a\u7ec4\u4ef6\u4e4b\u95f4\u5f31\u8026\u5408\u7684\u534f\u540c\u65b9\u5f0f\u3002\u5982\u679c\u4f60\u6709\u4e2a\u201c\u60c5\u62a5\u4e2d\u5fc3\u201d\uff0c\u89c2\u5bdf\u8005\u6a21\u5f0f\u4e5f\u662f\u4e2a\u597d\u9009\u62e9\uff0c\u7c7b\u4f3c\u4e8e\u63a7\u5236\u5668\uff08\u5e76\u975e MVC \u610f\u4e49\u4e0a\u7684\u63a7\u5236\u5668\uff09\u3002 \u6240\u6709\u5173\u8054\u534f\u540c\u7684\u7ec4\u4ef6\uff08\u79f0\u4f5c Colleague \uff09\u4ec5\u4e0e MediatorInterface \u63a5\u53e3\u5efa\u7acb\u8026\u5408\uff0c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\u8fd9\u662f\u597d\u4e8b\uff0c\u4e00\u4e2a\u826f\u53cb\u80dc\u4e8e\u6709\u591a\u4e2a\u670b\u53cb\u3002\u8fd9\u662f\u8be5\u6a21\u5f0f\u7684\u91cd\u8981\u7279\u6027\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Mediator/#2-uml","text":"","title":"2. UML \u56fe"},{"location":"php/php-design-patterns/Mediator/#3","text":"\u4ee3\u7801\u67e5\u770b GitHub MediatorInterface.php <?php namespace DesignPatterns\\Behavioral\\Mediator ; /** * MediatorInterface \u63a5\u53e3\u4e3a Mediator \u7c7b\u5efa\u7acb\u5951\u7ea6 * \u8be5\u63a5\u53e3\u867d\u975e\u5f3a\u5236\uff0c\u4f46\u4f18\u4e8e Liskov \u66ff\u6362\u539f\u5219\u3002 */ interface MediatorInterface { /** * \u53d1\u51fa\u54cd\u5e94 * * @param string $content */ public function sendResponse ( $content ); /** * \u505a\u51fa\u8bf7\u6c42 */ public function makeRequest (); /** * \u67e5\u8be2\u6570\u636e\u5e93 */ public function queryDb (); } Mediator.php <?php namespace DesignPatterns\\Behavioral\\Mediator ; /** * Mediator \u662f\u7528\u4e8e\u8bbf\u8bbe\u8ba1\u6a21\u5f0f\u7684\u4e2d\u4ecb\u8005\u6a21\u5f0f\u7684\u5b9e\u4f53 * * \u672c\u793a\u4f8b\u4e2d\uff0c\u6211\u7528\u4e2d\u4ecb\u8005\u6a21\u5f0f\u505a\u4e86\u4e00\u4e2a \u201cHello World\u201d \u7684\u54cd\u5e94 */ class Mediator implements MediatorInterface { /** * @var Subsystem\\Server */ private $server ; /** * @var Subsystem\\Database */ private $database ; /** * @var Subsystem\\Client */ private $client ; /** * @param Subsystem\\Database $database * @param Subsystem\\Client $client * @param Subsystem\\Server $server */ public function __construct ( Subsystem\\Database $database , Subsystem\\Client $client , Subsystem\\Server $server ) { $this -> database = $database ; $this -> server = $server ; $this -> client = $client ; $this -> database -> setMediator ( $this ); $this -> server -> setMediator ( $this ); $this -> client -> setMediator ( $this ); } public function makeRequest () { $this -> server -> process (); } public function queryDb () : string { return $this -> database -> getData (); } /** * @param string $content */ public function sendResponse ( $content ) { $this -> client -> output ( $content ); } } Colleague.php <?php namespace DesignPatterns\\Behavioral\\Mediator ; /** * Colleague \u662f\u4e2a\u62bd\u8c61\u7c7b\uff0c\u8be5\u7c7b\u5bf9\u8c61\u867d\u5f7c\u6b64\u534f\u540c\u5374\u4e0d\u77e5\u5f7c\u6b64\uff0c\u53ea\u77e5\u4e2d\u4ecb\u8005 Mediator \u7c7b */ abstract class Colleague { /** * \u786e\u4fdd\u5b50\u7c7b\u4e0d\u53d8\u5316\u3002 * * @var MediatorInterface */ protected $mediator ; /** * @param MediatorInterface $mediator */ public function setMediator ( MediatorInterface $mediator ) { $this -> mediator = $mediator ; } } Subsystem/Client.php <?php namespace DesignPatterns\\Behavioral\\Mediator\\Subsystem ; use DesignPatterns\\Behavioral\\Mediator\\Colleague ; /** * Client \u7c7b\u662f\u4e00\u4e2a\u53d1\u51fa\u8bf7\u6c42\u5e76\u83b7\u5f97\u54cd\u5e94\u7684\u5ba2\u6237\u7aef\u3002 */ class Client extends Colleague { public function request () { $this -> mediator -> makeRequest (); } public function output ( string $content ) { echo $content ; } } Subsystem/Database.php <?php namespace DesignPatterns\\Behavioral\\Mediator\\Subsystem ; use DesignPatterns\\Behavioral\\Mediator\\Colleague ; class Database extends Colleague { public function getData () : string { return 'World' ; } } Subsystem/Server.php <?php namespace DesignPatterns\\Behavioral\\Mediator\\Subsystem ; use DesignPatterns\\Behavioral\\Mediator\\Colleague ; class Server extends Colleague { public function process () { $data = $this -> mediator -> queryDb (); $this -> mediator -> sendResponse ( sprintf ( \"Hello %s\" , $data )); } }","title":"3. \u4ee3\u7801"},{"location":"php/php-design-patterns/Mediator/#4","text":"Tests/MediatorTest.php <?php namespace DesignPatterns\\Tests\\Mediator\\Tests ; use DesignPatterns\\Behavioral\\Mediator\\Mediator ; use DesignPatterns\\Behavioral\\Mediator\\Subsystem\\Client ; use DesignPatterns\\Behavioral\\Mediator\\Subsystem\\Database ; use DesignPatterns\\Behavioral\\Mediator\\Subsystem\\Server ; use PHPUnit\\Framework\\TestCase ; class MediatorTest extends TestCase { public function testOutputHelloWorld () { $client = new Client (); new Mediator ( new Database (), $client , new Server ()); $this -> expectOutputString ( 'Hello World' ); $client -> request (); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Mediator/1510","title":"4. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Memento/","text":"\u5907\u5fd8\u5f55\u6a21\u5f0f\uff08Memento\uff09 # 1. \u76ee\u7684 # \u5b83\u63d0\u4f9b\u4e86\u5728\u4e0d\u7834\u574f\u5c01\u88c5\uff08\u5bf9\u8c61\u4e0d\u9700\u8981\u5177\u6709\u8fd4\u56de\u5f53\u524d\u72b6\u6001\u7684\u51fd\u6570\uff09\u7684\u60c5\u51b5\u4e0b\u6062\u590d\u5230\u4e4b\u524d\u72b6\u6001\uff08\u4f7f\u7528\u56de\u6eda\uff09\u6216\u8005\u83b7\u53d6\u5bf9\u8c61\u7684\u5185\u90e8\u72b6\u6001\u3002 \u5907\u5fd8\u5f55\u6a21\u5f0f\u4f7f\u7528 3 \u4e2a\u7c7b\u6765\u5b9e\u73b0\uff1a Originator \uff0c Caretaker \u548c Memento \u3002 Memento \u2014\u2014 \u8d1f\u8d23\u5b58\u50a8 Originator \u7684 \u552f\u4e00\u5185\u90e8\u72b6\u6001 \uff0c\u5b83\u53ef\u4ee5\u5305\u542b\uff1a string \uff0c number \uff0c array \uff0c\u7c7b\u7684\u5b9e\u4f8b\u7b49\u7b49\u3002 Memento \u300c\u4e0d\u662f\u516c\u5f00\u7684\u7c7b\u300d\uff08\u4efb\u4f55\u4eba\u90fd\u4e0d\u5e94\u8be5\u4e14\u4e0d\u80fd\u66f4\u6539\u5b83\uff09\uff0c\u5e76\u9632\u6b62 Originator \u4ee5\u5916\u7684\u5bf9\u8c61\u8bbf\u95ee\u5b83\uff0c\u5b83\u63d0\u4f9b2\u4e2a\u63a5\u53e3\uff1a Caretaker \u53ea\u80fd\u770b\u5230\u5907\u5fd8\u5f55\u7684\u7a84\u63a5\u53e3\uff0c\u4ed6\u53ea\u80fd\u5c06\u5907\u5fd8\u5f55\u4f20\u9012\u7ed9\u5176\u4ed6\u5bf9\u8c61\u3002 Originator \u5374\u53ef\u770b\u5230\u5907\u5fd8\u5f55\u7684\u5bbd\u63a5\u53e3\uff0c\u5141\u8bb8\u5b83\u8bbf\u95ee\u8fd4\u56de\u5230\u5148\u524d\u72b6\u6001\u6240\u9700\u8981\u7684\u6240\u6709\u6570\u636e\u3002 Originator \u2014\u2014 \u5b83\u8d1f\u8d23\u521b\u5efa Memento \uff0c\u5e76\u8bb0\u5f55 \u5916\u90e8\u5bf9\u8c61\u5f53\u524d\u65f6\u523b\u7684\u72b6\u6001\uff0c \u5e76\u53ef\u4f7f\u7528 Memento \u6062\u590d\u5185\u90e8\u72b6\u6001\u3002 Originator \u53ef\u6839\u636e\u9700\u8981\u51b3\u5b9a Memento \u5b58\u50a8 Originator \u7684\u54ea\u4e9b\u5185\u90e8\u72b6\u6001\u3002 Originator \u4e5f\u8bb8\uff08\u4e0d\u662f\u5e94\u8be5\uff09\u6709\u81ea\u5df1\u7684\u65b9\u6cd5\uff08 methods \uff09\u3002 \u4f46\u662f\uff0c\u4ed6\u4eec \u4e0d\u80fd\u66f4\u6539\u5df2\u4fdd\u5b58\u5bf9\u8c61\u7684\u5f53\u524d\u72b6\u6001\u3002 Caretaker \u2014\u2014 \u8d1f\u8d23\u4fdd\u5b58 Memento \u3002 \u5b83\u53ef\u4ee5\u4fee\u6539\u4e00\u4e2a\u5bf9\u8c61\uff1b\u51b3\u5b9a Originator \u4e2d\u5bf9\u8c61\u5f53\u524d\u65f6\u523b\u7684\u72b6\u6001\uff1b \u4ece Originator \u83b7\u53d6\u5bf9\u8c61\u7684\u5f53\u524d\u72b6\u6001\uff1b \u6216\u8005\u56de\u6eda Originator \u4e2d\u5bf9\u8c61\u7684\u72b6\u6001\u3002 \u539f\u6587\u5907\u6ce8\uff1a\u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\uff0c\u4ee5\u4e0a\u7ffb\u8bd1\u8ddf\u539f\u6587\u6709\u5c11\u8bb8\u51fa\u5165 2. \u4f8b\u5b50 # \u53d1\u9001\u4e00\u4e2a\u968f\u673a\u6570 \u5e76\u5c06\u8fd9\u4e2a\u968f\u673a\u6570\u5b58\u5728\u65f6\u5e8f\u673a\u4e2d \u4fdd\u5b58\u4e4b\u524d\u63a7\u5236 ORM Model \u4e2d\u7684\u72b6\u6001 3. UML \u56fe # 4. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728 GitHub \u67e5\u770b\u8fd9\u6bb5\u4ee3\u7801\u3002 Memento.php <?php namespace DesignPatterns\\Behavioral\\Memento ; class Memento { /** * @var State */ private $state ; /** * @param State $stateToSave */ public function __construct ( State $stateToSave ) { $this -> state = $stateToSave ; } /** * @return State */ public function getState () { return $this -> state ; } } State.php <?php namespace DesignPatterns\\Behavioral\\Memento ; class State { const STATE_CREATED = 'created' ; const STATE_OPENED = 'opened' ; const STATE_ASSIGNED = 'assigned' ; const STATE_CLOSED = 'closed' ; /** * @var string */ private $state ; /** * @var string[] */ private static $validStates = [ self :: STATE_CREATED , self :: STATE_OPENED , self :: STATE_ASSIGNED , self :: STATE_CLOSED , ]; /** * @param string $state */ public function __construct ( string $state ) { self :: ensureIsValidState ( $state ); $this -> state = $state ; } private static function ensureIsValidState ( string $state ) { if ( ! in_array ( $state , self :: $validStates )) { throw new \\InvalidArgumentException ( 'Invalid state given' ); } } public function __toString () : string { return $this -> state ; } } Ticket.php <?php namespace DesignPatterns\\Behavioral\\Memento ; /** * Ticket \u662f Originator \u7684\u539f\u59cb\u526f\u672c */ class Ticket { /** * @var State */ private $currentState ; public function __construct () { $this -> currentState = new State ( State :: STATE_CREATED ); } public function open () { $this -> currentState = new State ( State :: STATE_OPENED ); } public function assign () { $this -> currentState = new State ( State :: STATE_ASSIGNED ); } public function close () { $this -> currentState = new State ( State :: STATE_CLOSED ); } public function saveToMemento () : Memento { return new Memento ( clone $this -> currentState ); } public function restoreFromMemento ( Memento $memento ) { $this -> currentState = $memento -> getState (); } public function getState () : State { return $this -> currentState ; } } 5. \u6d4b\u8bd5 # Tests/MementoTest.php <?php namespace DesignPatterns\\Behavioral\\Memento\\Tests ; use DesignPatterns\\Behavioral\\Memento\\State ; use DesignPatterns\\Behavioral\\Memento\\Ticket ; use PHPUnit\\Framework\\TestCase ; class MementoTest extends TestCase { public function testOpenTicketAssignAndSetBackToOpen () { $ticket = new Ticket (); // \u6253\u5f00 ticket $ticket -> open (); $openedState = $ticket -> getState (); $this -> assertEquals ( State :: STATE_OPENED , ( string ) $ticket -> getState ()); $memento = $ticket -> saveToMemento (); // \u5408\u5e76 ticket $ticket -> assign (); $this -> assertEquals ( State :: STATE_ASSIGNED , ( string ) $ticket -> getState ()); // \u73b0\u5728\u5df2\u7ecf\u6062\u590d\u5230\u5df2\u6253\u5f00\u7684\u72b6\u6001\uff0c\u4f46\u9700\u8981\u9a8c\u8bc1\u662f\u5426\u5df2\u7ecf\u514b\u9686\u4e86\u5f53\u524d\u72b6\u6001\u4f5c\u4e3a\u526f\u672c $ticket -> restoreFromMemento ( $memento ); $this -> assertEquals ( State :: STATE_OPENED , ( string ) $ticket -> getState ()); $this -> assertNotSame ( $openedState , $ticket -> getState ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Memento/1511","title":"\u5907\u5fd8\u5f55\u6a21\u5f0f\uff08Memento\uff09"},{"location":"php/php-design-patterns/Memento/#memento","text":"","title":"\u5907\u5fd8\u5f55\u6a21\u5f0f\uff08Memento\uff09"},{"location":"php/php-design-patterns/Memento/#1","text":"\u5b83\u63d0\u4f9b\u4e86\u5728\u4e0d\u7834\u574f\u5c01\u88c5\uff08\u5bf9\u8c61\u4e0d\u9700\u8981\u5177\u6709\u8fd4\u56de\u5f53\u524d\u72b6\u6001\u7684\u51fd\u6570\uff09\u7684\u60c5\u51b5\u4e0b\u6062\u590d\u5230\u4e4b\u524d\u72b6\u6001\uff08\u4f7f\u7528\u56de\u6eda\uff09\u6216\u8005\u83b7\u53d6\u5bf9\u8c61\u7684\u5185\u90e8\u72b6\u6001\u3002 \u5907\u5fd8\u5f55\u6a21\u5f0f\u4f7f\u7528 3 \u4e2a\u7c7b\u6765\u5b9e\u73b0\uff1a Originator \uff0c Caretaker \u548c Memento \u3002 Memento \u2014\u2014 \u8d1f\u8d23\u5b58\u50a8 Originator \u7684 \u552f\u4e00\u5185\u90e8\u72b6\u6001 \uff0c\u5b83\u53ef\u4ee5\u5305\u542b\uff1a string \uff0c number \uff0c array \uff0c\u7c7b\u7684\u5b9e\u4f8b\u7b49\u7b49\u3002 Memento \u300c\u4e0d\u662f\u516c\u5f00\u7684\u7c7b\u300d\uff08\u4efb\u4f55\u4eba\u90fd\u4e0d\u5e94\u8be5\u4e14\u4e0d\u80fd\u66f4\u6539\u5b83\uff09\uff0c\u5e76\u9632\u6b62 Originator \u4ee5\u5916\u7684\u5bf9\u8c61\u8bbf\u95ee\u5b83\uff0c\u5b83\u63d0\u4f9b2\u4e2a\u63a5\u53e3\uff1a Caretaker \u53ea\u80fd\u770b\u5230\u5907\u5fd8\u5f55\u7684\u7a84\u63a5\u53e3\uff0c\u4ed6\u53ea\u80fd\u5c06\u5907\u5fd8\u5f55\u4f20\u9012\u7ed9\u5176\u4ed6\u5bf9\u8c61\u3002 Originator \u5374\u53ef\u770b\u5230\u5907\u5fd8\u5f55\u7684\u5bbd\u63a5\u53e3\uff0c\u5141\u8bb8\u5b83\u8bbf\u95ee\u8fd4\u56de\u5230\u5148\u524d\u72b6\u6001\u6240\u9700\u8981\u7684\u6240\u6709\u6570\u636e\u3002 Originator \u2014\u2014 \u5b83\u8d1f\u8d23\u521b\u5efa Memento \uff0c\u5e76\u8bb0\u5f55 \u5916\u90e8\u5bf9\u8c61\u5f53\u524d\u65f6\u523b\u7684\u72b6\u6001\uff0c \u5e76\u53ef\u4f7f\u7528 Memento \u6062\u590d\u5185\u90e8\u72b6\u6001\u3002 Originator \u53ef\u6839\u636e\u9700\u8981\u51b3\u5b9a Memento \u5b58\u50a8 Originator \u7684\u54ea\u4e9b\u5185\u90e8\u72b6\u6001\u3002 Originator \u4e5f\u8bb8\uff08\u4e0d\u662f\u5e94\u8be5\uff09\u6709\u81ea\u5df1\u7684\u65b9\u6cd5\uff08 methods \uff09\u3002 \u4f46\u662f\uff0c\u4ed6\u4eec \u4e0d\u80fd\u66f4\u6539\u5df2\u4fdd\u5b58\u5bf9\u8c61\u7684\u5f53\u524d\u72b6\u6001\u3002 Caretaker \u2014\u2014 \u8d1f\u8d23\u4fdd\u5b58 Memento \u3002 \u5b83\u53ef\u4ee5\u4fee\u6539\u4e00\u4e2a\u5bf9\u8c61\uff1b\u51b3\u5b9a Originator \u4e2d\u5bf9\u8c61\u5f53\u524d\u65f6\u523b\u7684\u72b6\u6001\uff1b \u4ece Originator \u83b7\u53d6\u5bf9\u8c61\u7684\u5f53\u524d\u72b6\u6001\uff1b \u6216\u8005\u56de\u6eda Originator \u4e2d\u5bf9\u8c61\u7684\u72b6\u6001\u3002 \u539f\u6587\u5907\u6ce8\uff1a\u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\uff0c\u4ee5\u4e0a\u7ffb\u8bd1\u8ddf\u539f\u6587\u6709\u5c11\u8bb8\u51fa\u5165","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Memento/#2","text":"\u53d1\u9001\u4e00\u4e2a\u968f\u673a\u6570 \u5e76\u5c06\u8fd9\u4e2a\u968f\u673a\u6570\u5b58\u5728\u65f6\u5e8f\u673a\u4e2d \u4fdd\u5b58\u4e4b\u524d\u63a7\u5236 ORM Model \u4e2d\u7684\u72b6\u6001","title":"2. \u4f8b\u5b50"},{"location":"php/php-design-patterns/Memento/#3-uml","text":"","title":"3. UML \u56fe"},{"location":"php/php-design-patterns/Memento/#4","text":"\u4f60\u53ef\u4ee5\u5728 GitHub \u67e5\u770b\u8fd9\u6bb5\u4ee3\u7801\u3002 Memento.php <?php namespace DesignPatterns\\Behavioral\\Memento ; class Memento { /** * @var State */ private $state ; /** * @param State $stateToSave */ public function __construct ( State $stateToSave ) { $this -> state = $stateToSave ; } /** * @return State */ public function getState () { return $this -> state ; } } State.php <?php namespace DesignPatterns\\Behavioral\\Memento ; class State { const STATE_CREATED = 'created' ; const STATE_OPENED = 'opened' ; const STATE_ASSIGNED = 'assigned' ; const STATE_CLOSED = 'closed' ; /** * @var string */ private $state ; /** * @var string[] */ private static $validStates = [ self :: STATE_CREATED , self :: STATE_OPENED , self :: STATE_ASSIGNED , self :: STATE_CLOSED , ]; /** * @param string $state */ public function __construct ( string $state ) { self :: ensureIsValidState ( $state ); $this -> state = $state ; } private static function ensureIsValidState ( string $state ) { if ( ! in_array ( $state , self :: $validStates )) { throw new \\InvalidArgumentException ( 'Invalid state given' ); } } public function __toString () : string { return $this -> state ; } } Ticket.php <?php namespace DesignPatterns\\Behavioral\\Memento ; /** * Ticket \u662f Originator \u7684\u539f\u59cb\u526f\u672c */ class Ticket { /** * @var State */ private $currentState ; public function __construct () { $this -> currentState = new State ( State :: STATE_CREATED ); } public function open () { $this -> currentState = new State ( State :: STATE_OPENED ); } public function assign () { $this -> currentState = new State ( State :: STATE_ASSIGNED ); } public function close () { $this -> currentState = new State ( State :: STATE_CLOSED ); } public function saveToMemento () : Memento { return new Memento ( clone $this -> currentState ); } public function restoreFromMemento ( Memento $memento ) { $this -> currentState = $memento -> getState (); } public function getState () : State { return $this -> currentState ; } }","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/Memento/#5","text":"Tests/MementoTest.php <?php namespace DesignPatterns\\Behavioral\\Memento\\Tests ; use DesignPatterns\\Behavioral\\Memento\\State ; use DesignPatterns\\Behavioral\\Memento\\Ticket ; use PHPUnit\\Framework\\TestCase ; class MementoTest extends TestCase { public function testOpenTicketAssignAndSetBackToOpen () { $ticket = new Ticket (); // \u6253\u5f00 ticket $ticket -> open (); $openedState = $ticket -> getState (); $this -> assertEquals ( State :: STATE_OPENED , ( string ) $ticket -> getState ()); $memento = $ticket -> saveToMemento (); // \u5408\u5e76 ticket $ticket -> assign (); $this -> assertEquals ( State :: STATE_ASSIGNED , ( string ) $ticket -> getState ()); // \u73b0\u5728\u5df2\u7ecf\u6062\u590d\u5230\u5df2\u6253\u5f00\u7684\u72b6\u6001\uff0c\u4f46\u9700\u8981\u9a8c\u8bc1\u662f\u5426\u5df2\u7ecf\u514b\u9686\u4e86\u5f53\u524d\u72b6\u6001\u4f5c\u4e3a\u526f\u672c $ticket -> restoreFromMemento ( $memento ); $this -> assertEquals ( State :: STATE_OPENED , ( string ) $ticket -> getState ()); $this -> assertNotSame ( $openedState , $ticket -> getState ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Memento/1511","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Multiton/","text":"\u591a\u4f8b\u6a21\u5f0f\uff08Multiton\uff09 # \u591a\u4f8b\u6a21\u5f0f\u88ab\u516c\u8ba4\u4e3a\u662f \u53cd\u9762\u6a21\u5f0f \uff0c\u4e3a\u4e86\u83b7\u5f97\u66f4\u597d\u7684\u53ef\u6d4b\u8bd5\u6027\u548c\u53ef\u7ef4\u62a4\u6027\uff0c\u8bf7\u4f7f\u7528\u300e \u4f9d\u8d56\u6ce8\u5165\u6a21\u5f0f \u300f\u3002 1. \u76ee\u7684 # \u591a\u4f8b\u6a21\u5f0f\u662f\u6307\u5b58\u5728\u4e00\u4e2a\u7c7b\u6709\u591a\u4e2a\u76f8\u540c\u5b9e\u4f8b\uff0c\u800c\u4e14\u8be5\u5b9e\u4f8b\u90fd\u662f\u8be5\u7c7b\u672c\u8eab\u3002\u8fd9\u4e2a\u7c7b\u53eb\u505a\u591a\u4f8b\u7c7b\u3002 \u591a\u4f8b\u6a21\u5f0f\u7684\u7279\u70b9\u662f\uff1a \u591a\u4f8b\u7c7b\u53ef\u4ee5\u6709\u591a\u4e2a\u5b9e\u4f8b\u3002 \u591a\u4f8b\u7c7b\u5fc5\u987b\u81ea\u5df1\u521b\u5efa\u3001\u7ba1\u7406\u81ea\u5df1\u7684\u5b9e\u4f8b\uff0c\u5e76\u5411\u5916\u754c\u63d0\u4f9b\u81ea\u5df1\u7684\u5b9e\u4f8b\u3002 \u591a\u4f8b\u6a21\u5f0f\u5b9e\u9645\u4e0a\u5c31\u662f\u5355\u4f8b\u6a21\u5f0f\u7684\u63a8\u5e7f\u3002 2. \u4e3e\u4f8b # 2\u4e2a\u6570\u636e\u5e93\u8fde\u63a5\u5668\uff0c\u6bd4\u5982\u4e00\u4e2a\u662f MySQL \uff0c\u53e6\u4e00\u4e2a\u662f SQLite \u591a\u4e2a\u8bb0\u5f55\u5668\uff08\u4e00\u4e2a\u7528\u4e8e\u8bb0\u5f55\u8c03\u8bd5\u6d88\u606f\uff0c\u4e00\u4e2a\u7528\u4e8e\u8bb0\u5f55\u9519\u8bef\uff09 3. UML \u56fe # 4. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u6e90\u4ee3\u7801\uff1a GitHub Multiton.php <?php namespace DesignPatterns\\Creational\\Multiton ; final class Multiton { const INSTANCE_1 = '1' ; const INSTANCE_2 = '2' ; /** * @var \u5b9e\u4f8b\u6570\u7ec4 */ private static $instances = []; /** * \u8fd9\u91cc\u79c1\u6709\u65b9\u6cd5\u963b\u6b62\u7528\u6237\u968f\u610f\u7684\u521b\u5efa\u8be5\u5bf9\u8c61\u5b9e\u4f8b */ private function __construct () { } public static function getInstance ( string $instanceName ) : Multiton { if ( ! isset ( self :: $instances [ $instanceName ])) { self :: $instances [ $instanceName ] = new self (); } return self :: $instances [ $instanceName ]; } /** * \u8be5\u79c1\u6709\u5bf9\u8c61\u963b\u6b62\u5b9e\u4f8b\u88ab\u514b\u9686 */ private function __clone () { } /** * \u8be5\u79c1\u6709\u65b9\u6cd5\u963b\u6b62\u5b9e\u4f8b\u88ab\u5e8f\u5217\u5316 */ private function __wakeup () { } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Multiton/1490","title":"\u591a\u4f8b\u6a21\u5f0f\uff08Multiton\uff09"},{"location":"php/php-design-patterns/Multiton/#multiton","text":"\u591a\u4f8b\u6a21\u5f0f\u88ab\u516c\u8ba4\u4e3a\u662f \u53cd\u9762\u6a21\u5f0f \uff0c\u4e3a\u4e86\u83b7\u5f97\u66f4\u597d\u7684\u53ef\u6d4b\u8bd5\u6027\u548c\u53ef\u7ef4\u62a4\u6027\uff0c\u8bf7\u4f7f\u7528\u300e \u4f9d\u8d56\u6ce8\u5165\u6a21\u5f0f \u300f\u3002","title":"\u591a\u4f8b\u6a21\u5f0f\uff08Multiton\uff09"},{"location":"php/php-design-patterns/Multiton/#1","text":"\u591a\u4f8b\u6a21\u5f0f\u662f\u6307\u5b58\u5728\u4e00\u4e2a\u7c7b\u6709\u591a\u4e2a\u76f8\u540c\u5b9e\u4f8b\uff0c\u800c\u4e14\u8be5\u5b9e\u4f8b\u90fd\u662f\u8be5\u7c7b\u672c\u8eab\u3002\u8fd9\u4e2a\u7c7b\u53eb\u505a\u591a\u4f8b\u7c7b\u3002 \u591a\u4f8b\u6a21\u5f0f\u7684\u7279\u70b9\u662f\uff1a \u591a\u4f8b\u7c7b\u53ef\u4ee5\u6709\u591a\u4e2a\u5b9e\u4f8b\u3002 \u591a\u4f8b\u7c7b\u5fc5\u987b\u81ea\u5df1\u521b\u5efa\u3001\u7ba1\u7406\u81ea\u5df1\u7684\u5b9e\u4f8b\uff0c\u5e76\u5411\u5916\u754c\u63d0\u4f9b\u81ea\u5df1\u7684\u5b9e\u4f8b\u3002 \u591a\u4f8b\u6a21\u5f0f\u5b9e\u9645\u4e0a\u5c31\u662f\u5355\u4f8b\u6a21\u5f0f\u7684\u63a8\u5e7f\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Multiton/#2","text":"2\u4e2a\u6570\u636e\u5e93\u8fde\u63a5\u5668\uff0c\u6bd4\u5982\u4e00\u4e2a\u662f MySQL \uff0c\u53e6\u4e00\u4e2a\u662f SQLite \u591a\u4e2a\u8bb0\u5f55\u5668\uff08\u4e00\u4e2a\u7528\u4e8e\u8bb0\u5f55\u8c03\u8bd5\u6d88\u606f\uff0c\u4e00\u4e2a\u7528\u4e8e\u8bb0\u5f55\u9519\u8bef\uff09","title":"2. \u4e3e\u4f8b"},{"location":"php/php-design-patterns/Multiton/#3-uml","text":"","title":"3. UML \u56fe"},{"location":"php/php-design-patterns/Multiton/#4","text":"\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u6e90\u4ee3\u7801\uff1a GitHub Multiton.php <?php namespace DesignPatterns\\Creational\\Multiton ; final class Multiton { const INSTANCE_1 = '1' ; const INSTANCE_2 = '2' ; /** * @var \u5b9e\u4f8b\u6570\u7ec4 */ private static $instances = []; /** * \u8fd9\u91cc\u79c1\u6709\u65b9\u6cd5\u963b\u6b62\u7528\u6237\u968f\u610f\u7684\u521b\u5efa\u8be5\u5bf9\u8c61\u5b9e\u4f8b */ private function __construct () { } public static function getInstance ( string $instanceName ) : Multiton { if ( ! isset ( self :: $instances [ $instanceName ])) { self :: $instances [ $instanceName ] = new self (); } return self :: $instances [ $instanceName ]; } /** * \u8be5\u79c1\u6709\u5bf9\u8c61\u963b\u6b62\u5b9e\u4f8b\u88ab\u514b\u9686 */ private function __clone () { } /** * \u8be5\u79c1\u6709\u65b9\u6cd5\u963b\u6b62\u5b9e\u4f8b\u88ab\u5e8f\u5217\u5316 */ private function __wakeup () { } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Multiton/1490","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/NullObject/","text":"\u7a7a\u5bf9\u8c61\u6a21\u5f0f\uff08Null Object\uff09 # 1. \u76ee\u7684 # \u7a7a\u5bf9\u8c61\u6a21\u5f0f\u4e0d\u5c5e\u4e8e GoF \u8bbe\u8ba1\u6a21\u5f0f\uff0c\u4f46\u662f\u5b83\u4f5c\u4e3a\u4e00\u79cd\u7ecf\u5e38\u51fa\u73b0\u7684\u5957\u8def\u8db3\u4ee5\u88ab\u89c6\u4e3a\u8bbe\u8ba1\u6a21\u5f0f\u4e86\u3002\u5b83\u5177\u6709\u5982\u4e0b\u4f18\u70b9\uff1a \u5ba2\u6237\u7aef\u4ee3\u7801\u7b80\u5355 \u53ef\u4ee5\u51cf\u5c11\u62a5\u7a7a\u6307\u9488\u5f02\u5e38\u7684\u51e0\u7387 \u6d4b\u8bd5\u7528\u4f8b\u4e0d\u9700\u8981\u8003\u8651\u592a\u591a\u6761\u4ef6 \u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u6216 null \u5e94\u8be5\u7528\u8fd4\u56de\u5bf9\u8c61\u6216\u8005 NullObject \u4ee3\u66ff\u3002 NullObject \u7b80\u5316\u4e86\u6b7b\u677f\u7684\u4ee3\u7801\uff0c\u6d88\u9664\u4e86\u5ba2\u6237\u7aef\u4ee3\u7801\u4e2d\u7684\u6761\u4ef6\u68c0\u67e5\uff0c\u4f8b\u5982 if (!is_null($obj)) { $obj->callSomething(); } \u53ea\u9700 $obj->callSomething(); \u5c31\u884c\u3002 2. \u4f8b\u5b50 # Symfony2: \u7a7a\u65e5\u5fd7 Symfony2: Symfony/Console \u7a7a\u8f93\u51fa \u8d23\u4efb\u94fe\u6a21\u5f0f\u4e2d\u7684\u7a7a\u5904\u7406\u5668 \u547d\u4ee4\u884c\u6a21\u5f0f\u4e2d\u7684\u7a7a\u547d\u4ee4 3. UML \u7c7b\u56fe # 4. \u4ee3\u7801 # \u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u67e5\u770b\u6b64\u4ee3\u7801 Service.php <?php namespace DesignPatterns\\Behavioral\\NullObject ; /** * \u521b\u5efa\u670d\u52a1\u7c7b Service \u3002 */ class Service { /** * @var LoggerInterface * \u5b9a\u4e49\u65e5\u8bb0\u7c7b\u5bf9\u8c61\u3002 */ private $logger ; /** * @param LoggerInterface $logger * \u4f20\u5165\u65e5\u8bb0\u7c7b\u5bf9\u8c61\u53c2\u6570\u3002 */ public function __construct ( LoggerInterface $logger ) { $this -> logger = $logger ; } /** * \u505a\u4e9b\u4ec0\u4e48\u3002\u3002\u3002 * \u5728\u65e5\u8bb0\u4e2d\u8fd4\u56de\u4e86 '\u6211\u4eec\u5728 Service: doSomething \u91cc' \u3002 */ public function doSomething () { // \u63d0\u793a\uff1a\u8fd9\u91cc\u4f60\u53ea\u662f\u4f7f\u7528\u5b83\uff0c\u800c\u4e0d\u9700\u8981\u901a\u8fc7\u5982\uff1ais_null() \u68c0\u67e5 $logger \u662f\u5426\u5df2\u7ecf\u8bbe\u7f6e\u3002 $this -> logger -> log ( 'We are in ' . __METHOD__ ); } } LoggerInterface.php <?php namespace DesignPatterns\\Behavioral\\NullObject ; /** * \u91cd\u8981\u7279\u5f81\uff1a\u7a7a\u65e5\u8bb0\u5fc5\u987b\u50cf\u5176\u4ed6\u65e5\u8bb0\u610f\u5411\u4ece\u8fd9\u4e2a\u63a5\u53e3\u7ee7\u627f\u3002 */ interface LoggerInterface { public function log ( string $str ); } PrintLogger.php <?php namespace DesignPatterns\\Behavioral\\NullObject ; /** * \u521b\u5efa\u4e00\u4e2a\u65e5\u8bb0\u6253\u5370\u7c7b\u5b9e\u73b0\u65e5\u8bb0\u63a5\u53e3\u3002 */ class PrintLogger implements LoggerInterface { public function log ( string $str ) { echo $str ; } } NullLogger.php <?php namespace DesignPatterns\\Behavioral\\NullObject ; /** * \u521b\u5efa\u4e00\u4e2a\u7a7a\u65e5\u8bb0\u7c7b\u5b9e\u73b0\u65e5\u8bb0\u63a5\u53e3\u3002 */ class NullLogger implements LoggerInterface { public function log ( string $str ) { // \u4ec0\u4e48\u4e5f\u4e0d\u7528\u505a } } 5. \u6d4b\u8bd5 # Tests/LoggerTest.php <?php namespace DesignPatterns\\Behavioral\\NullObject\\Tests ; use DesignPatterns\\Behavioral\\NullObject\\NullLogger ; use DesignPatterns\\Behavioral\\NullObject\\PrintLogger ; use DesignPatterns\\Behavioral\\NullObject\\Service ; use PHPUnit\\Framework\\TestCase ; /** * \u521b\u5efa\u6d4b\u8bd5\u5355\u5143 LoggerTest \u3002 */ class LoggerTest extends TestCase { /** * \u6d4b\u8bd5 NullLogger \u5bf9\u8c61\uff0c\u8054\u7cfb\u4e0a\u6587\u53ef\u4ee5\u77e5\u9053\u4ec0\u4e48\u4e5f\u6ca1\u505a\u3002 */ public function testNullObject () { $service = new Service ( new NullLogger ()); $this -> expectOutputString ( '' ); $service -> doSomething (); } /** * \u6d4b\u8bd5 PrintLogger \u5bf9\u8c61\uff0c\u8054\u7cfb\u4e0a\u6587\u53ef\u4ee5\u77e5\u9053\u5728\u65e5\u8bb0\u4e2d\u5199\u5165\u4e86 DesignPatterns\\Behavioral\\NullObject\\Service::doSomething \u3002 */ public function testStandardLogger () { $service = new Service ( new PrintLogger ()); $this -> expectOutputString ( 'We are in DesignPatterns\\Behavioral\\NullObject\\Service::doSomething' ); $service -> doSomething (); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/NullObject/1512","title":"\u7a7a\u5bf9\u8c61\u6a21\u5f0f\uff08Null Object\uff09"},{"location":"php/php-design-patterns/NullObject/#null-object","text":"","title":"\u7a7a\u5bf9\u8c61\u6a21\u5f0f\uff08Null Object\uff09"},{"location":"php/php-design-patterns/NullObject/#1","text":"\u7a7a\u5bf9\u8c61\u6a21\u5f0f\u4e0d\u5c5e\u4e8e GoF \u8bbe\u8ba1\u6a21\u5f0f\uff0c\u4f46\u662f\u5b83\u4f5c\u4e3a\u4e00\u79cd\u7ecf\u5e38\u51fa\u73b0\u7684\u5957\u8def\u8db3\u4ee5\u88ab\u89c6\u4e3a\u8bbe\u8ba1\u6a21\u5f0f\u4e86\u3002\u5b83\u5177\u6709\u5982\u4e0b\u4f18\u70b9\uff1a \u5ba2\u6237\u7aef\u4ee3\u7801\u7b80\u5355 \u53ef\u4ee5\u51cf\u5c11\u62a5\u7a7a\u6307\u9488\u5f02\u5e38\u7684\u51e0\u7387 \u6d4b\u8bd5\u7528\u4f8b\u4e0d\u9700\u8981\u8003\u8651\u592a\u591a\u6761\u4ef6 \u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u6216 null \u5e94\u8be5\u7528\u8fd4\u56de\u5bf9\u8c61\u6216\u8005 NullObject \u4ee3\u66ff\u3002 NullObject \u7b80\u5316\u4e86\u6b7b\u677f\u7684\u4ee3\u7801\uff0c\u6d88\u9664\u4e86\u5ba2\u6237\u7aef\u4ee3\u7801\u4e2d\u7684\u6761\u4ef6\u68c0\u67e5\uff0c\u4f8b\u5982 if (!is_null($obj)) { $obj->callSomething(); } \u53ea\u9700 $obj->callSomething(); \u5c31\u884c\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/NullObject/#2","text":"Symfony2: \u7a7a\u65e5\u5fd7 Symfony2: Symfony/Console \u7a7a\u8f93\u51fa \u8d23\u4efb\u94fe\u6a21\u5f0f\u4e2d\u7684\u7a7a\u5904\u7406\u5668 \u547d\u4ee4\u884c\u6a21\u5f0f\u4e2d\u7684\u7a7a\u547d\u4ee4","title":"2. \u4f8b\u5b50"},{"location":"php/php-design-patterns/NullObject/#3-uml","text":"","title":"3. UML \u7c7b\u56fe"},{"location":"php/php-design-patterns/NullObject/#4","text":"\u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u67e5\u770b\u6b64\u4ee3\u7801 Service.php <?php namespace DesignPatterns\\Behavioral\\NullObject ; /** * \u521b\u5efa\u670d\u52a1\u7c7b Service \u3002 */ class Service { /** * @var LoggerInterface * \u5b9a\u4e49\u65e5\u8bb0\u7c7b\u5bf9\u8c61\u3002 */ private $logger ; /** * @param LoggerInterface $logger * \u4f20\u5165\u65e5\u8bb0\u7c7b\u5bf9\u8c61\u53c2\u6570\u3002 */ public function __construct ( LoggerInterface $logger ) { $this -> logger = $logger ; } /** * \u505a\u4e9b\u4ec0\u4e48\u3002\u3002\u3002 * \u5728\u65e5\u8bb0\u4e2d\u8fd4\u56de\u4e86 '\u6211\u4eec\u5728 Service: doSomething \u91cc' \u3002 */ public function doSomething () { // \u63d0\u793a\uff1a\u8fd9\u91cc\u4f60\u53ea\u662f\u4f7f\u7528\u5b83\uff0c\u800c\u4e0d\u9700\u8981\u901a\u8fc7\u5982\uff1ais_null() \u68c0\u67e5 $logger \u662f\u5426\u5df2\u7ecf\u8bbe\u7f6e\u3002 $this -> logger -> log ( 'We are in ' . __METHOD__ ); } } LoggerInterface.php <?php namespace DesignPatterns\\Behavioral\\NullObject ; /** * \u91cd\u8981\u7279\u5f81\uff1a\u7a7a\u65e5\u8bb0\u5fc5\u987b\u50cf\u5176\u4ed6\u65e5\u8bb0\u610f\u5411\u4ece\u8fd9\u4e2a\u63a5\u53e3\u7ee7\u627f\u3002 */ interface LoggerInterface { public function log ( string $str ); } PrintLogger.php <?php namespace DesignPatterns\\Behavioral\\NullObject ; /** * \u521b\u5efa\u4e00\u4e2a\u65e5\u8bb0\u6253\u5370\u7c7b\u5b9e\u73b0\u65e5\u8bb0\u63a5\u53e3\u3002 */ class PrintLogger implements LoggerInterface { public function log ( string $str ) { echo $str ; } } NullLogger.php <?php namespace DesignPatterns\\Behavioral\\NullObject ; /** * \u521b\u5efa\u4e00\u4e2a\u7a7a\u65e5\u8bb0\u7c7b\u5b9e\u73b0\u65e5\u8bb0\u63a5\u53e3\u3002 */ class NullLogger implements LoggerInterface { public function log ( string $str ) { // \u4ec0\u4e48\u4e5f\u4e0d\u7528\u505a } }","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/NullObject/#5","text":"Tests/LoggerTest.php <?php namespace DesignPatterns\\Behavioral\\NullObject\\Tests ; use DesignPatterns\\Behavioral\\NullObject\\NullLogger ; use DesignPatterns\\Behavioral\\NullObject\\PrintLogger ; use DesignPatterns\\Behavioral\\NullObject\\Service ; use PHPUnit\\Framework\\TestCase ; /** * \u521b\u5efa\u6d4b\u8bd5\u5355\u5143 LoggerTest \u3002 */ class LoggerTest extends TestCase { /** * \u6d4b\u8bd5 NullLogger \u5bf9\u8c61\uff0c\u8054\u7cfb\u4e0a\u6587\u53ef\u4ee5\u77e5\u9053\u4ec0\u4e48\u4e5f\u6ca1\u505a\u3002 */ public function testNullObject () { $service = new Service ( new NullLogger ()); $this -> expectOutputString ( '' ); $service -> doSomething (); } /** * \u6d4b\u8bd5 PrintLogger \u5bf9\u8c61\uff0c\u8054\u7cfb\u4e0a\u6587\u53ef\u4ee5\u77e5\u9053\u5728\u65e5\u8bb0\u4e2d\u5199\u5165\u4e86 DesignPatterns\\Behavioral\\NullObject\\Service::doSomething \u3002 */ public function testStandardLogger () { $service = new Service ( new PrintLogger ()); $this -> expectOutputString ( 'We are in DesignPatterns\\Behavioral\\NullObject\\Service::doSomething' ); $service -> doSomething (); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/NullObject/1512","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Observer/","text":"\u89c2\u5bdf\u8005\u6a21\u5f0f\uff08Observer\uff09 # 1. \u76ee\u7684 # \u5f53\u5bf9\u8c61\u7684\u72b6\u6001\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u6240\u6709\u4f9d\u8d56\u4e8e\u5b83\u7684\u5bf9\u8c61\u90fd\u5f97\u5230\u901a\u77e5\u5e76\u88ab\u81ea\u52a8\u66f4\u65b0\u3002\u5b83\u4f7f\u7528\u7684\u662f\u4f4e\u8026\u5408\u7684\u65b9\u5f0f\u3002 2. \u4f8b\u5b50 # \u4f7f\u7528\u89c2\u5bdf\u8005\u6a21\u5f0f\u89c2\u5bdf\u6d88\u606f\u961f\u5217\u5728 GUI \u4e2d\u7684\u8fd0\u884c\u60c5\u51b5\u3002 3. \u6ce8\u610f # PHP \u5df2\u7ecf\u5b9a\u4e49\u4e862\u4e2a\u63a5\u53e3\u7528\u4e8e\u5feb\u901f\u5b9e\u73b0\u89c2\u5bdf\u8005\u6a21\u5f0f\uff1a SplObserver \u548c SplSubject \u3002 4. UML \u56fe # 5. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728 GitHub \u67e5\u770b\u8fd9\u6bb5\u4ee3\u7801\u3002 User.php <?php namespace DesignPatterns\\Behavioral\\Observer ; /** * User \u5b9e\u73b0\u89c2\u5bdf\u8005\u6a21\u5f0f (\u79f0\u4e3a\u4e3b\u4f53)\uff0c\u5b83\u7ef4\u62a4\u4e00\u4e2a\u89c2\u5bdf\u8005\u5217\u8868\uff0c * \u5f53\u5bf9\u8c61\u53d1\u751f\u53d8\u5316\u65f6\u901a\u77e5 User\u3002 */ class User implements \\SplSubject { /** * @var string */ private $email ; /** * @var \\SplObjectStorage */ private $observers ; public function __construct () { $this -> observers = new \\SplObjectStorage (); } public function attach ( \\SplObserver $observer ) { $this -> observers -> attach ( $observer ); } public function detach ( \\SplObserver $observer ) { $this -> observers -> detach ( $observer ); } public function changeEmail ( string $email ) { $this -> email = $email ; $this -> notify (); } public function notify () { /** @var \\SplObserver $observer */ foreach ( $this -> observers as $observer ) { $observer -> update ( $this ); } } } UserObserver.php <?php namespace DesignPatterns\\Behavioral\\Observer ; class UserObserver implements \\SplObserver { /** * @var User[] */ private $changedUsers = []; /** * \u5b83\u901a\u5e38\u4f7f\u7528 SplSubject::notify() \u901a\u77e5\u4e3b\u4f53 * * @param \\SplSubject $subject */ public function update ( \\SplSubject $subject ) { $this -> changedUsers [] = clone $subject ; } /** * @return User[] */ public function getChangedUsers () : array { return $this -> changedUsers ; } } 6. \u6d4b\u8bd5 # Tests/ObserverTest.php <?php namespace DesignPatterns\\Behavioral\\Observer\\Tests ; use DesignPatterns\\Behavioral\\Observer\\User ; use DesignPatterns\\Behavioral\\Observer\\UserObserver ; use PHPUnit\\Framework\\TestCase ; class ObserverTest extends TestCase { public function testChangeInUserLeadsToUserObserverBeingNotified () { $observer = new UserObserver (); $user = new User (); $user -> attach ( $observer ); $user -> changeEmail ( 'foo@bar.com' ); $this -> assertCount ( 1 , $observer -> getChangedUsers ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Observer/1513","title":"\u89c2\u5bdf\u8005\u6a21\u5f0f\uff08Observer\uff09"},{"location":"php/php-design-patterns/Observer/#observer","text":"","title":"\u89c2\u5bdf\u8005\u6a21\u5f0f\uff08Observer\uff09"},{"location":"php/php-design-patterns/Observer/#1","text":"\u5f53\u5bf9\u8c61\u7684\u72b6\u6001\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u6240\u6709\u4f9d\u8d56\u4e8e\u5b83\u7684\u5bf9\u8c61\u90fd\u5f97\u5230\u901a\u77e5\u5e76\u88ab\u81ea\u52a8\u66f4\u65b0\u3002\u5b83\u4f7f\u7528\u7684\u662f\u4f4e\u8026\u5408\u7684\u65b9\u5f0f\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Observer/#2","text":"\u4f7f\u7528\u89c2\u5bdf\u8005\u6a21\u5f0f\u89c2\u5bdf\u6d88\u606f\u961f\u5217\u5728 GUI \u4e2d\u7684\u8fd0\u884c\u60c5\u51b5\u3002","title":"2. \u4f8b\u5b50"},{"location":"php/php-design-patterns/Observer/#3","text":"PHP \u5df2\u7ecf\u5b9a\u4e49\u4e862\u4e2a\u63a5\u53e3\u7528\u4e8e\u5feb\u901f\u5b9e\u73b0\u89c2\u5bdf\u8005\u6a21\u5f0f\uff1a SplObserver \u548c SplSubject \u3002","title":"3. \u6ce8\u610f"},{"location":"php/php-design-patterns/Observer/#4-uml","text":"","title":"4. UML \u56fe"},{"location":"php/php-design-patterns/Observer/#5","text":"\u4f60\u53ef\u4ee5\u5728 GitHub \u67e5\u770b\u8fd9\u6bb5\u4ee3\u7801\u3002 User.php <?php namespace DesignPatterns\\Behavioral\\Observer ; /** * User \u5b9e\u73b0\u89c2\u5bdf\u8005\u6a21\u5f0f (\u79f0\u4e3a\u4e3b\u4f53)\uff0c\u5b83\u7ef4\u62a4\u4e00\u4e2a\u89c2\u5bdf\u8005\u5217\u8868\uff0c * \u5f53\u5bf9\u8c61\u53d1\u751f\u53d8\u5316\u65f6\u901a\u77e5 User\u3002 */ class User implements \\SplSubject { /** * @var string */ private $email ; /** * @var \\SplObjectStorage */ private $observers ; public function __construct () { $this -> observers = new \\SplObjectStorage (); } public function attach ( \\SplObserver $observer ) { $this -> observers -> attach ( $observer ); } public function detach ( \\SplObserver $observer ) { $this -> observers -> detach ( $observer ); } public function changeEmail ( string $email ) { $this -> email = $email ; $this -> notify (); } public function notify () { /** @var \\SplObserver $observer */ foreach ( $this -> observers as $observer ) { $observer -> update ( $this ); } } } UserObserver.php <?php namespace DesignPatterns\\Behavioral\\Observer ; class UserObserver implements \\SplObserver { /** * @var User[] */ private $changedUsers = []; /** * \u5b83\u901a\u5e38\u4f7f\u7528 SplSubject::notify() \u901a\u77e5\u4e3b\u4f53 * * @param \\SplSubject $subject */ public function update ( \\SplSubject $subject ) { $this -> changedUsers [] = clone $subject ; } /** * @return User[] */ public function getChangedUsers () : array { return $this -> changedUsers ; } }","title":"5. \u4ee3\u7801"},{"location":"php/php-design-patterns/Observer/#6","text":"Tests/ObserverTest.php <?php namespace DesignPatterns\\Behavioral\\Observer\\Tests ; use DesignPatterns\\Behavioral\\Observer\\User ; use DesignPatterns\\Behavioral\\Observer\\UserObserver ; use PHPUnit\\Framework\\TestCase ; class ObserverTest extends TestCase { public function testChangeInUserLeadsToUserObserverBeingNotified () { $observer = new UserObserver (); $user = new User (); $user -> attach ( $observer ); $user -> changeEmail ( 'foo@bar.com' ); $this -> assertCount ( 1 , $observer -> getChangedUsers ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Observer/1513","title":"6. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Pool/","text":"\u5bf9\u8c61\u6c60\u6a21\u5f0f\uff08Pool\uff09 # 1. \u76ee\u7684 # \u5bf9\u8c61\u6c60\u6a21\u5f0f \u662f\u4e00\u79cd\u63d0\u524d\u51c6\u5907\u4e86\u4e00\u7ec4\u5df2\u7ecf\u521d\u59cb\u5316\u4e86\u7684\u5bf9\u8c61\u300e\u6c60\u300f\u800c\u4e0d\u662f\u6309\u9700\u521b\u5efa\u6216\u8005\u9500\u6bc1\u7684\u521b\u5efa\u578b\u8bbe\u8ba1\u6a21\u5f0f\u3002\u5bf9\u8c61\u6c60\u7684\u5ba2\u6237\u7aef\u4f1a\u5411\u5bf9\u8c61\u6c60\u4e2d\u8bf7\u6c42\u4e00\u4e2a\u5bf9\u8c61\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e2a\u8fd4\u56de\u7684\u5bf9\u8c61\u6267\u884c\u76f8\u5173\u64cd\u4f5c\u3002\u5f53\u5ba2\u6237\u7aef\u4f7f\u7528\u5b8c\u6bd5\uff0c\u5b83\u5c06\u628a\u8fd9\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u5de5\u5382\u5bf9\u8c61\u8fd4\u56de\u7ed9\u5bf9\u8c61\u6c60\uff0c\u800c\u4e0d\u662f\u9500\u6bc1\u6389\u8fd9\u4e2a\u5bf9\u8c61\u3002 \u5728\u521d\u59cb\u5316\u5b9e\u4f8b\u6210\u672c\u9ad8\uff0c\u5b9e\u4f8b\u5316\u7387\u9ad8\uff0c\u53ef\u7528\u5b9e\u4f8b\u4e0d\u8db3\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u8c61\u6c60\u53ef\u4ee5\u6781\u5927\u5730\u63d0\u5347\u6027\u80fd\u3002\u5728\u521b\u5efa\u5bf9\u8c61\uff08\u5c24\u5176\u662f\u901a\u8fc7\u7f51\u7edc\uff09\u65f6\u95f4\u82b1\u9500\u4e0d\u786e\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u5bf9\u8c61\u6c60\u5728\u53ef\u671f\u65f6\u95f4\u5185\u5c31\u53ef\u4ee5\u83b7\u5f97\u6240\u9700\u7684\u5bf9\u8c61\u3002 \u65e0\u8bba\u5982\u4f55\uff0c\u5bf9\u8c61\u6c60\u6a21\u5f0f\u5728\u9700\u8981\u8017\u65f6\u521b\u5efa\u5bf9\u8c61\u65b9\u9762\uff0c\u4f8b\u5982\u521b\u5efa\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u5957\u63a5\u5b57\u8fde\u63a5\uff0c\u7ebf\u7a0b\u548c\u5927\u578b\u56fe\u5f62\u5bf9\u8c61\uff08\u6bd4\u65b9\u5b57\u4f53\u6216\u4f4d\u56fe\u7b49\uff09\uff0c\u4f7f\u7528\u8d77\u6765\u90fd\u662f\u5927\u6709\u88e8\u76ca\u7684\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7b80\u5355\u7684\u5bf9\u8c61\u6c60\uff08\u65e0\u5916\u90e8\u8d44\u6e90\uff0c\u53ea\u5360\u5185\u5b58\uff09\u53ef\u80fd\u6548\u7387\u4e0d\u9ad8\uff0c\u751a\u81f3\u4f1a\u6709\u635f\u6027\u80fd\u3002 2. UML \u7c7b\u56fe # 3. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4f8b\u5b50 WorkerPool.php <?php namespace DesignPatterns\\Creational\\Pool ; class WorkerPool implements \\Countable { /** * @var StringReverseWorker[] */ private $occupiedWorkers = []; /** * @var StringReverseWorker[] */ private $freeWorkers = []; public function get () : StringReverseWorker { if ( count ( $this -> freeWorkers ) == 0 ) { $worker = new StringReverseWorker (); } else { $worker = array_pop ( $this -> freeWorkers ); } $this -> occupiedWorkers [ spl_object_hash ( $worker )] = $worker ; return $worker ; } public function dispose ( StringReverseWorker $worker ) { $key = spl_object_hash ( $worker ); if ( isset ( $this -> occupiedWorkers [ $key ])) { unset ( $this -> occupiedWorkers [ $key ]); $this -> freeWorkers [ $key ] = $worker ; } } public function count () : int { return count ( $this -> occupiedWorkers ) + count ( $this -> freeWorkers ); } } StringReverseWorker.php <?php namespace DesignPatterns\\Creational\\Pool ; class StringReverseWorker { /** * @var \\DateTime */ private $createdAt ; public function __construct () { $this -> createdAt = new \\DateTime (); } public function run ( string $text ) { return strrev ( $text ); } } 4. \u6d4b\u8bd5 # Tests/PoolTest.php <?php namespace DesignPatterns\\Creational\\Pool\\Tests ; use DesignPatterns\\Creational\\Pool\\WorkerPool ; use PHPUnit\\Framework\\TestCase ; class PoolTest extends TestCase { public function testCanGetNewInstancesWithGet () { $pool = new WorkerPool (); $worker1 = $pool -> get (); $worker2 = $pool -> get (); $this -> assertCount ( 2 , $pool ); $this -> assertNotSame ( $worker1 , $worker2 ); } public function testCanGetSameInstanceTwiceWhenDisposingItFirst () { $pool = new WorkerPool (); $worker1 = $pool -> get (); $pool -> dispose ( $worker1 ); $worker2 = $pool -> get (); $this -> assertCount ( 1 , $pool ); $this -> assertSame ( $worker1 , $worker2 ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Pool/1491","title":"\u5bf9\u8c61\u6c60\u6a21\u5f0f\uff08Pool\uff09"},{"location":"php/php-design-patterns/Pool/#pool","text":"","title":"\u5bf9\u8c61\u6c60\u6a21\u5f0f\uff08Pool\uff09"},{"location":"php/php-design-patterns/Pool/#1","text":"\u5bf9\u8c61\u6c60\u6a21\u5f0f \u662f\u4e00\u79cd\u63d0\u524d\u51c6\u5907\u4e86\u4e00\u7ec4\u5df2\u7ecf\u521d\u59cb\u5316\u4e86\u7684\u5bf9\u8c61\u300e\u6c60\u300f\u800c\u4e0d\u662f\u6309\u9700\u521b\u5efa\u6216\u8005\u9500\u6bc1\u7684\u521b\u5efa\u578b\u8bbe\u8ba1\u6a21\u5f0f\u3002\u5bf9\u8c61\u6c60\u7684\u5ba2\u6237\u7aef\u4f1a\u5411\u5bf9\u8c61\u6c60\u4e2d\u8bf7\u6c42\u4e00\u4e2a\u5bf9\u8c61\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e2a\u8fd4\u56de\u7684\u5bf9\u8c61\u6267\u884c\u76f8\u5173\u64cd\u4f5c\u3002\u5f53\u5ba2\u6237\u7aef\u4f7f\u7528\u5b8c\u6bd5\uff0c\u5b83\u5c06\u628a\u8fd9\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u5de5\u5382\u5bf9\u8c61\u8fd4\u56de\u7ed9\u5bf9\u8c61\u6c60\uff0c\u800c\u4e0d\u662f\u9500\u6bc1\u6389\u8fd9\u4e2a\u5bf9\u8c61\u3002 \u5728\u521d\u59cb\u5316\u5b9e\u4f8b\u6210\u672c\u9ad8\uff0c\u5b9e\u4f8b\u5316\u7387\u9ad8\uff0c\u53ef\u7528\u5b9e\u4f8b\u4e0d\u8db3\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u8c61\u6c60\u53ef\u4ee5\u6781\u5927\u5730\u63d0\u5347\u6027\u80fd\u3002\u5728\u521b\u5efa\u5bf9\u8c61\uff08\u5c24\u5176\u662f\u901a\u8fc7\u7f51\u7edc\uff09\u65f6\u95f4\u82b1\u9500\u4e0d\u786e\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u5bf9\u8c61\u6c60\u5728\u53ef\u671f\u65f6\u95f4\u5185\u5c31\u53ef\u4ee5\u83b7\u5f97\u6240\u9700\u7684\u5bf9\u8c61\u3002 \u65e0\u8bba\u5982\u4f55\uff0c\u5bf9\u8c61\u6c60\u6a21\u5f0f\u5728\u9700\u8981\u8017\u65f6\u521b\u5efa\u5bf9\u8c61\u65b9\u9762\uff0c\u4f8b\u5982\u521b\u5efa\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u5957\u63a5\u5b57\u8fde\u63a5\uff0c\u7ebf\u7a0b\u548c\u5927\u578b\u56fe\u5f62\u5bf9\u8c61\uff08\u6bd4\u65b9\u5b57\u4f53\u6216\u4f4d\u56fe\u7b49\uff09\uff0c\u4f7f\u7528\u8d77\u6765\u90fd\u662f\u5927\u6709\u88e8\u76ca\u7684\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7b80\u5355\u7684\u5bf9\u8c61\u6c60\uff08\u65e0\u5916\u90e8\u8d44\u6e90\uff0c\u53ea\u5360\u5185\u5b58\uff09\u53ef\u80fd\u6548\u7387\u4e0d\u9ad8\uff0c\u751a\u81f3\u4f1a\u6709\u635f\u6027\u80fd\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Pool/#2-uml","text":"","title":"2. UML \u7c7b\u56fe"},{"location":"php/php-design-patterns/Pool/#3","text":"\u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4f8b\u5b50 WorkerPool.php <?php namespace DesignPatterns\\Creational\\Pool ; class WorkerPool implements \\Countable { /** * @var StringReverseWorker[] */ private $occupiedWorkers = []; /** * @var StringReverseWorker[] */ private $freeWorkers = []; public function get () : StringReverseWorker { if ( count ( $this -> freeWorkers ) == 0 ) { $worker = new StringReverseWorker (); } else { $worker = array_pop ( $this -> freeWorkers ); } $this -> occupiedWorkers [ spl_object_hash ( $worker )] = $worker ; return $worker ; } public function dispose ( StringReverseWorker $worker ) { $key = spl_object_hash ( $worker ); if ( isset ( $this -> occupiedWorkers [ $key ])) { unset ( $this -> occupiedWorkers [ $key ]); $this -> freeWorkers [ $key ] = $worker ; } } public function count () : int { return count ( $this -> occupiedWorkers ) + count ( $this -> freeWorkers ); } } StringReverseWorker.php <?php namespace DesignPatterns\\Creational\\Pool ; class StringReverseWorker { /** * @var \\DateTime */ private $createdAt ; public function __construct () { $this -> createdAt = new \\DateTime (); } public function run ( string $text ) { return strrev ( $text ); } }","title":"3. \u4ee3\u7801"},{"location":"php/php-design-patterns/Pool/#4","text":"Tests/PoolTest.php <?php namespace DesignPatterns\\Creational\\Pool\\Tests ; use DesignPatterns\\Creational\\Pool\\WorkerPool ; use PHPUnit\\Framework\\TestCase ; class PoolTest extends TestCase { public function testCanGetNewInstancesWithGet () { $pool = new WorkerPool (); $worker1 = $pool -> get (); $worker2 = $pool -> get (); $this -> assertCount ( 2 , $pool ); $this -> assertNotSame ( $worker1 , $worker2 ); } public function testCanGetSameInstanceTwiceWhenDisposingItFirst () { $pool = new WorkerPool (); $worker1 = $pool -> get (); $pool -> dispose ( $worker1 ); $worker2 = $pool -> get (); $this -> assertCount ( 1 , $pool ); $this -> assertSame ( $worker1 , $worker2 ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Pool/1491","title":"4. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Prototype/","text":"\u539f\u578b\u6a21\u5f0f\uff08Prototype\uff09 # 1. \u76ee\u7684 # \u76f8\u6bd4\u6b63\u5e38\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61 (new Foo()) \uff0c\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u539f\u578b\uff0c\u7136\u540e\u514b\u9686\u5b83\u4f1a\u66f4\u8282\u7701\u5f00\u9500\u3002 2. \u793a\u4f8b # \u5927\u6570\u636e\u91cf ( \u4f8b\u5982\uff1a\u901a\u8fc7 ORM \u6a21\u578b\u4e00\u6b21\u6027\u5f80\u6570\u636e\u5e93\u63d2\u5165 1,000,000 \u6761\u6570\u636e ) \u3002 3. UML \u56fe # 4. \u4ee3\u7801 # \u5b8c\u6574\u4ee3\u7801\u8bf7\u770b GitHub BookPrototype.php <?php namespace DesignPatterns\\Creational\\Prototype ; abstract class BookPrototype { /** * @var string */ protected $title ; /** * @var string */ protected $category ; abstract public function __clone (); public function getTitle () : string { return $this -> title ; } public function setTitle ( $title ) { $this -> title = $title ; } } BarBookPrototype.php <?php namespace DesignPatterns\\Creational\\Prototype ; class BarBookPrototype extends BookPrototype { /** * @var string */ protected $category = 'Bar' ; public function __clone () { } } FooBookPrototype.php <?php namespace DesignPatterns\\Creational\\Prototype ; class FooBookPrototype extends BookPrototype { /** * @var string */ protected $category = 'Foo' ; public function __clone () { } } 5. \u6d4b\u8bd5 # Tests/PrototypeTest.php <?php namespace DesignPatterns\\Creational\\Prototype\\Tests ; use DesignPatterns\\Creational\\Prototype\\BarBookPrototype ; use DesignPatterns\\Creational\\Prototype\\FooBookPrototype ; use PHPUnit\\Framework\\TestCase ; class PrototypeTest extends TestCase { public function testCanGetFooBook () { $fooPrototype = new FooBookPrototype (); $barPrototype = new BarBookPrototype (); for ( $i = 0 ; $i < 10 ; $i ++ ) { $book = clone $fooPrototype ; $book -> setTitle ( 'Foo Book No ' . $i ); $this -> assertInstanceOf ( FooBookPrototype :: class , $book ); } for ( $i = 0 ; $i < 5 ; $i ++ ) { $book = clone $barPrototype ; $book -> setTitle ( 'Bar Book No ' . $i ); $this -> assertInstanceOf ( BarBookPrototype :: class , $book ); } } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Prototype/1492","title":"\u539f\u578b\u6a21\u5f0f\uff08Prototype\uff09"},{"location":"php/php-design-patterns/Prototype/#prototype","text":"","title":"\u539f\u578b\u6a21\u5f0f\uff08Prototype\uff09"},{"location":"php/php-design-patterns/Prototype/#1","text":"\u76f8\u6bd4\u6b63\u5e38\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61 (new Foo()) \uff0c\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u539f\u578b\uff0c\u7136\u540e\u514b\u9686\u5b83\u4f1a\u66f4\u8282\u7701\u5f00\u9500\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Prototype/#2","text":"\u5927\u6570\u636e\u91cf ( \u4f8b\u5982\uff1a\u901a\u8fc7 ORM \u6a21\u578b\u4e00\u6b21\u6027\u5f80\u6570\u636e\u5e93\u63d2\u5165 1,000,000 \u6761\u6570\u636e ) \u3002","title":"2. \u793a\u4f8b"},{"location":"php/php-design-patterns/Prototype/#3-uml","text":"","title":"3. UML \u56fe"},{"location":"php/php-design-patterns/Prototype/#4","text":"\u5b8c\u6574\u4ee3\u7801\u8bf7\u770b GitHub BookPrototype.php <?php namespace DesignPatterns\\Creational\\Prototype ; abstract class BookPrototype { /** * @var string */ protected $title ; /** * @var string */ protected $category ; abstract public function __clone (); public function getTitle () : string { return $this -> title ; } public function setTitle ( $title ) { $this -> title = $title ; } } BarBookPrototype.php <?php namespace DesignPatterns\\Creational\\Prototype ; class BarBookPrototype extends BookPrototype { /** * @var string */ protected $category = 'Bar' ; public function __clone () { } } FooBookPrototype.php <?php namespace DesignPatterns\\Creational\\Prototype ; class FooBookPrototype extends BookPrototype { /** * @var string */ protected $category = 'Foo' ; public function __clone () { } }","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/Prototype/#5","text":"Tests/PrototypeTest.php <?php namespace DesignPatterns\\Creational\\Prototype\\Tests ; use DesignPatterns\\Creational\\Prototype\\BarBookPrototype ; use DesignPatterns\\Creational\\Prototype\\FooBookPrototype ; use PHPUnit\\Framework\\TestCase ; class PrototypeTest extends TestCase { public function testCanGetFooBook () { $fooPrototype = new FooBookPrototype (); $barPrototype = new BarBookPrototype (); for ( $i = 0 ; $i < 10 ; $i ++ ) { $book = clone $fooPrototype ; $book -> setTitle ( 'Foo Book No ' . $i ); $this -> assertInstanceOf ( FooBookPrototype :: class , $book ); } for ( $i = 0 ; $i < 5 ; $i ++ ) { $book = clone $barPrototype ; $book -> setTitle ( 'Bar Book No ' . $i ); $this -> assertInstanceOf ( BarBookPrototype :: class , $book ); } } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Prototype/1492","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Proxy/","text":"\u4ee3\u7406\u6a21\u5f0f\uff08Proxy\uff09 # 1. \u76ee\u7684 # \u94fe\u63a5\u4efb\u4f55\u5177\u6709\u9ad8\u4ef7\u503c\u6216\u65e0\u6cd5\u590d\u5236\u7684\u4ee3\u7801\u3002 2. \u4e3e\u4f8b # Doctrine2 \u4f7f\u7528\u4ee3\u7406\u6765\u5b9e\u73b0\u6846\u67b6\u7684\u201c\u9b54\u672f\u201d\uff08\u4f8b\u5982\uff1a\u5ef6\u8fdf\u52a0\u8f7d\uff09\uff0c\u800c\u7528\u6237\u4ecd\u7136\u4f7f\u7528\u4ed6\u4eec\u81ea\u5df1\u7684\u5b9e\u4f53\u7c7b\u4e14\u4e0d\u4f1a\u4f7f\u7528\u5230\u4ee3\u7406\u3002 3. UML \u56fe # 4. \u4ee3\u7801 # \u6e90\u4ee3\u7801\u5728\u8fd9\u91cc\uff1a GitHub Record.php <?php namespace DesignPatterns\\Structural\\Proxy ; /** * @property \u7528\u6237\u540d */ class Record { /** * @var string[] */ private $data ; /** * @param string[] $data */ public function __construct ( array $data = []) { $this -> data = $data ; } /** * @param string $name * @param string $value */ public function __set ( string $name , string $value ) { $this -> data [ $name ] = $value ; } public function __get ( string $name ) : string { if ( ! isset ( $this -> data [ $name ])) { throw new \\OutOfRangeException ( 'Invalid name given' ); } return $this -> data [ $name ]; } } RecordProxy.php <?php namespace DesignPatterns\\Structural\\Proxy ; class RecordProxy extends Record { /** * @var bool */ private $isDirty = false ; /** * @var bool */ private $isInitialized = false ; /** * @param array $data */ public function __construct ( array $data ) { parent :: __construct ( $data ); // \u5f53\u8bb0\u5f55\u6709\u6570\u636e\u7684\u65f6\u5019\uff0c\u5c06 initialized \u6807\u8bb0\u4e3a true \uff0c // \u56e0\u4e3a\u8bb0\u5f55\u5c06\u4fdd\u5b58\u6211\u4eec\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u6211\u4eec\u4e0d\u5e0c\u671b\u5728 Record \u7c7b\u91cc\u9762\u5b9e\u73b0\u8fd9\u4e2a\u884c\u4e3a // \u800c\u662f\u5728\u7ee7\u627f\u4e86 Record \u7684\u4ee3\u7406\u7c7b\u4e2d\u53bb\u5b9e\u73b0\u3002 if ( count ( $data ) > 0 ) { $this -> isInitialized = true ; $this -> isDirty = true ; } } /** * @param string $name * @param string $value */ public function __set ( string $name , string $value ) { $this -> isDirty = true ; parent :: __set ( $name , $value ); } public function isDirty () : bool { return $this -> isDirty ; } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Proxy/1505","title":"\u4ee3\u7406\u6a21\u5f0f\uff08Proxy\uff09"},{"location":"php/php-design-patterns/Proxy/#proxy","text":"","title":"\u4ee3\u7406\u6a21\u5f0f\uff08Proxy\uff09"},{"location":"php/php-design-patterns/Proxy/#1","text":"\u94fe\u63a5\u4efb\u4f55\u5177\u6709\u9ad8\u4ef7\u503c\u6216\u65e0\u6cd5\u590d\u5236\u7684\u4ee3\u7801\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Proxy/#2","text":"Doctrine2 \u4f7f\u7528\u4ee3\u7406\u6765\u5b9e\u73b0\u6846\u67b6\u7684\u201c\u9b54\u672f\u201d\uff08\u4f8b\u5982\uff1a\u5ef6\u8fdf\u52a0\u8f7d\uff09\uff0c\u800c\u7528\u6237\u4ecd\u7136\u4f7f\u7528\u4ed6\u4eec\u81ea\u5df1\u7684\u5b9e\u4f53\u7c7b\u4e14\u4e0d\u4f1a\u4f7f\u7528\u5230\u4ee3\u7406\u3002","title":"2. \u4e3e\u4f8b"},{"location":"php/php-design-patterns/Proxy/#3-uml","text":"","title":"3. UML \u56fe"},{"location":"php/php-design-patterns/Proxy/#4","text":"\u6e90\u4ee3\u7801\u5728\u8fd9\u91cc\uff1a GitHub Record.php <?php namespace DesignPatterns\\Structural\\Proxy ; /** * @property \u7528\u6237\u540d */ class Record { /** * @var string[] */ private $data ; /** * @param string[] $data */ public function __construct ( array $data = []) { $this -> data = $data ; } /** * @param string $name * @param string $value */ public function __set ( string $name , string $value ) { $this -> data [ $name ] = $value ; } public function __get ( string $name ) : string { if ( ! isset ( $this -> data [ $name ])) { throw new \\OutOfRangeException ( 'Invalid name given' ); } return $this -> data [ $name ]; } } RecordProxy.php <?php namespace DesignPatterns\\Structural\\Proxy ; class RecordProxy extends Record { /** * @var bool */ private $isDirty = false ; /** * @var bool */ private $isInitialized = false ; /** * @param array $data */ public function __construct ( array $data ) { parent :: __construct ( $data ); // \u5f53\u8bb0\u5f55\u6709\u6570\u636e\u7684\u65f6\u5019\uff0c\u5c06 initialized \u6807\u8bb0\u4e3a true \uff0c // \u56e0\u4e3a\u8bb0\u5f55\u5c06\u4fdd\u5b58\u6211\u4eec\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u6211\u4eec\u4e0d\u5e0c\u671b\u5728 Record \u7c7b\u91cc\u9762\u5b9e\u73b0\u8fd9\u4e2a\u884c\u4e3a // \u800c\u662f\u5728\u7ee7\u627f\u4e86 Record \u7684\u4ee3\u7406\u7c7b\u4e2d\u53bb\u5b9e\u73b0\u3002 if ( count ( $data ) > 0 ) { $this -> isInitialized = true ; $this -> isDirty = true ; } } /** * @param string $name * @param string $value */ public function __set ( string $name , string $value ) { $this -> isDirty = true ; parent :: __set ( $name , $value ); } public function isDirty () : bool { return $this -> isDirty ; } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Proxy/1505","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/Registry/","text":"\u6ce8\u518c\u6a21\u5f0f\uff08Registry\uff09 # 1. \u76ee\u7684 # \u76ee\u7684\u662f\u80fd\u591f\u5b58\u50a8\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7ecf\u5e38\u4f7f\u7528\u7684\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528\u53ea\u6709\u9759\u6001\u65b9\u6cd5\u7684\u62bd\u8c61\u7c7b\u6765\u5b9e\u73b0\uff08\u6216\u4f7f\u7528\u5355\u4f8b\u6a21\u5f0f\uff09\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u53ef\u80fd\u4f1a\u5f15\u5165\u5168\u5c40\u7684\u72b6\u6001\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u6765\u907f\u514d\u5b83\u3002 2. \u4f8b\u5b50 # Zend \u6846\u67b6\uff1a Zend_Registry \u5b9e\u73b0\u4e86\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684 logger \u5bf9\u8c61\u548c\u524d\u7aef\u63a7\u5236\u5668\u7b49 Yii \u6846\u67b6\uff1a CWebApplication \u5177\u6709\u5168\u90e8\u5e94\u7528\u7a0b\u5e8f\u7ec4\u4ef6\uff0c\u4f8b\u5982 CWebUser \uff0c CUrlManager \u7b49\u3002 3. UML \u56fe # 4. \u4ee3\u7801 # \u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u6b64\u4ee3\u7801 Registry.php <?php namespace DesignPatterns\\Structural\\Registry ; /** * \u521b\u5efa\u6ce8\u518c\u8868\u62bd\u8c61\u7c7b\u3002 */ abstract class Registry { const LOGGER = 'logger' ; /** * \u8fd9\u91cc\u5c06\u5728\u4f60\u7684\u5e94\u7528\u4e2d\u5f15\u5165\u5168\u5c40\u72b6\u6001\uff0c\u4f46\u662f\u4e0d\u53ef\u4ee5\u88ab\u6a21\u62df\u6d4b\u8bd5\u3002 * \u56e0\u6b64\u88ab\u89c6\u4f5c\u4e00\u79cd\u53cd\u6297\u6a21\u5f0f\uff01\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u8fdb\u884c\u66ff\u6362\uff01 * * @var array * \u5b9a\u4e49\u5b58\u50a8\u503c\u6570\u7ec4\u3002 */ private static $storedValues = []; /** * @var array * \u5b9a\u4e49\u5408\u6cd5\u952e\u540d\u6570\u7ec4\u3002 * \u53ef\u5728\u6b64\u5b9a\u4e49\u7528\u6237\u540d\u552f\u4e00\u6027\u3002 */ private static $allowedKeys = [ self :: LOGGER , ]; /** * @param string $key * @param mixed $value * * @return void * \u8bbe\u7f6e\u952e\u503c\uff0c\u5e76\u4fdd\u5b58\u8fdb $storedValues \u3002 * \u53ef\u89c6\u4f5c\u8bbe\u7f6e\u5bc6\u7801\u3002 */ public static function set ( string $key , $value ) { if ( ! in_array ( $key , self :: $allowedKeys )) { throw new \\InvalidArgumentException ( 'Invalid key given' ); } self :: $storedValues [ $key ] = $value ; } /** * @param string $key * * @return mixed * \u5b9a\u4e49\u83b7\u53d6\u65b9\u6cd5\uff0c\u83b7\u53d6\u5df2\u5b58\u50a8\u7684\u5bf9\u5e94\u952e\u7684\u503c * \u53ef\u89c6\u4f5c\u9a8c\u8bc1\u7528\u6237\u73af\u8282\uff0c\u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5b58\u5728\uff0c\u8fd4\u56de\u5bc6\u7801\uff0c\u540e\u7eed\u9a8c\u8bc1\u5bc6\u7801\u6b63\u786e\u6027\u3002 */ public static function get ( string $key ) { if ( ! in_array ( $key , self :: $allowedKeys ) || ! isset ( self :: $storedValues [ $key ])) { throw new \\InvalidArgumentException ( 'Invalid key given' ); } return self :: $storedValues [ $key ]; } } 5. \u6d4b\u8bd5 # Tests/RegistryTest.php <?php namespace DesignPatterns\\Structural\\Registry\\Tests ; use DesignPatterns\\Structural\\Registry\\Registry ; use stdClass ; use PHPUnit\\Framework\\TestCase ; /** * \u521b\u5efa\u81ea\u52a8\u5316\u6d4b\u8bd5\u5355\u5143\u3002 */ class RegistryTest extends TestCase { public function testSetAndGetLogger () { $key = Registry :: LOGGER ; $logger = new stdClass (); Registry :: set ( $key , $logger ); $storedLogger = Registry :: get ( $key ); $this -> assertSame ( $logger , $storedLogger ); $this -> assertInstanceOf ( stdClass :: class , $storedLogger ); } /** * @expectedException \\InvalidArgumentException */ public function testThrowsExceptionWhenTryingToSetInvalidKey () { Registry :: set ( 'foobar' , new stdClass ()); } /** * \u6ce8 @\u5728\u6b64\u8fd0\u884c\u9694\u79bb\u8fdb\u7a0b\uff1a\u6ca1\u6709\u5b83\u7684\u8bdd\uff0c\u524d\u4e00\u4e2a\u6d4b\u8bd5\u5355\u5143\u53ef\u80fd\u5df2\u7ecf\u8bbe\u7f6e\u5b83\uff0c * \u5e76\u4e14\u6d4b\u8bd5\u5c06\u4e0d\u80fd\u8fd0\u884c\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f60\u5e94\u8be5\u5b9e\u73b0\u4f9d\u8d56\u6ce8\u5165\uff0c * \u56e0\u4e3a\u6ce8\u5165\u7c7b\u4f1a\u5f88\u5bb9\u6613\u88ab\u6d4b\u8bd5\u5355\u5143\u66ff\u4ee3\u3002 * * @runInSeparateProcess * @expectedException \\InvalidArgumentException */ public function testThrowsExceptionWhenTryingToGetNotSetKey () { Registry :: get ( Registry :: LOGGER ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Registry/1506","title":"\u6ce8\u518c\u6a21\u5f0f\uff08Registry\uff09"},{"location":"php/php-design-patterns/Registry/#registry","text":"","title":"\u6ce8\u518c\u6a21\u5f0f\uff08Registry\uff09"},{"location":"php/php-design-patterns/Registry/#1","text":"\u76ee\u7684\u662f\u80fd\u591f\u5b58\u50a8\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7ecf\u5e38\u4f7f\u7528\u7684\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528\u53ea\u6709\u9759\u6001\u65b9\u6cd5\u7684\u62bd\u8c61\u7c7b\u6765\u5b9e\u73b0\uff08\u6216\u4f7f\u7528\u5355\u4f8b\u6a21\u5f0f\uff09\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u53ef\u80fd\u4f1a\u5f15\u5165\u5168\u5c40\u7684\u72b6\u6001\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u6765\u907f\u514d\u5b83\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Registry/#2","text":"Zend \u6846\u67b6\uff1a Zend_Registry \u5b9e\u73b0\u4e86\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684 logger \u5bf9\u8c61\u548c\u524d\u7aef\u63a7\u5236\u5668\u7b49 Yii \u6846\u67b6\uff1a CWebApplication \u5177\u6709\u5168\u90e8\u5e94\u7528\u7a0b\u5e8f\u7ec4\u4ef6\uff0c\u4f8b\u5982 CWebUser \uff0c CUrlManager \u7b49\u3002","title":"2. \u4f8b\u5b50"},{"location":"php/php-design-patterns/Registry/#3-uml","text":"","title":"3. UML \u56fe"},{"location":"php/php-design-patterns/Registry/#4","text":"\u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u6b64\u4ee3\u7801 Registry.php <?php namespace DesignPatterns\\Structural\\Registry ; /** * \u521b\u5efa\u6ce8\u518c\u8868\u62bd\u8c61\u7c7b\u3002 */ abstract class Registry { const LOGGER = 'logger' ; /** * \u8fd9\u91cc\u5c06\u5728\u4f60\u7684\u5e94\u7528\u4e2d\u5f15\u5165\u5168\u5c40\u72b6\u6001\uff0c\u4f46\u662f\u4e0d\u53ef\u4ee5\u88ab\u6a21\u62df\u6d4b\u8bd5\u3002 * \u56e0\u6b64\u88ab\u89c6\u4f5c\u4e00\u79cd\u53cd\u6297\u6a21\u5f0f\uff01\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u8fdb\u884c\u66ff\u6362\uff01 * * @var array * \u5b9a\u4e49\u5b58\u50a8\u503c\u6570\u7ec4\u3002 */ private static $storedValues = []; /** * @var array * \u5b9a\u4e49\u5408\u6cd5\u952e\u540d\u6570\u7ec4\u3002 * \u53ef\u5728\u6b64\u5b9a\u4e49\u7528\u6237\u540d\u552f\u4e00\u6027\u3002 */ private static $allowedKeys = [ self :: LOGGER , ]; /** * @param string $key * @param mixed $value * * @return void * \u8bbe\u7f6e\u952e\u503c\uff0c\u5e76\u4fdd\u5b58\u8fdb $storedValues \u3002 * \u53ef\u89c6\u4f5c\u8bbe\u7f6e\u5bc6\u7801\u3002 */ public static function set ( string $key , $value ) { if ( ! in_array ( $key , self :: $allowedKeys )) { throw new \\InvalidArgumentException ( 'Invalid key given' ); } self :: $storedValues [ $key ] = $value ; } /** * @param string $key * * @return mixed * \u5b9a\u4e49\u83b7\u53d6\u65b9\u6cd5\uff0c\u83b7\u53d6\u5df2\u5b58\u50a8\u7684\u5bf9\u5e94\u952e\u7684\u503c * \u53ef\u89c6\u4f5c\u9a8c\u8bc1\u7528\u6237\u73af\u8282\uff0c\u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5b58\u5728\uff0c\u8fd4\u56de\u5bc6\u7801\uff0c\u540e\u7eed\u9a8c\u8bc1\u5bc6\u7801\u6b63\u786e\u6027\u3002 */ public static function get ( string $key ) { if ( ! in_array ( $key , self :: $allowedKeys ) || ! isset ( self :: $storedValues [ $key ])) { throw new \\InvalidArgumentException ( 'Invalid key given' ); } return self :: $storedValues [ $key ]; } }","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/Registry/#5","text":"Tests/RegistryTest.php <?php namespace DesignPatterns\\Structural\\Registry\\Tests ; use DesignPatterns\\Structural\\Registry\\Registry ; use stdClass ; use PHPUnit\\Framework\\TestCase ; /** * \u521b\u5efa\u81ea\u52a8\u5316\u6d4b\u8bd5\u5355\u5143\u3002 */ class RegistryTest extends TestCase { public function testSetAndGetLogger () { $key = Registry :: LOGGER ; $logger = new stdClass (); Registry :: set ( $key , $logger ); $storedLogger = Registry :: get ( $key ); $this -> assertSame ( $logger , $storedLogger ); $this -> assertInstanceOf ( stdClass :: class , $storedLogger ); } /** * @expectedException \\InvalidArgumentException */ public function testThrowsExceptionWhenTryingToSetInvalidKey () { Registry :: set ( 'foobar' , new stdClass ()); } /** * \u6ce8 @\u5728\u6b64\u8fd0\u884c\u9694\u79bb\u8fdb\u7a0b\uff1a\u6ca1\u6709\u5b83\u7684\u8bdd\uff0c\u524d\u4e00\u4e2a\u6d4b\u8bd5\u5355\u5143\u53ef\u80fd\u5df2\u7ecf\u8bbe\u7f6e\u5b83\uff0c * \u5e76\u4e14\u6d4b\u8bd5\u5c06\u4e0d\u80fd\u8fd0\u884c\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f60\u5e94\u8be5\u5b9e\u73b0\u4f9d\u8d56\u6ce8\u5165\uff0c * \u56e0\u4e3a\u6ce8\u5165\u7c7b\u4f1a\u5f88\u5bb9\u6613\u88ab\u6d4b\u8bd5\u5355\u5143\u66ff\u4ee3\u3002 * * @runInSeparateProcess * @expectedException \\InvalidArgumentException */ public function testThrowsExceptionWhenTryingToGetNotSetKey () { Registry :: get ( Registry :: LOGGER ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Registry/1506","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Repository/","text":"\u8d44\u6e90\u5e93\u6a21\u5f0f\uff08Repository\uff09 # 1. \u76ee\u7684 # \u8be5\u6a21\u5f0f\u901a\u8fc7\u63d0\u4f9b\u96c6\u5408\u98ce\u683c\u7684\u63a5\u53e3\u6765\u8bbf\u95ee\u9886\u57df\u5bf9\u8c61\uff0c\u4ece\u800c\u534f\u8c03\u9886\u57df\u548c\u6570\u636e\u6620\u5c04\u5c42\u3002 \u8d44\u6599\u5e93\u6a21\u5f0f\u5c01\u88c5\u4e86\u4e00\u7ec4\u5b58\u50a8\u5728\u6570\u636e\u5b58\u50a8\u5668\u91cc\u7684\u5bf9\u8c61\u548c\u64cd\u4f5c\u5b83\u4eec\u7684\u65b9\u9762\uff0c\u8fd9\u6837\u5b50\u4e3a\u6570\u636e\u6301\u4e45\u5316\u5c42\u63d0\u4f9b\u4e86\u66f4\u52a0\u9762\u5411\u5bf9\u8c61\u7684\u89c6\u89d2\u3002\u8d44\u6599\u5e93\u6a21\u5f0f\u540c\u65f6\u4e5f\u8fbe\u5230\u4e86\u9886\u57df\u5c42\u4e0e\u6570\u636e\u6620\u5c04\u5c42\u4e4b\u95f4\u6e05\u6670\u5206\u79bb\uff0c\u5355\u5411\u4f9d\u8d56\u7684\u76ee\u7684\u3002 2. \u4f8b\u5b50 # Doctrine 2 ORM: \u901a\u8fc7\u8d44\u6599\u5e93\u534f\u8c03\u5b9e\u4f53\u548c DBAL\uff0c\u5b83\u5305\u542b\u68c0\u7d22\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002 Laravel \u6846\u67b6 3. UML \u56fe # 4. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 Post.php <?php namespace DesignPatterns\\More\\Repository ; class Post { /** * @var int|null */ private $id ; /** * @var string */ private $title ; /** * @var string */ private $text ; public static function fromState ( array $state ) : Post { return new self ( $state [ 'id' ], $state [ 'title' ], $state [ 'text' ] ); } /** * @param int|null $id * @param string $text * @param string $title */ public function __construct ( $id , string $title , string $text ) { $this -> id = $id ; $this -> text = $text ; $this -> title = $title ; } public function setId ( int $id ) { $this -> id = $id ; } public function getId () : int { return $this -> id ; } public function getText () : string { return $this -> text ; } public function getTitle () : string { return $this -> title ; } } PostRepository.php <?php namespace DesignPatterns\\More\\Repository ; /** * \u8fd9\u4e2a\u7c7b\u4f4d\u4e8e\u5b9e\u4f53\u5c42\uff08Post \u7c7b\uff09\u548c\u8bbf\u95ee\u5bf9\u8c61\u5c42\uff08\u5185\u5b58\uff09\u4e4b\u95f4\u3002 * * \u8d44\u6e90\u5e93\u5c01\u88c5\u4e86\u5b58\u50a8\u5728\u6570\u636e\u5b58\u50a8\u4e2d\u7684\u5bf9\u8c61\u96c6\u4ee5\u53ca\u4ed6\u4eec\u7684\u64cd\u4f5c\u6267\u884c * \u4e3a\u6301\u4e45\u5c42\u63d0\u4f9b\u66f4\u52a0\u9762\u5411\u5bf9\u8c61\u7684\u89c6\u56fe * * \u5728\u57df\u548c\u6570\u636e\u6620\u5c04\u5c42\u4e4b\u95f4\uff0c\u8d44\u6e90\u5e93\u8fd8\u652f\u6301\u5b9e\u73b0\u5b8c\u5168\u5206\u79bb\u548c\u5355\u5411\u4f9d\u8d56\u7684\u76ee\u6807\u3002 * */ class PostRepository { /** * @var MemoryStorage */ private $persistence ; public function __construct ( MemoryStorage $persistence ) { $this -> persistence = $persistence ; } public function findById ( int $id ) : Post { $arrayData = $this -> persistence -> retrieve ( $id ); if ( is_null ( $arrayData )) { throw new \\InvalidArgumentException ( sprintf ( 'Post with ID %d does not exist' , $id )); } return Post :: fromState ( $arrayData ); } public function save ( Post $post ) { $id = $this -> persistence -> persist ([ 'text' => $post -> getText (), 'title' => $post -> getTitle (), ]); $post -> setId ( $id ); } } MemoryStorage.php <?php namespace DesignPatterns\\More\\Repository ; class MemoryStorage { /** * @var array */ private $data = []; /** * @var int */ private $lastId = 0 ; public function persist ( array $data ) : int { $this -> lastId ++ ; $data [ 'id' ] = $this -> lastId ; $this -> data [ $this -> lastId ] = $data ; return $this -> lastId ; } public function retrieve ( int $id ) : array { if ( ! isset ( $this -> data [ $id ])) { throw new \\OutOfRangeException ( sprintf ( 'No data found for ID %d' , $id )); } return $this -> data [ $id ]; } public function delete ( int $id ) { if ( ! isset ( $this -> data [ $id ])) { throw new \\OutOfRangeException ( sprintf ( 'No data found for ID %d' , $id )); } unset ( $this -> data [ $id ]); } } 5. \u6d4b\u8bd5 # Tests/RepositoryTest.php <?php namespace DesignPatterns\\More\\Repository\\Tests ; use DesignPatterns\\More\\Repository\\MemoryStorage ; use DesignPatterns\\More\\Repository\\Post ; use DesignPatterns\\More\\Repository\\PostRepository ; use PHPUnit\\Framework\\TestCase ; class RepositoryTest extends TestCase { public function testCanPersistAndFindPost () { $repository = new PostRepository ( new MemoryStorage ()); $post = new Post ( null , 'Repository Pattern' , 'Design Patterns PHP' ); $repository -> save ( $post ); $this -> assertEquals ( 1 , $post -> getId ()); $this -> assertEquals ( $post -> getId (), $repository -> findById ( 1 ) -> getId ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Repository/1522","title":"\u8d44\u6e90\u5e93\u6a21\u5f0f\uff08Repository\uff09"},{"location":"php/php-design-patterns/Repository/#repository","text":"","title":"\u8d44\u6e90\u5e93\u6a21\u5f0f\uff08Repository\uff09"},{"location":"php/php-design-patterns/Repository/#1","text":"\u8be5\u6a21\u5f0f\u901a\u8fc7\u63d0\u4f9b\u96c6\u5408\u98ce\u683c\u7684\u63a5\u53e3\u6765\u8bbf\u95ee\u9886\u57df\u5bf9\u8c61\uff0c\u4ece\u800c\u534f\u8c03\u9886\u57df\u548c\u6570\u636e\u6620\u5c04\u5c42\u3002 \u8d44\u6599\u5e93\u6a21\u5f0f\u5c01\u88c5\u4e86\u4e00\u7ec4\u5b58\u50a8\u5728\u6570\u636e\u5b58\u50a8\u5668\u91cc\u7684\u5bf9\u8c61\u548c\u64cd\u4f5c\u5b83\u4eec\u7684\u65b9\u9762\uff0c\u8fd9\u6837\u5b50\u4e3a\u6570\u636e\u6301\u4e45\u5316\u5c42\u63d0\u4f9b\u4e86\u66f4\u52a0\u9762\u5411\u5bf9\u8c61\u7684\u89c6\u89d2\u3002\u8d44\u6599\u5e93\u6a21\u5f0f\u540c\u65f6\u4e5f\u8fbe\u5230\u4e86\u9886\u57df\u5c42\u4e0e\u6570\u636e\u6620\u5c04\u5c42\u4e4b\u95f4\u6e05\u6670\u5206\u79bb\uff0c\u5355\u5411\u4f9d\u8d56\u7684\u76ee\u7684\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Repository/#2","text":"Doctrine 2 ORM: \u901a\u8fc7\u8d44\u6599\u5e93\u534f\u8c03\u5b9e\u4f53\u548c DBAL\uff0c\u5b83\u5305\u542b\u68c0\u7d22\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002 Laravel \u6846\u67b6","title":"2. \u4f8b\u5b50"},{"location":"php/php-design-patterns/Repository/#3-uml","text":"","title":"3. UML \u56fe"},{"location":"php/php-design-patterns/Repository/#4","text":"\u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 Post.php <?php namespace DesignPatterns\\More\\Repository ; class Post { /** * @var int|null */ private $id ; /** * @var string */ private $title ; /** * @var string */ private $text ; public static function fromState ( array $state ) : Post { return new self ( $state [ 'id' ], $state [ 'title' ], $state [ 'text' ] ); } /** * @param int|null $id * @param string $text * @param string $title */ public function __construct ( $id , string $title , string $text ) { $this -> id = $id ; $this -> text = $text ; $this -> title = $title ; } public function setId ( int $id ) { $this -> id = $id ; } public function getId () : int { return $this -> id ; } public function getText () : string { return $this -> text ; } public function getTitle () : string { return $this -> title ; } } PostRepository.php <?php namespace DesignPatterns\\More\\Repository ; /** * \u8fd9\u4e2a\u7c7b\u4f4d\u4e8e\u5b9e\u4f53\u5c42\uff08Post \u7c7b\uff09\u548c\u8bbf\u95ee\u5bf9\u8c61\u5c42\uff08\u5185\u5b58\uff09\u4e4b\u95f4\u3002 * * \u8d44\u6e90\u5e93\u5c01\u88c5\u4e86\u5b58\u50a8\u5728\u6570\u636e\u5b58\u50a8\u4e2d\u7684\u5bf9\u8c61\u96c6\u4ee5\u53ca\u4ed6\u4eec\u7684\u64cd\u4f5c\u6267\u884c * \u4e3a\u6301\u4e45\u5c42\u63d0\u4f9b\u66f4\u52a0\u9762\u5411\u5bf9\u8c61\u7684\u89c6\u56fe * * \u5728\u57df\u548c\u6570\u636e\u6620\u5c04\u5c42\u4e4b\u95f4\uff0c\u8d44\u6e90\u5e93\u8fd8\u652f\u6301\u5b9e\u73b0\u5b8c\u5168\u5206\u79bb\u548c\u5355\u5411\u4f9d\u8d56\u7684\u76ee\u6807\u3002 * */ class PostRepository { /** * @var MemoryStorage */ private $persistence ; public function __construct ( MemoryStorage $persistence ) { $this -> persistence = $persistence ; } public function findById ( int $id ) : Post { $arrayData = $this -> persistence -> retrieve ( $id ); if ( is_null ( $arrayData )) { throw new \\InvalidArgumentException ( sprintf ( 'Post with ID %d does not exist' , $id )); } return Post :: fromState ( $arrayData ); } public function save ( Post $post ) { $id = $this -> persistence -> persist ([ 'text' => $post -> getText (), 'title' => $post -> getTitle (), ]); $post -> setId ( $id ); } } MemoryStorage.php <?php namespace DesignPatterns\\More\\Repository ; class MemoryStorage { /** * @var array */ private $data = []; /** * @var int */ private $lastId = 0 ; public function persist ( array $data ) : int { $this -> lastId ++ ; $data [ 'id' ] = $this -> lastId ; $this -> data [ $this -> lastId ] = $data ; return $this -> lastId ; } public function retrieve ( int $id ) : array { if ( ! isset ( $this -> data [ $id ])) { throw new \\OutOfRangeException ( sprintf ( 'No data found for ID %d' , $id )); } return $this -> data [ $id ]; } public function delete ( int $id ) { if ( ! isset ( $this -> data [ $id ])) { throw new \\OutOfRangeException ( sprintf ( 'No data found for ID %d' , $id )); } unset ( $this -> data [ $id ]); } }","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/Repository/#5","text":"Tests/RepositoryTest.php <?php namespace DesignPatterns\\More\\Repository\\Tests ; use DesignPatterns\\More\\Repository\\MemoryStorage ; use DesignPatterns\\More\\Repository\\Post ; use DesignPatterns\\More\\Repository\\PostRepository ; use PHPUnit\\Framework\\TestCase ; class RepositoryTest extends TestCase { public function testCanPersistAndFindPost () { $repository = new PostRepository ( new MemoryStorage ()); $post = new Post ( null , 'Repository Pattern' , 'Design Patterns PHP' ); $repository -> save ( $post ); $this -> assertEquals ( 1 , $post -> getId ()); $this -> assertEquals ( $post -> getId (), $repository -> findById ( 1 ) -> getId ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Repository/1522","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/ServiceLocator/","text":"\u670d\u52a1\u5b9a\u4f4d\u5668\u6a21\u5f0f\uff08Service Locator\uff09 # \u670d\u52a1\u5b9a\u4f4d\u5668\u6a21\u5f0f\u88ab\u8ba4\u4e3a\u662f\u4e00\u79cd\u53cd\u9762\u6a21\u5f0f\uff01 \u670d\u52a1\u5b9a\u4f4d\u5668\u6a21\u5f0f\u88ab\u4e00\u4e9b\u4eba\u8ba4\u4e3a\u662f\u4e00\u79cd\u53cd\u9762\u6a21\u5f0f\u3002\u5b83\u8fdd\u53cd\u4e86\u4f9d\u8d56\u5012\u7f6e\u539f\u5219\u3002\u8be5\u6a21\u5f0f\u9690\u85cf\u7c7b\u7684\u4f9d\u8d56\uff0c\u800c\u4e0d\u662f\u66b4\u9732\u4f9d\u8d56\uff08\u5982\u679c\u66b4\u9732\u53ef\u901a\u8fc7\u4f9d\u8d56\u6ce8\u5165\u7684\u65b9\u5f0f\u6ce8\u5165\u4f9d\u8d56\uff09\u3002\u5f53\u67d0\u9879\u670d\u52a1\u7684\u4f9d\u8d56\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u4f7f\u7528\u8be5\u670d\u52a1\u7684\u7c7b\u7684\u529f\u80fd\u5c06\u9762\u4e34\u88ab\u7834\u574f\u7684\u98ce\u9669\uff0c\u6700\u7ec8\u5bfc\u81f4\u7cfb\u7edf\u96be\u4ee5\u7ef4\u62a4\u3002 1. \u76ee\u7684 # \u670d\u52a1\u5b9a\u4f4d\u5668\u6a21\u5f0f\u80fd\u591f\u964d\u4f4e\u4ee3\u7801\u7684\u8026\u5408\u5ea6\uff0c\u4ee5\u4fbf\u83b7\u5f97\u53ef\u6d4b\u8bd5\u3001\u53ef\u7ef4\u62a4\u548c\u53ef\u6269\u5c55\u7684\u4ee3\u7801\u3002DI \u6a21\u5f0f\u548c\u670d\u52a1\u5b9a\u4f4d\u5668\u6a21\u5f0f\u662f IOC \u6a21\u5f0f\u7684\u4e00\u79cd\u5b9e\u73b0\u3002 2. \u7528\u6cd5 # \u4f7f\u7528 ServiceLocator \uff0c\u4f60\u53ef\u4ee5\u4e3a\u7ed9\u5b9a\u7684 interface \u6ce8\u518c\u4e00\u4e2a\u670d\u52a1\u3002\u901a\u8fc7\u4f7f\u7528\u8fd9\u4e2a interface \uff0c\u4f60\u4e0d\u9700\u8981\u77e5\u9053\u8be5\u670d\u52a1\u7684\u5b9e\u73b0\u7ec6\u8282\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6\u5e76\u5728\u4f60\u5e94\u7528\u4e2d\u4f7f\u7528\u8be5\u670d\u52a1\u3002\u4f60\u53ef\u4ee5\u5728\u5f15\u5bfc\u7a0b\u5e8f\u4e2d\u914d\u7f6e\u548c\u6ce8\u5165\u670d\u52a1\u5b9a\u4f4d\u5668\u5bf9\u8c61\u3002 3. \u4f8b\u5b50 # Zend Framework2 \u4f7f\u7528\u670d\u52a1\u5b9a\u4f4d\u5668\u521b\u5efa\u548c\u5171\u4eab\u6846\u67b6\u4e2d\u4f7f\u7528\u7684\u670d\u52a1\uff08 EventManager \uff0c ModuleManager \uff0c\u4ee5\u53ca\u7531\u6a21\u5757\u63d0\u4f9b\u7684\u7528\u6237\u81ea\u5b9a\u4e49\u670d\u52a1\u7b49\uff09 4. UML \u56fe # 5. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 ServiceLocator.php <?php namespace DesignPatterns\\More\\ServiceLocator ; class ServiceLocator { /** * @var array */ private $services = []; /** * @var array */ private $instantiated = []; /** * @var array */ private $shared = []; /** * \u76f8\u6bd4\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u7c7b\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4e3a\u63a5\u53e3\u5b58\u50a8\u4e00\u4e2a\u670d\u52a1\u3002 * * @param string $class * @param object $service * @param bool $share */ public function addInstance ( string $class , $service , bool $share = true ) { $this -> services [ $class ] = $service ; $this -> instantiated [ $class ] = $service ; $this -> shared [ $class ] = $share ; } /** * \u76f8\u6bd4\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u7c7b\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4e3a\u63a5\u53e3\u5b58\u50a8\u4e00\u4e2a\u670d\u52a1\u3002 * * @param string $class * @param array $params * @param bool $share */ public function addClass ( string $class , array $params , bool $share = true ) { $this -> services [ $class ] = $params ; $this -> shared [ $class ] = $share ; } public function has ( string $interface ) : bool { } /** * @param string $class * * @return object */ public function get ( string $class ) { if ( isset ( $this -> instantiated [ $class ]) && $this -> shared [ $class ]) { return $this -> instantiated [ $class ]; } $args = $this -> services [ $class ]; switch ( count ( $args )) { case 0 : $object = new $class (); break ; case 1 : $object = new $class ( $args [ 0 ]); break ; case 2 : $object = new $class ( $args [ 0 ], $args [ 1 ]); break ; case 3 : $object = new $class ( $args [ 0 ], $args [ 1 ], $args [ 2 ]); break ; default : throw new \\OutOfRangeException ( 'Too many arguments given' ); } if ( $this -> shared [ $class ]) { $this -> instantiated [ $class ] = $object ; } return $object ; } } LogService.php <?php namespace DesignPatterns\\More\\ServiceLocator ; class LogService { } 6. \u6d4b\u8bd5 # Tests/ServiceLocatorTest.php <?php namespace DesignPatterns\\More\\ServiceLocator\\Tests ; use DesignPatterns\\More\\ServiceLocator\\LogService ; use DesignPatterns\\More\\ServiceLocator\\ServiceLocator ; use PHPUnit\\Framework\\TestCase ; class ServiceLocatorTest extends TestCase { /** * @var ServiceLocator */ private $serviceLocator ; public function setUp () { $this -> serviceLocator = new ServiceLocator (); } public function testHasServices () { $this -> serviceLocator -> addInstance ( LogService :: class , new LogService ()); $this -> assertTrue ( $this -> serviceLocator -> has ( LogService :: class )); $this -> assertFalse ( $this -> serviceLocator -> has ( self :: class )); } public function testGetWillInstantiateLogServiceIfNoInstanceHasBeenCreatedYet () { $this -> serviceLocator -> addClass ( LogService :: class , []); $logger = $this -> serviceLocator -> get ( LogService :: class ); $this -> assertInstanceOf ( LogService :: class , $logger ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/ServiceLocator/1521","title":"\u670d\u52a1\u5b9a\u4f4d\u5668\u6a21\u5f0f\uff08Service Locator\uff09"},{"location":"php/php-design-patterns/ServiceLocator/#service-locator","text":"\u670d\u52a1\u5b9a\u4f4d\u5668\u6a21\u5f0f\u88ab\u8ba4\u4e3a\u662f\u4e00\u79cd\u53cd\u9762\u6a21\u5f0f\uff01 \u670d\u52a1\u5b9a\u4f4d\u5668\u6a21\u5f0f\u88ab\u4e00\u4e9b\u4eba\u8ba4\u4e3a\u662f\u4e00\u79cd\u53cd\u9762\u6a21\u5f0f\u3002\u5b83\u8fdd\u53cd\u4e86\u4f9d\u8d56\u5012\u7f6e\u539f\u5219\u3002\u8be5\u6a21\u5f0f\u9690\u85cf\u7c7b\u7684\u4f9d\u8d56\uff0c\u800c\u4e0d\u662f\u66b4\u9732\u4f9d\u8d56\uff08\u5982\u679c\u66b4\u9732\u53ef\u901a\u8fc7\u4f9d\u8d56\u6ce8\u5165\u7684\u65b9\u5f0f\u6ce8\u5165\u4f9d\u8d56\uff09\u3002\u5f53\u67d0\u9879\u670d\u52a1\u7684\u4f9d\u8d56\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u4f7f\u7528\u8be5\u670d\u52a1\u7684\u7c7b\u7684\u529f\u80fd\u5c06\u9762\u4e34\u88ab\u7834\u574f\u7684\u98ce\u9669\uff0c\u6700\u7ec8\u5bfc\u81f4\u7cfb\u7edf\u96be\u4ee5\u7ef4\u62a4\u3002","title":"\u670d\u52a1\u5b9a\u4f4d\u5668\u6a21\u5f0f\uff08Service Locator\uff09"},{"location":"php/php-design-patterns/ServiceLocator/#1","text":"\u670d\u52a1\u5b9a\u4f4d\u5668\u6a21\u5f0f\u80fd\u591f\u964d\u4f4e\u4ee3\u7801\u7684\u8026\u5408\u5ea6\uff0c\u4ee5\u4fbf\u83b7\u5f97\u53ef\u6d4b\u8bd5\u3001\u53ef\u7ef4\u62a4\u548c\u53ef\u6269\u5c55\u7684\u4ee3\u7801\u3002DI \u6a21\u5f0f\u548c\u670d\u52a1\u5b9a\u4f4d\u5668\u6a21\u5f0f\u662f IOC \u6a21\u5f0f\u7684\u4e00\u79cd\u5b9e\u73b0\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/ServiceLocator/#2","text":"\u4f7f\u7528 ServiceLocator \uff0c\u4f60\u53ef\u4ee5\u4e3a\u7ed9\u5b9a\u7684 interface \u6ce8\u518c\u4e00\u4e2a\u670d\u52a1\u3002\u901a\u8fc7\u4f7f\u7528\u8fd9\u4e2a interface \uff0c\u4f60\u4e0d\u9700\u8981\u77e5\u9053\u8be5\u670d\u52a1\u7684\u5b9e\u73b0\u7ec6\u8282\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6\u5e76\u5728\u4f60\u5e94\u7528\u4e2d\u4f7f\u7528\u8be5\u670d\u52a1\u3002\u4f60\u53ef\u4ee5\u5728\u5f15\u5bfc\u7a0b\u5e8f\u4e2d\u914d\u7f6e\u548c\u6ce8\u5165\u670d\u52a1\u5b9a\u4f4d\u5668\u5bf9\u8c61\u3002","title":"2. \u7528\u6cd5"},{"location":"php/php-design-patterns/ServiceLocator/#3","text":"Zend Framework2 \u4f7f\u7528\u670d\u52a1\u5b9a\u4f4d\u5668\u521b\u5efa\u548c\u5171\u4eab\u6846\u67b6\u4e2d\u4f7f\u7528\u7684\u670d\u52a1\uff08 EventManager \uff0c ModuleManager \uff0c\u4ee5\u53ca\u7531\u6a21\u5757\u63d0\u4f9b\u7684\u7528\u6237\u81ea\u5b9a\u4e49\u670d\u52a1\u7b49\uff09","title":"3. \u4f8b\u5b50"},{"location":"php/php-design-patterns/ServiceLocator/#4-uml","text":"","title":"4. UML \u56fe"},{"location":"php/php-design-patterns/ServiceLocator/#5","text":"\u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 ServiceLocator.php <?php namespace DesignPatterns\\More\\ServiceLocator ; class ServiceLocator { /** * @var array */ private $services = []; /** * @var array */ private $instantiated = []; /** * @var array */ private $shared = []; /** * \u76f8\u6bd4\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u7c7b\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4e3a\u63a5\u53e3\u5b58\u50a8\u4e00\u4e2a\u670d\u52a1\u3002 * * @param string $class * @param object $service * @param bool $share */ public function addInstance ( string $class , $service , bool $share = true ) { $this -> services [ $class ] = $service ; $this -> instantiated [ $class ] = $service ; $this -> shared [ $class ] = $share ; } /** * \u76f8\u6bd4\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u7c7b\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4e3a\u63a5\u53e3\u5b58\u50a8\u4e00\u4e2a\u670d\u52a1\u3002 * * @param string $class * @param array $params * @param bool $share */ public function addClass ( string $class , array $params , bool $share = true ) { $this -> services [ $class ] = $params ; $this -> shared [ $class ] = $share ; } public function has ( string $interface ) : bool { } /** * @param string $class * * @return object */ public function get ( string $class ) { if ( isset ( $this -> instantiated [ $class ]) && $this -> shared [ $class ]) { return $this -> instantiated [ $class ]; } $args = $this -> services [ $class ]; switch ( count ( $args )) { case 0 : $object = new $class (); break ; case 1 : $object = new $class ( $args [ 0 ]); break ; case 2 : $object = new $class ( $args [ 0 ], $args [ 1 ]); break ; case 3 : $object = new $class ( $args [ 0 ], $args [ 1 ], $args [ 2 ]); break ; default : throw new \\OutOfRangeException ( 'Too many arguments given' ); } if ( $this -> shared [ $class ]) { $this -> instantiated [ $class ] = $object ; } return $object ; } } LogService.php <?php namespace DesignPatterns\\More\\ServiceLocator ; class LogService { }","title":"5. \u4ee3\u7801"},{"location":"php/php-design-patterns/ServiceLocator/#6","text":"Tests/ServiceLocatorTest.php <?php namespace DesignPatterns\\More\\ServiceLocator\\Tests ; use DesignPatterns\\More\\ServiceLocator\\LogService ; use DesignPatterns\\More\\ServiceLocator\\ServiceLocator ; use PHPUnit\\Framework\\TestCase ; class ServiceLocatorTest extends TestCase { /** * @var ServiceLocator */ private $serviceLocator ; public function setUp () { $this -> serviceLocator = new ServiceLocator (); } public function testHasServices () { $this -> serviceLocator -> addInstance ( LogService :: class , new LogService ()); $this -> assertTrue ( $this -> serviceLocator -> has ( LogService :: class )); $this -> assertFalse ( $this -> serviceLocator -> has ( self :: class )); } public function testGetWillInstantiateLogServiceIfNoInstanceHasBeenCreatedYet () { $this -> serviceLocator -> addClass ( LogService :: class , []); $logger = $this -> serviceLocator -> get ( LogService :: class ); $this -> assertInstanceOf ( LogService :: class , $logger ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/ServiceLocator/1521","title":"6. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/SimpleFactory/","text":"\u7b80\u5355\u5de5\u5382\u6a21\u5f0f\uff08Simple Factory\uff09 # 1. \u76ee\u7684 # \u7b80\u5355\u5de5\u5382\u6a21\u5f0f\u662f\u4e00\u4e2a\u7cbe\u7b80\u7248\u7684\u5de5\u5382\u6a21\u5f0f\u3002 \u5b83\u4e0e\u9759\u6001\u5de5\u5382\u6a21\u5f0f\u6700\u5927\u7684\u533a\u522b\u662f\u5b83\u4e0d\u662f\u300e\u9759\u6001\u300f\u7684\u3002\u56e0\u4e3a\u975e\u9759\u6001\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u4e0d\u540c\u53c2\u6570\u7684\u5de5\u5382\uff0c\u4f60\u53ef\u4ee5\u4e3a\u5176\u521b\u5efa\u5b50\u7c7b\u3002\u751a\u81f3\u53ef\u4ee5\u6a21\u62df\uff08Mock\uff09\u4ed6\uff0c\u8fd9\u5bf9\u7f16\u5199\u53ef\u6d4b\u8bd5\u7684\u4ee3\u7801\u6765\u8bb2\u81f3\u5173\u91cd\u8981\u3002 \u8fd9\u4e5f\u662f\u5b83\u6bd4\u9759\u6001\u5de5\u5382\u6a21\u5f0f\u53d7\u6b22\u8fce\u7684\u539f\u56e0\uff01 2. UML \u56fe # 3. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728 GitHub \u67e5\u770b\u8fd9\u6bb5\u4ee3\u7801\u3002 SimpleFactory.php <?php namespace DesignPatterns\\Creational\\SimpleFactory ; class SimpleFactory { public function createBicycle () : Bicycle { return new Bicycle (); } } Bicycle.php <?php namespace DesignPatterns\\Creational\\SimpleFactory ; class Bicycle { public function driveTo ( string $destination ) { } } 4. \u7528\u6cd5 # <?php $factory = new SimpleFactory (); $bicycle = $factory -> createBicycle (); $bicycle -> driveTo ( 'Paris' ); 5. \u6d4b\u8bd5 # Tests/SimpleFactoryTest.php <?php namespace DesignPatterns\\Creational\\SimpleFactory\\Tests ; use DesignPatterns\\Creational\\SimpleFactory\\Bicycle ; use DesignPatterns\\Creational\\SimpleFactory\\SimpleFactory ; use PHPUnit\\Framework\\TestCase ; class SimpleFactoryTest extends TestCase { public function testCanCreateBicycle () { $bicycle = ( new SimpleFactory ()) -> createBicycle (); $this -> assertInstanceOf ( Bicycle :: class , $bicycle ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/SimpleFactory/1493","title":"\u7b80\u5355\u5de5\u5382\u6a21\u5f0f\uff08Simple Factory\uff09"},{"location":"php/php-design-patterns/SimpleFactory/#simple-factory","text":"","title":"\u7b80\u5355\u5de5\u5382\u6a21\u5f0f\uff08Simple Factory\uff09"},{"location":"php/php-design-patterns/SimpleFactory/#1","text":"\u7b80\u5355\u5de5\u5382\u6a21\u5f0f\u662f\u4e00\u4e2a\u7cbe\u7b80\u7248\u7684\u5de5\u5382\u6a21\u5f0f\u3002 \u5b83\u4e0e\u9759\u6001\u5de5\u5382\u6a21\u5f0f\u6700\u5927\u7684\u533a\u522b\u662f\u5b83\u4e0d\u662f\u300e\u9759\u6001\u300f\u7684\u3002\u56e0\u4e3a\u975e\u9759\u6001\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u4e0d\u540c\u53c2\u6570\u7684\u5de5\u5382\uff0c\u4f60\u53ef\u4ee5\u4e3a\u5176\u521b\u5efa\u5b50\u7c7b\u3002\u751a\u81f3\u53ef\u4ee5\u6a21\u62df\uff08Mock\uff09\u4ed6\uff0c\u8fd9\u5bf9\u7f16\u5199\u53ef\u6d4b\u8bd5\u7684\u4ee3\u7801\u6765\u8bb2\u81f3\u5173\u91cd\u8981\u3002 \u8fd9\u4e5f\u662f\u5b83\u6bd4\u9759\u6001\u5de5\u5382\u6a21\u5f0f\u53d7\u6b22\u8fce\u7684\u539f\u56e0\uff01","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/SimpleFactory/#2-uml","text":"","title":"2. UML \u56fe"},{"location":"php/php-design-patterns/SimpleFactory/#3","text":"\u4f60\u53ef\u4ee5\u5728 GitHub \u67e5\u770b\u8fd9\u6bb5\u4ee3\u7801\u3002 SimpleFactory.php <?php namespace DesignPatterns\\Creational\\SimpleFactory ; class SimpleFactory { public function createBicycle () : Bicycle { return new Bicycle (); } } Bicycle.php <?php namespace DesignPatterns\\Creational\\SimpleFactory ; class Bicycle { public function driveTo ( string $destination ) { } }","title":"3. \u4ee3\u7801"},{"location":"php/php-design-patterns/SimpleFactory/#4","text":"<?php $factory = new SimpleFactory (); $bicycle = $factory -> createBicycle (); $bicycle -> driveTo ( 'Paris' );","title":"4. \u7528\u6cd5"},{"location":"php/php-design-patterns/SimpleFactory/#5","text":"Tests/SimpleFactoryTest.php <?php namespace DesignPatterns\\Creational\\SimpleFactory\\Tests ; use DesignPatterns\\Creational\\SimpleFactory\\Bicycle ; use DesignPatterns\\Creational\\SimpleFactory\\SimpleFactory ; use PHPUnit\\Framework\\TestCase ; class SimpleFactoryTest extends TestCase { public function testCanCreateBicycle () { $bicycle = ( new SimpleFactory ()) -> createBicycle (); $this -> assertInstanceOf ( Bicycle :: class , $bicycle ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/SimpleFactory/1493","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Singleton/","text":"\u5355\u4f8b\u6a21\u5f0f\uff08Singleton\uff09 # \u5355\u4f8b\u6a21\u5f0f\u88ab\u516c\u8ba4\u4e3a\u662f \u53cd\u9762\u6a21\u5f0f \uff0c\u4e3a\u4e86\u83b7\u5f97\u66f4\u597d\u7684\u53ef\u6d4b\u8bd5\u6027\u548c\u53ef\u7ef4\u62a4\u6027\uff0c\u8bf7\u4f7f\u7528\u300e \u4f9d\u8d56\u6ce8\u5165\u6a21\u5f0f \u300f\u3002 1. \u76ee\u7684 # \u5728\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528\u7684\u65f6\u5019\uff0c\u53ea\u80fd\u83b7\u5f97\u4e00\u4e2a\u5bf9\u8c61\u5b9e\u4f8b\u3002 2. \u4f8b\u5b50 # \u6570\u636e\u5e93\u8fde\u63a5 \u65e5\u5fd7 (\u591a\u79cd\u4e0d\u540c\u7528\u9014\u7684\u65e5\u5fd7\u4e5f\u53ef\u80fd\u4f1a\u6210\u4e3a\u591a\u4f8b\u6a21\u5f0f) \u5728\u5e94\u7528\u4e2d\u9501\u5b9a\u6587\u4ef6 (\u7cfb\u7edf\u4e2d\u53ea\u5b58\u5728\u4e00\u4e2a ...) 3. UML \u7c7b\u56fe # 4. \u4ee3\u7801\u90e8\u5206 # \u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e2d\u67e5\u770b Singleton.php <?php namespace DesignPatterns\\Creational\\Singleton ; final class Singleton { /** * @var Singleton */ private static $instance ; /** * \u901a\u8fc7\u61d2\u52a0\u8f7d\u83b7\u5f97\u5b9e\u4f8b\uff08\u5728\u7b2c\u4e00\u6b21\u4f7f\u7528\u7684\u65f6\u5019\u521b\u5efa\uff09 */ public static function getInstance () : Singleton { if ( null === static :: $instance ) { static :: $instance = new static (); } return static :: $instance ; } /** * \u4e0d\u5141\u8bb8\u4ece\u5916\u90e8\u8c03\u7528\u4ee5\u9632\u6b62\u521b\u5efa\u591a\u4e2a\u5b9e\u4f8b * \u8981\u4f7f\u7528\u5355\u4f8b\uff0c\u5fc5\u987b\u901a\u8fc7 Singleton::getInstance() \u65b9\u6cd5\u83b7\u53d6\u5b9e\u4f8b */ private function __construct () { } /** * \u9632\u6b62\u5b9e\u4f8b\u88ab\u514b\u9686\uff08\u8fd9\u4f1a\u521b\u5efa\u5b9e\u4f8b\u7684\u526f\u672c\uff09 */ private function __clone () { } /** * \u9632\u6b62\u53cd\u5e8f\u5217\u5316\uff08\u8fd9\u5c06\u521b\u5efa\u5b83\u7684\u526f\u672c\uff09 */ private function __wakeup () { } } 5. \u6d4b\u8bd5 # Tests/SingletonTest.php <?php namespace DesignPatterns\\Creational\\Singleton\\Tests ; use DesignPatterns\\Creational\\Singleton\\Singleton ; use PHPUnit\\Framework\\TestCase ; class SingletonTest extends TestCase { public function testUniqueness () { $firstCall = Singleton :: getInstance (); $secondCall = Singleton :: getInstance (); $this -> assertInstanceOf ( Singleton :: class , $firstCall ); $this -> assertSame ( $firstCall , $secondCall ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Singleton/1494","title":"\u5355\u4f8b\u6a21\u5f0f\uff08Singleton\uff09"},{"location":"php/php-design-patterns/Singleton/#singleton","text":"\u5355\u4f8b\u6a21\u5f0f\u88ab\u516c\u8ba4\u4e3a\u662f \u53cd\u9762\u6a21\u5f0f \uff0c\u4e3a\u4e86\u83b7\u5f97\u66f4\u597d\u7684\u53ef\u6d4b\u8bd5\u6027\u548c\u53ef\u7ef4\u62a4\u6027\uff0c\u8bf7\u4f7f\u7528\u300e \u4f9d\u8d56\u6ce8\u5165\u6a21\u5f0f \u300f\u3002","title":"\u5355\u4f8b\u6a21\u5f0f\uff08Singleton\uff09"},{"location":"php/php-design-patterns/Singleton/#1","text":"\u5728\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528\u7684\u65f6\u5019\uff0c\u53ea\u80fd\u83b7\u5f97\u4e00\u4e2a\u5bf9\u8c61\u5b9e\u4f8b\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Singleton/#2","text":"\u6570\u636e\u5e93\u8fde\u63a5 \u65e5\u5fd7 (\u591a\u79cd\u4e0d\u540c\u7528\u9014\u7684\u65e5\u5fd7\u4e5f\u53ef\u80fd\u4f1a\u6210\u4e3a\u591a\u4f8b\u6a21\u5f0f) \u5728\u5e94\u7528\u4e2d\u9501\u5b9a\u6587\u4ef6 (\u7cfb\u7edf\u4e2d\u53ea\u5b58\u5728\u4e00\u4e2a ...)","title":"2. \u4f8b\u5b50"},{"location":"php/php-design-patterns/Singleton/#3-uml","text":"","title":"3. UML \u7c7b\u56fe"},{"location":"php/php-design-patterns/Singleton/#4","text":"\u4f60\u4e5f\u53ef\u4ee5\u5728 GitHub \u4e2d\u67e5\u770b Singleton.php <?php namespace DesignPatterns\\Creational\\Singleton ; final class Singleton { /** * @var Singleton */ private static $instance ; /** * \u901a\u8fc7\u61d2\u52a0\u8f7d\u83b7\u5f97\u5b9e\u4f8b\uff08\u5728\u7b2c\u4e00\u6b21\u4f7f\u7528\u7684\u65f6\u5019\u521b\u5efa\uff09 */ public static function getInstance () : Singleton { if ( null === static :: $instance ) { static :: $instance = new static (); } return static :: $instance ; } /** * \u4e0d\u5141\u8bb8\u4ece\u5916\u90e8\u8c03\u7528\u4ee5\u9632\u6b62\u521b\u5efa\u591a\u4e2a\u5b9e\u4f8b * \u8981\u4f7f\u7528\u5355\u4f8b\uff0c\u5fc5\u987b\u901a\u8fc7 Singleton::getInstance() \u65b9\u6cd5\u83b7\u53d6\u5b9e\u4f8b */ private function __construct () { } /** * \u9632\u6b62\u5b9e\u4f8b\u88ab\u514b\u9686\uff08\u8fd9\u4f1a\u521b\u5efa\u5b9e\u4f8b\u7684\u526f\u672c\uff09 */ private function __clone () { } /** * \u9632\u6b62\u53cd\u5e8f\u5217\u5316\uff08\u8fd9\u5c06\u521b\u5efa\u5b83\u7684\u526f\u672c\uff09 */ private function __wakeup () { } }","title":"4. \u4ee3\u7801\u90e8\u5206"},{"location":"php/php-design-patterns/Singleton/#5","text":"Tests/SingletonTest.php <?php namespace DesignPatterns\\Creational\\Singleton\\Tests ; use DesignPatterns\\Creational\\Singleton\\Singleton ; use PHPUnit\\Framework\\TestCase ; class SingletonTest extends TestCase { public function testUniqueness () { $firstCall = Singleton :: getInstance (); $secondCall = Singleton :: getInstance (); $this -> assertInstanceOf ( Singleton :: class , $firstCall ); $this -> assertSame ( $firstCall , $secondCall ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Singleton/1494","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Specification/","text":"\u89c4\u683c\u6a21\u5f0f\uff08Specification\uff09 # 1. \u76ee\u7684 # \u6784\u5efa\u4e00\u4e2a\u6e05\u6670\u7684\u4e1a\u52a1\u89c4\u5219\u89c4\u8303\uff0c\u5176\u4e2d\u6bcf\u6761\u89c4\u5219\u90fd\u80fd\u88ab\u9488\u5bf9\u6027\u5730\u68c0\u67e5\u3002\u6bcf\u4e2a\u89c4\u8303\u7c7b\u4e2d\u90fd\u6709\u4e00\u4e2a\u79f0\u4e3a isSatisfiedBy \u7684\u65b9\u6cd5\uff0c\u65b9\u6cd5\u5224\u65ad\u7ed9\u5b9a\u7684\u89c4\u5219\u662f\u5426\u6ee1\u8db3\u89c4\u8303\u4ece\u800c\u8fd4\u56de true \u6216 false \u3002 2. \u4f8b\u5b50 # RulerZ 3. UML \u56fe # 4. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728 GitHub \u4e2d\u627e\u5230\u8fd9\u6bb5\u4ee3\u7801\u3002 Item.php <?php namespace DesignPatterns\\Behavioral\\Specification ; class Item { /** * @var float */ private $price ; public function __construct ( float $price ) { $this -> price = $price ; } public function getPrice () : float { return $this -> price ; } } SpecificationInterface.php <?php namespace DesignPatterns\\Behavioral\\Specification ; interface SpecificationInterface { public function isSatisfiedBy ( Item $item ) : bool ; } OrSpecification.php <?php namespace DesignPatterns\\Behavioral\\Specification ; class OrSpecification implements SpecificationInterface { /** * @var SpecificationInterface[] */ private $specifications ; /** * @param SpecificationInterface[] ...$specifications */ public function __construct ( SpecificationInterface ... $specifications ) { $this -> specifications = $specifications ; } /** * \u5982\u679c\u6709\u4e00\u6761\u89c4\u5219\u7b26\u5408\u6761\u4ef6\uff0c\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false */ public function isSatisfiedBy ( Item $item ) : bool { foreach ( $this -> specifications as $specification ) { if ( $specification -> isSatisfiedBy ( $item )) { return true ; } } return false ; } } PriceSpecification.php <?php namespace DesignPatterns\\Behavioral\\Specification ; class PriceSpecification implements SpecificationInterface { /** * @var float|null */ private $maxPrice ; /** * @var float|null */ private $minPrice ; /** * @param float $minPrice * @param float $maxPrice */ public function __construct ( $minPrice , $maxPrice ) { $this -> minPrice = $minPrice ; $this -> maxPrice = $maxPrice ; } public function isSatisfiedBy ( Item $item ) : bool { if ( $this -> maxPrice !== null && $item -> getPrice () > $this -> maxPrice ) { return false ; } if ( $this -> minPrice !== null && $item -> getPrice () < $this -> minPrice ) { return false ; } return true ; } } AndSpecification.php <?php namespace DesignPatterns\\Behavioral\\Specification ; class AndSpecification implements SpecificationInterface { /** * @var SpecificationInterface[] */ private $specifications ; /** * @param SpecificationInterface[] ...$specifications */ public function __construct ( SpecificationInterface ... $specifications ) { $this -> specifications = $specifications ; } /** * \u5982\u679c\u6709\u4e00\u6761\u89c4\u5219\u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u8fd4\u56de false\uff0c\u5426\u5219\u8fd4\u56de true */ public function isSatisfiedBy ( Item $item ) : bool { foreach ( $this -> specifications as $specification ) { if ( ! $specification -> isSatisfiedBy ( $item )) { return false ; } } return true ; } } NotSpecification.php <?php namespace DesignPatterns\\Behavioral\\Specification ; class NotSpecification implements SpecificationInterface { /** * @var SpecificationInterface */ private $specification ; public function __construct ( SpecificationInterface $specification ) { $this -> specification = $specification ; } public function isSatisfiedBy ( Item $item ) : bool { return ! $this -> specification -> isSatisfiedBy ( $item ); } } 5. \u6d4b\u8bd5 # Tests/SpecificationTest.php <?php namespace DesignPatterns\\Behavioral\\Specification\\Tests ; use DesignPatterns\\Behavioral\\Specification\\Item ; use DesignPatterns\\Behavioral\\Specification\\NotSpecification ; use DesignPatterns\\Behavioral\\Specification\\OrSpecification ; use DesignPatterns\\Behavioral\\Specification\\AndSpecification ; use DesignPatterns\\Behavioral\\Specification\\PriceSpecification ; use PHPUnit\\Framework\\TestCase ; class SpecificationTest extends TestCase { public function testCanOr () { $spec1 = new PriceSpecification ( 50 , 99 ); $spec2 = new PriceSpecification ( 101 , 200 ); $orSpec = new OrSpecification ( $spec1 , $spec2 ); $this -> assertFalse ( $orSpec -> isSatisfiedBy ( new Item ( 100 ))); $this -> assertTrue ( $orSpec -> isSatisfiedBy ( new Item ( 51 ))); $this -> assertTrue ( $orSpec -> isSatisfiedBy ( new Item ( 150 ))); } public function testCanAnd () { $spec1 = new PriceSpecification ( 50 , 100 ); $spec2 = new PriceSpecification ( 80 , 200 ); $andSpec = new AndSpecification ( $spec1 , $spec2 ); $this -> assertFalse ( $andSpec -> isSatisfiedBy ( new Item ( 150 ))); $this -> assertFalse ( $andSpec -> isSatisfiedBy ( new Item ( 1 ))); $this -> assertFalse ( $andSpec -> isSatisfiedBy ( new Item ( 51 ))); $this -> assertTrue ( $andSpec -> isSatisfiedBy ( new Item ( 100 ))); } public function testCanNot () { $spec1 = new PriceSpecification ( 50 , 100 ); $notSpec = new NotSpecification ( $spec1 ); $this -> assertTrue ( $notSpec -> isSatisfiedBy ( new Item ( 150 ))); $this -> assertFalse ( $notSpec -> isSatisfiedBy ( new Item ( 50 ))); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Specification/1514","title":"\u89c4\u683c\u6a21\u5f0f\uff08Specification\uff09"},{"location":"php/php-design-patterns/Specification/#specification","text":"","title":"\u89c4\u683c\u6a21\u5f0f\uff08Specification\uff09"},{"location":"php/php-design-patterns/Specification/#1","text":"\u6784\u5efa\u4e00\u4e2a\u6e05\u6670\u7684\u4e1a\u52a1\u89c4\u5219\u89c4\u8303\uff0c\u5176\u4e2d\u6bcf\u6761\u89c4\u5219\u90fd\u80fd\u88ab\u9488\u5bf9\u6027\u5730\u68c0\u67e5\u3002\u6bcf\u4e2a\u89c4\u8303\u7c7b\u4e2d\u90fd\u6709\u4e00\u4e2a\u79f0\u4e3a isSatisfiedBy \u7684\u65b9\u6cd5\uff0c\u65b9\u6cd5\u5224\u65ad\u7ed9\u5b9a\u7684\u89c4\u5219\u662f\u5426\u6ee1\u8db3\u89c4\u8303\u4ece\u800c\u8fd4\u56de true \u6216 false \u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Specification/#2","text":"RulerZ","title":"2. \u4f8b\u5b50"},{"location":"php/php-design-patterns/Specification/#3-uml","text":"","title":"3. UML \u56fe"},{"location":"php/php-design-patterns/Specification/#4","text":"\u4f60\u53ef\u4ee5\u5728 GitHub \u4e2d\u627e\u5230\u8fd9\u6bb5\u4ee3\u7801\u3002 Item.php <?php namespace DesignPatterns\\Behavioral\\Specification ; class Item { /** * @var float */ private $price ; public function __construct ( float $price ) { $this -> price = $price ; } public function getPrice () : float { return $this -> price ; } } SpecificationInterface.php <?php namespace DesignPatterns\\Behavioral\\Specification ; interface SpecificationInterface { public function isSatisfiedBy ( Item $item ) : bool ; } OrSpecification.php <?php namespace DesignPatterns\\Behavioral\\Specification ; class OrSpecification implements SpecificationInterface { /** * @var SpecificationInterface[] */ private $specifications ; /** * @param SpecificationInterface[] ...$specifications */ public function __construct ( SpecificationInterface ... $specifications ) { $this -> specifications = $specifications ; } /** * \u5982\u679c\u6709\u4e00\u6761\u89c4\u5219\u7b26\u5408\u6761\u4ef6\uff0c\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false */ public function isSatisfiedBy ( Item $item ) : bool { foreach ( $this -> specifications as $specification ) { if ( $specification -> isSatisfiedBy ( $item )) { return true ; } } return false ; } } PriceSpecification.php <?php namespace DesignPatterns\\Behavioral\\Specification ; class PriceSpecification implements SpecificationInterface { /** * @var float|null */ private $maxPrice ; /** * @var float|null */ private $minPrice ; /** * @param float $minPrice * @param float $maxPrice */ public function __construct ( $minPrice , $maxPrice ) { $this -> minPrice = $minPrice ; $this -> maxPrice = $maxPrice ; } public function isSatisfiedBy ( Item $item ) : bool { if ( $this -> maxPrice !== null && $item -> getPrice () > $this -> maxPrice ) { return false ; } if ( $this -> minPrice !== null && $item -> getPrice () < $this -> minPrice ) { return false ; } return true ; } } AndSpecification.php <?php namespace DesignPatterns\\Behavioral\\Specification ; class AndSpecification implements SpecificationInterface { /** * @var SpecificationInterface[] */ private $specifications ; /** * @param SpecificationInterface[] ...$specifications */ public function __construct ( SpecificationInterface ... $specifications ) { $this -> specifications = $specifications ; } /** * \u5982\u679c\u6709\u4e00\u6761\u89c4\u5219\u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u8fd4\u56de false\uff0c\u5426\u5219\u8fd4\u56de true */ public function isSatisfiedBy ( Item $item ) : bool { foreach ( $this -> specifications as $specification ) { if ( ! $specification -> isSatisfiedBy ( $item )) { return false ; } } return true ; } } NotSpecification.php <?php namespace DesignPatterns\\Behavioral\\Specification ; class NotSpecification implements SpecificationInterface { /** * @var SpecificationInterface */ private $specification ; public function __construct ( SpecificationInterface $specification ) { $this -> specification = $specification ; } public function isSatisfiedBy ( Item $item ) : bool { return ! $this -> specification -> isSatisfiedBy ( $item ); } }","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/Specification/#5","text":"Tests/SpecificationTest.php <?php namespace DesignPatterns\\Behavioral\\Specification\\Tests ; use DesignPatterns\\Behavioral\\Specification\\Item ; use DesignPatterns\\Behavioral\\Specification\\NotSpecification ; use DesignPatterns\\Behavioral\\Specification\\OrSpecification ; use DesignPatterns\\Behavioral\\Specification\\AndSpecification ; use DesignPatterns\\Behavioral\\Specification\\PriceSpecification ; use PHPUnit\\Framework\\TestCase ; class SpecificationTest extends TestCase { public function testCanOr () { $spec1 = new PriceSpecification ( 50 , 99 ); $spec2 = new PriceSpecification ( 101 , 200 ); $orSpec = new OrSpecification ( $spec1 , $spec2 ); $this -> assertFalse ( $orSpec -> isSatisfiedBy ( new Item ( 100 ))); $this -> assertTrue ( $orSpec -> isSatisfiedBy ( new Item ( 51 ))); $this -> assertTrue ( $orSpec -> isSatisfiedBy ( new Item ( 150 ))); } public function testCanAnd () { $spec1 = new PriceSpecification ( 50 , 100 ); $spec2 = new PriceSpecification ( 80 , 200 ); $andSpec = new AndSpecification ( $spec1 , $spec2 ); $this -> assertFalse ( $andSpec -> isSatisfiedBy ( new Item ( 150 ))); $this -> assertFalse ( $andSpec -> isSatisfiedBy ( new Item ( 1 ))); $this -> assertFalse ( $andSpec -> isSatisfiedBy ( new Item ( 51 ))); $this -> assertTrue ( $andSpec -> isSatisfiedBy ( new Item ( 100 ))); } public function testCanNot () { $spec1 = new PriceSpecification ( 50 , 100 ); $notSpec = new NotSpecification ( $spec1 ); $this -> assertTrue ( $notSpec -> isSatisfiedBy ( new Item ( 150 ))); $this -> assertFalse ( $notSpec -> isSatisfiedBy ( new Item ( 50 ))); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Specification/1514","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/State/","text":"\u72b6\u6001\u6a21\u5f0f\uff08State\uff09 # 1. \u76ee\u7684 # \u72b6\u6001\u6a21\u5f0f\u53ef\u4ee5\u57fa\u4e8e\u4e00\u4e2a\u5bf9\u8c61\u7684\u540c\u79cd\u4e8b\u52a1\u800c\u5c01\u88c5\u51fa\u4e0d\u540c\u7684\u884c\u4e3a\u3002\u5b83\u63d0\u4f9b\u4e00\u79cd\u7b80\u6d01\u7684\u65b9\u5f0f\u4f7f\u5f97\u5bf9\u8c61\u5728\u8fd0\u884c\u65f6\u53ef\u4ee5\u6539\u53d8\u81ea\u8eab\u884c\u4e3a\uff0c\u800c\u4e0d\u5fc5\u501f\u52a9\u5355\u4e00\u5e9e\u5927\u7684\u6761\u4ef6\u5224\u65ad\u8bed\u53e5\u3002 2. UML \u56fe # 3. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 ContextOrder.php <?php namespace DesignPatterns\\Behavioral\\State ; class ContextOrder extends StateOrder { public function getState () : StateOrder { return static :: $state ; } public function setState ( StateOrder $state ) { static :: $state = $state ; } public function done () { static :: $state -> done (); } public function getStatus () : string { return static :: $state -> getStatus (); } } StateOrder.php <?php namespace DesignPatterns\\Behavioral\\State ; abstract class StateOrder { /** * @var array */ private $details ; /** * @var StateOrder $state */ protected static $state ; /** * @return mixed */ abstract protected function done (); protected function setStatus ( string $status ) { $this -> details [ 'status' ] = $status ; $this -> details [ 'updatedTime' ] = time (); } protected function getStatus () : string { return $this -> details [ 'status' ]; } } ShippingOrder.php <?php namespace DesignPatterns\\Behavioral\\State ; class ShippingOrder extends StateOrder { public function __construct () { $this -> setStatus ( 'shipping' ); } protected function done () { $this -> setStatus ( 'completed' ); } } CreateOrder.php <?php namespace DesignPatterns\\Behavioral\\State ; class CreateOrder extends StateOrder { public function __construct () { $this -> setStatus ( 'created' ); } protected function done () { static :: $state = new ShippingOrder (); } } 4. \u6d4b\u8bd5 # Tests/StateTest.php <?php namespace DesignPatterns\\Behavioral\\State\\Tests ; use DesignPatterns\\Behavioral\\State\\ContextOrder ; use DesignPatterns\\Behavioral\\State\\CreateOrder ; use PHPUnit\\Framework\\TestCase ; class StateTest extends TestCase { public function testCanShipCreatedOrder () { $order = new CreateOrder (); $contextOrder = new ContextOrder (); $contextOrder -> setState ( $order ); $contextOrder -> done (); $this -> assertEquals ( 'shipping' , $contextOrder -> getStatus ()); } public function testCanCompleteShippedOrder () { $order = new CreateOrder (); $contextOrder = new ContextOrder (); $contextOrder -> setState ( $order ); $contextOrder -> done (); $contextOrder -> done (); $this -> assertEquals ( 'completed' , $contextOrder -> getStatus ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/State/1515","title":"\u72b6\u6001\u6a21\u5f0f\uff08State\uff09"},{"location":"php/php-design-patterns/State/#state","text":"","title":"\u72b6\u6001\u6a21\u5f0f\uff08State\uff09"},{"location":"php/php-design-patterns/State/#1","text":"\u72b6\u6001\u6a21\u5f0f\u53ef\u4ee5\u57fa\u4e8e\u4e00\u4e2a\u5bf9\u8c61\u7684\u540c\u79cd\u4e8b\u52a1\u800c\u5c01\u88c5\u51fa\u4e0d\u540c\u7684\u884c\u4e3a\u3002\u5b83\u63d0\u4f9b\u4e00\u79cd\u7b80\u6d01\u7684\u65b9\u5f0f\u4f7f\u5f97\u5bf9\u8c61\u5728\u8fd0\u884c\u65f6\u53ef\u4ee5\u6539\u53d8\u81ea\u8eab\u884c\u4e3a\uff0c\u800c\u4e0d\u5fc5\u501f\u52a9\u5355\u4e00\u5e9e\u5927\u7684\u6761\u4ef6\u5224\u65ad\u8bed\u53e5\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/State/#2-uml","text":"","title":"2. UML \u56fe"},{"location":"php/php-design-patterns/State/#3","text":"\u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 ContextOrder.php <?php namespace DesignPatterns\\Behavioral\\State ; class ContextOrder extends StateOrder { public function getState () : StateOrder { return static :: $state ; } public function setState ( StateOrder $state ) { static :: $state = $state ; } public function done () { static :: $state -> done (); } public function getStatus () : string { return static :: $state -> getStatus (); } } StateOrder.php <?php namespace DesignPatterns\\Behavioral\\State ; abstract class StateOrder { /** * @var array */ private $details ; /** * @var StateOrder $state */ protected static $state ; /** * @return mixed */ abstract protected function done (); protected function setStatus ( string $status ) { $this -> details [ 'status' ] = $status ; $this -> details [ 'updatedTime' ] = time (); } protected function getStatus () : string { return $this -> details [ 'status' ]; } } ShippingOrder.php <?php namespace DesignPatterns\\Behavioral\\State ; class ShippingOrder extends StateOrder { public function __construct () { $this -> setStatus ( 'shipping' ); } protected function done () { $this -> setStatus ( 'completed' ); } } CreateOrder.php <?php namespace DesignPatterns\\Behavioral\\State ; class CreateOrder extends StateOrder { public function __construct () { $this -> setStatus ( 'created' ); } protected function done () { static :: $state = new ShippingOrder (); } }","title":"3. \u4ee3\u7801"},{"location":"php/php-design-patterns/State/#4","text":"Tests/StateTest.php <?php namespace DesignPatterns\\Behavioral\\State\\Tests ; use DesignPatterns\\Behavioral\\State\\ContextOrder ; use DesignPatterns\\Behavioral\\State\\CreateOrder ; use PHPUnit\\Framework\\TestCase ; class StateTest extends TestCase { public function testCanShipCreatedOrder () { $order = new CreateOrder (); $contextOrder = new ContextOrder (); $contextOrder -> setState ( $order ); $contextOrder -> done (); $this -> assertEquals ( 'shipping' , $contextOrder -> getStatus ()); } public function testCanCompleteShippedOrder () { $order = new CreateOrder (); $contextOrder = new ContextOrder (); $contextOrder -> setState ( $order ); $contextOrder -> done (); $contextOrder -> done (); $this -> assertEquals ( 'completed' , $contextOrder -> getStatus ()); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/State/1515","title":"4. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/StaticFactory/","text":"\u9759\u6001\u5de5\u5382\u6a21\u5f0f\uff08Static Factory\uff09 # 1. \u76ee\u7684 # \u4e0e\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\u7c7b\u4f3c\uff0c\u6b64\u6a21\u5f0f\u7528\u4e8e\u521b\u5efa\u4e00\u7cfb\u5217\u76f8\u5173\u6216\u76f8\u4e92\u4f9d\u8d56\u7684\u5bf9\u8c61\u3002 \u300e\u9759\u6001\u5de5\u5382\u6a21\u5f0f\u300f\u4e0e\u300e\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\u300f\u7684\u533a\u522b\u5728\u4e8e\uff0c\u53ea\u4f7f\u7528\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5\u6765\u521b\u5efa\u6240\u6709\u7c7b\u578b\u5bf9\u8c61\uff0c \u6b64\u65b9\u6cd5\u901a\u5e38\u88ab\u547d\u540d\u4e3a factory \u6216 build \u3002 2. \u4f8b\u5b50 # Zend Framework: Zend_Cache_Backend \u6216 _Frontend \u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\u521b\u5efa\u7f13\u5b58\u540e\u7aef\u6216\u524d\u7aef 3. UML \u56fe # 4. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e2a\u4ee3\u7801\u3002 StaticFactory.php <?php namespace DesignPatterns\\Creational\\StaticFactory ; /** * \u6ce8\u610f\u70b91: \u8bb0\u4f4f\uff0c\u9759\u6001\u610f\u5473\u7740\u5168\u5c40\u72b6\u6001\uff0c\u56e0\u4e3a\u5b83\u4e0d\u80fd\u88ab\u6a21\u62df\u8fdb\u884c\u6d4b\u8bd5\uff0c\u6240\u4ee5\u5b83\u662f\u6709\u5f0a\u7aef\u7684 * \u6ce8\u610f\u70b92: \u4e0d\u80fd\u88ab\u5206\u7c7b\u6216\u6a21\u62df\u6216\u6709\u591a\u4e2a\u4e0d\u540c\u7684\u5b9e\u4f8b\u3002 */ final class StaticFactory { /** * @param string $type * * @return FormatterInterface */ public static function factory ( string $type ) : FormatterInterface { if ( $type == 'number' ) { return new FormatNumber (); } if ( $type == 'string' ) { return new FormatString (); } throw new \\InvalidArgumentException ( 'Unknown format given' ); } } FormatterInterface.php <?php namespace DesignPatterns\\Creational\\StaticFactory ; interface FormatterInterface { } FormatString.php <?php namespace DesignPatterns\\Creational\\StaticFactory ; class FormatString implements FormatterInterface { } FormatNumber.php <?php namespace DesignPatterns\\Creational\\StaticFactory ; class FormatNumber implements FormatterInterface { } 5. \u6d4b\u8bd5 # Tests/StaticFactoryTest.php <?php namespace DesignPatterns\\Creational\\StaticFactory\\Tests ; use DesignPatterns\\Creational\\StaticFactory\\StaticFactory ; use PHPUnit\\Framework\\TestCase ; class StaticFactoryTest extends TestCase { public function testCanCreateNumberFormatter () { $this -> assertInstanceOf ( 'DesignPatterns\\Creational\\StaticFactory\\FormatNumber' , StaticFactory :: factory ( 'number' ) ); } public function testCanCreateStringFormatter () { $this -> assertInstanceOf ( 'DesignPatterns\\Creational\\StaticFactory\\FormatString' , StaticFactory :: factory ( 'string' ) ); } /** * @expectedException \\InvalidArgumentException */ public function testException () { StaticFactory :: factory ( 'object' ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/StaticFactory/1495","title":"\u9759\u6001\u5de5\u5382\u6a21\u5f0f\uff08Static Factory\uff09"},{"location":"php/php-design-patterns/StaticFactory/#static-factory","text":"","title":"\u9759\u6001\u5de5\u5382\u6a21\u5f0f\uff08Static Factory\uff09"},{"location":"php/php-design-patterns/StaticFactory/#1","text":"\u4e0e\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\u7c7b\u4f3c\uff0c\u6b64\u6a21\u5f0f\u7528\u4e8e\u521b\u5efa\u4e00\u7cfb\u5217\u76f8\u5173\u6216\u76f8\u4e92\u4f9d\u8d56\u7684\u5bf9\u8c61\u3002 \u300e\u9759\u6001\u5de5\u5382\u6a21\u5f0f\u300f\u4e0e\u300e\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\u300f\u7684\u533a\u522b\u5728\u4e8e\uff0c\u53ea\u4f7f\u7528\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5\u6765\u521b\u5efa\u6240\u6709\u7c7b\u578b\u5bf9\u8c61\uff0c \u6b64\u65b9\u6cd5\u901a\u5e38\u88ab\u547d\u540d\u4e3a factory \u6216 build \u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/StaticFactory/#2","text":"Zend Framework: Zend_Cache_Backend \u6216 _Frontend \u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\u521b\u5efa\u7f13\u5b58\u540e\u7aef\u6216\u524d\u7aef","title":"2. \u4f8b\u5b50"},{"location":"php/php-design-patterns/StaticFactory/#3-uml","text":"","title":"3. UML \u56fe"},{"location":"php/php-design-patterns/StaticFactory/#4","text":"\u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e2a\u4ee3\u7801\u3002 StaticFactory.php <?php namespace DesignPatterns\\Creational\\StaticFactory ; /** * \u6ce8\u610f\u70b91: \u8bb0\u4f4f\uff0c\u9759\u6001\u610f\u5473\u7740\u5168\u5c40\u72b6\u6001\uff0c\u56e0\u4e3a\u5b83\u4e0d\u80fd\u88ab\u6a21\u62df\u8fdb\u884c\u6d4b\u8bd5\uff0c\u6240\u4ee5\u5b83\u662f\u6709\u5f0a\u7aef\u7684 * \u6ce8\u610f\u70b92: \u4e0d\u80fd\u88ab\u5206\u7c7b\u6216\u6a21\u62df\u6216\u6709\u591a\u4e2a\u4e0d\u540c\u7684\u5b9e\u4f8b\u3002 */ final class StaticFactory { /** * @param string $type * * @return FormatterInterface */ public static function factory ( string $type ) : FormatterInterface { if ( $type == 'number' ) { return new FormatNumber (); } if ( $type == 'string' ) { return new FormatString (); } throw new \\InvalidArgumentException ( 'Unknown format given' ); } } FormatterInterface.php <?php namespace DesignPatterns\\Creational\\StaticFactory ; interface FormatterInterface { } FormatString.php <?php namespace DesignPatterns\\Creational\\StaticFactory ; class FormatString implements FormatterInterface { } FormatNumber.php <?php namespace DesignPatterns\\Creational\\StaticFactory ; class FormatNumber implements FormatterInterface { }","title":"4. \u4ee3\u7801"},{"location":"php/php-design-patterns/StaticFactory/#5","text":"Tests/StaticFactoryTest.php <?php namespace DesignPatterns\\Creational\\StaticFactory\\Tests ; use DesignPatterns\\Creational\\StaticFactory\\StaticFactory ; use PHPUnit\\Framework\\TestCase ; class StaticFactoryTest extends TestCase { public function testCanCreateNumberFormatter () { $this -> assertInstanceOf ( 'DesignPatterns\\Creational\\StaticFactory\\FormatNumber' , StaticFactory :: factory ( 'number' ) ); } public function testCanCreateStringFormatter () { $this -> assertInstanceOf ( 'DesignPatterns\\Creational\\StaticFactory\\FormatString' , StaticFactory :: factory ( 'string' ) ); } /** * @expectedException \\InvalidArgumentException */ public function testException () { StaticFactory :: factory ( 'object' ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/StaticFactory/1495","title":"5. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Strategy/","text":"\u7b56\u7565\u6a21\u5f0f\uff08Strategy\uff09 # 1. \u672f\u8bed\uff1a # \u4e0a\u4e0b\u6587 \u7b56\u7565 \u5177\u4f53\u7b56\u7565 2. \u76ee\u7684 # \u5206\u79bb\u300c\u7b56\u7565\u300d\u5e76\u4f7f\u4ed6\u4eec\u4e4b\u95f4\u80fd\u4e92\u76f8\u5feb\u901f\u5207\u6362\u3002\u6b64\u5916\uff0c\u8fd9\u79cd\u6a21\u5f0f\u662f\u4e00\u79cd\u4e0d\u9519\u7684\u7ee7\u627f\u66ff\u4ee3\u65b9\u6848\uff08\u66ff\u4ee3\u4f7f\u7528\u6269\u5c55\u62bd\u8c61\u7c7b\u7684\u65b9\u5f0f\uff09\u3002 3. \u4f8b\u5b50 # \u5bf9\u4e00\u4e2a\u5bf9\u8c61\u5217\u8868\u8fdb\u884c\u6392\u5e8f\uff0c\u4e00\u79cd\u6309\u7167\u65e5\u671f\uff0c\u4e00\u79cd\u6309\u7167 id \u7b80\u5316\u7248\u7684\u7684\u5355\u5143\u6d4b\u8bd5\uff1a\u4f8b\u5982\uff0c\u5728\u4f7f\u7528\u6587\u4ef6\u5b58\u50a8\u548c\u5185\u5b58\u5b58\u50a8\u4e4b\u95f4\u4e92\u76f8\u5207\u6362 4. UML \u56fe # 5. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e2a\u4ee3\u7801\u3002 Context.php <?php namespace DesignPatterns\\Behavioral\\Strategy ; class Context { /** * @var ComparatorInterface */ private $comparator ; public function __construct ( ComparatorInterface $comparator ) { $this -> comparator = $comparator ; } public function executeStrategy ( array $elements ) : array { uasort ( $elements , [ $this -> comparator , 'compare' ]); return $elements ; } } ComparatorInterface.php <?php namespace DesignPatterns\\Behavioral\\Strategy ; interface ComparatorInterface { /** * @param mixed $a * @param mixed $b * * @return int */ public function compare ( $a , $b ) : int ; } DateComparator.php <?php namespace DesignPatterns\\Behavioral\\Strategy ; class DateComparator implements ComparatorInterface { /** * @param mixed $a * @param mixed $b * * @return int */ public function compare ( $a , $b ) : int { $aDate = new \\DateTime ( $a [ 'date' ]); $bDate = new \\DateTime ( $b [ 'date' ]); return $aDate <=> $bDate ; } } IdComparator.php <?php namespace DesignPatterns\\Behavioral\\Strategy ; class IdComparator implements ComparatorInterface { /** * @param mixed $a * @param mixed $b * * @return int */ public function compare ( $a , $b ) : int { return $a [ 'id' ] <=> $b [ 'id' ]; } } 6. \u6d4b\u8bd5 # Tests/StrategyTest.php <?php namespace DesignPatterns\\Behavioral\\Strategy\\Tests ; use DesignPatterns\\Behavioral\\Strategy\\Context ; use DesignPatterns\\Behavioral\\Strategy\\DateComparator ; use DesignPatterns\\Behavioral\\Strategy\\IdComparator ; use PHPUnit\\Framework\\TestCase ; class StrategyTest extends TestCase { public function provideIntegers () { return [ [ [[ 'id' => 2 ], [ 'id' => 1 ], [ 'id' => 3 ]], [ 'id' => 1 ], ], [ [[ 'id' => 3 ], [ 'id' => 2 ], [ 'id' => 1 ]], [ 'id' => 1 ], ], ]; } public function provideDates () { return [ [ [[ 'date' => '2014-03-03' ], [ 'date' => '2015-03-02' ], [ 'date' => '2013-03-01' ]], [ 'date' => '2013-03-01' ], ], [ [[ 'date' => '2014-02-03' ], [ 'date' => '2013-02-01' ], [ 'date' => '2015-02-02' ]], [ 'date' => '2013-02-01' ], ], ]; } /** * @dataProvider provideIntegers * * @param array $collection * @param array $expected */ public function testIdComparator ( $collection , $expected ) { $obj = new Context ( new IdComparator ()); $elements = $obj -> executeStrategy ( $collection ); $firstElement = array_shift ( $elements ); $this -> assertEquals ( $expected , $firstElement ); } /** * @dataProvider provideDates * * @param array $collection * @param array $expected */ public function testDateComparator ( $collection , $expected ) { $obj = new Context ( new DateComparator ()); $elements = $obj -> executeStrategy ( $collection ); $firstElement = array_shift ( $elements ); $this -> assertEquals ( $expected , $firstElement ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Strategy/1516","title":"\u7b56\u7565\u6a21\u5f0f\uff08Strategy\uff09"},{"location":"php/php-design-patterns/Strategy/#strategy","text":"","title":"\u7b56\u7565\u6a21\u5f0f\uff08Strategy\uff09"},{"location":"php/php-design-patterns/Strategy/#1","text":"\u4e0a\u4e0b\u6587 \u7b56\u7565 \u5177\u4f53\u7b56\u7565","title":"1. \u672f\u8bed\uff1a"},{"location":"php/php-design-patterns/Strategy/#2","text":"\u5206\u79bb\u300c\u7b56\u7565\u300d\u5e76\u4f7f\u4ed6\u4eec\u4e4b\u95f4\u80fd\u4e92\u76f8\u5feb\u901f\u5207\u6362\u3002\u6b64\u5916\uff0c\u8fd9\u79cd\u6a21\u5f0f\u662f\u4e00\u79cd\u4e0d\u9519\u7684\u7ee7\u627f\u66ff\u4ee3\u65b9\u6848\uff08\u66ff\u4ee3\u4f7f\u7528\u6269\u5c55\u62bd\u8c61\u7c7b\u7684\u65b9\u5f0f\uff09\u3002","title":"2. \u76ee\u7684"},{"location":"php/php-design-patterns/Strategy/#3","text":"\u5bf9\u4e00\u4e2a\u5bf9\u8c61\u5217\u8868\u8fdb\u884c\u6392\u5e8f\uff0c\u4e00\u79cd\u6309\u7167\u65e5\u671f\uff0c\u4e00\u79cd\u6309\u7167 id \u7b80\u5316\u7248\u7684\u7684\u5355\u5143\u6d4b\u8bd5\uff1a\u4f8b\u5982\uff0c\u5728\u4f7f\u7528\u6587\u4ef6\u5b58\u50a8\u548c\u5185\u5b58\u5b58\u50a8\u4e4b\u95f4\u4e92\u76f8\u5207\u6362","title":"3. \u4f8b\u5b50"},{"location":"php/php-design-patterns/Strategy/#4-uml","text":"","title":"4. UML \u56fe"},{"location":"php/php-design-patterns/Strategy/#5","text":"\u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e2a\u4ee3\u7801\u3002 Context.php <?php namespace DesignPatterns\\Behavioral\\Strategy ; class Context { /** * @var ComparatorInterface */ private $comparator ; public function __construct ( ComparatorInterface $comparator ) { $this -> comparator = $comparator ; } public function executeStrategy ( array $elements ) : array { uasort ( $elements , [ $this -> comparator , 'compare' ]); return $elements ; } } ComparatorInterface.php <?php namespace DesignPatterns\\Behavioral\\Strategy ; interface ComparatorInterface { /** * @param mixed $a * @param mixed $b * * @return int */ public function compare ( $a , $b ) : int ; } DateComparator.php <?php namespace DesignPatterns\\Behavioral\\Strategy ; class DateComparator implements ComparatorInterface { /** * @param mixed $a * @param mixed $b * * @return int */ public function compare ( $a , $b ) : int { $aDate = new \\DateTime ( $a [ 'date' ]); $bDate = new \\DateTime ( $b [ 'date' ]); return $aDate <=> $bDate ; } } IdComparator.php <?php namespace DesignPatterns\\Behavioral\\Strategy ; class IdComparator implements ComparatorInterface { /** * @param mixed $a * @param mixed $b * * @return int */ public function compare ( $a , $b ) : int { return $a [ 'id' ] <=> $b [ 'id' ]; } }","title":"5. \u4ee3\u7801"},{"location":"php/php-design-patterns/Strategy/#6","text":"Tests/StrategyTest.php <?php namespace DesignPatterns\\Behavioral\\Strategy\\Tests ; use DesignPatterns\\Behavioral\\Strategy\\Context ; use DesignPatterns\\Behavioral\\Strategy\\DateComparator ; use DesignPatterns\\Behavioral\\Strategy\\IdComparator ; use PHPUnit\\Framework\\TestCase ; class StrategyTest extends TestCase { public function provideIntegers () { return [ [ [[ 'id' => 2 ], [ 'id' => 1 ], [ 'id' => 3 ]], [ 'id' => 1 ], ], [ [[ 'id' => 3 ], [ 'id' => 2 ], [ 'id' => 1 ]], [ 'id' => 1 ], ], ]; } public function provideDates () { return [ [ [[ 'date' => '2014-03-03' ], [ 'date' => '2015-03-02' ], [ 'date' => '2013-03-01' ]], [ 'date' => '2013-03-01' ], ], [ [[ 'date' => '2014-02-03' ], [ 'date' => '2013-02-01' ], [ 'date' => '2015-02-02' ]], [ 'date' => '2013-02-01' ], ], ]; } /** * @dataProvider provideIntegers * * @param array $collection * @param array $expected */ public function testIdComparator ( $collection , $expected ) { $obj = new Context ( new IdComparator ()); $elements = $obj -> executeStrategy ( $collection ); $firstElement = array_shift ( $elements ); $this -> assertEquals ( $expected , $firstElement ); } /** * @dataProvider provideDates * * @param array $collection * @param array $expected */ public function testDateComparator ( $collection , $expected ) { $obj = new Context ( new DateComparator ()); $elements = $obj -> executeStrategy ( $collection ); $firstElement = array_shift ( $elements ); $this -> assertEquals ( $expected , $firstElement ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Strategy/1516","title":"6. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/TemplateMethod/","text":"\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f\uff08Template Method\uff09 # 1. \u76ee\u7684 # \u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f\u662f\u4e00\u79cd\u884c\u4e3a\u578b\u7684\u8bbe\u8ba1\u6a21\u5f0f\u3002 \u53ef\u80fd\u4f60\u5df2\u7ecf\u89c1\u8fc7\u8fd9\u79cd\u6a21\u5f0f\u5f88\u591a\u6b21\u4e86\u3002\u5b83\u662f\u4e00\u79cd\u8ba9\u62bd\u8c61\u6a21\u677f\u7684\u5b50\u7c7b\u300c\u5b8c\u6210\u300d\u4e00\u7cfb\u5217\u7b97\u6cd5\u7684\u884c\u4e3a\u7b56\u7565\u3002 \u4f17\u6240\u5468\u77e5\u7684\u300c\u597d\u83b1\u575e\u539f\u5219\u300d\uff1a\u300c\u4e0d\u8981\u6253\u7535\u8bdd\u7ed9\u6211\u4eec\uff0c\u6211\u4eec\u4f1a\u6253\u7535\u8bdd\u7ed9\u4f60\u300d\u3002\u8fd9\u4e2a\u7c7b\u4e0d\u662f\u7531\u5b50\u7c7b\u8c03\u7528\u7684\uff0c\u800c\u662f\u4ee5\u76f8\u53cd\u7684\u65b9\u5f0f\u3002\u600e\u4e48\u505a\uff1f\u5f53\u7136\u5f88\u62bd\u8c61\u5566\uff01 \u6362\u800c\u8a00\u4e4b\uff0c\u5b83\u662f\u4e00\u79cd\u975e\u5e38\u9002\u5408\u6846\u67b6\u5e93\u7684\u7b97\u6cd5\u9aa8\u67b6\u3002\u7528\u6237\u53ea\u9700\u8981\u5b9e\u73b0\u5b50\u7c7b\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u5176\u7236\u7c7b\u4fbf\u53ef\u53bb\u641e\u5b9a\u8fd9\u9879\u5de5\u4f5c\u4e86\u3002 \u8fd9\u662f\u4e00\u79cd\u5206\u79bb\u5177\u4f53\u7c7b\u7684\u7b80\u5355\u529e\u6cd5\uff0c\u4e14\u53ef\u4ee5\u51cf\u5c11\u590d\u5236\u7c98\u8d34\uff0c\u8fd9\u4e5f\u662f\u5b83\u5e38\u89c1\u7684\u539f\u56e0\u3002 2. UML \u56fe # 3. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 Journey.php <?php namespace DesignPatterns\\Behavioral\\TemplateMethod ; abstract class Journey { /** * @var string[] */ private $thingsToDo = []; /** * \u8fd9\u662f\u5f53\u524d\u7c7b\u53ca\u5176\u5b50\u7c7b\u63d0\u4f9b\u7684\u516c\u5171\u670d\u52a1 * \u6ce8\u610f\uff0c\u5b83\u300c\u51bb\u7ed3\u300d\u4e86\u5168\u5c40\u7684\u7b97\u6cd5\u884c\u4e3a * \u5982\u679c\u4f60\u60f3\u91cd\u5199\u8fd9\u4e2a\u5951\u7ea6\uff0c\u53ea\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u5305\u542b takeATrip() \u65b9\u6cd5\u7684\u63a5\u53e3 */ final public function takeATrip () { $this -> thingsToDo [] = $this -> buyAFlight (); $this -> thingsToDo [] = $this -> takePlane (); $this -> thingsToDo [] = $this -> enjoyVacation (); $buyGift = $this -> buyGift (); if ( $buyGift !== null ) { $this -> thingsToDo [] = $buyGift ; } $this -> thingsToDo [] = $this -> takePlane (); } /** * \u8fd9\u4e2a\u65b9\u6cd5\u5fc5\u987b\u8981\u5b9e\u73b0\uff0c\u5b83\u662f\u8fd9\u4e2a\u6a21\u5f0f\u7684\u5173\u952e\u70b9 */ abstract protected function enjoyVacation () : string ; /** * \u8fd9\u4e2a\u65b9\u6cd5\u662f\u53ef\u9009\u7684\uff0c\u4e5f\u53ef\u80fd\u4f5c\u4e3a\u7b97\u6cd5\u7684\u4e00\u90e8\u5206 * \u5982\u679c\u9700\u8981\u7684\u8bdd\u4f60\u53ef\u4ee5\u91cd\u5199\u5b83 * * @return null|string */ protected function buyGift () { return null ; } private function buyAFlight () : string { return 'Buy a flight ticket' ; } private function takePlane () : string { return 'Taking the plane' ; } /** * @return string[] */ public function getThingsToDo () : array { return $this -> thingsToDo ; } } BeachJourney.php <?php namespace DesignPatterns\\Behavioral\\TemplateMethod ; class BeachJourney extends Journey { protected function enjoyVacation () : string { return \"Swimming and sun-bathing\" ; } } CityJourney.php <?php namespace DesignPatterns\\Behavioral\\TemplateMethod ; class CityJourney extends Journey { protected function enjoyVacation () : string { return \"Eat, drink, take photos and sleep\" ; } protected function buyGift () : string { return \"Buy a gift\" ; } } 4. \u6d4b\u8bd5 # Tests/JourneyTest.php <?php namespace DesignPatterns\\Behavioral\\TemplateMethod\\Tests ; use DesignPatterns\\Behavioral\\TemplateMethod ; use PHPUnit\\Framework\\TestCase ; class JourneyTest extends TestCase { public function testCanGetOnVacationOnTheBeach () { $beachJourney = new TemplateMethod\\BeachJourney (); $beachJourney -> takeATrip (); $this -> assertEquals ( [ 'Buy a flight ticket' , 'Taking the plane' , 'Swimming and sun-bathing' , 'Taking the plane' ], $beachJourney -> getThingsToDo () ); } public function testCanGetOnAJourneyToACity () { $beachJourney = new TemplateMethod\\CityJourney (); $beachJourney -> takeATrip (); $this -> assertEquals ( [ 'Buy a flight ticket' , 'Taking the plane' , 'Eat, drink, take photos and sleep' , 'Buy a gift' , 'Taking the plane' ], $beachJourney -> getThingsToDo () ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/TemplateMethod/1517","title":"\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f\uff08Template Method\uff09"},{"location":"php/php-design-patterns/TemplateMethod/#template-method","text":"","title":"\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f\uff08Template Method\uff09"},{"location":"php/php-design-patterns/TemplateMethod/#1","text":"\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f\u662f\u4e00\u79cd\u884c\u4e3a\u578b\u7684\u8bbe\u8ba1\u6a21\u5f0f\u3002 \u53ef\u80fd\u4f60\u5df2\u7ecf\u89c1\u8fc7\u8fd9\u79cd\u6a21\u5f0f\u5f88\u591a\u6b21\u4e86\u3002\u5b83\u662f\u4e00\u79cd\u8ba9\u62bd\u8c61\u6a21\u677f\u7684\u5b50\u7c7b\u300c\u5b8c\u6210\u300d\u4e00\u7cfb\u5217\u7b97\u6cd5\u7684\u884c\u4e3a\u7b56\u7565\u3002 \u4f17\u6240\u5468\u77e5\u7684\u300c\u597d\u83b1\u575e\u539f\u5219\u300d\uff1a\u300c\u4e0d\u8981\u6253\u7535\u8bdd\u7ed9\u6211\u4eec\uff0c\u6211\u4eec\u4f1a\u6253\u7535\u8bdd\u7ed9\u4f60\u300d\u3002\u8fd9\u4e2a\u7c7b\u4e0d\u662f\u7531\u5b50\u7c7b\u8c03\u7528\u7684\uff0c\u800c\u662f\u4ee5\u76f8\u53cd\u7684\u65b9\u5f0f\u3002\u600e\u4e48\u505a\uff1f\u5f53\u7136\u5f88\u62bd\u8c61\u5566\uff01 \u6362\u800c\u8a00\u4e4b\uff0c\u5b83\u662f\u4e00\u79cd\u975e\u5e38\u9002\u5408\u6846\u67b6\u5e93\u7684\u7b97\u6cd5\u9aa8\u67b6\u3002\u7528\u6237\u53ea\u9700\u8981\u5b9e\u73b0\u5b50\u7c7b\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u5176\u7236\u7c7b\u4fbf\u53ef\u53bb\u641e\u5b9a\u8fd9\u9879\u5de5\u4f5c\u4e86\u3002 \u8fd9\u662f\u4e00\u79cd\u5206\u79bb\u5177\u4f53\u7c7b\u7684\u7b80\u5355\u529e\u6cd5\uff0c\u4e14\u53ef\u4ee5\u51cf\u5c11\u590d\u5236\u7c98\u8d34\uff0c\u8fd9\u4e5f\u662f\u5b83\u5e38\u89c1\u7684\u539f\u56e0\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/TemplateMethod/#2-uml","text":"","title":"2. UML \u56fe"},{"location":"php/php-design-patterns/TemplateMethod/#3","text":"\u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 Journey.php <?php namespace DesignPatterns\\Behavioral\\TemplateMethod ; abstract class Journey { /** * @var string[] */ private $thingsToDo = []; /** * \u8fd9\u662f\u5f53\u524d\u7c7b\u53ca\u5176\u5b50\u7c7b\u63d0\u4f9b\u7684\u516c\u5171\u670d\u52a1 * \u6ce8\u610f\uff0c\u5b83\u300c\u51bb\u7ed3\u300d\u4e86\u5168\u5c40\u7684\u7b97\u6cd5\u884c\u4e3a * \u5982\u679c\u4f60\u60f3\u91cd\u5199\u8fd9\u4e2a\u5951\u7ea6\uff0c\u53ea\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u5305\u542b takeATrip() \u65b9\u6cd5\u7684\u63a5\u53e3 */ final public function takeATrip () { $this -> thingsToDo [] = $this -> buyAFlight (); $this -> thingsToDo [] = $this -> takePlane (); $this -> thingsToDo [] = $this -> enjoyVacation (); $buyGift = $this -> buyGift (); if ( $buyGift !== null ) { $this -> thingsToDo [] = $buyGift ; } $this -> thingsToDo [] = $this -> takePlane (); } /** * \u8fd9\u4e2a\u65b9\u6cd5\u5fc5\u987b\u8981\u5b9e\u73b0\uff0c\u5b83\u662f\u8fd9\u4e2a\u6a21\u5f0f\u7684\u5173\u952e\u70b9 */ abstract protected function enjoyVacation () : string ; /** * \u8fd9\u4e2a\u65b9\u6cd5\u662f\u53ef\u9009\u7684\uff0c\u4e5f\u53ef\u80fd\u4f5c\u4e3a\u7b97\u6cd5\u7684\u4e00\u90e8\u5206 * \u5982\u679c\u9700\u8981\u7684\u8bdd\u4f60\u53ef\u4ee5\u91cd\u5199\u5b83 * * @return null|string */ protected function buyGift () { return null ; } private function buyAFlight () : string { return 'Buy a flight ticket' ; } private function takePlane () : string { return 'Taking the plane' ; } /** * @return string[] */ public function getThingsToDo () : array { return $this -> thingsToDo ; } } BeachJourney.php <?php namespace DesignPatterns\\Behavioral\\TemplateMethod ; class BeachJourney extends Journey { protected function enjoyVacation () : string { return \"Swimming and sun-bathing\" ; } } CityJourney.php <?php namespace DesignPatterns\\Behavioral\\TemplateMethod ; class CityJourney extends Journey { protected function enjoyVacation () : string { return \"Eat, drink, take photos and sleep\" ; } protected function buyGift () : string { return \"Buy a gift\" ; } }","title":"3. \u4ee3\u7801"},{"location":"php/php-design-patterns/TemplateMethod/#4","text":"Tests/JourneyTest.php <?php namespace DesignPatterns\\Behavioral\\TemplateMethod\\Tests ; use DesignPatterns\\Behavioral\\TemplateMethod ; use PHPUnit\\Framework\\TestCase ; class JourneyTest extends TestCase { public function testCanGetOnVacationOnTheBeach () { $beachJourney = new TemplateMethod\\BeachJourney (); $beachJourney -> takeATrip (); $this -> assertEquals ( [ 'Buy a flight ticket' , 'Taking the plane' , 'Swimming and sun-bathing' , 'Taking the plane' ], $beachJourney -> getThingsToDo () ); } public function testCanGetOnAJourneyToACity () { $beachJourney = new TemplateMethod\\CityJourney (); $beachJourney -> takeATrip (); $this -> assertEquals ( [ 'Buy a flight ticket' , 'Taking the plane' , 'Eat, drink, take photos and sleep' , 'Buy a gift' , 'Taking the plane' ], $beachJourney -> getThingsToDo () ); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/TemplateMethod/1517","title":"4. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/Visitor/","text":"\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f\uff08Template Method\uff09 # 1. \u76ee\u7684 # \u8bbf\u95ee\u8005\u6a21\u5f0f\u53ef\u4ee5\u8ba9\u4f60\u5c06\u5bf9\u8c61\u64cd\u4f5c\u5916\u5305\u7ed9\u5176\u4ed6\u5bf9\u8c61\u3002\u8fd9\u6837\u505a\u7684\u6700\u4e3b\u8981\u539f\u56e0\u5c31\u662f\u5173\u6ce8\uff08\u6570\u636e\u7ed3\u6784\u548c\u6570\u636e\u64cd\u4f5c\uff09\u5206\u79bb\u3002\u4f46\u662f\u88ab\u8bbf\u95ee\u7684\u7c7b\u5fc5\u987b\u5b9a\u4e00\u4e2a\u5951\u7ea6\u63a5\u53d7\u8bbf\u95ee\u8005\u3002 (\u8be6\u89c1\u4f8b\u5b50\u4e2d\u7684 Role::accept \u65b9\u6cd5) \u5951\u7ea6\u53ef\u4ee5\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\u4e5f\u53ef\u76f4\u63a5\u5c31\u662f\u4e00\u4e2a\u63a5\u53e3\u3002\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u8bbf\u95ee\u8005\u5fc5\u987b\u81ea\u884c\u9009\u62e9\u8c03\u7528\u8bbf\u95ee\u8005\u7684\u54ea\u4e2a\u65b9\u6cd5\u3002 2. UML \u56fe # 3. \u4ee3\u7801 # \u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 RoleVisitorInterface.php <?php namespace DesignPatterns\\Behavioral\\Visitor ; /** * \u6ce8\u610f\uff1a\u8bbf\u95ee\u8005\u4e0d\u80fd\u81ea\u884c\u9009\u62e9\u8c03\u7528\u54ea\u4e2a\u65b9\u6cd5\uff0c * \u5b83\u662f\u7531 Visitee \u51b3\u5b9a\u7684\u3002 */ interface RoleVisitorInterface { public function visitUser ( User $role ); public function visitGroup ( Group $role ); } RoleVisitor.php <?php namespace DesignPatterns\\Behavioral\\Visitor ; class RoleVisitor implements RoleVisitorInterface { /** * @var Role[] */ private $visited = []; public function visitGroup ( Group $role ) { $this -> visited [] = $role ; } public function visitUser ( User $role ) { $this -> visited [] = $role ; } /** * @return Role[] */ public function getVisited () : array { return $this -> visited ; } } Role.php <?php namespace DesignPatterns\\Behavioral\\Visitor ; interface Role { public function accept ( RoleVisitorInterface $visitor ); } User.php <?php namespace DesignPatterns\\Behavioral\\Visitor ; class User implements Role { /** * @var string */ private $name ; public function __construct ( string $name ) { $this -> name = $name ; } public function getName () : string { return sprintf ( 'User %s' , $this -> name ); } public function accept ( RoleVisitorInterface $visitor ) { $visitor -> visitUser ( $this ); } } Group.php <?php namespace DesignPatterns\\Behavioral\\Visitor ; class Group implements Role { /** * @var string */ private $name ; public function __construct ( string $name ) { $this -> name = $name ; } public function getName () : string { return sprintf ( 'Group: %s' , $this -> name ); } public function accept ( RoleVisitorInterface $visitor ) { $visitor -> visitGroup ( $this ); } } 4. \u6d4b\u8bd5 # Tests/VisitorTest.php <?php namespace DesignPatterns\\Tests\\Visitor\\Tests ; use DesignPatterns\\Behavioral\\Visitor ; use PHPUnit\\Framework\\TestCase ; class VisitorTest extends TestCase { /** * @var Visitor\\RoleVisitor */ private $visitor ; protected function setUp () { $this -> visitor = new Visitor\\RoleVisitor (); } public function provideRoles () { return [ [ new Visitor\\User ( 'Dominik' )], [ new Visitor\\Group ( 'Administrators' )], ]; } /** * @dataProvider provideRoles * * @param Visitor\\Role $role */ public function testVisitSomeRole ( Visitor\\Role $role ) { $role -> accept ( $this -> visitor ); $this -> assertSame ( $role , $this -> visitor -> getVisited ()[ 0 ]); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Visitor/1519","title":"\u8bbf\u95ee\u8005\u6a21\u5f0f\uff08Visitor\uff09"},{"location":"php/php-design-patterns/Visitor/#template-method","text":"","title":"\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f\uff08Template Method\uff09"},{"location":"php/php-design-patterns/Visitor/#1","text":"\u8bbf\u95ee\u8005\u6a21\u5f0f\u53ef\u4ee5\u8ba9\u4f60\u5c06\u5bf9\u8c61\u64cd\u4f5c\u5916\u5305\u7ed9\u5176\u4ed6\u5bf9\u8c61\u3002\u8fd9\u6837\u505a\u7684\u6700\u4e3b\u8981\u539f\u56e0\u5c31\u662f\u5173\u6ce8\uff08\u6570\u636e\u7ed3\u6784\u548c\u6570\u636e\u64cd\u4f5c\uff09\u5206\u79bb\u3002\u4f46\u662f\u88ab\u8bbf\u95ee\u7684\u7c7b\u5fc5\u987b\u5b9a\u4e00\u4e2a\u5951\u7ea6\u63a5\u53d7\u8bbf\u95ee\u8005\u3002 (\u8be6\u89c1\u4f8b\u5b50\u4e2d\u7684 Role::accept \u65b9\u6cd5) \u5951\u7ea6\u53ef\u4ee5\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\u4e5f\u53ef\u76f4\u63a5\u5c31\u662f\u4e00\u4e2a\u63a5\u53e3\u3002\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u8bbf\u95ee\u8005\u5fc5\u987b\u81ea\u884c\u9009\u62e9\u8c03\u7528\u8bbf\u95ee\u8005\u7684\u54ea\u4e2a\u65b9\u6cd5\u3002","title":"1. \u76ee\u7684"},{"location":"php/php-design-patterns/Visitor/#2-uml","text":"","title":"2. UML \u56fe"},{"location":"php/php-design-patterns/Visitor/#3","text":"\u4f60\u53ef\u4ee5\u5728 GitHub \u4e0a\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801 RoleVisitorInterface.php <?php namespace DesignPatterns\\Behavioral\\Visitor ; /** * \u6ce8\u610f\uff1a\u8bbf\u95ee\u8005\u4e0d\u80fd\u81ea\u884c\u9009\u62e9\u8c03\u7528\u54ea\u4e2a\u65b9\u6cd5\uff0c * \u5b83\u662f\u7531 Visitee \u51b3\u5b9a\u7684\u3002 */ interface RoleVisitorInterface { public function visitUser ( User $role ); public function visitGroup ( Group $role ); } RoleVisitor.php <?php namespace DesignPatterns\\Behavioral\\Visitor ; class RoleVisitor implements RoleVisitorInterface { /** * @var Role[] */ private $visited = []; public function visitGroup ( Group $role ) { $this -> visited [] = $role ; } public function visitUser ( User $role ) { $this -> visited [] = $role ; } /** * @return Role[] */ public function getVisited () : array { return $this -> visited ; } } Role.php <?php namespace DesignPatterns\\Behavioral\\Visitor ; interface Role { public function accept ( RoleVisitorInterface $visitor ); } User.php <?php namespace DesignPatterns\\Behavioral\\Visitor ; class User implements Role { /** * @var string */ private $name ; public function __construct ( string $name ) { $this -> name = $name ; } public function getName () : string { return sprintf ( 'User %s' , $this -> name ); } public function accept ( RoleVisitorInterface $visitor ) { $visitor -> visitUser ( $this ); } } Group.php <?php namespace DesignPatterns\\Behavioral\\Visitor ; class Group implements Role { /** * @var string */ private $name ; public function __construct ( string $name ) { $this -> name = $name ; } public function getName () : string { return sprintf ( 'Group: %s' , $this -> name ); } public function accept ( RoleVisitorInterface $visitor ) { $visitor -> visitGroup ( $this ); } }","title":"3. \u4ee3\u7801"},{"location":"php/php-design-patterns/Visitor/#4","text":"Tests/VisitorTest.php <?php namespace DesignPatterns\\Tests\\Visitor\\Tests ; use DesignPatterns\\Behavioral\\Visitor ; use PHPUnit\\Framework\\TestCase ; class VisitorTest extends TestCase { /** * @var Visitor\\RoleVisitor */ private $visitor ; protected function setUp () { $this -> visitor = new Visitor\\RoleVisitor (); } public function provideRoles () { return [ [ new Visitor\\User ( 'Dominik' )], [ new Visitor\\Group ( 'Administrators' )], ]; } /** * @dataProvider provideRoles * * @param Visitor\\Role $role */ public function testVisitSomeRole ( Visitor\\Role $role ) { $role -> accept ( $this -> visitor ); $this -> assertSame ( $role , $this -> visitor -> getVisited ()[ 0 ]); } } \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/Visitor/1519","title":"4. \u6d4b\u8bd5"},{"location":"php/php-design-patterns/design-pattern-reading/","text":"PHP \u8bbe\u8ba1\u6a21\u5f0f\u9605\u8bfb\u6e05\u5355 # \u793e\u533a\u6587\u7ae0\u63a8\u8350 # S.O.L.I.D \u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\u548c\u7f16\u7a0b\uff08OOD&OOP\uff09\u7b14\u8bb0 \u6d45\u8c08 Laravel \u8bbe\u8ba1\u6a21\u5f0f PHP \u5b8c\u6574\u5b9e\u6218 23 \u79cd\u8bbe\u8ba1\u6a21\u5f0f Laravel Dependency Injection (\u4f9d\u8d56\u6ce8\u5165) \u6982\u5ff5\u8be6\u89e3 \u6d45\u8c08 Laravel Container \u53ca\u5176\u9879\u76ee\u5b9e\u8df5 \u5173\u4e8e Repository \u7684\u8bbe\u8ba1\u6a21\u5f0f \u8bbe\u8ba1\u6a21\u5f0f\u8be6\u89e3\u53ca PHP \u5b9e\u73b0 \u300cHEAD-FIRST\u300d\u4e4b\u89c2\u5bdf\u8005\u6a21\u5f0f \u5728 Laravel 5 \u4e2d\u4f7f\u7528\u4ed3\u5e93\u8bbe\u8ba1\u6a21\u5f0f \u5176\u4ed6\u6587\u6863 # \u300a\u5927\u8bdd\u8bbe\u8ba1\u6a21\u5f0f\u300bphp\u7248\u672c \u80d6\u80d6 - PHP\u8bbe\u8ba1\u6a21\u5f0f \u5176\u4ed6\u6587\u7ae0 # \u4e94\u79cd\u5e38\u89c1\u7684 PHP \u8bbe\u8ba1\u6a21\u5f0f \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/php-design-pattern-reading-list/1525","title":"PHP \u8bbe\u8ba1\u6a21\u5f0f\u9605\u8bfb\u6e05\u5355"},{"location":"php/php-design-patterns/design-pattern-reading/#php","text":"","title":"PHP \u8bbe\u8ba1\u6a21\u5f0f\u9605\u8bfb\u6e05\u5355"},{"location":"php/php-design-patterns/design-pattern-reading/#_1","text":"S.O.L.I.D \u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\u548c\u7f16\u7a0b\uff08OOD&OOP\uff09\u7b14\u8bb0 \u6d45\u8c08 Laravel \u8bbe\u8ba1\u6a21\u5f0f PHP \u5b8c\u6574\u5b9e\u6218 23 \u79cd\u8bbe\u8ba1\u6a21\u5f0f Laravel Dependency Injection (\u4f9d\u8d56\u6ce8\u5165) \u6982\u5ff5\u8be6\u89e3 \u6d45\u8c08 Laravel Container \u53ca\u5176\u9879\u76ee\u5b9e\u8df5 \u5173\u4e8e Repository \u7684\u8bbe\u8ba1\u6a21\u5f0f \u8bbe\u8ba1\u6a21\u5f0f\u8be6\u89e3\u53ca PHP \u5b9e\u73b0 \u300cHEAD-FIRST\u300d\u4e4b\u89c2\u5bdf\u8005\u6a21\u5f0f \u5728 Laravel 5 \u4e2d\u4f7f\u7528\u4ed3\u5e93\u8bbe\u8ba1\u6a21\u5f0f","title":"\u793e\u533a\u6587\u7ae0\u63a8\u8350"},{"location":"php/php-design-patterns/design-pattern-reading/#_2","text":"\u300a\u5927\u8bdd\u8bbe\u8ba1\u6a21\u5f0f\u300bphp\u7248\u672c \u80d6\u80d6 - PHP\u8bbe\u8ba1\u6a21\u5f0f","title":"\u5176\u4ed6\u6587\u6863"},{"location":"php/php-design-patterns/design-pattern-reading/#_3","text":"\u4e94\u79cd\u5e38\u89c1\u7684 PHP \u8bbe\u8ba1\u6a21\u5f0f \u539f\u6587\uff1a https://laravel-china.org/docs/php-design-patterns/2018/php-design-pattern-reading-list/1525","title":"\u5176\u4ed6\u6587\u7ae0"},{"location":"php/phpdoc/","text":"PHPDoc \u4ee3\u7801\u6ce8\u91ca # \u89c4\u8303\u6ce8\u91ca # \u6807\u51c6\u6ce8\u91ca <?php /** * \u6807\u9898\u53ca\u8bf4\u660e * * @author \u4f5c\u8005 <\u90ae\u7bb1> * @param \u53c2\u6570\u6570\u636e\u7c7b\u578b \u53c2\u6570\u53d8\u91cf \u53c2\u6570\u8bf4\u660e * * @return \u8fd4\u56de\u6570\u636e\u7c7b\u578b \u8fd4\u56de\u8bf4\u660e */ \u6ce8\uff1a \u5176\u4e2d\u524d\u7aef\u5e94\u7528\u4e2d \u53c2\u6570\u6570\u636e\u7c7b\u578b \uff0c\u70ba\u533a\u5206\u53c2\u6570\u53d8\u91cf\uff0c\u4f1a\u52a0\u4e0a {} \uff0c\u5982\uff1a {\u53c2\u6570\u6570\u636e\u7c7b\u578b} \u4f8b\u5b50 <?php /** * \u52a0\u6cd5\u8ba1\u7b97 * * @author \u4f5c\u8005 <\u90ae\u7bb1> * @param number $m \u53c2\u65701 * @param number $n \u53c2\u65702 * * @return number */ function calc ( $m , $n ) { return $m + $n ; } \u6570\u636e\u7c7b\u578b # \u6807\u8bc6 \u8bf4\u660e integer \u6216 int \u6574\u6570\u7c7b\u578b boolean \u6216 bool \u5e03\u5c14\u503c\u7c7b\u578b number \u6570\u5b57 string \u5b57\u7b26\u4e32 array \u6570\u7ec4 object \u5bf9\u8c61 mixed \u6df7\u5408\u7c7b\u578b void \u7a7a\u7c7b\u578b \u6587\u6863\u6807\u8bb0 # \u6587\u6863\u6807\u8bb0\u7684\u4f7f\u7528\u8303\u56f4\u662f\u6307\u8be5\u6807\u8bb0\u53ef\u4ee5\u7528\u6765\u4fee\u9970\u7684\u5173\u952e\u5b57\uff0c\u6216\u5176\u4ed6\u6587\u6863\u6807\u8bb0\u3002 \u6240\u6709\u7684\u6587\u6863\u6807\u8bb0\u90fd\u662f\u5728\u6bcf\u4e00\u884c\u7684 * \u540e\u9762\u4ee5 @ \u5f00\u5934\u3002\u5982\u679c\u5728\u4e00\u6bb5\u8bdd\u7684\u4e2d\u95f4\u51fa\u6765@\u7684\u6807\u8bb0\uff0c\u8fd9\u4e2a\u6807\u8bb0\u5c06\u4f1a\u88ab\u5f53\u505a\u666e\u901a\u5185\u5bb9\u800c\u88ab\u5ffd\u7565\u6389\u3002 <?php /** * @name \u540d\u5b57 * @abstract \u7533\u660e\u53d8\u91cf/\u7c7b/\u65b9\u6cd5 * @access \u6307\u660e\u8fd9\u4e2a\u53d8\u91cf\u3001\u7c7b\u3001\u51fd\u6570/\u65b9\u6cd5\u7684\u5b58\u53d6\u6743\u9650 * @author \u51fd\u6570\u4f5c\u8005\u7684\u540d\u5b57\u548c\u90ae\u7bb1\u5730\u5740 * @category \u7ec4\u7ec7packages * @copyright \u6307\u660e\u7248\u6743\u4fe1\u606f * @const \u6307\u660e\u5e38\u91cf * @deprecate \u6307\u660e\u4e0d\u63a8\u8350\u6216\u8005\u662f\u5e9f\u5f03\u7684\u4fe1\u606f * @example \u793a\u4f8b * @exclude \u6307\u660e\u5f53\u524d\u7684\u6ce8\u91ca\u5c06\u4e0d\u8fdb\u884c\u5206\u6790\uff0c\u4e0d\u51fa\u73b0\u5728\u6587\u6321\u4e2d * @final \u6307\u660e\u8fd9\u662f\u4e00\u4e2a\u6700\u7ec8\u7684\u7c7b\u3001\u65b9\u6cd5\u3001\u5c5e\u6027\uff0c\u7981\u6b62\u6d3e\u751f\u3001\u4fee\u6539\u3002 * @global \u6307\u660e\u5728\u6b64\u51fd\u6570\u4e2d\u5f15\u7528\u7684\u5168\u5c40\u53d8\u91cf * @include \u6307\u660e\u5305\u542b\u7684\u6587\u4ef6\u7684\u4fe1\u606f * @link \u5b9a\u4e49\u5728\u7ebf\u8fde\u63a5 * @module \u5b9a\u4e49\u5f52\u5c5e\u7684\u6a21\u5757\u4fe1\u606f * @modulegroup \u5b9a\u4e49\u5f52\u5c5e\u7684\u6a21\u5757\u7ec4 * @package \u5b9a\u4e49\u5f52\u5c5e\u7684\u5305\u7684\u4fe1\u606f * @param \u5b9a\u4e49\u51fd\u6570\u6216\u8005\u65b9\u6cd5\u7684\u53c2\u6570\u4fe1\u606f * @return \u5b9a\u4e49\u51fd\u6570\u6216\u8005\u65b9\u6cd5\u7684\u8fd4\u56de\u4fe1\u606f * @see \u5b9a\u4e49\u9700\u8981\u53c2\u8003\u7684\u51fd\u6570\u3001\u53d8\u91cf\uff0c\u5e76\u52a0\u5165\u76f8\u5e94\u7684\u8d85\u7ea7\u8fde\u63a5\u3002 * @since \u6307\u660e\u8be5api\u51fd\u6570\u6216\u8005\u65b9\u6cd5\u662f\u4ece\u54ea\u4e2a\u7248\u672c\u5f00\u59cb\u5f15\u5165\u7684 * @static \u6307\u660e\u53d8\u91cf\u3001\u7c7b\u3001\u51fd\u6570\u662f\u9759\u6001\u7684\u3002 * @throws \u6307\u660e\u6b64\u51fd\u6570\u53ef\u80fd\u629b\u51fa\u7684\u9519\u8bef\u5f02\u5e38,\u6781\u5176\u53d1\u751f\u7684\u60c5\u51b5 * @todo \u6307\u660e\u5e94\u8be5\u6539\u8fdb\u6216\u6ca1\u6709\u5b9e\u73b0\u7684\u5730\u65b9 * @var \u5b9a\u4e49\u8bf4\u660e\u53d8\u91cf/\u5c5e\u6027\u3002 * @version \u5b9a\u4e49\u7248\u672c\u4fe1\u606f */ @access \u4f7f\u7528\u8303\u56f4\uff1a class , function , var , define , module \u8be5\u6807\u8bb0\u7528\u4e8e\u6307\u660e\u5173\u952e\u5b57\u7684\u5b58\u53d6\u6743\u9650\uff1a private \u3001 public \u6216 proteced @author \u6307\u660e\u4f5c\u8005 @copyright \u4f7f\u7528\u8303\u56f4\uff1a class \uff0c function \uff0c var \uff0c define \uff0c module \uff0c use \u6307\u660e\u7248\u6743\u4fe1\u606f @deprecated \u4f7f\u7528\u8303\u56f4\uff1a class \uff0c function \uff0c var \uff0c define \uff0c module \uff0c constent \uff0c global \uff0c include \u6307\u660e\u4e0d\u7528\u6216\u8005\u5e9f\u5f03\u7684\u5173\u952e\u5b57 @example \u8be5\u6807\u8bb0\u7528\u4e8e\u89e3\u6790\u4e00\u6bb5\u6587\u4ef6\u5185\u5bb9\uff0c\u5e76\u5c06\u4ed6\u4eec\u9ad8\u4eae\u663e\u793a\u3002Phpdoc\u4f1a\u8bd5\u56fe\u4ece\u8be5\u6807\u8bb0\u7ed9\u7684\u6587\u4ef6\u8def\u5f84\u4e2d\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9 @const \u4f7f\u7528\u8303\u56f4\uff1a define \u7528\u6765\u6307\u660ephp\u4e2ddefine\u7684\u5e38\u91cf @final \u4f7f\u7528\u8303\u56f4\uff1a class , function , var \u6307\u660e\u5173\u952e\u5b57\u662f\u4e00\u4e2a\u6700\u7ec8\u7684\u7c7b\u3001\u65b9\u6cd5\u3001\u5c5e\u6027\uff0c\u7981\u6b62\u6d3e\u751f\u3001\u4fee\u6539\u3002 @filesource \u548cexample\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u8be5\u6807\u8bb0\u5c06\u76f4\u63a5\u8bfb\u53d6\u5f53\u524d\u89e3\u6790\u7684php\u6587\u4ef6\u7684\u5185\u5bb9\u5e76\u663e\u793a\u3002 @global \u6307\u660e\u5728\u6b64\u51fd\u6570\u4e2d\u5f15\u7528\u7684\u5168\u5c40\u53d8\u91cf @ingore \u7528\u4e8e\u5728\u6587\u6863\u4e2d\u5ffd\u7565\u6307\u5b9a\u7684\u5173\u952e\u5b57 @license \u8bb8\u53ef\u6743 @link \u7c7b\u4f3c\u4e8e license \uff1b\u4f46\u8fd8\u53ef\u4ee5\u901a\u8fc7link\u6307\u5230\u6587\u6863\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u5173\u952e\u5b57 @name \u4e3a\u5173\u952e\u5b57\u6307\u5b9a\u4e00\u4e2a\u522b\u540d\u3002 @package \u4f7f\u7528\u8303\u56f4\uff1a\u9875\u9762\u7ea7\u522b\u7684-> define \uff0c function \uff0c include \u7c7b\u7ea7\u522b\u7684-> class \uff0c var \uff0c methods \u7528\u4e8e\u903b\u8f91\u4e0a\u5c06\u4e00\u4e2a\u6216\u51e0\u4e2a\u5173\u952e\u5b57\u5206\u5230\u4e00\u7ec4\u3002 @abstrcut \u8bf4\u660e\u5f53\u524d\u7c7b\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b @param \u6307\u660e\u4e00\u4e2a\u51fd\u6570\u7684\u53c2\u6570 @return \u6307\u660e\u4e00\u4e2a\u65b9\u6cd5\u6216\u51fd\u6570\u7684\u8fd4\u56de\u6307 @static \u6307\u660e\u5173\u5efa\u5b57\u662f\u9759\u6001\u7684\u3002 @var \u6307\u660e\u53d8\u91cf\u7c7b\u578b @version \u6307\u660e\u7248\u672c\u4fe1\u606f @todo \u6307\u660e\u5e94\u8be5\u6539\u8fdb\u6216\u6ca1\u6709\u5b9e\u73b0\u7684\u5730\u65b9 @throws \u6307\u660e\u6b64\u51fd\u6570\u53ef\u80fd\u629b\u51fa\u7684\u9519\u8bef\u5f02\u5e38,\u6781\u5176\u53d1\u751f\u7684\u60c5\u51b5 \u4e0a\u9762\u63d0\u5230\u8fc7\uff0c\u666e\u901a\u7684\u6587\u6863\u6807\u8bb0\u6807\u8bb0\u5fc5\u987b\u5728\u6bcf\u884c\u7684\u5f00\u5934\u4ee5@\u6807\u8bb0\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u6807\u8bb0\u53eb\u505ainline tag,\u7528{@}\u8868\u793a\uff0c\u5177\u4f53\u5305\u62ec\u4ee5\u4e0b\u51e0\u79cd\uff1a {@link} \u7528\u6cd5\u540c @link {@source} \u663e\u793a\u4e00\u6bb5\u51fd\u6570\u6216\u65b9\u6cd5\u7684\u5185\u5bb9","title":"PHPDoc \u7f16\u7801\u6ce8\u91ca\u89c4\u8303"},{"location":"php/phpdoc/#phpdoc","text":"","title":"PHPDoc \u4ee3\u7801\u6ce8\u91ca"},{"location":"php/phpdoc/#_1","text":"\u6807\u51c6\u6ce8\u91ca <?php /** * \u6807\u9898\u53ca\u8bf4\u660e * * @author \u4f5c\u8005 <\u90ae\u7bb1> * @param \u53c2\u6570\u6570\u636e\u7c7b\u578b \u53c2\u6570\u53d8\u91cf \u53c2\u6570\u8bf4\u660e * * @return \u8fd4\u56de\u6570\u636e\u7c7b\u578b \u8fd4\u56de\u8bf4\u660e */ \u6ce8\uff1a \u5176\u4e2d\u524d\u7aef\u5e94\u7528\u4e2d \u53c2\u6570\u6570\u636e\u7c7b\u578b \uff0c\u70ba\u533a\u5206\u53c2\u6570\u53d8\u91cf\uff0c\u4f1a\u52a0\u4e0a {} \uff0c\u5982\uff1a {\u53c2\u6570\u6570\u636e\u7c7b\u578b} \u4f8b\u5b50 <?php /** * \u52a0\u6cd5\u8ba1\u7b97 * * @author \u4f5c\u8005 <\u90ae\u7bb1> * @param number $m \u53c2\u65701 * @param number $n \u53c2\u65702 * * @return number */ function calc ( $m , $n ) { return $m + $n ; }","title":"\u89c4\u8303\u6ce8\u91ca"},{"location":"php/phpdoc/#_2","text":"\u6807\u8bc6 \u8bf4\u660e integer \u6216 int \u6574\u6570\u7c7b\u578b boolean \u6216 bool \u5e03\u5c14\u503c\u7c7b\u578b number \u6570\u5b57 string \u5b57\u7b26\u4e32 array \u6570\u7ec4 object \u5bf9\u8c61 mixed \u6df7\u5408\u7c7b\u578b void \u7a7a\u7c7b\u578b","title":"\u6570\u636e\u7c7b\u578b"},{"location":"php/phpdoc/#_3","text":"\u6587\u6863\u6807\u8bb0\u7684\u4f7f\u7528\u8303\u56f4\u662f\u6307\u8be5\u6807\u8bb0\u53ef\u4ee5\u7528\u6765\u4fee\u9970\u7684\u5173\u952e\u5b57\uff0c\u6216\u5176\u4ed6\u6587\u6863\u6807\u8bb0\u3002 \u6240\u6709\u7684\u6587\u6863\u6807\u8bb0\u90fd\u662f\u5728\u6bcf\u4e00\u884c\u7684 * \u540e\u9762\u4ee5 @ \u5f00\u5934\u3002\u5982\u679c\u5728\u4e00\u6bb5\u8bdd\u7684\u4e2d\u95f4\u51fa\u6765@\u7684\u6807\u8bb0\uff0c\u8fd9\u4e2a\u6807\u8bb0\u5c06\u4f1a\u88ab\u5f53\u505a\u666e\u901a\u5185\u5bb9\u800c\u88ab\u5ffd\u7565\u6389\u3002 <?php /** * @name \u540d\u5b57 * @abstract \u7533\u660e\u53d8\u91cf/\u7c7b/\u65b9\u6cd5 * @access \u6307\u660e\u8fd9\u4e2a\u53d8\u91cf\u3001\u7c7b\u3001\u51fd\u6570/\u65b9\u6cd5\u7684\u5b58\u53d6\u6743\u9650 * @author \u51fd\u6570\u4f5c\u8005\u7684\u540d\u5b57\u548c\u90ae\u7bb1\u5730\u5740 * @category \u7ec4\u7ec7packages * @copyright \u6307\u660e\u7248\u6743\u4fe1\u606f * @const \u6307\u660e\u5e38\u91cf * @deprecate \u6307\u660e\u4e0d\u63a8\u8350\u6216\u8005\u662f\u5e9f\u5f03\u7684\u4fe1\u606f * @example \u793a\u4f8b * @exclude \u6307\u660e\u5f53\u524d\u7684\u6ce8\u91ca\u5c06\u4e0d\u8fdb\u884c\u5206\u6790\uff0c\u4e0d\u51fa\u73b0\u5728\u6587\u6321\u4e2d * @final \u6307\u660e\u8fd9\u662f\u4e00\u4e2a\u6700\u7ec8\u7684\u7c7b\u3001\u65b9\u6cd5\u3001\u5c5e\u6027\uff0c\u7981\u6b62\u6d3e\u751f\u3001\u4fee\u6539\u3002 * @global \u6307\u660e\u5728\u6b64\u51fd\u6570\u4e2d\u5f15\u7528\u7684\u5168\u5c40\u53d8\u91cf * @include \u6307\u660e\u5305\u542b\u7684\u6587\u4ef6\u7684\u4fe1\u606f * @link \u5b9a\u4e49\u5728\u7ebf\u8fde\u63a5 * @module \u5b9a\u4e49\u5f52\u5c5e\u7684\u6a21\u5757\u4fe1\u606f * @modulegroup \u5b9a\u4e49\u5f52\u5c5e\u7684\u6a21\u5757\u7ec4 * @package \u5b9a\u4e49\u5f52\u5c5e\u7684\u5305\u7684\u4fe1\u606f * @param \u5b9a\u4e49\u51fd\u6570\u6216\u8005\u65b9\u6cd5\u7684\u53c2\u6570\u4fe1\u606f * @return \u5b9a\u4e49\u51fd\u6570\u6216\u8005\u65b9\u6cd5\u7684\u8fd4\u56de\u4fe1\u606f * @see \u5b9a\u4e49\u9700\u8981\u53c2\u8003\u7684\u51fd\u6570\u3001\u53d8\u91cf\uff0c\u5e76\u52a0\u5165\u76f8\u5e94\u7684\u8d85\u7ea7\u8fde\u63a5\u3002 * @since \u6307\u660e\u8be5api\u51fd\u6570\u6216\u8005\u65b9\u6cd5\u662f\u4ece\u54ea\u4e2a\u7248\u672c\u5f00\u59cb\u5f15\u5165\u7684 * @static \u6307\u660e\u53d8\u91cf\u3001\u7c7b\u3001\u51fd\u6570\u662f\u9759\u6001\u7684\u3002 * @throws \u6307\u660e\u6b64\u51fd\u6570\u53ef\u80fd\u629b\u51fa\u7684\u9519\u8bef\u5f02\u5e38,\u6781\u5176\u53d1\u751f\u7684\u60c5\u51b5 * @todo \u6307\u660e\u5e94\u8be5\u6539\u8fdb\u6216\u6ca1\u6709\u5b9e\u73b0\u7684\u5730\u65b9 * @var \u5b9a\u4e49\u8bf4\u660e\u53d8\u91cf/\u5c5e\u6027\u3002 * @version \u5b9a\u4e49\u7248\u672c\u4fe1\u606f */ @access \u4f7f\u7528\u8303\u56f4\uff1a class , function , var , define , module \u8be5\u6807\u8bb0\u7528\u4e8e\u6307\u660e\u5173\u952e\u5b57\u7684\u5b58\u53d6\u6743\u9650\uff1a private \u3001 public \u6216 proteced @author \u6307\u660e\u4f5c\u8005 @copyright \u4f7f\u7528\u8303\u56f4\uff1a class \uff0c function \uff0c var \uff0c define \uff0c module \uff0c use \u6307\u660e\u7248\u6743\u4fe1\u606f @deprecated \u4f7f\u7528\u8303\u56f4\uff1a class \uff0c function \uff0c var \uff0c define \uff0c module \uff0c constent \uff0c global \uff0c include \u6307\u660e\u4e0d\u7528\u6216\u8005\u5e9f\u5f03\u7684\u5173\u952e\u5b57 @example \u8be5\u6807\u8bb0\u7528\u4e8e\u89e3\u6790\u4e00\u6bb5\u6587\u4ef6\u5185\u5bb9\uff0c\u5e76\u5c06\u4ed6\u4eec\u9ad8\u4eae\u663e\u793a\u3002Phpdoc\u4f1a\u8bd5\u56fe\u4ece\u8be5\u6807\u8bb0\u7ed9\u7684\u6587\u4ef6\u8def\u5f84\u4e2d\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9 @const \u4f7f\u7528\u8303\u56f4\uff1a define \u7528\u6765\u6307\u660ephp\u4e2ddefine\u7684\u5e38\u91cf @final \u4f7f\u7528\u8303\u56f4\uff1a class , function , var \u6307\u660e\u5173\u952e\u5b57\u662f\u4e00\u4e2a\u6700\u7ec8\u7684\u7c7b\u3001\u65b9\u6cd5\u3001\u5c5e\u6027\uff0c\u7981\u6b62\u6d3e\u751f\u3001\u4fee\u6539\u3002 @filesource \u548cexample\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u8be5\u6807\u8bb0\u5c06\u76f4\u63a5\u8bfb\u53d6\u5f53\u524d\u89e3\u6790\u7684php\u6587\u4ef6\u7684\u5185\u5bb9\u5e76\u663e\u793a\u3002 @global \u6307\u660e\u5728\u6b64\u51fd\u6570\u4e2d\u5f15\u7528\u7684\u5168\u5c40\u53d8\u91cf @ingore \u7528\u4e8e\u5728\u6587\u6863\u4e2d\u5ffd\u7565\u6307\u5b9a\u7684\u5173\u952e\u5b57 @license \u8bb8\u53ef\u6743 @link \u7c7b\u4f3c\u4e8e license \uff1b\u4f46\u8fd8\u53ef\u4ee5\u901a\u8fc7link\u6307\u5230\u6587\u6863\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u5173\u952e\u5b57 @name \u4e3a\u5173\u952e\u5b57\u6307\u5b9a\u4e00\u4e2a\u522b\u540d\u3002 @package \u4f7f\u7528\u8303\u56f4\uff1a\u9875\u9762\u7ea7\u522b\u7684-> define \uff0c function \uff0c include \u7c7b\u7ea7\u522b\u7684-> class \uff0c var \uff0c methods \u7528\u4e8e\u903b\u8f91\u4e0a\u5c06\u4e00\u4e2a\u6216\u51e0\u4e2a\u5173\u952e\u5b57\u5206\u5230\u4e00\u7ec4\u3002 @abstrcut \u8bf4\u660e\u5f53\u524d\u7c7b\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b @param \u6307\u660e\u4e00\u4e2a\u51fd\u6570\u7684\u53c2\u6570 @return \u6307\u660e\u4e00\u4e2a\u65b9\u6cd5\u6216\u51fd\u6570\u7684\u8fd4\u56de\u6307 @static \u6307\u660e\u5173\u5efa\u5b57\u662f\u9759\u6001\u7684\u3002 @var \u6307\u660e\u53d8\u91cf\u7c7b\u578b @version \u6307\u660e\u7248\u672c\u4fe1\u606f @todo \u6307\u660e\u5e94\u8be5\u6539\u8fdb\u6216\u6ca1\u6709\u5b9e\u73b0\u7684\u5730\u65b9 @throws \u6307\u660e\u6b64\u51fd\u6570\u53ef\u80fd\u629b\u51fa\u7684\u9519\u8bef\u5f02\u5e38,\u6781\u5176\u53d1\u751f\u7684\u60c5\u51b5 \u4e0a\u9762\u63d0\u5230\u8fc7\uff0c\u666e\u901a\u7684\u6587\u6863\u6807\u8bb0\u6807\u8bb0\u5fc5\u987b\u5728\u6bcf\u884c\u7684\u5f00\u5934\u4ee5@\u6807\u8bb0\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u6807\u8bb0\u53eb\u505ainline tag,\u7528{@}\u8868\u793a\uff0c\u5177\u4f53\u5305\u62ec\u4ee5\u4e0b\u51e0\u79cd\uff1a {@link} \u7528\u6cd5\u540c @link {@source} \u663e\u793a\u4e00\u6bb5\u51fd\u6570\u6216\u65b9\u6cd5\u7684\u5185\u5bb9","title":"\u6587\u6863\u6807\u8bb0"},{"location":"php/psr/","text":"PHP \u7f16\u7801\u89c4\u8303 # \u672c\u6587\u6863\u662fPHP\u4e92\u64cd\u4f5c\u6027\u6846\u67b6\u5236\u5b9a\u5c0f\u7ec4\uff08 PHP-FIG :PHP Framework Interoperability Group\uff09\u5236\u5b9a\u7684PHP\u7f16\u7801\u89c4\u8303\uff08 PSR :Proposing a Standards Recommendation\uff09\u4e2d\u8bd1\u7248\u3002 \u7ffb\u8bd1\u8fc7\u7a0b\u4e2d\u53c2\u7167\u4e86 \u83ab\u5e0c\u723e(Mosil)\u624b\u672d \u7684\u7e41\u4f53\u4e2d\u6587\u7248\uff0c\u4ee5\u53ca Corrie Zhao \u7ec4\u7ec7\u7ffb\u8bd1\u7684\u7b80\u4f53\u4e2d\u6587\u7248\uff0c \u8bd1\u6587\u4e2d\u4e3a\u4e86\u8ba9\u8bed\u53e5\u901a\u987a\uff0c\u4fbf\u4e8e\u7406\u89e3\uff0c\u6ca1\u6709\u5bf9\u539f\u6587\u9010\u5b57\u7ffb\u8bd1\uff0c\u4e2a\u522b\u8bed\u53e5\u4e0e\u539f\u6587\u539f\u610f\u53ef\u80fd\u7565\u6709\u504f\u5dee\uff0c\u5e0c\u671b\u544a\u77e5\u6307\u6b63\u3002 \u76ee\u524d\u5b98\u65b9\u5df2\u5236\u5b9a\u7684\u89c4\u8303\u5305\u62ec\u4ee5\u4e0b\u6587\u4ef6\uff1a PHP PSR-0 \u81ea\u52a8\u52a0\u8f7d\u89c4\u8303 (\u5df2\u5e9f\u5f03) PHP PSR-1 \u57fa\u672c\u4ee3\u7801\u89c4\u8303 PHP PSR-2 \u4ee3\u7801\u98ce\u683c\u89c4\u8303 PHP PSR-3 \u65e5\u5fd7\u63a5\u53e3\u89c4\u8303 PHP PSR-4 \u81ea\u52a8\u8f7d\u5165Autoloader PHP PSR-4 \u81ea\u52a8\u8f7d\u5165Autoloader - \u76f8\u5173\u793a\u4f8b PHP PSR-7 HTTP\u6d88\u606f\u63a5\u53e3 \u539f\u6587\uff1a https://github.com/PizzaLiu/PHP-FIG","title":"\u6982\u8ff0"},{"location":"php/psr/#php","text":"\u672c\u6587\u6863\u662fPHP\u4e92\u64cd\u4f5c\u6027\u6846\u67b6\u5236\u5b9a\u5c0f\u7ec4\uff08 PHP-FIG :PHP Framework Interoperability Group\uff09\u5236\u5b9a\u7684PHP\u7f16\u7801\u89c4\u8303\uff08 PSR :Proposing a Standards Recommendation\uff09\u4e2d\u8bd1\u7248\u3002 \u7ffb\u8bd1\u8fc7\u7a0b\u4e2d\u53c2\u7167\u4e86 \u83ab\u5e0c\u723e(Mosil)\u624b\u672d \u7684\u7e41\u4f53\u4e2d\u6587\u7248\uff0c\u4ee5\u53ca Corrie Zhao \u7ec4\u7ec7\u7ffb\u8bd1\u7684\u7b80\u4f53\u4e2d\u6587\u7248\uff0c \u8bd1\u6587\u4e2d\u4e3a\u4e86\u8ba9\u8bed\u53e5\u901a\u987a\uff0c\u4fbf\u4e8e\u7406\u89e3\uff0c\u6ca1\u6709\u5bf9\u539f\u6587\u9010\u5b57\u7ffb\u8bd1\uff0c\u4e2a\u522b\u8bed\u53e5\u4e0e\u539f\u6587\u539f\u610f\u53ef\u80fd\u7565\u6709\u504f\u5dee\uff0c\u5e0c\u671b\u544a\u77e5\u6307\u6b63\u3002 \u76ee\u524d\u5b98\u65b9\u5df2\u5236\u5b9a\u7684\u89c4\u8303\u5305\u62ec\u4ee5\u4e0b\u6587\u4ef6\uff1a PHP PSR-0 \u81ea\u52a8\u52a0\u8f7d\u89c4\u8303 (\u5df2\u5e9f\u5f03) PHP PSR-1 \u57fa\u672c\u4ee3\u7801\u89c4\u8303 PHP PSR-2 \u4ee3\u7801\u98ce\u683c\u89c4\u8303 PHP PSR-3 \u65e5\u5fd7\u63a5\u53e3\u89c4\u8303 PHP PSR-4 \u81ea\u52a8\u8f7d\u5165Autoloader PHP PSR-4 \u81ea\u52a8\u8f7d\u5165Autoloader - \u76f8\u5173\u793a\u4f8b PHP PSR-7 HTTP\u6d88\u606f\u63a5\u53e3 \u539f\u6587\uff1a https://github.com/PizzaLiu/PHP-FIG","title":"PHP \u7f16\u7801\u89c4\u8303"},{"location":"php/psr/psr-0/","text":"PHP PSR-0 \u81ea\u52a8\u52a0\u8f7d\u89c4\u8303 # \u6b64\u89c4\u8303\u5df2\u88ab\u5f03\u7528 - \u672c\u89c4\u8303\u5df2\u4e8e2014\u5e7410\u670821\u65e5\u88ab\u6807\u8bb0\u4e3a\u5f03\u7528\uff0c\u76ee\u524d\u6700\u65b0\u7684\u66ff\u4ee3\u89c4\u8303\u4e3a PSR-4 \u3002 \u672c\u6587\u662f\u4e3a \u81ea\u52a8\u52a0\u8f7d\u5668\uff08autoloader\uff09 \u5b9e\u73b0\u901a\u7528\u81ea\u52a8\u52a0\u8f7d\uff0c\u6240\u9700\u8981\u9075\u5faa\u7684\u7f16\u7801\u89c4\u8303\u3002 \u89c4\u8303\u8bf4\u660e # \u4e00\u4e2a\u6807\u51c6\u7684 \u547d\u540d\u7a7a\u95f4(namespace) \u4e0e \u7c7b(class) \u540d\u79f0\u7684\u5b9a\u4e49\u5fc5\u987b\u7b26\u5408\u4ee5\u4e0b\u7ed3\u6784\uff1a \\<Vendor Name>\\(<Namespace>\\)*<Class Name> \uff1b \u5176\u4e2d Vendor Name \u4e3a\u6bcf\u4e2a\u547d\u540d\u7a7a\u95f4\u90fd\u5fc5\u987b\u8981\u6709\u7684\u4e00\u4e2a\u9876\u7ea7\u547d\u540d\u7a7a\u95f4\u540d\uff1b \u9700\u8981\u7684\u8bdd\uff0c\u6bcf\u4e2a\u547d\u540d\u7a7a\u95f4\u4e0b\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u5b50\u547d\u540d\u7a7a\u95f4\uff1b \u5f53\u6839\u636e\u5b8c\u6574\u7684\u547d\u540d\u7a7a\u95f4\u540d\u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u8f7d\u5165\u7c7b\u6587\u4ef6\u65f6\uff0c\u6bcf\u4e2a\u547d\u540d\u7a7a\u95f4\u4e4b\u95f4\u7684\u5206\u9694\u7b26\u90fd\u4f1a\u88ab\u8f6c\u6362\u6210\u6587\u4ef6\u5939\u8def\u5f84\u5206\u9694\u7b26\uff1b \u7c7b\u540d\u79f0\u4e2d\u7684\u6bcf\u4e2a _ \u5b57\u7b26\u4e5f\u4f1a\u88ab\u8f6c\u6362\u6210\u6587\u4ef6\u5939\u8def\u5f84\u5206\u9694\u7b26\uff0c\u800c\u547d\u540d\u7a7a\u95f4\u4e2d\u7684 _ \u5b57\u7b26\u5219\u662f\u65e0\u7279\u6b8a\u542b\u4e49\u7684\u3002 \u5f53\u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u8f7d\u5165\u6807\u51c6\u7684\u547d\u540d\u7a7a\u95f4\u6216\u7c7b\u65f6\uff0c\u90fd\u5c06\u6dfb\u52a0 .php \u4e3a\u76ee\u6807\u6587\u4ef6\u540e\u7f00\uff1b \u7ec4\u7ec7\u540d\u79f0(Vendor Name) \u3001 \u547d\u540d\u7a7a\u95f4(Namespace) \u4ee5\u53ca \u7c7b\u7684\u540d\u79f0(Class Name) \u53ef\u7531\u4efb\u610f\u5927\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002 \u8303\u4f8b # \\Doctrine\\Common\\IsolatedClassLoader => /path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php \\Symfony\\Core\\Request => /path/to/project/lib/vendor/Symfony/Core/Request.php \\Zend\\Acl => /path/to/project/lib/vendor/Zend/Acl.php \\Zend\\Mail\\Message => /path/to/project/lib/vendor/Zend/Mail/Message.php \u547d\u540d\u7a7a\u95f4\u4ee5\u53ca\u7c7b\u540d\u79f0\u4e2d\u7684\u4e0b\u5212\u7ebf # \\namespace\\package\\Class_Name => /path/to/project/lib/vendor/namespace/package/Class/Name.php \\namespace\\package_name\\Class_Name => /path/to/project/lib/vendor/namespace/package_name/Class/Name.php \u4ee5\u4e0a\u662f\u4f7f\u7528\u901a\u7528\u81ea\u52a8\u52a0\u8f7d\u5fc5\u987b\u9075\u5faa\u7684\u6700\u4f4e\u89c4\u8303\u6807\u51c6\uff0c \u53ef\u901a\u8fc7\u4ee5\u4e0b\u7684\u793a\u4f8b\u51fd\u6570 SplClassLoader \u8f7d\u5165 PHP 5.3 \u7684\u7c7b\u6587\u4ef6\uff0c\u6765\u9a8c\u8bc1\u4f60\u6240\u5199\u7684\u547d\u540d\u7a7a\u95f4\u4ee5\u53ca\u7c7b\u662f\u5426\u7b26\u5408\u4ee5\u4e0a\u89c4\u8303\u3002 \u5b9e\u4f8b # \u4ee5\u4e0b\u793a\u4f8b\u51fd\u6570\u4e3a\u672c\u89c4\u8303\u7684\u4e00\u4e2a\u7b80\u5355\u5b9e\u73b0\u3002 <?php function autoload ( $className ) { $className = ltrim ( $className , '\\\\' ); $fileName = '' ; $namespace = '' ; if ( $lastNsPos = strrpos ( $className , '\\\\' )) { $namespace = substr ( $className , 0 , $lastNsPos ); $className = substr ( $className , $lastNsPos + 1 ); $fileName = str_replace ( '\\\\' , DIRECTORY_SEPARATOR , $namespace ) . DIRECTORY_SEPARATOR ; } $fileName .= str_replace ( '_' , DIRECTORY_SEPARATOR , $className ) . '.php' ; require $fileName ; } SplClassLoader \u5b9e\u4f8b # \u4ee5\u4e0b\u7684 gist \u662f \u4e00\u4e2a SplClassLoader \u7c7b\u6587\u4ef6\u7684\u5b9e\u4f8b\uff0c\u5982\u679c\u4f60\u9075\u5faa\u4e86\u4ee5\u4e0a\u89c4\u8303\uff0c\u53ef\u4ee5\u628a\u5b83\u7528\u6765\u8f7d\u5165\u4f60\u7684\u7c7b\u6587\u4ef6\u3002 \u8fd9\u4e5f\u662f\u76ee\u524d PHP 5.3 \u5efa\u8bae\u7684\u7c7b\u6587\u4ef6\u8f7d\u5165\u65b9\u5f0f\u3002 http://gist.github.com/221634 \u539f\u6587 https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-0-cn.md","title":"PHP PSR-0 \u81ea\u52a8\u52a0\u8f7d\u89c4\u8303"},{"location":"php/psr/psr-0/#php-psr-0","text":"\u6b64\u89c4\u8303\u5df2\u88ab\u5f03\u7528 - \u672c\u89c4\u8303\u5df2\u4e8e2014\u5e7410\u670821\u65e5\u88ab\u6807\u8bb0\u4e3a\u5f03\u7528\uff0c\u76ee\u524d\u6700\u65b0\u7684\u66ff\u4ee3\u89c4\u8303\u4e3a PSR-4 \u3002 \u672c\u6587\u662f\u4e3a \u81ea\u52a8\u52a0\u8f7d\u5668\uff08autoloader\uff09 \u5b9e\u73b0\u901a\u7528\u81ea\u52a8\u52a0\u8f7d\uff0c\u6240\u9700\u8981\u9075\u5faa\u7684\u7f16\u7801\u89c4\u8303\u3002","title":"PHP PSR-0 \u81ea\u52a8\u52a0\u8f7d\u89c4\u8303"},{"location":"php/psr/psr-0/#_1","text":"\u4e00\u4e2a\u6807\u51c6\u7684 \u547d\u540d\u7a7a\u95f4(namespace) \u4e0e \u7c7b(class) \u540d\u79f0\u7684\u5b9a\u4e49\u5fc5\u987b\u7b26\u5408\u4ee5\u4e0b\u7ed3\u6784\uff1a \\<Vendor Name>\\(<Namespace>\\)*<Class Name> \uff1b \u5176\u4e2d Vendor Name \u4e3a\u6bcf\u4e2a\u547d\u540d\u7a7a\u95f4\u90fd\u5fc5\u987b\u8981\u6709\u7684\u4e00\u4e2a\u9876\u7ea7\u547d\u540d\u7a7a\u95f4\u540d\uff1b \u9700\u8981\u7684\u8bdd\uff0c\u6bcf\u4e2a\u547d\u540d\u7a7a\u95f4\u4e0b\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u5b50\u547d\u540d\u7a7a\u95f4\uff1b \u5f53\u6839\u636e\u5b8c\u6574\u7684\u547d\u540d\u7a7a\u95f4\u540d\u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u8f7d\u5165\u7c7b\u6587\u4ef6\u65f6\uff0c\u6bcf\u4e2a\u547d\u540d\u7a7a\u95f4\u4e4b\u95f4\u7684\u5206\u9694\u7b26\u90fd\u4f1a\u88ab\u8f6c\u6362\u6210\u6587\u4ef6\u5939\u8def\u5f84\u5206\u9694\u7b26\uff1b \u7c7b\u540d\u79f0\u4e2d\u7684\u6bcf\u4e2a _ \u5b57\u7b26\u4e5f\u4f1a\u88ab\u8f6c\u6362\u6210\u6587\u4ef6\u5939\u8def\u5f84\u5206\u9694\u7b26\uff0c\u800c\u547d\u540d\u7a7a\u95f4\u4e2d\u7684 _ \u5b57\u7b26\u5219\u662f\u65e0\u7279\u6b8a\u542b\u4e49\u7684\u3002 \u5f53\u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u8f7d\u5165\u6807\u51c6\u7684\u547d\u540d\u7a7a\u95f4\u6216\u7c7b\u65f6\uff0c\u90fd\u5c06\u6dfb\u52a0 .php \u4e3a\u76ee\u6807\u6587\u4ef6\u540e\u7f00\uff1b \u7ec4\u7ec7\u540d\u79f0(Vendor Name) \u3001 \u547d\u540d\u7a7a\u95f4(Namespace) \u4ee5\u53ca \u7c7b\u7684\u540d\u79f0(Class Name) \u53ef\u7531\u4efb\u610f\u5927\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002","title":"\u89c4\u8303\u8bf4\u660e"},{"location":"php/psr/psr-0/#_2","text":"\\Doctrine\\Common\\IsolatedClassLoader => /path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php \\Symfony\\Core\\Request => /path/to/project/lib/vendor/Symfony/Core/Request.php \\Zend\\Acl => /path/to/project/lib/vendor/Zend/Acl.php \\Zend\\Mail\\Message => /path/to/project/lib/vendor/Zend/Mail/Message.php","title":"\u8303\u4f8b"},{"location":"php/psr/psr-0/#_3","text":"\\namespace\\package\\Class_Name => /path/to/project/lib/vendor/namespace/package/Class/Name.php \\namespace\\package_name\\Class_Name => /path/to/project/lib/vendor/namespace/package_name/Class/Name.php \u4ee5\u4e0a\u662f\u4f7f\u7528\u901a\u7528\u81ea\u52a8\u52a0\u8f7d\u5fc5\u987b\u9075\u5faa\u7684\u6700\u4f4e\u89c4\u8303\u6807\u51c6\uff0c \u53ef\u901a\u8fc7\u4ee5\u4e0b\u7684\u793a\u4f8b\u51fd\u6570 SplClassLoader \u8f7d\u5165 PHP 5.3 \u7684\u7c7b\u6587\u4ef6\uff0c\u6765\u9a8c\u8bc1\u4f60\u6240\u5199\u7684\u547d\u540d\u7a7a\u95f4\u4ee5\u53ca\u7c7b\u662f\u5426\u7b26\u5408\u4ee5\u4e0a\u89c4\u8303\u3002","title":"\u547d\u540d\u7a7a\u95f4\u4ee5\u53ca\u7c7b\u540d\u79f0\u4e2d\u7684\u4e0b\u5212\u7ebf"},{"location":"php/psr/psr-0/#_4","text":"\u4ee5\u4e0b\u793a\u4f8b\u51fd\u6570\u4e3a\u672c\u89c4\u8303\u7684\u4e00\u4e2a\u7b80\u5355\u5b9e\u73b0\u3002 <?php function autoload ( $className ) { $className = ltrim ( $className , '\\\\' ); $fileName = '' ; $namespace = '' ; if ( $lastNsPos = strrpos ( $className , '\\\\' )) { $namespace = substr ( $className , 0 , $lastNsPos ); $className = substr ( $className , $lastNsPos + 1 ); $fileName = str_replace ( '\\\\' , DIRECTORY_SEPARATOR , $namespace ) . DIRECTORY_SEPARATOR ; } $fileName .= str_replace ( '_' , DIRECTORY_SEPARATOR , $className ) . '.php' ; require $fileName ; }","title":"\u5b9e\u4f8b"},{"location":"php/psr/psr-0/#splclassloader","text":"\u4ee5\u4e0b\u7684 gist \u662f \u4e00\u4e2a SplClassLoader \u7c7b\u6587\u4ef6\u7684\u5b9e\u4f8b\uff0c\u5982\u679c\u4f60\u9075\u5faa\u4e86\u4ee5\u4e0a\u89c4\u8303\uff0c\u53ef\u4ee5\u628a\u5b83\u7528\u6765\u8f7d\u5165\u4f60\u7684\u7c7b\u6587\u4ef6\u3002 \u8fd9\u4e5f\u662f\u76ee\u524d PHP 5.3 \u5efa\u8bae\u7684\u7c7b\u6587\u4ef6\u8f7d\u5165\u65b9\u5f0f\u3002 http://gist.github.com/221634 \u539f\u6587 https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-0-cn.md","title":"SplClassLoader \u5b9e\u4f8b"},{"location":"php/psr/psr-1/","text":"PHP PSR-1 \u57fa\u672c\u4ee3\u7801\u89c4\u8303 # \u672c\u7bc7\u89c4\u8303\u5236\u5b9a\u4e86\u4ee3\u7801\u57fa\u672c\u5143\u7d20\u7684\u76f8\u5173\u6807\u51c6\uff0c \u4ee5\u786e\u4fdd\u5171\u4eab\u7684PHP\u4ee3\u7801\u95f4\u5177\u6709\u8f83\u9ad8\u7a0b\u5ea6\u7684\u6280\u672f\u4e92\u901a\u6027\u3002 \u5173\u952e\u8bcd \u201c\u5fc5\u987b\u201d(\"MUST\")\u3001\u201c\u4e00\u5b9a\u4e0d\u53ef/\u4e00\u5b9a\u4e0d\u80fd\u201d(\"MUST NOT\")\u3001\u201c\u9700\u8981\u201d(\"REQUIRED\")\u3001 \u201c\u5c06\u4f1a\u201d(\"SHALL\")\u3001\u201c\u4e0d\u4f1a\u201d(\"SHALL NOT\")\u3001\u201c\u5e94\u8be5\u201d(\"SHOULD\")\u3001\u201c\u4e0d\u8be5\u201d(\"SHOULD NOT\")\u3001 \u201c\u63a8\u8350\u201d(\"RECOMMENDED\")\u3001\u201c\u53ef\u4ee5\u201d(\"MAY\")\u548c\u201d\u53ef\u9009\u201c(\"OPTIONAL\")\u7684\u8be6\u7ec6\u63cf\u8ff0\u53ef\u53c2\u89c1 RFC 2119 \u3002 1. \u6982\u89c8 # PHP\u4ee3\u7801\u6587\u4ef6 \u5fc5\u987b \u4ee5 <?php \u6216 <?= \u6807\u7b7e\u5f00\u59cb\uff1b PHP\u4ee3\u7801\u6587\u4ef6 \u5fc5\u987b \u4ee5 \u4e0d\u5e26BOM\u7684 UTF-8 \u7f16\u7801\uff1b PHP\u4ee3\u7801\u4e2d \u5e94\u8be5 \u53ea\u5b9a\u4e49\u7c7b\u3001\u51fd\u6570\u3001\u5e38\u91cf\u7b49\u58f0\u660e\uff0c\u6216\u5176\u4ed6\u4f1a\u4ea7\u751f \u4ece\u5c5e\u6548\u5e94 \u7684\u64cd\u4f5c\uff08\u5982\uff1a\u751f\u6210\u6587\u4ef6\u8f93\u51fa\u4ee5\u53ca\u4fee\u6539.ini\u914d\u7f6e\u6587\u4ef6\u7b49\uff09\uff0c\u4e8c\u8005\u53ea\u80fd\u9009\u5176\u4e00\uff1b \u547d\u540d\u7a7a\u95f4\u4ee5\u53ca\u7c7b \u5fc5\u987b \u7b26\u5408 PSR \u7684\u81ea\u52a8\u52a0\u8f7d\u89c4\u8303\uff1a PSR-4 \uff1b \u7c7b\u7684\u547d\u540d \u5fc5\u987b \u9075\u5faa StudlyCaps \u5927\u5199\u5f00\u5934\u7684\u9a7c\u5cf0\u547d\u540d\u89c4\u8303\uff1b \u7c7b\u4e2d\u7684\u5e38\u91cf\u6240\u6709\u5b57\u6bcd\u90fd \u5fc5\u987b \u5927\u5199\uff0c\u5355\u8bcd\u95f4\u7528\u4e0b\u5212\u7ebf\u5206\u9694\uff1b \u65b9\u6cd5\u540d\u79f0 \u5fc5\u987b \u7b26\u5408 camelCase \u5f0f\u7684\u5c0f\u5199\u5f00\u5934\u9a7c\u5cf0\u547d\u540d\u89c4\u8303\u3002 2. \u6587\u4ef6 # 2.1. PHP\u6807\u7b7e # PHP\u4ee3\u7801 \u5fc5\u987b \u4f7f\u7528 <?php ?> \u957f\u6807\u7b7e \u6216 <?= ?> \u77ed\u8f93\u51fa\u6807\u7b7e\uff1b \u4e00\u5b9a\u4e0d\u53ef \u4f7f\u7528\u5176\u5b83\u81ea\u5b9a\u4e49\u6807\u7b7e\u3002 2.2. \u5b57\u7b26\u7f16\u7801 # PHP\u4ee3\u7801 \u5fc5\u987b \u4e14\u53ea\u53ef\u4f7f\u7528 \u4e0d\u5e26BOM\u7684UTF-8 \u7f16\u7801\u3002 2.3. \u4ece\u5c5e\u6548\u5e94\uff08\u526f\u4f5c\u7528\uff09 # \u4e00\u4efdPHP\u6587\u4ef6\u4e2d \u5e94\u8be5 \u8981\u4e0d\u5c31\u53ea\u5b9a\u4e49\u65b0\u7684\u58f0\u660e\uff0c\u5982\u7c7b\u3001\u51fd\u6570\u6216\u5e38\u91cf\u7b49\u4e0d\u4ea7\u751f\u4ece\u5c5e\u6548\u5e94\u7684\u64cd\u4f5c\uff0c\u8981\u4e0d\u5c31\u53ea\u6709\u4f1a\u4ea7\u751f\u4ece\u5c5e\u6548\u5e94\u7684\u903b\u8f91\u64cd\u4f5c\uff0c\u4f46 \u4e0d\u8be5 \u540c\u65f6\u5177\u6709\u4e24\u8005\u3002 \u201c\u4ece\u5c5e\u6548\u5e94\u201d(side effects)\u4e00\u8bcd\u7684\u610f\u601d\u662f\uff0c\u4ec5\u4ec5\u901a\u8fc7\u5305\u542b\u6587\u4ef6\uff0c\u4e0d\u76f4\u63a5\u58f0\u660e\u7c7b\u3001 \u51fd\u6570\u548c\u5e38\u91cf\u7b49\uff0c\u800c\u6267\u884c\u7684\u903b\u8f91\u64cd\u4f5c\u3002 \u201c\u4ece\u5c5e\u6548\u5e94\u201d\u5305\u542b\u5374\u4e0d\u4ec5\u9650\u4e8e\uff1a\u751f\u6210\u8f93\u51fa\u3001\u76f4\u63a5\u7684 require \u6216 include \u3001\u8fde\u63a5\u5916\u90e8\u670d\u52a1\u3001\u4fee\u6539 ini \u914d\u7f6e\u3001\u629b\u51fa\u9519\u8bef\u6216\u5f02\u5e38\u3001\u4fee\u6539\u5168\u5c40\u6216\u9759\u6001\u53d8\u91cf\u3001\u8bfb\u6216\u5199\u6587\u4ef6\u7b49\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u9519\u8bef\u7684\u4f8b\u5b50\uff0c\u4e00\u4efd\u5305\u542b\u58f0\u660e\u4ee5\u53ca\u4ea7\u751f\u4ece\u5c5e\u6548\u5e94\u7684\u4ee3\u7801\uff1a <?php // \u4ece\u5c5e\u6548\u5e94\uff1a\u4fee\u6539 ini \u914d\u7f6e ini_set ( 'error_reporting' , E_ALL ); // \u4ece\u5c5e\u6548\u5e94\uff1a\u5f15\u5165\u6587\u4ef6 include \"file.php\" ; // \u4ece\u5c5e\u6548\u5e94\uff1a\u751f\u6210\u8f93\u51fa echo \"<html> \\n \" ; // \u58f0\u660e\u51fd\u6570 function foo () { // \u51fd\u6570\u4e3b\u4f53\u90e8\u5206 } \u4e0b\u9762\u662f\u4e00\u4e2a\u8303\u4f8b\uff0c\u4e00\u4efd\u53ea\u5305\u542b\u58f0\u660e\u4e0d\u4ea7\u751f\u4ece\u5c5e\u6548\u5e94\u7684\u4ee3\u7801\uff1a <?php // \u58f0\u660e\u51fd\u6570 function foo () { // \u51fd\u6570\u4e3b\u4f53\u90e8\u5206 } // \u6761\u4ef6\u58f0\u660e**\u4e0d**\u5c5e\u4e8e\u4ece\u5c5e\u6548\u5e94 if ( ! function_exists ( 'bar' )) { function bar () { // \u51fd\u6570\u4e3b\u4f53\u90e8\u5206 } } 3. \u547d\u540d\u7a7a\u95f4\u548c\u7c7b # \u547d\u540d\u7a7a\u95f4\u4ee5\u53ca\u7c7b\u7684\u547d\u540d\u5fc5\u987b\u9075\u5faa PSR-4 \u3002 \u6839\u636e\u89c4\u8303\uff0c\u6bcf\u4e2a\u7c7b\u90fd\u72ec\u7acb\u4e3a\u4e00\u4e2a\u6587\u4ef6\uff0c\u4e14\u547d\u540d\u7a7a\u95f4\u81f3\u5c11\u6709\u4e00\u4e2a\u5c42\u6b21\uff1a\u9876\u7ea7\u7684\u7ec4\u7ec7\u540d\u79f0\uff08vendor name\uff09\u3002 \u7c7b\u7684\u547d\u540d\u5fc5\u987b \u9075\u5faa StudlyCaps \u5927\u5199\u5f00\u5934\u7684\u9a7c\u5cf0\u547d\u540d\u89c4\u8303\u3002 PHP 5.3\u53ca\u4ee5\u540e\u7248\u672c\u7684\u4ee3\u7801 \u5fc5\u987b \u4f7f\u7528\u6b63\u5f0f\u7684\u547d\u540d\u7a7a\u95f4\u3002 \u4f8b\u5982\uff1a <?php // PHP 5.3\u53ca\u4ee5\u540e\u7248\u672c\u7684\u5199\u6cd5 namespace Vendor\\Model ; class Foo { } 5.2.x\u53ca\u4e4b\u524d\u7684\u7248\u672c \u5e94\u8be5 \u4f7f\u7528\u4f2a\u547d\u540d\u7a7a\u95f4\u7684\u5199\u6cd5\uff0c\u7ea6\u5b9a\u4fd7\u6210\u4f7f\u7528\u9876\u7ea7\u7684\u7ec4\u7ec7\u540d\u79f0\uff08vendor name\uff09\u5982 Vendor_ \u4e3a\u7c7b\u524d\u7f00\u3002 <?php // 5.2.x\u53ca\u4e4b\u524d\u7248\u672c\u7684\u5199\u6cd5 class Vendor_Model_Foo { } 4. \u7c7b\u7684\u5e38\u91cf\u3001\u5c5e\u6027\u548c\u65b9\u6cd5 # \u6b64\u5904\u7684\u201c\u7c7b\u201d\u6307\u4ee3\u6240\u6709\u7684\u7c7b\u3001\u63a5\u53e3\u4ee5\u53ca\u53ef\u590d\u7528\u4ee3\u7801\u5757\uff08traits\uff09 4.1. \u5e38\u91cf # \u7c7b\u7684\u5e38\u91cf\u4e2d\u6240\u6709\u5b57\u6bcd\u90fd \u5fc5\u987b \u5927\u5199\uff0c\u8bcd\u95f4\u4ee5\u4e0b\u5212\u7ebf\u5206\u9694\u3002 \u53c2\u7167\u4ee5\u4e0b\u4ee3\u7801\uff1a <?php namespace Vendor\\Model ; class Foo { const VERSION = '1.0' ; const DATE_APPROVED = '2012-06-01' ; } 4.2. \u5c5e\u6027 # \u7c7b\u7684\u5c5e\u6027\u547d\u540d\u53ef\u4ee5\u9075\u5faa \u5927\u5199\u5f00\u5934\u7684\u9a7c\u5cf0\u5f0f ( $StudlyCaps )\u3001\u5c0f\u5199\u5f00\u5934\u7684\u9a7c\u5cf0\u5f0f ( $camelCase ) \u53c8\u6216\u8005\u662f \u4e0b\u5212\u7ebf\u5206\u9694\u5f0f ( $under_score )\uff0c\u672c\u89c4\u8303\u4e0d\u505a\u5f3a\u5236\u8981\u6c42\uff0c\u4f46\u65e0\u8bba\u9075\u5faa\u54ea\u79cd\u547d\u540d\u65b9\u5f0f\uff0c\u90fd \u5e94\u8be5 \u5728\u4e00\u5b9a\u7684\u8303\u56f4\u5185\u4fdd\u6301\u4e00\u81f4\u3002\u8fd9\u4e2a\u8303\u56f4\u53ef\u4ee5\u662f\u6574\u4e2a\u56e2\u961f\u3001\u6574\u4e2a\u5305\u3001\u6574\u4e2a\u7c7b\u6216\u6574\u4e2a\u65b9\u6cd5\u3002 4.3. \u65b9\u6cd5 # \u65b9\u6cd5\u540d\u79f0 \u5fc5\u987b \u7b26\u5408 camelCase() \u5f0f\u7684\u5c0f\u5199\u5f00\u5934\u9a7c\u5cf0\u547d\u540d\u89c4\u8303\u3002 \u539f\u6587 https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-1-basic-coding-standard-cn.md","title":"PHP PSR-1 \u57fa\u672c\u4ee3\u7801\u89c4\u8303"},{"location":"php/psr/psr-1/#php-psr-1","text":"\u672c\u7bc7\u89c4\u8303\u5236\u5b9a\u4e86\u4ee3\u7801\u57fa\u672c\u5143\u7d20\u7684\u76f8\u5173\u6807\u51c6\uff0c \u4ee5\u786e\u4fdd\u5171\u4eab\u7684PHP\u4ee3\u7801\u95f4\u5177\u6709\u8f83\u9ad8\u7a0b\u5ea6\u7684\u6280\u672f\u4e92\u901a\u6027\u3002 \u5173\u952e\u8bcd \u201c\u5fc5\u987b\u201d(\"MUST\")\u3001\u201c\u4e00\u5b9a\u4e0d\u53ef/\u4e00\u5b9a\u4e0d\u80fd\u201d(\"MUST NOT\")\u3001\u201c\u9700\u8981\u201d(\"REQUIRED\")\u3001 \u201c\u5c06\u4f1a\u201d(\"SHALL\")\u3001\u201c\u4e0d\u4f1a\u201d(\"SHALL NOT\")\u3001\u201c\u5e94\u8be5\u201d(\"SHOULD\")\u3001\u201c\u4e0d\u8be5\u201d(\"SHOULD NOT\")\u3001 \u201c\u63a8\u8350\u201d(\"RECOMMENDED\")\u3001\u201c\u53ef\u4ee5\u201d(\"MAY\")\u548c\u201d\u53ef\u9009\u201c(\"OPTIONAL\")\u7684\u8be6\u7ec6\u63cf\u8ff0\u53ef\u53c2\u89c1 RFC 2119 \u3002","title":"PHP PSR-1 \u57fa\u672c\u4ee3\u7801\u89c4\u8303"},{"location":"php/psr/psr-1/#1","text":"PHP\u4ee3\u7801\u6587\u4ef6 \u5fc5\u987b \u4ee5 <?php \u6216 <?= \u6807\u7b7e\u5f00\u59cb\uff1b PHP\u4ee3\u7801\u6587\u4ef6 \u5fc5\u987b \u4ee5 \u4e0d\u5e26BOM\u7684 UTF-8 \u7f16\u7801\uff1b PHP\u4ee3\u7801\u4e2d \u5e94\u8be5 \u53ea\u5b9a\u4e49\u7c7b\u3001\u51fd\u6570\u3001\u5e38\u91cf\u7b49\u58f0\u660e\uff0c\u6216\u5176\u4ed6\u4f1a\u4ea7\u751f \u4ece\u5c5e\u6548\u5e94 \u7684\u64cd\u4f5c\uff08\u5982\uff1a\u751f\u6210\u6587\u4ef6\u8f93\u51fa\u4ee5\u53ca\u4fee\u6539.ini\u914d\u7f6e\u6587\u4ef6\u7b49\uff09\uff0c\u4e8c\u8005\u53ea\u80fd\u9009\u5176\u4e00\uff1b \u547d\u540d\u7a7a\u95f4\u4ee5\u53ca\u7c7b \u5fc5\u987b \u7b26\u5408 PSR \u7684\u81ea\u52a8\u52a0\u8f7d\u89c4\u8303\uff1a PSR-4 \uff1b \u7c7b\u7684\u547d\u540d \u5fc5\u987b \u9075\u5faa StudlyCaps \u5927\u5199\u5f00\u5934\u7684\u9a7c\u5cf0\u547d\u540d\u89c4\u8303\uff1b \u7c7b\u4e2d\u7684\u5e38\u91cf\u6240\u6709\u5b57\u6bcd\u90fd \u5fc5\u987b \u5927\u5199\uff0c\u5355\u8bcd\u95f4\u7528\u4e0b\u5212\u7ebf\u5206\u9694\uff1b \u65b9\u6cd5\u540d\u79f0 \u5fc5\u987b \u7b26\u5408 camelCase \u5f0f\u7684\u5c0f\u5199\u5f00\u5934\u9a7c\u5cf0\u547d\u540d\u89c4\u8303\u3002","title":"1. \u6982\u89c8"},{"location":"php/psr/psr-1/#2","text":"","title":"2. \u6587\u4ef6"},{"location":"php/psr/psr-1/#21-php","text":"PHP\u4ee3\u7801 \u5fc5\u987b \u4f7f\u7528 <?php ?> \u957f\u6807\u7b7e \u6216 <?= ?> \u77ed\u8f93\u51fa\u6807\u7b7e\uff1b \u4e00\u5b9a\u4e0d\u53ef \u4f7f\u7528\u5176\u5b83\u81ea\u5b9a\u4e49\u6807\u7b7e\u3002","title":"2.1. PHP\u6807\u7b7e"},{"location":"php/psr/psr-1/#22","text":"PHP\u4ee3\u7801 \u5fc5\u987b \u4e14\u53ea\u53ef\u4f7f\u7528 \u4e0d\u5e26BOM\u7684UTF-8 \u7f16\u7801\u3002","title":"2.2. \u5b57\u7b26\u7f16\u7801"},{"location":"php/psr/psr-1/#23","text":"\u4e00\u4efdPHP\u6587\u4ef6\u4e2d \u5e94\u8be5 \u8981\u4e0d\u5c31\u53ea\u5b9a\u4e49\u65b0\u7684\u58f0\u660e\uff0c\u5982\u7c7b\u3001\u51fd\u6570\u6216\u5e38\u91cf\u7b49\u4e0d\u4ea7\u751f\u4ece\u5c5e\u6548\u5e94\u7684\u64cd\u4f5c\uff0c\u8981\u4e0d\u5c31\u53ea\u6709\u4f1a\u4ea7\u751f\u4ece\u5c5e\u6548\u5e94\u7684\u903b\u8f91\u64cd\u4f5c\uff0c\u4f46 \u4e0d\u8be5 \u540c\u65f6\u5177\u6709\u4e24\u8005\u3002 \u201c\u4ece\u5c5e\u6548\u5e94\u201d(side effects)\u4e00\u8bcd\u7684\u610f\u601d\u662f\uff0c\u4ec5\u4ec5\u901a\u8fc7\u5305\u542b\u6587\u4ef6\uff0c\u4e0d\u76f4\u63a5\u58f0\u660e\u7c7b\u3001 \u51fd\u6570\u548c\u5e38\u91cf\u7b49\uff0c\u800c\u6267\u884c\u7684\u903b\u8f91\u64cd\u4f5c\u3002 \u201c\u4ece\u5c5e\u6548\u5e94\u201d\u5305\u542b\u5374\u4e0d\u4ec5\u9650\u4e8e\uff1a\u751f\u6210\u8f93\u51fa\u3001\u76f4\u63a5\u7684 require \u6216 include \u3001\u8fde\u63a5\u5916\u90e8\u670d\u52a1\u3001\u4fee\u6539 ini \u914d\u7f6e\u3001\u629b\u51fa\u9519\u8bef\u6216\u5f02\u5e38\u3001\u4fee\u6539\u5168\u5c40\u6216\u9759\u6001\u53d8\u91cf\u3001\u8bfb\u6216\u5199\u6587\u4ef6\u7b49\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u9519\u8bef\u7684\u4f8b\u5b50\uff0c\u4e00\u4efd\u5305\u542b\u58f0\u660e\u4ee5\u53ca\u4ea7\u751f\u4ece\u5c5e\u6548\u5e94\u7684\u4ee3\u7801\uff1a <?php // \u4ece\u5c5e\u6548\u5e94\uff1a\u4fee\u6539 ini \u914d\u7f6e ini_set ( 'error_reporting' , E_ALL ); // \u4ece\u5c5e\u6548\u5e94\uff1a\u5f15\u5165\u6587\u4ef6 include \"file.php\" ; // \u4ece\u5c5e\u6548\u5e94\uff1a\u751f\u6210\u8f93\u51fa echo \"<html> \\n \" ; // \u58f0\u660e\u51fd\u6570 function foo () { // \u51fd\u6570\u4e3b\u4f53\u90e8\u5206 } \u4e0b\u9762\u662f\u4e00\u4e2a\u8303\u4f8b\uff0c\u4e00\u4efd\u53ea\u5305\u542b\u58f0\u660e\u4e0d\u4ea7\u751f\u4ece\u5c5e\u6548\u5e94\u7684\u4ee3\u7801\uff1a <?php // \u58f0\u660e\u51fd\u6570 function foo () { // \u51fd\u6570\u4e3b\u4f53\u90e8\u5206 } // \u6761\u4ef6\u58f0\u660e**\u4e0d**\u5c5e\u4e8e\u4ece\u5c5e\u6548\u5e94 if ( ! function_exists ( 'bar' )) { function bar () { // \u51fd\u6570\u4e3b\u4f53\u90e8\u5206 } }","title":"2.3. \u4ece\u5c5e\u6548\u5e94\uff08\u526f\u4f5c\u7528\uff09"},{"location":"php/psr/psr-1/#3","text":"\u547d\u540d\u7a7a\u95f4\u4ee5\u53ca\u7c7b\u7684\u547d\u540d\u5fc5\u987b\u9075\u5faa PSR-4 \u3002 \u6839\u636e\u89c4\u8303\uff0c\u6bcf\u4e2a\u7c7b\u90fd\u72ec\u7acb\u4e3a\u4e00\u4e2a\u6587\u4ef6\uff0c\u4e14\u547d\u540d\u7a7a\u95f4\u81f3\u5c11\u6709\u4e00\u4e2a\u5c42\u6b21\uff1a\u9876\u7ea7\u7684\u7ec4\u7ec7\u540d\u79f0\uff08vendor name\uff09\u3002 \u7c7b\u7684\u547d\u540d\u5fc5\u987b \u9075\u5faa StudlyCaps \u5927\u5199\u5f00\u5934\u7684\u9a7c\u5cf0\u547d\u540d\u89c4\u8303\u3002 PHP 5.3\u53ca\u4ee5\u540e\u7248\u672c\u7684\u4ee3\u7801 \u5fc5\u987b \u4f7f\u7528\u6b63\u5f0f\u7684\u547d\u540d\u7a7a\u95f4\u3002 \u4f8b\u5982\uff1a <?php // PHP 5.3\u53ca\u4ee5\u540e\u7248\u672c\u7684\u5199\u6cd5 namespace Vendor\\Model ; class Foo { } 5.2.x\u53ca\u4e4b\u524d\u7684\u7248\u672c \u5e94\u8be5 \u4f7f\u7528\u4f2a\u547d\u540d\u7a7a\u95f4\u7684\u5199\u6cd5\uff0c\u7ea6\u5b9a\u4fd7\u6210\u4f7f\u7528\u9876\u7ea7\u7684\u7ec4\u7ec7\u540d\u79f0\uff08vendor name\uff09\u5982 Vendor_ \u4e3a\u7c7b\u524d\u7f00\u3002 <?php // 5.2.x\u53ca\u4e4b\u524d\u7248\u672c\u7684\u5199\u6cd5 class Vendor_Model_Foo { }","title":"3. \u547d\u540d\u7a7a\u95f4\u548c\u7c7b"},{"location":"php/psr/psr-1/#4","text":"\u6b64\u5904\u7684\u201c\u7c7b\u201d\u6307\u4ee3\u6240\u6709\u7684\u7c7b\u3001\u63a5\u53e3\u4ee5\u53ca\u53ef\u590d\u7528\u4ee3\u7801\u5757\uff08traits\uff09","title":"4. \u7c7b\u7684\u5e38\u91cf\u3001\u5c5e\u6027\u548c\u65b9\u6cd5"},{"location":"php/psr/psr-1/#41","text":"\u7c7b\u7684\u5e38\u91cf\u4e2d\u6240\u6709\u5b57\u6bcd\u90fd \u5fc5\u987b \u5927\u5199\uff0c\u8bcd\u95f4\u4ee5\u4e0b\u5212\u7ebf\u5206\u9694\u3002 \u53c2\u7167\u4ee5\u4e0b\u4ee3\u7801\uff1a <?php namespace Vendor\\Model ; class Foo { const VERSION = '1.0' ; const DATE_APPROVED = '2012-06-01' ; }","title":"4.1. \u5e38\u91cf"},{"location":"php/psr/psr-1/#42","text":"\u7c7b\u7684\u5c5e\u6027\u547d\u540d\u53ef\u4ee5\u9075\u5faa \u5927\u5199\u5f00\u5934\u7684\u9a7c\u5cf0\u5f0f ( $StudlyCaps )\u3001\u5c0f\u5199\u5f00\u5934\u7684\u9a7c\u5cf0\u5f0f ( $camelCase ) \u53c8\u6216\u8005\u662f \u4e0b\u5212\u7ebf\u5206\u9694\u5f0f ( $under_score )\uff0c\u672c\u89c4\u8303\u4e0d\u505a\u5f3a\u5236\u8981\u6c42\uff0c\u4f46\u65e0\u8bba\u9075\u5faa\u54ea\u79cd\u547d\u540d\u65b9\u5f0f\uff0c\u90fd \u5e94\u8be5 \u5728\u4e00\u5b9a\u7684\u8303\u56f4\u5185\u4fdd\u6301\u4e00\u81f4\u3002\u8fd9\u4e2a\u8303\u56f4\u53ef\u4ee5\u662f\u6574\u4e2a\u56e2\u961f\u3001\u6574\u4e2a\u5305\u3001\u6574\u4e2a\u7c7b\u6216\u6574\u4e2a\u65b9\u6cd5\u3002","title":"4.2. \u5c5e\u6027"},{"location":"php/psr/psr-1/#43","text":"\u65b9\u6cd5\u540d\u79f0 \u5fc5\u987b \u7b26\u5408 camelCase() \u5f0f\u7684\u5c0f\u5199\u5f00\u5934\u9a7c\u5cf0\u547d\u540d\u89c4\u8303\u3002 \u539f\u6587 https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-1-basic-coding-standard-cn.md","title":"4.3. \u65b9\u6cd5"},{"location":"php/psr/psr-2/","text":"PHP PSR-2 \u4ee3\u7801\u98ce\u683c\u89c4\u8303 # \u672c\u7bc7\u89c4\u8303\u662f PSR-1 \u57fa\u672c\u4ee3\u7801\u89c4\u8303\u7684\u7ee7\u627f\u4e0e\u6269\u5c55\u3002 \u672c\u89c4\u8303\u5e0c\u671b\u901a\u8fc7\u5236\u5b9a\u4e00\u7cfb\u5217\u89c4\u8303\u5316PHP\u4ee3\u7801\u7684\u89c4\u5219\uff0c\u4ee5\u51cf\u5c11\u5728\u6d4f\u89c8\u4e0d\u540c\u4f5c\u8005\u7684\u4ee3\u7801\u65f6\uff0c\u56e0\u4ee3\u7801\u98ce\u683c\u7684\u4e0d\u540c\u800c\u9020\u6210\u4e0d\u4fbf\u3002 \u5f53\u591a\u540d\u7a0b\u5e8f\u5458\u5728\u591a\u4e2a\u9879\u76ee\u4e2d\u5408\u4f5c\u65f6\uff0c\u5c31\u9700\u8981\u4e00\u4e2a\u5171\u540c\u7684\u7f16\u7801\u89c4\u8303\uff0c \u800c\u672c\u6587\u4e2d\u7684\u98ce\u683c\u89c4\u8303\u6e90\u81ea\u4e8e\u591a\u4e2a\u4e0d\u540c\u9879\u76ee\u4ee3\u7801\u98ce\u683c\u7684\u5171\u540c\u7279\u6027\uff0c \u56e0\u6b64\uff0c\u672c\u89c4\u8303\u7684\u4ef7\u503c\u5728\u4e8e\u6211\u4eec\u90fd\u9075\u5faa\u8fd9\u4e2a\u7f16\u7801\u98ce\u683c\uff0c\u800c\u4e0d\u662f\u5728\u4e8e\u5b83\u672c\u8eab\u3002 \u5173\u952e\u8bcd \u201c\u5fc5\u987b\u201d(\"MUST\")\u3001\u201c\u4e00\u5b9a\u4e0d\u53ef/\u4e00\u5b9a\u4e0d\u80fd\u201d(\"MUST NOT\")\u3001\u201c\u9700\u8981\u201d(\"REQUIRED\")\u3001 \u201c\u5c06\u4f1a\u201d(\"SHALL\")\u3001\u201c\u4e0d\u4f1a\u201d(\"SHALL NOT\")\u3001\u201c\u5e94\u8be5\u201d(\"SHOULD\")\u3001\u201c\u4e0d\u8be5\u201d(\"SHOULD NOT\")\u3001 \u201c\u63a8\u8350\u201d(\"RECOMMENDED\")\u3001\u201c\u53ef\u4ee5\u201d(\"MAY\")\u548c\u201d\u53ef\u9009\u201c(\"OPTIONAL\")\u7684\u8be6\u7ec6\u63cf\u8ff0\u53ef\u53c2\u89c1 RFC 2119 \u3002 1. \u6982\u89c8 # \u4ee3\u7801 \u5fc5\u987b \u9075\u5faa PSR-1 \u4e2d\u7684\u7f16\u7801\u89c4\u8303 \u3002 \u4ee3\u7801 \u5fc5\u987b \u4f7f\u75284\u4e2a\u7a7a\u683c\u7b26\u800c\u4e0d\u662f tab\u952e \u8fdb\u884c\u7f29\u8fdb\u3002 \u6bcf\u884c\u7684\u5b57\u7b26\u6570 \u5e94\u8be5 \u8f6f\u6027\u4fdd\u6301\u572880\u4e2a\u4e4b\u5185\uff0c \u7406\u8bba\u4e0a \u4e00\u5b9a\u4e0d\u53ef \u591a\u4e8e120\u4e2a\uff0c \u4f46 \u4e00\u5b9a\u4e0d\u80fd \u6709\u786c\u6027\u9650\u5236\u3002 \u6bcf\u4e2a namespace \u547d\u540d\u7a7a\u95f4\u58f0\u660e\u8bed\u53e5\u548c use \u58f0\u660e\u8bed\u53e5\u5757\u540e\u9762\uff0c \u5fc5\u987b \u63d2\u5165\u4e00\u4e2a\u7a7a\u767d\u884c\u3002 \u7c7b\u7684\u5f00\u59cb\u82b1\u62ec\u53f7( { ) \u5fc5\u987b \u5199\u5728\u5176\u58f0\u660e\u540e\u81ea\u6210\u4e00\u884c\uff0c\u7ed3\u675f\u82b1\u62ec\u53f7( } )\u4e5f \u5fc5\u987b \u5199\u5728\u5176\u4e3b\u4f53\u540e\u81ea\u6210\u4e00\u884c\u3002 \u65b9\u6cd5\u7684\u5f00\u59cb\u82b1\u62ec\u53f7( { ) \u5fc5\u987b \u5199\u5728\u51fd\u6570\u58f0\u660e\u540e\u81ea\u6210\u4e00\u884c\uff0c\u7ed3\u675f\u82b1\u62ec\u53f7( } )\u4e5f \u5fc5\u987b \u5199\u5728\u51fd\u6570\u4e3b\u4f53\u540e\u81ea\u6210\u4e00\u884c\u3002 \u7c7b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5 \u5fc5\u987b \u6dfb\u52a0\u8bbf\u95ee\u4fee\u9970\u7b26\uff08 private \u3001 protected \u4ee5\u53ca public \uff09\uff0c abstract \u4ee5\u53ca final \u5fc5\u987b \u58f0\u660e\u5728\u8bbf\u95ee\u4fee\u9970\u7b26\u4e4b\u524d\uff0c\u800c static \u5fc5\u987b \u58f0\u660e\u5728\u8bbf\u95ee\u4fee\u9970\u7b26\u4e4b\u540e\u3002 \u63a7\u5236\u7ed3\u6784\u7684\u5173\u952e\u5b57\u540e \u5fc5\u987b \u8981\u6709\u4e00\u4e2a\u7a7a\u683c\u7b26\uff0c\u800c\u8c03\u7528\u65b9\u6cd5\u6216\u51fd\u6570\u65f6\u5219 \u4e00\u5b9a\u4e0d\u80fd \u6709\u3002 \u63a7\u5236\u7ed3\u6784\u7684\u5f00\u59cb\u82b1\u62ec\u53f7( { ) \u5fc5\u987b \u5199\u5728\u58f0\u660e\u7684\u540c\u4e00\u884c\uff0c\u800c\u7ed3\u675f\u82b1\u62ec\u53f7( } ) \u5fc5\u987b \u5199\u5728\u4e3b\u4f53\u540e\u81ea\u6210\u4e00\u884c\u3002 \u63a7\u5236\u7ed3\u6784\u7684\u5f00\u59cb\u5de6\u62ec\u53f7\u540e\u548c\u7ed3\u675f\u53f3\u62ec\u53f7\u524d\uff0c\u90fd \u4e00\u5b9a\u4e0d\u80fd \u6709\u7a7a\u683c\u7b26\u3002 1.1. \u4f8b\u5b50 # \u4ee5\u4e0b\u4f8b\u5b50\u7a0b\u5e8f\u7b80\u5355\u5730\u5c55\u793a\u4e86\u4ee5\u4e0a\u5927\u90e8\u5206\u89c4\u8303\uff1a <?php namespace Vendor\\Package ; use FooInterface ; use BarClass as Bar ; use OtherVendor\\OtherPackage\\BazClass ; class Foo extends Bar implements FooInterface { public function sampleFunction ( $a , $b = null ) { if ( $a === $b ) { bar (); } elseif ( $a > $b ) { $foo -> bar ( $arg1 ); } else { BazClass :: bar ( $arg2 , $arg3 ); } } final public static function bar () { // method body } } 2. \u901a\u5219 # 2.1 \u57fa\u672c\u7f16\u7801\u51c6\u5219 # \u4ee3\u7801 \u5fc5\u987b \u7b26\u5408 PSR-1 \u4e2d\u7684\u6240\u6709\u89c4\u8303\u3002 2.2 \u6587\u4ef6 # \u6240\u6709PHP\u6587\u4ef6 \u5fc5\u987b \u4f7f\u7528 Unix LF (linefeed) \u4f5c\u4e3a\u884c\u7684\u7ed3\u675f\u7b26\u3002 \u6240\u6709PHP\u6587\u4ef6 \u5fc5\u987b \u4ee5\u4e00\u4e2a\u7a7a\u767d\u884c\u4f5c\u4e3a\u7ed3\u675f\u3002 \u7eafPHP\u4ee3\u7801\u6587\u4ef6 \u5fc5\u987b \u7701\u7565\u6700\u540e\u7684 ?> \u7ed3\u675f\u6807\u7b7e\u3002 2.3. \u884c # \u884c\u7684\u957f\u5ea6 \u4e00\u5b9a\u4e0d\u80fd \u6709\u786c\u6027\u7684\u7ea6\u675f\u3002 \u8f6f\u6027\u7684\u957f\u5ea6\u7ea6\u675f \u4e00\u5b9a \u8981\u9650\u5236\u5728120\u4e2a\u5b57\u7b26\u4ee5\u5185\uff0c\u82e5\u8d85\u8fc7\u6b64\u957f\u5ea6\uff0c\u5e26\u4ee3\u7801\u89c4\u8303\u68c0\u67e5\u7684\u7f16\u8f91\u5668 \u4e00\u5b9a \u8981\u53d1\u51fa\u8b66\u544a\uff0c\u4e0d\u8fc7 \u4e00\u5b9a\u4e0d\u53ef \u53d1\u51fa\u9519\u8bef\u63d0\u793a\u3002 \u6bcf\u884c \u4e0d\u5e94\u8be5 \u591a\u4e8e80\u4e2a\u5b57\u7b26\uff0c\u5927\u4e8e80\u5b57\u7b26\u7684\u884c \u5e94\u8be5 \u6298\u6210\u591a\u884c\u3002 \u975e\u7a7a\u884c\u540e \u4e00\u5b9a\u4e0d\u80fd \u6709\u591a\u4f59\u7684\u7a7a\u683c\u7b26\u3002 \u7a7a\u884c \u53ef\u4ee5 \u4f7f\u5f97\u9605\u8bfb\u4ee3\u7801\u66f4\u52a0\u65b9\u4fbf\u4ee5\u53ca\u6709\u52a9\u4e8e\u4ee3\u7801\u7684\u5206\u5757\u3002 \u6bcf\u884c \u4e00\u5b9a\u4e0d\u80fd \u5b58\u5728\u591a\u4e8e\u4e00\u6761\u8bed\u53e5\u3002 2.4. \u7f29\u8fdb # \u4ee3\u7801 \u5fc5\u987b \u4f7f\u75284\u4e2a\u7a7a\u683c\u7b26\u7684\u7f29\u8fdb\uff0c \u4e00\u5b9a\u4e0d\u80fd \u7528 tab\u952e \u3002 \u5907\u6ce8: \u4f7f\u7528\u7a7a\u683c\u800c\u4e0d\u662ftab\u952e\u7f29\u8fdb\u7684\u597d\u5904\u5728\u4e8e\uff0c \u907f\u514d\u5728\u6bd4\u8f83\u4ee3\u7801\u5dee\u5f02\u3001\u6253\u8865\u4e01\u3001\u91cd\u9605\u4ee3\u7801\u4ee5\u53ca\u6ce8\u91ca\u65f6\u4ea7\u751f\u6df7\u6dc6\u3002 \u5e76\u4e14\uff0c\u4f7f\u7528\u7a7a\u683c\u7f29\u8fdb\uff0c\u8ba9\u5bf9\u9f50\u53d8\u5f97\u66f4\u65b9\u4fbf\u3002 2.5. \u5173\u952e\u5b57 \u4ee5\u53ca True/False/Null # PHP\u6240\u6709 \u5173\u952e\u5b57 \u5fc5\u987b \u5168\u90e8\u5c0f\u5199\u3002 \u5e38\u91cf true \u3001 false \u548c null \u4e5f \u5fc5\u987b \u5168\u90e8\u5c0f\u5199\u3002 3. namespace \u4ee5\u53ca use \u58f0\u660e # namespace \u58f0\u660e\u540e \u5fc5\u987b \u63d2\u5165\u4e00\u4e2a\u7a7a\u767d\u884c\u3002 \u6240\u6709 use \u5fc5\u987b \u5728 namespace \u540e\u58f0\u660e\u3002 \u6bcf\u6761 use \u58f0\u660e\u8bed\u53e5 \u5fc5\u987b \u53ea\u6709\u4e00\u4e2a use \u5173\u952e\u8bcd\u3002 use \u58f0\u660e\u8bed\u53e5\u5757\u540e \u5fc5\u987b \u8981\u6709\u4e00\u4e2a\u7a7a\u767d\u884c\u3002 \u4f8b\u5982\uff1a <?php namespace Vendor\\Package ; use FooClass ; use BarClass as Bar ; use OtherVendor\\OtherPackage\\BazClass ; // ... additional PHP code ... 4. \u7c7b\u3001\u5c5e\u6027\u548c\u65b9\u6cd5 # \u6b64\u5904\u7684\u201c\u7c7b\u201d\u6cdb\u6307\u6240\u6709\u7684class\u7c7b\u3001\u63a5\u53e3\u4ee5\u53catraits\u53ef\u590d\u7528\u4ee3\u7801\u5757\u3002 4.1. \u6269\u5c55\u4e0e\u7ee7\u627f # \u5173\u952e\u8bcd extends \u548c implements \u5fc5\u987b \u5199\u5728\u7c7b\u540d\u79f0\u7684\u540c\u4e00\u884c\u3002 \u7c7b\u7684\u5f00\u59cb\u82b1\u62ec\u53f7 \u5fc5\u987b \u72ec\u5360\u4e00\u884c\uff0c\u7ed3\u675f\u82b1\u62ec\u53f7\u4e5f \u5fc5\u987b \u5728\u7c7b\u4e3b\u4f53\u540e\u72ec\u5360\u4e00\u884c\u3002 <?php namespace Vendor\\Package ; use FooClass ; use BarClass as Bar ; use OtherVendor\\OtherPackage\\BazClass ; class ClassName extends ParentClass implements \\ArrayAccess , \\Countable { // constants, properties, methods } implements \u7684\u7ee7\u627f\u5217\u8868\u4e5f \u53ef\u4ee5 \u5206\u6210\u591a\u884c\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u4e2a\u7ee7\u627f\u63a5\u53e3\u540d\u79f0\u90fd \u5fc5\u987b \u5206\u5f00\u72ec\u7acb\u6210\u884c\uff0c\u5305\u62ec\u7b2c\u4e00\u4e2a\u3002 <?php namespace Vendor\\Package ; use FooClass ; use BarClass as Bar ; use OtherVendor\\OtherPackage\\BazClass ; class ClassName extends ParentClass implements \\ArrayAccess , \\Countable , \\Serializable { // constants, properties, methods } 4.2. \u5c5e\u6027 # \u6bcf\u4e2a\u5c5e\u6027\u90fd \u5fc5\u987b \u6dfb\u52a0\u8bbf\u95ee\u4fee\u9970\u7b26\u3002 \u4e00\u5b9a\u4e0d\u53ef \u4f7f\u7528\u5173\u952e\u5b57 var \u58f0\u660e\u4e00\u4e2a\u5c5e\u6027\u3002 \u6bcf\u6761\u8bed\u53e5 \u4e00\u5b9a\u4e0d\u53ef \u5b9a\u4e49\u8d85\u8fc7\u4e00\u4e2a\u5c5e\u6027\u3002 \u4e0d\u8981 \u4f7f\u7528\u4e0b\u5212\u7ebf\u4f5c\u4e3a\u524d\u7f00\uff0c\u6765\u533a\u5206\u5c5e\u6027\u662f protected \u6216 private\u3002 \u4ee5\u4e0b\u662f\u5c5e\u6027\u58f0\u660e\u7684\u4e00\u4e2a\u8303\u4f8b\uff1a <?php namespace Vendor\\Package ; class ClassName { public $foo = null ; } 4.3. \u65b9\u6cd5 # \u6240\u6709\u65b9\u6cd5\u90fd \u5fc5\u987b \u6dfb\u52a0\u8bbf\u95ee\u4fee\u9970\u7b26\u3002 \u4e0d\u8981 \u4f7f\u7528\u4e0b\u5212\u7ebf\u4f5c\u4e3a\u524d\u7f00\uff0c\u6765\u533a\u5206\u65b9\u6cd5\u662f protected \u6216 private\u3002 \u65b9\u6cd5\u540d\u79f0\u540e \u4e00\u5b9a\u4e0d\u80fd \u6709\u7a7a\u683c\u7b26\uff0c\u5176\u5f00\u59cb\u82b1\u62ec\u53f7 \u5fc5\u987b \u72ec\u5360\u4e00\u884c\uff0c\u7ed3\u675f\u82b1\u62ec\u53f7\u4e5f \u5fc5\u987b \u5728\u65b9\u6cd5\u4e3b\u4f53\u540e\u5355\u72ec\u6210\u4e00\u884c\u3002\u53c2\u6570\u5de6\u62ec\u53f7\u540e\u548c\u53f3\u62ec\u53f7\u524d \u4e00\u5b9a\u4e0d\u80fd \u6709\u7a7a\u683c\u3002 \u4e00\u4e2a\u6807\u51c6\u7684\u65b9\u6cd5\u58f0\u660e\u53ef\u53c2\u7167\u4ee5\u4e0b\u8303\u4f8b\uff0c\u7559\u610f\u5176\u62ec\u53f7\u3001\u9017\u53f7\u3001\u7a7a\u683c\u4ee5\u53ca\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 <?php namespace Vendor\\Package ; class ClassName { public function fooBarBaz ( $arg1 , & $arg2 , $arg3 = []) { // method body } } 4.4. \u65b9\u6cd5\u7684\u53c2\u6570 # \u53c2\u6570\u5217\u8868\u4e2d\uff0c\u6bcf\u4e2a\u9017\u53f7\u540e\u9762 \u5fc5\u987b \u8981\u6709\u4e00\u4e2a\u7a7a\u683c\uff0c\u800c\u9017\u53f7\u524d\u9762 \u4e00\u5b9a\u4e0d\u80fd \u6709\u7a7a\u683c\u3002 \u6709\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\uff0c \u5fc5\u987b \u653e\u5230\u53c2\u6570\u5217\u8868\u7684\u672b\u5c3e\u3002 <?php namespace Vendor\\Package ; class ClassName { public function foo ( $arg1 , & $arg2 , $arg3 = []) { // method body } } \u53c2\u6570\u5217\u8868 \u53ef\u4ee5 \u5206\u5217\u6210\u591a\u884c\uff0c\u8fd9\u6837\uff0c\u5305\u62ec\u7b2c\u4e00\u4e2a\u53c2\u6570\u5728\u5185\u7684\u6bcf\u4e2a\u53c2\u6570\u90fd \u5fc5\u987b \u5355\u72ec\u6210\u884c\u3002 \u62c6\u5206\u6210\u591a\u884c\u7684\u53c2\u6570\u5217\u8868\u540e\uff0c\u7ed3\u675f\u62ec\u53f7\u4ee5\u53ca\u65b9\u6cd5\u5f00\u59cb\u82b1\u62ec\u53f7 \u5fc5\u987b \u5199\u5728\u540c\u4e00\u884c\uff0c\u4e2d\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\u3002 <?php namespace Vendor\\Package ; class ClassName { public function aVeryLongMethodName ( ClassTypeHint $arg1 , & $arg2 , array $arg3 = [] ) { // method body } } 4.5. abstract \u3001 final \u3001 \u4ee5\u53ca static # \u9700\u8981\u6dfb\u52a0 abstract \u6216 final \u58f0\u660e\u65f6\uff0c \u5fc5\u987b \u5199\u5728\u8bbf\u95ee\u4fee\u9970\u7b26\u524d\uff0c\u800c static \u5219 \u5fc5\u987b \u5199\u5728\u5176\u540e\u3002 <?php namespace Vendor\\Package ; abstract class ClassName { protected static $foo ; abstract protected function zim (); final public static function bar () { // method body } } 4.6. \u65b9\u6cd5\u53ca\u51fd\u6570\u8c03\u7528 # \u65b9\u6cd5\u53ca\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u65b9\u6cd5\u540d\u6216\u51fd\u6570\u540d\u4e0e\u53c2\u6570\u5de6\u62ec\u53f7\u4e4b\u95f4 \u4e00\u5b9a\u4e0d\u80fd \u6709\u7a7a\u683c\uff0c\u53c2\u6570\u53f3\u62ec\u53f7\u524d\u4e5f \u4e00\u5b9a\u4e0d\u80fd \u6709\u7a7a\u683c\u3002\u6bcf\u4e2a\u9017\u53f7\u524d \u4e00\u5b9a\u4e0d\u80fd \u6709\u7a7a\u683c\uff0c\u4f46\u5176\u540e \u5fc5\u987b \u6709\u4e00\u4e2a\u7a7a\u683c\u3002 <?php bar (); $foo -> bar ( $arg1 ); Foo :: bar ( $arg2 , $arg3 ); \u53c2\u6570 \u53ef\u4ee5 \u5206\u5217\u6210\u591a\u884c\uff0c\u6b64\u65f6\u5305\u62ec\u7b2c\u4e00\u4e2a\u53c2\u6570\u5728\u5185\u7684\u6bcf\u4e2a\u53c2\u6570\u90fd \u5fc5\u987b \u5355\u72ec\u6210\u884c\u3002 <?php $foo -> bar ( $longArgument , $longerArgument , $muchLongerArgument ); 5. \u63a7\u5236\u7ed3\u6784 # \u63a7\u5236\u7ed3\u6784\u7684\u57fa\u672c\u89c4\u8303\u5982\u4e0b\uff1a \u63a7\u5236\u7ed3\u6784\u5173\u952e\u8bcd\u540e \u5fc5\u987b \u6709\u4e00\u4e2a\u7a7a\u683c\u3002 \u5de6\u62ec\u53f7 ( \u540e \u4e00\u5b9a\u4e0d\u80fd \u6709\u7a7a\u683c\u3002 \u53f3\u62ec\u53f7 ) \u524d\u4e5f \u4e00\u5b9a\u4e0d \u80fd\u6709\u7a7a\u683c\u3002 \u53f3\u62ec\u53f7 ) \u4e0e\u5f00\u59cb\u82b1\u62ec\u53f7 { \u95f4 \u4e00\u5b9a \u6709\u4e00\u4e2a\u7a7a\u683c\u3002 \u7ed3\u6784\u4f53\u4e3b\u4f53 \u4e00\u5b9a \u8981\u6709\u4e00\u6b21\u7f29\u8fdb\u3002 \u7ed3\u675f\u82b1\u62ec\u53f7 } \u4e00\u5b9a \u5728\u7ed3\u6784\u4f53\u4e3b\u4f53\u540e\u5355\u72ec\u6210\u884c\u3002 \u6bcf\u4e2a\u7ed3\u6784\u4f53\u7684\u4e3b\u4f53\u90fd \u5fc5\u987b \u88ab\u5305\u542b\u5728\u6210\u5bf9\u7684\u82b1\u62ec\u53f7\u4e4b\u4e2d\uff0c \u8fd9\u80fd\u8ba9\u7ed3\u6784\u4f53\u66f4\u52a0\u7ed3\u6784\u8bdd\uff0c\u4ee5\u53ca\u51cf\u5c11\u52a0\u5165\u65b0\u884c\u65f6\uff0c\u51fa\u9519\u7684\u53ef\u80fd\u6027\u3002 5.1. if \u3001 elseif \u548c else # \u6807\u51c6\u7684 if \u7ed3\u6784\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff0c\u7559\u610f \u62ec\u53f7\u3001\u7a7a\u683c\u4ee5\u53ca\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\uff0c \u6ce8\u610f else \u548c elseif \u90fd\u4e0e\u524d\u9762\u7684\u7ed3\u675f\u82b1\u62ec\u53f7\u5728\u540c\u4e00\u884c\u3002 <?php if ( $expr1 ) { // if body } elseif ( $expr2 ) { // elseif body } else { // else body; } \u5e94\u8be5 \u4f7f\u7528\u5173\u952e\u8bcd elseif \u4ee3\u66ff\u6240\u6709 else if \uff0c\u4ee5\u4f7f\u5f97\u6240\u6709\u7684\u63a7\u5236\u5173\u952e\u5b57\u90fd\u50cf\u662f\u5355\u72ec\u7684\u4e00\u4e2a\u8bcd\u3002 5.2. switch \u548c case # \u6807\u51c6\u7684 switch \u7ed3\u6784\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff0c\u7559\u610f\u62ec\u53f7\u3001\u7a7a\u683c\u4ee5\u53ca\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 case \u8bed\u53e5 \u5fc5\u987b \u76f8\u5bf9 switch \u8fdb\u884c\u4e00\u6b21\u7f29\u8fdb\uff0c\u800c break \u8bed\u53e5\u4ee5\u53ca case \u5185\u7684\u5176\u5b83\u8bed\u53e5\u90fd \u5fc5\u987b \u76f8\u5bf9 case \u8fdb\u884c\u4e00\u6b21\u7f29\u8fdb\u3002 \u5982\u679c\u5b58\u5728\u975e\u7a7a\u7684 case \u76f4\u7a7f\u8bed\u53e5\uff0c\u4e3b\u4f53\u91cc\u5fc5\u987b\u6709\u7c7b\u4f3c // no break \u7684\u6ce8\u91ca\u3002 <?php switch ( $expr ) { case 0 : echo 'First case, with a break' ; break ; case 1 : echo 'Second case, which falls through' ; // no break case 2 : case 3 : case 4 : echo 'Third case, return instead of break' ; return ; default : echo 'Default case' ; break ; } 5.3. while \u548c do while # \u4e00\u4e2a\u89c4\u8303\u7684 while \u8bed\u53e5\u5e94\u8be5\u5982\u4e0b\u6240\u793a\uff0c\u6ce8\u610f\u5176 \u62ec\u53f7\u3001\u7a7a\u683c\u4ee5\u53ca\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 <?php while ( $expr ) { // structure body } \u6807\u51c6\u7684 do while \u8bed\u53e5\u5982\u4e0b\u6240\u793a\uff0c\u540c\u6837\u7684\uff0c\u6ce8\u610f\u5176 \u62ec\u53f7\u3001\u7a7a\u683c\u4ee5\u53ca\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 <?php do { // structure body; } while ( $expr ); 5.4. for # \u6807\u51c6\u7684 for \u8bed\u53e5\u5982\u4e0b\u6240\u793a\uff0c\u6ce8\u610f\u5176 \u62ec\u53f7\u3001\u7a7a\u683c\u4ee5\u53ca\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 <?php for ( $i = 0 ; $i < 10 ; $i ++ ) { // for body } 5.5. foreach # \u6807\u51c6\u7684 foreach \u8bed\u53e5\u5982\u4e0b\u6240\u793a\uff0c\u6ce8\u610f\u5176 \u62ec\u53f7\u3001\u7a7a\u683c\u4ee5\u53ca\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 <?php foreach ( $iterable as $key => $value ) { // foreach body } 5.6. try , catch # \u6807\u51c6\u7684 try catch \u8bed\u53e5\u5982\u4e0b\u6240\u793a\uff0c\u6ce8\u610f\u5176 \u62ec\u53f7\u3001\u7a7a\u683c\u4ee5\u53ca\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 <?php try { // try body } catch ( FirstExceptionType $e ) { // catch body } catch ( OtherExceptionType $e ) { // catch body } 6. \u95ed\u5305 # \u95ed\u5305\u58f0\u660e\u65f6\uff0c\u5173\u952e\u8bcd function \u540e\u4ee5\u53ca\u5173\u952e\u8bcd use \u7684\u524d\u540e\u90fd \u5fc5\u987b \u8981\u6709\u4e00\u4e2a\u7a7a\u683c\u3002 \u5f00\u59cb\u82b1\u62ec\u53f7 \u5fc5\u987b \u5199\u5728\u58f0\u660e\u7684\u540c\u4e00\u884c\uff0c\u7ed3\u675f\u82b1\u62ec\u53f7 \u5fc5\u987b \u7d27\u8ddf\u4e3b\u4f53\u7ed3\u675f\u7684\u4e0b\u4e00\u884c\u3002 \u53c2\u6570\u5217\u8868\u548c\u53d8\u91cf\u5217\u8868\u7684\u5de6\u62ec\u53f7\u540e\u4ee5\u53ca\u53f3\u62ec\u53f7\u524d\uff0c \u5fc5\u987b\u4e0d\u80fd \u6709\u7a7a\u683c\u3002 \u53c2\u6570\u548c\u53d8\u91cf\u5217\u8868\u4e2d\uff0c\u9017\u53f7\u524d \u5fc5\u987b\u4e0d\u80fd \u6709\u7a7a\u683c\uff0c\u800c\u9017\u53f7\u540e \u5fc5\u987b \u8981\u6709\u7a7a\u683c\u3002 \u95ed\u5305\u4e2d\u6709\u9ed8\u8ba4\u503c\u7684\u53c2\u6570 \u5fc5\u987b \u653e\u5230\u5217\u8868\u7684\u540e\u9762\u3002 \u6807\u51c6\u7684\u95ed\u5305\u58f0\u660e\u8bed\u53e5\u5982\u4e0b\u6240\u793a\uff0c\u6ce8\u610f\u5176 \u62ec\u53f7\u3001\u9017\u53f7\u3001\u7a7a\u683c\u4ee5\u53ca\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 <?php $closureWithArgs = function ( $arg1 , $arg2 ) { // body }; $closureWithArgsAndVars = function ( $arg1 , $arg2 ) use ( $var1 , $var2 ) { // body }; \u53c2\u6570\u5217\u8868\u4ee5\u53ca\u53d8\u91cf\u5217\u8868 \u53ef\u4ee5 \u5206\u6210\u591a\u884c\uff0c\u8fd9\u6837\uff0c\u5305\u62ec\u7b2c\u4e00\u4e2a\u5728\u5185\u7684\u6bcf\u4e2a\u53c2\u6570\u6216\u53d8\u91cf\u90fd \u5fc5\u987b \u5355\u72ec\u6210\u884c\uff0c\u800c\u5217\u8868\u7684\u53f3\u62ec\u53f7\u4e0e\u95ed\u5305\u7684\u5f00\u59cb\u82b1\u62ec\u53f7 \u5fc5\u987b \u653e\u5728\u540c\u4e00\u884c\u3002 \u4ee5\u4e0b\u51e0\u4e2a\u4f8b\u5b50\uff0c\u5305\u542b\u4e86\u53c2\u6570\u548c\u53d8\u91cf\u5217\u8868\u88ab\u5206\u6210\u591a\u884c\u7684\u591a\u60c5\u51b5\u3002 <?php $longArgs_noVars = function ( $longArgument , $longerArgument , $muchLongerArgument ) { // body }; $noArgs_longVars = function () use ( $longVar1 , $longerVar2 , $muchLongerVar3 ) { // body }; $longArgs_longVars = function ( $longArgument , $longerArgument , $muchLongerArgument ) use ( $longVar1 , $longerVar2 , $muchLongerVar3 ) { // body }; $longArgs_shortVars = function ( $longArgument , $longerArgument , $muchLongerArgument ) use ( $var1 ) { // body }; $shortArgs_longVars = function ( $arg ) use ( $longVar1 , $longerVar2 , $muchLongerVar3 ) { // body }; \u6ce8\u610f\uff0c\u95ed\u5305\u88ab\u76f4\u63a5\u7528\u4f5c\u51fd\u6570\u6216\u65b9\u6cd5\u8c03\u7528\u7684\u53c2\u6570\u65f6\uff0c\u4ee5\u4e0a\u89c4\u5219\u4ecd\u7136\u9002\u7528\u3002 <?php $foo -> bar ( $arg1 , function ( $arg2 ) use ( $var1 ) { // body }, $arg3 ); 7. \u591a\u884c\u53c2\u6570 # \u4f7f\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u8de8\u884c\u7684\u53c2\u6570\uff08\u5982\u6570\u7ec4\u548c\u533f\u540d\u51fd\u6570\uff09\u5e76\u4e0d\u9700\u8981\u89e6\u53d1 4.6 \u8282\u4e2d\u5173\u4e8e\u53c2\u6570\u5217\u8868\u7684\u5355\u884c\u89c4\u5b9a\uff0c \u56e0\u6b64\uff0c\u5728\u53c2\u6570\u8868\u4e2d\u7684\u6570\u7ec4\u548c\u533f\u540d\u51fd\u6570\u662f\u53ef\u4ee5\u5355\u72ec\u5206\u5217\u6210\u591a\u884c\u7684\u3002 \u4ee5\u4e0b\u7684\u4f8b\u5b50\u662f\u7b26\u5408 PSR-2 \u89c4\u8303\u7684\uff1a <?php somefunction ( $foo , $bar , [ // ... ], $baz ); $app -> get ( '/hello/{name}' , function ( $name ) use ( $app ) { return 'Hello ' . $app -> escape ( $name ); }); 8. \u591a\u63a5\u53e3\u6269\u5c55 # \u5f53\u9700\u8981\u6269\u5c55\u591a\u4e2a\u63a5\u53e3\u65f6\uff0c extends \u7684\u76f8\u5173\u89c4\u8303\u4e0e 4.1 \u8282\u4e2d implements \u7684\u89c4\u8303\u4e00\u81f4\u3002 9. \u603b\u7ed3 # \u4ee5\u4e0a\u89c4\u8303\u96be\u514d\u6709\u758f\u5ffd\uff0c\u5176\u4e2d\u5305\u62ec\u4f46\u4e0d\u4ec5\u9650\u4e8e\uff1a \u5168\u5c40\u53d8\u91cf\u548c\u5e38\u91cf\u7684\u5b9a\u4e49 \u51fd\u6570\u7684\u5b9a\u4e49 \u64cd\u4f5c\u7b26\u548c\u8d4b\u503c \u884c\u5185\u5bf9\u9f50 \u6ce8\u91ca\u548c\u6587\u6863\u63cf\u8ff0\u5757 \u7c7b\u540d\u7684\u524d\u7f00\u53ca\u540e\u7f00 \u6700\u4f73\u5b9e\u8df5 \u539f\u6587\uff1a https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-2-coding-style-guide-cn.md https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-2-coding-style-guide-meta-cn.md","title":"PHP PSR-2 \u4ee3\u7801\u98ce\u683c\u89c4\u8303"},{"location":"php/psr/psr-2/#php-psr-2","text":"\u672c\u7bc7\u89c4\u8303\u662f PSR-1 \u57fa\u672c\u4ee3\u7801\u89c4\u8303\u7684\u7ee7\u627f\u4e0e\u6269\u5c55\u3002 \u672c\u89c4\u8303\u5e0c\u671b\u901a\u8fc7\u5236\u5b9a\u4e00\u7cfb\u5217\u89c4\u8303\u5316PHP\u4ee3\u7801\u7684\u89c4\u5219\uff0c\u4ee5\u51cf\u5c11\u5728\u6d4f\u89c8\u4e0d\u540c\u4f5c\u8005\u7684\u4ee3\u7801\u65f6\uff0c\u56e0\u4ee3\u7801\u98ce\u683c\u7684\u4e0d\u540c\u800c\u9020\u6210\u4e0d\u4fbf\u3002 \u5f53\u591a\u540d\u7a0b\u5e8f\u5458\u5728\u591a\u4e2a\u9879\u76ee\u4e2d\u5408\u4f5c\u65f6\uff0c\u5c31\u9700\u8981\u4e00\u4e2a\u5171\u540c\u7684\u7f16\u7801\u89c4\u8303\uff0c \u800c\u672c\u6587\u4e2d\u7684\u98ce\u683c\u89c4\u8303\u6e90\u81ea\u4e8e\u591a\u4e2a\u4e0d\u540c\u9879\u76ee\u4ee3\u7801\u98ce\u683c\u7684\u5171\u540c\u7279\u6027\uff0c \u56e0\u6b64\uff0c\u672c\u89c4\u8303\u7684\u4ef7\u503c\u5728\u4e8e\u6211\u4eec\u90fd\u9075\u5faa\u8fd9\u4e2a\u7f16\u7801\u98ce\u683c\uff0c\u800c\u4e0d\u662f\u5728\u4e8e\u5b83\u672c\u8eab\u3002 \u5173\u952e\u8bcd \u201c\u5fc5\u987b\u201d(\"MUST\")\u3001\u201c\u4e00\u5b9a\u4e0d\u53ef/\u4e00\u5b9a\u4e0d\u80fd\u201d(\"MUST NOT\")\u3001\u201c\u9700\u8981\u201d(\"REQUIRED\")\u3001 \u201c\u5c06\u4f1a\u201d(\"SHALL\")\u3001\u201c\u4e0d\u4f1a\u201d(\"SHALL NOT\")\u3001\u201c\u5e94\u8be5\u201d(\"SHOULD\")\u3001\u201c\u4e0d\u8be5\u201d(\"SHOULD NOT\")\u3001 \u201c\u63a8\u8350\u201d(\"RECOMMENDED\")\u3001\u201c\u53ef\u4ee5\u201d(\"MAY\")\u548c\u201d\u53ef\u9009\u201c(\"OPTIONAL\")\u7684\u8be6\u7ec6\u63cf\u8ff0\u53ef\u53c2\u89c1 RFC 2119 \u3002","title":"PHP PSR-2 \u4ee3\u7801\u98ce\u683c\u89c4\u8303"},{"location":"php/psr/psr-2/#1","text":"\u4ee3\u7801 \u5fc5\u987b \u9075\u5faa PSR-1 \u4e2d\u7684\u7f16\u7801\u89c4\u8303 \u3002 \u4ee3\u7801 \u5fc5\u987b \u4f7f\u75284\u4e2a\u7a7a\u683c\u7b26\u800c\u4e0d\u662f tab\u952e \u8fdb\u884c\u7f29\u8fdb\u3002 \u6bcf\u884c\u7684\u5b57\u7b26\u6570 \u5e94\u8be5 \u8f6f\u6027\u4fdd\u6301\u572880\u4e2a\u4e4b\u5185\uff0c \u7406\u8bba\u4e0a \u4e00\u5b9a\u4e0d\u53ef \u591a\u4e8e120\u4e2a\uff0c \u4f46 \u4e00\u5b9a\u4e0d\u80fd \u6709\u786c\u6027\u9650\u5236\u3002 \u6bcf\u4e2a namespace \u547d\u540d\u7a7a\u95f4\u58f0\u660e\u8bed\u53e5\u548c use \u58f0\u660e\u8bed\u53e5\u5757\u540e\u9762\uff0c \u5fc5\u987b \u63d2\u5165\u4e00\u4e2a\u7a7a\u767d\u884c\u3002 \u7c7b\u7684\u5f00\u59cb\u82b1\u62ec\u53f7( { ) \u5fc5\u987b \u5199\u5728\u5176\u58f0\u660e\u540e\u81ea\u6210\u4e00\u884c\uff0c\u7ed3\u675f\u82b1\u62ec\u53f7( } )\u4e5f \u5fc5\u987b \u5199\u5728\u5176\u4e3b\u4f53\u540e\u81ea\u6210\u4e00\u884c\u3002 \u65b9\u6cd5\u7684\u5f00\u59cb\u82b1\u62ec\u53f7( { ) \u5fc5\u987b \u5199\u5728\u51fd\u6570\u58f0\u660e\u540e\u81ea\u6210\u4e00\u884c\uff0c\u7ed3\u675f\u82b1\u62ec\u53f7( } )\u4e5f \u5fc5\u987b \u5199\u5728\u51fd\u6570\u4e3b\u4f53\u540e\u81ea\u6210\u4e00\u884c\u3002 \u7c7b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5 \u5fc5\u987b \u6dfb\u52a0\u8bbf\u95ee\u4fee\u9970\u7b26\uff08 private \u3001 protected \u4ee5\u53ca public \uff09\uff0c abstract \u4ee5\u53ca final \u5fc5\u987b \u58f0\u660e\u5728\u8bbf\u95ee\u4fee\u9970\u7b26\u4e4b\u524d\uff0c\u800c static \u5fc5\u987b \u58f0\u660e\u5728\u8bbf\u95ee\u4fee\u9970\u7b26\u4e4b\u540e\u3002 \u63a7\u5236\u7ed3\u6784\u7684\u5173\u952e\u5b57\u540e \u5fc5\u987b \u8981\u6709\u4e00\u4e2a\u7a7a\u683c\u7b26\uff0c\u800c\u8c03\u7528\u65b9\u6cd5\u6216\u51fd\u6570\u65f6\u5219 \u4e00\u5b9a\u4e0d\u80fd \u6709\u3002 \u63a7\u5236\u7ed3\u6784\u7684\u5f00\u59cb\u82b1\u62ec\u53f7( { ) \u5fc5\u987b \u5199\u5728\u58f0\u660e\u7684\u540c\u4e00\u884c\uff0c\u800c\u7ed3\u675f\u82b1\u62ec\u53f7( } ) \u5fc5\u987b \u5199\u5728\u4e3b\u4f53\u540e\u81ea\u6210\u4e00\u884c\u3002 \u63a7\u5236\u7ed3\u6784\u7684\u5f00\u59cb\u5de6\u62ec\u53f7\u540e\u548c\u7ed3\u675f\u53f3\u62ec\u53f7\u524d\uff0c\u90fd \u4e00\u5b9a\u4e0d\u80fd \u6709\u7a7a\u683c\u7b26\u3002","title":"1. \u6982\u89c8"},{"location":"php/psr/psr-2/#11","text":"\u4ee5\u4e0b\u4f8b\u5b50\u7a0b\u5e8f\u7b80\u5355\u5730\u5c55\u793a\u4e86\u4ee5\u4e0a\u5927\u90e8\u5206\u89c4\u8303\uff1a <?php namespace Vendor\\Package ; use FooInterface ; use BarClass as Bar ; use OtherVendor\\OtherPackage\\BazClass ; class Foo extends Bar implements FooInterface { public function sampleFunction ( $a , $b = null ) { if ( $a === $b ) { bar (); } elseif ( $a > $b ) { $foo -> bar ( $arg1 ); } else { BazClass :: bar ( $arg2 , $arg3 ); } } final public static function bar () { // method body } }","title":"1.1. \u4f8b\u5b50"},{"location":"php/psr/psr-2/#2","text":"","title":"2. \u901a\u5219"},{"location":"php/psr/psr-2/#21","text":"\u4ee3\u7801 \u5fc5\u987b \u7b26\u5408 PSR-1 \u4e2d\u7684\u6240\u6709\u89c4\u8303\u3002","title":"2.1 \u57fa\u672c\u7f16\u7801\u51c6\u5219"},{"location":"php/psr/psr-2/#22","text":"\u6240\u6709PHP\u6587\u4ef6 \u5fc5\u987b \u4f7f\u7528 Unix LF (linefeed) \u4f5c\u4e3a\u884c\u7684\u7ed3\u675f\u7b26\u3002 \u6240\u6709PHP\u6587\u4ef6 \u5fc5\u987b \u4ee5\u4e00\u4e2a\u7a7a\u767d\u884c\u4f5c\u4e3a\u7ed3\u675f\u3002 \u7eafPHP\u4ee3\u7801\u6587\u4ef6 \u5fc5\u987b \u7701\u7565\u6700\u540e\u7684 ?> \u7ed3\u675f\u6807\u7b7e\u3002","title":"2.2 \u6587\u4ef6"},{"location":"php/psr/psr-2/#23","text":"\u884c\u7684\u957f\u5ea6 \u4e00\u5b9a\u4e0d\u80fd \u6709\u786c\u6027\u7684\u7ea6\u675f\u3002 \u8f6f\u6027\u7684\u957f\u5ea6\u7ea6\u675f \u4e00\u5b9a \u8981\u9650\u5236\u5728120\u4e2a\u5b57\u7b26\u4ee5\u5185\uff0c\u82e5\u8d85\u8fc7\u6b64\u957f\u5ea6\uff0c\u5e26\u4ee3\u7801\u89c4\u8303\u68c0\u67e5\u7684\u7f16\u8f91\u5668 \u4e00\u5b9a \u8981\u53d1\u51fa\u8b66\u544a\uff0c\u4e0d\u8fc7 \u4e00\u5b9a\u4e0d\u53ef \u53d1\u51fa\u9519\u8bef\u63d0\u793a\u3002 \u6bcf\u884c \u4e0d\u5e94\u8be5 \u591a\u4e8e80\u4e2a\u5b57\u7b26\uff0c\u5927\u4e8e80\u5b57\u7b26\u7684\u884c \u5e94\u8be5 \u6298\u6210\u591a\u884c\u3002 \u975e\u7a7a\u884c\u540e \u4e00\u5b9a\u4e0d\u80fd \u6709\u591a\u4f59\u7684\u7a7a\u683c\u7b26\u3002 \u7a7a\u884c \u53ef\u4ee5 \u4f7f\u5f97\u9605\u8bfb\u4ee3\u7801\u66f4\u52a0\u65b9\u4fbf\u4ee5\u53ca\u6709\u52a9\u4e8e\u4ee3\u7801\u7684\u5206\u5757\u3002 \u6bcf\u884c \u4e00\u5b9a\u4e0d\u80fd \u5b58\u5728\u591a\u4e8e\u4e00\u6761\u8bed\u53e5\u3002","title":"2.3. \u884c"},{"location":"php/psr/psr-2/#24","text":"\u4ee3\u7801 \u5fc5\u987b \u4f7f\u75284\u4e2a\u7a7a\u683c\u7b26\u7684\u7f29\u8fdb\uff0c \u4e00\u5b9a\u4e0d\u80fd \u7528 tab\u952e \u3002 \u5907\u6ce8: \u4f7f\u7528\u7a7a\u683c\u800c\u4e0d\u662ftab\u952e\u7f29\u8fdb\u7684\u597d\u5904\u5728\u4e8e\uff0c \u907f\u514d\u5728\u6bd4\u8f83\u4ee3\u7801\u5dee\u5f02\u3001\u6253\u8865\u4e01\u3001\u91cd\u9605\u4ee3\u7801\u4ee5\u53ca\u6ce8\u91ca\u65f6\u4ea7\u751f\u6df7\u6dc6\u3002 \u5e76\u4e14\uff0c\u4f7f\u7528\u7a7a\u683c\u7f29\u8fdb\uff0c\u8ba9\u5bf9\u9f50\u53d8\u5f97\u66f4\u65b9\u4fbf\u3002","title":"2.4. \u7f29\u8fdb"},{"location":"php/psr/psr-2/#25-truefalsenull","text":"PHP\u6240\u6709 \u5173\u952e\u5b57 \u5fc5\u987b \u5168\u90e8\u5c0f\u5199\u3002 \u5e38\u91cf true \u3001 false \u548c null \u4e5f \u5fc5\u987b \u5168\u90e8\u5c0f\u5199\u3002","title":"2.5. \u5173\u952e\u5b57 \u4ee5\u53ca True/False/Null"},{"location":"php/psr/psr-2/#3-namespace-use","text":"namespace \u58f0\u660e\u540e \u5fc5\u987b \u63d2\u5165\u4e00\u4e2a\u7a7a\u767d\u884c\u3002 \u6240\u6709 use \u5fc5\u987b \u5728 namespace \u540e\u58f0\u660e\u3002 \u6bcf\u6761 use \u58f0\u660e\u8bed\u53e5 \u5fc5\u987b \u53ea\u6709\u4e00\u4e2a use \u5173\u952e\u8bcd\u3002 use \u58f0\u660e\u8bed\u53e5\u5757\u540e \u5fc5\u987b \u8981\u6709\u4e00\u4e2a\u7a7a\u767d\u884c\u3002 \u4f8b\u5982\uff1a <?php namespace Vendor\\Package ; use FooClass ; use BarClass as Bar ; use OtherVendor\\OtherPackage\\BazClass ; // ... additional PHP code ...","title":"3. namespace \u4ee5\u53ca use \u58f0\u660e"},{"location":"php/psr/psr-2/#4","text":"\u6b64\u5904\u7684\u201c\u7c7b\u201d\u6cdb\u6307\u6240\u6709\u7684class\u7c7b\u3001\u63a5\u53e3\u4ee5\u53catraits\u53ef\u590d\u7528\u4ee3\u7801\u5757\u3002","title":"4. \u7c7b\u3001\u5c5e\u6027\u548c\u65b9\u6cd5"},{"location":"php/psr/psr-2/#41","text":"\u5173\u952e\u8bcd extends \u548c implements \u5fc5\u987b \u5199\u5728\u7c7b\u540d\u79f0\u7684\u540c\u4e00\u884c\u3002 \u7c7b\u7684\u5f00\u59cb\u82b1\u62ec\u53f7 \u5fc5\u987b \u72ec\u5360\u4e00\u884c\uff0c\u7ed3\u675f\u82b1\u62ec\u53f7\u4e5f \u5fc5\u987b \u5728\u7c7b\u4e3b\u4f53\u540e\u72ec\u5360\u4e00\u884c\u3002 <?php namespace Vendor\\Package ; use FooClass ; use BarClass as Bar ; use OtherVendor\\OtherPackage\\BazClass ; class ClassName extends ParentClass implements \\ArrayAccess , \\Countable { // constants, properties, methods } implements \u7684\u7ee7\u627f\u5217\u8868\u4e5f \u53ef\u4ee5 \u5206\u6210\u591a\u884c\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u4e2a\u7ee7\u627f\u63a5\u53e3\u540d\u79f0\u90fd \u5fc5\u987b \u5206\u5f00\u72ec\u7acb\u6210\u884c\uff0c\u5305\u62ec\u7b2c\u4e00\u4e2a\u3002 <?php namespace Vendor\\Package ; use FooClass ; use BarClass as Bar ; use OtherVendor\\OtherPackage\\BazClass ; class ClassName extends ParentClass implements \\ArrayAccess , \\Countable , \\Serializable { // constants, properties, methods }","title":"4.1. \u6269\u5c55\u4e0e\u7ee7\u627f"},{"location":"php/psr/psr-2/#42","text":"\u6bcf\u4e2a\u5c5e\u6027\u90fd \u5fc5\u987b \u6dfb\u52a0\u8bbf\u95ee\u4fee\u9970\u7b26\u3002 \u4e00\u5b9a\u4e0d\u53ef \u4f7f\u7528\u5173\u952e\u5b57 var \u58f0\u660e\u4e00\u4e2a\u5c5e\u6027\u3002 \u6bcf\u6761\u8bed\u53e5 \u4e00\u5b9a\u4e0d\u53ef \u5b9a\u4e49\u8d85\u8fc7\u4e00\u4e2a\u5c5e\u6027\u3002 \u4e0d\u8981 \u4f7f\u7528\u4e0b\u5212\u7ebf\u4f5c\u4e3a\u524d\u7f00\uff0c\u6765\u533a\u5206\u5c5e\u6027\u662f protected \u6216 private\u3002 \u4ee5\u4e0b\u662f\u5c5e\u6027\u58f0\u660e\u7684\u4e00\u4e2a\u8303\u4f8b\uff1a <?php namespace Vendor\\Package ; class ClassName { public $foo = null ; }","title":"4.2. \u5c5e\u6027"},{"location":"php/psr/psr-2/#43","text":"\u6240\u6709\u65b9\u6cd5\u90fd \u5fc5\u987b \u6dfb\u52a0\u8bbf\u95ee\u4fee\u9970\u7b26\u3002 \u4e0d\u8981 \u4f7f\u7528\u4e0b\u5212\u7ebf\u4f5c\u4e3a\u524d\u7f00\uff0c\u6765\u533a\u5206\u65b9\u6cd5\u662f protected \u6216 private\u3002 \u65b9\u6cd5\u540d\u79f0\u540e \u4e00\u5b9a\u4e0d\u80fd \u6709\u7a7a\u683c\u7b26\uff0c\u5176\u5f00\u59cb\u82b1\u62ec\u53f7 \u5fc5\u987b \u72ec\u5360\u4e00\u884c\uff0c\u7ed3\u675f\u82b1\u62ec\u53f7\u4e5f \u5fc5\u987b \u5728\u65b9\u6cd5\u4e3b\u4f53\u540e\u5355\u72ec\u6210\u4e00\u884c\u3002\u53c2\u6570\u5de6\u62ec\u53f7\u540e\u548c\u53f3\u62ec\u53f7\u524d \u4e00\u5b9a\u4e0d\u80fd \u6709\u7a7a\u683c\u3002 \u4e00\u4e2a\u6807\u51c6\u7684\u65b9\u6cd5\u58f0\u660e\u53ef\u53c2\u7167\u4ee5\u4e0b\u8303\u4f8b\uff0c\u7559\u610f\u5176\u62ec\u53f7\u3001\u9017\u53f7\u3001\u7a7a\u683c\u4ee5\u53ca\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 <?php namespace Vendor\\Package ; class ClassName { public function fooBarBaz ( $arg1 , & $arg2 , $arg3 = []) { // method body } }","title":"4.3. \u65b9\u6cd5"},{"location":"php/psr/psr-2/#44","text":"\u53c2\u6570\u5217\u8868\u4e2d\uff0c\u6bcf\u4e2a\u9017\u53f7\u540e\u9762 \u5fc5\u987b \u8981\u6709\u4e00\u4e2a\u7a7a\u683c\uff0c\u800c\u9017\u53f7\u524d\u9762 \u4e00\u5b9a\u4e0d\u80fd \u6709\u7a7a\u683c\u3002 \u6709\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\uff0c \u5fc5\u987b \u653e\u5230\u53c2\u6570\u5217\u8868\u7684\u672b\u5c3e\u3002 <?php namespace Vendor\\Package ; class ClassName { public function foo ( $arg1 , & $arg2 , $arg3 = []) { // method body } } \u53c2\u6570\u5217\u8868 \u53ef\u4ee5 \u5206\u5217\u6210\u591a\u884c\uff0c\u8fd9\u6837\uff0c\u5305\u62ec\u7b2c\u4e00\u4e2a\u53c2\u6570\u5728\u5185\u7684\u6bcf\u4e2a\u53c2\u6570\u90fd \u5fc5\u987b \u5355\u72ec\u6210\u884c\u3002 \u62c6\u5206\u6210\u591a\u884c\u7684\u53c2\u6570\u5217\u8868\u540e\uff0c\u7ed3\u675f\u62ec\u53f7\u4ee5\u53ca\u65b9\u6cd5\u5f00\u59cb\u82b1\u62ec\u53f7 \u5fc5\u987b \u5199\u5728\u540c\u4e00\u884c\uff0c\u4e2d\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\u3002 <?php namespace Vendor\\Package ; class ClassName { public function aVeryLongMethodName ( ClassTypeHint $arg1 , & $arg2 , array $arg3 = [] ) { // method body } }","title":"4.4. \u65b9\u6cd5\u7684\u53c2\u6570"},{"location":"php/psr/psr-2/#45-abstract-final-static","text":"\u9700\u8981\u6dfb\u52a0 abstract \u6216 final \u58f0\u660e\u65f6\uff0c \u5fc5\u987b \u5199\u5728\u8bbf\u95ee\u4fee\u9970\u7b26\u524d\uff0c\u800c static \u5219 \u5fc5\u987b \u5199\u5728\u5176\u540e\u3002 <?php namespace Vendor\\Package ; abstract class ClassName { protected static $foo ; abstract protected function zim (); final public static function bar () { // method body } }","title":"4.5. abstract \u3001 final \u3001 \u4ee5\u53ca static"},{"location":"php/psr/psr-2/#46","text":"\u65b9\u6cd5\u53ca\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u65b9\u6cd5\u540d\u6216\u51fd\u6570\u540d\u4e0e\u53c2\u6570\u5de6\u62ec\u53f7\u4e4b\u95f4 \u4e00\u5b9a\u4e0d\u80fd \u6709\u7a7a\u683c\uff0c\u53c2\u6570\u53f3\u62ec\u53f7\u524d\u4e5f \u4e00\u5b9a\u4e0d\u80fd \u6709\u7a7a\u683c\u3002\u6bcf\u4e2a\u9017\u53f7\u524d \u4e00\u5b9a\u4e0d\u80fd \u6709\u7a7a\u683c\uff0c\u4f46\u5176\u540e \u5fc5\u987b \u6709\u4e00\u4e2a\u7a7a\u683c\u3002 <?php bar (); $foo -> bar ( $arg1 ); Foo :: bar ( $arg2 , $arg3 ); \u53c2\u6570 \u53ef\u4ee5 \u5206\u5217\u6210\u591a\u884c\uff0c\u6b64\u65f6\u5305\u62ec\u7b2c\u4e00\u4e2a\u53c2\u6570\u5728\u5185\u7684\u6bcf\u4e2a\u53c2\u6570\u90fd \u5fc5\u987b \u5355\u72ec\u6210\u884c\u3002 <?php $foo -> bar ( $longArgument , $longerArgument , $muchLongerArgument );","title":"4.6. \u65b9\u6cd5\u53ca\u51fd\u6570\u8c03\u7528"},{"location":"php/psr/psr-2/#5","text":"\u63a7\u5236\u7ed3\u6784\u7684\u57fa\u672c\u89c4\u8303\u5982\u4e0b\uff1a \u63a7\u5236\u7ed3\u6784\u5173\u952e\u8bcd\u540e \u5fc5\u987b \u6709\u4e00\u4e2a\u7a7a\u683c\u3002 \u5de6\u62ec\u53f7 ( \u540e \u4e00\u5b9a\u4e0d\u80fd \u6709\u7a7a\u683c\u3002 \u53f3\u62ec\u53f7 ) \u524d\u4e5f \u4e00\u5b9a\u4e0d \u80fd\u6709\u7a7a\u683c\u3002 \u53f3\u62ec\u53f7 ) \u4e0e\u5f00\u59cb\u82b1\u62ec\u53f7 { \u95f4 \u4e00\u5b9a \u6709\u4e00\u4e2a\u7a7a\u683c\u3002 \u7ed3\u6784\u4f53\u4e3b\u4f53 \u4e00\u5b9a \u8981\u6709\u4e00\u6b21\u7f29\u8fdb\u3002 \u7ed3\u675f\u82b1\u62ec\u53f7 } \u4e00\u5b9a \u5728\u7ed3\u6784\u4f53\u4e3b\u4f53\u540e\u5355\u72ec\u6210\u884c\u3002 \u6bcf\u4e2a\u7ed3\u6784\u4f53\u7684\u4e3b\u4f53\u90fd \u5fc5\u987b \u88ab\u5305\u542b\u5728\u6210\u5bf9\u7684\u82b1\u62ec\u53f7\u4e4b\u4e2d\uff0c \u8fd9\u80fd\u8ba9\u7ed3\u6784\u4f53\u66f4\u52a0\u7ed3\u6784\u8bdd\uff0c\u4ee5\u53ca\u51cf\u5c11\u52a0\u5165\u65b0\u884c\u65f6\uff0c\u51fa\u9519\u7684\u53ef\u80fd\u6027\u3002","title":"5. \u63a7\u5236\u7ed3\u6784"},{"location":"php/psr/psr-2/#51-if-elseif-else","text":"\u6807\u51c6\u7684 if \u7ed3\u6784\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff0c\u7559\u610f \u62ec\u53f7\u3001\u7a7a\u683c\u4ee5\u53ca\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\uff0c \u6ce8\u610f else \u548c elseif \u90fd\u4e0e\u524d\u9762\u7684\u7ed3\u675f\u82b1\u62ec\u53f7\u5728\u540c\u4e00\u884c\u3002 <?php if ( $expr1 ) { // if body } elseif ( $expr2 ) { // elseif body } else { // else body; } \u5e94\u8be5 \u4f7f\u7528\u5173\u952e\u8bcd elseif \u4ee3\u66ff\u6240\u6709 else if \uff0c\u4ee5\u4f7f\u5f97\u6240\u6709\u7684\u63a7\u5236\u5173\u952e\u5b57\u90fd\u50cf\u662f\u5355\u72ec\u7684\u4e00\u4e2a\u8bcd\u3002","title":"5.1. if \u3001 elseif \u548c else"},{"location":"php/psr/psr-2/#52-switch-case","text":"\u6807\u51c6\u7684 switch \u7ed3\u6784\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff0c\u7559\u610f\u62ec\u53f7\u3001\u7a7a\u683c\u4ee5\u53ca\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 case \u8bed\u53e5 \u5fc5\u987b \u76f8\u5bf9 switch \u8fdb\u884c\u4e00\u6b21\u7f29\u8fdb\uff0c\u800c break \u8bed\u53e5\u4ee5\u53ca case \u5185\u7684\u5176\u5b83\u8bed\u53e5\u90fd \u5fc5\u987b \u76f8\u5bf9 case \u8fdb\u884c\u4e00\u6b21\u7f29\u8fdb\u3002 \u5982\u679c\u5b58\u5728\u975e\u7a7a\u7684 case \u76f4\u7a7f\u8bed\u53e5\uff0c\u4e3b\u4f53\u91cc\u5fc5\u987b\u6709\u7c7b\u4f3c // no break \u7684\u6ce8\u91ca\u3002 <?php switch ( $expr ) { case 0 : echo 'First case, with a break' ; break ; case 1 : echo 'Second case, which falls through' ; // no break case 2 : case 3 : case 4 : echo 'Third case, return instead of break' ; return ; default : echo 'Default case' ; break ; }","title":"5.2. switch \u548c case"},{"location":"php/psr/psr-2/#53-while-do-while","text":"\u4e00\u4e2a\u89c4\u8303\u7684 while \u8bed\u53e5\u5e94\u8be5\u5982\u4e0b\u6240\u793a\uff0c\u6ce8\u610f\u5176 \u62ec\u53f7\u3001\u7a7a\u683c\u4ee5\u53ca\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 <?php while ( $expr ) { // structure body } \u6807\u51c6\u7684 do while \u8bed\u53e5\u5982\u4e0b\u6240\u793a\uff0c\u540c\u6837\u7684\uff0c\u6ce8\u610f\u5176 \u62ec\u53f7\u3001\u7a7a\u683c\u4ee5\u53ca\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 <?php do { // structure body; } while ( $expr );","title":"5.3. while \u548c do while"},{"location":"php/psr/psr-2/#54-for","text":"\u6807\u51c6\u7684 for \u8bed\u53e5\u5982\u4e0b\u6240\u793a\uff0c\u6ce8\u610f\u5176 \u62ec\u53f7\u3001\u7a7a\u683c\u4ee5\u53ca\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 <?php for ( $i = 0 ; $i < 10 ; $i ++ ) { // for body }","title":"5.4. for"},{"location":"php/psr/psr-2/#55-foreach","text":"\u6807\u51c6\u7684 foreach \u8bed\u53e5\u5982\u4e0b\u6240\u793a\uff0c\u6ce8\u610f\u5176 \u62ec\u53f7\u3001\u7a7a\u683c\u4ee5\u53ca\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 <?php foreach ( $iterable as $key => $value ) { // foreach body }","title":"5.5. foreach"},{"location":"php/psr/psr-2/#56-try-catch","text":"\u6807\u51c6\u7684 try catch \u8bed\u53e5\u5982\u4e0b\u6240\u793a\uff0c\u6ce8\u610f\u5176 \u62ec\u53f7\u3001\u7a7a\u683c\u4ee5\u53ca\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 <?php try { // try body } catch ( FirstExceptionType $e ) { // catch body } catch ( OtherExceptionType $e ) { // catch body }","title":"5.6. try, catch"},{"location":"php/psr/psr-2/#6","text":"\u95ed\u5305\u58f0\u660e\u65f6\uff0c\u5173\u952e\u8bcd function \u540e\u4ee5\u53ca\u5173\u952e\u8bcd use \u7684\u524d\u540e\u90fd \u5fc5\u987b \u8981\u6709\u4e00\u4e2a\u7a7a\u683c\u3002 \u5f00\u59cb\u82b1\u62ec\u53f7 \u5fc5\u987b \u5199\u5728\u58f0\u660e\u7684\u540c\u4e00\u884c\uff0c\u7ed3\u675f\u82b1\u62ec\u53f7 \u5fc5\u987b \u7d27\u8ddf\u4e3b\u4f53\u7ed3\u675f\u7684\u4e0b\u4e00\u884c\u3002 \u53c2\u6570\u5217\u8868\u548c\u53d8\u91cf\u5217\u8868\u7684\u5de6\u62ec\u53f7\u540e\u4ee5\u53ca\u53f3\u62ec\u53f7\u524d\uff0c \u5fc5\u987b\u4e0d\u80fd \u6709\u7a7a\u683c\u3002 \u53c2\u6570\u548c\u53d8\u91cf\u5217\u8868\u4e2d\uff0c\u9017\u53f7\u524d \u5fc5\u987b\u4e0d\u80fd \u6709\u7a7a\u683c\uff0c\u800c\u9017\u53f7\u540e \u5fc5\u987b \u8981\u6709\u7a7a\u683c\u3002 \u95ed\u5305\u4e2d\u6709\u9ed8\u8ba4\u503c\u7684\u53c2\u6570 \u5fc5\u987b \u653e\u5230\u5217\u8868\u7684\u540e\u9762\u3002 \u6807\u51c6\u7684\u95ed\u5305\u58f0\u660e\u8bed\u53e5\u5982\u4e0b\u6240\u793a\uff0c\u6ce8\u610f\u5176 \u62ec\u53f7\u3001\u9017\u53f7\u3001\u7a7a\u683c\u4ee5\u53ca\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 <?php $closureWithArgs = function ( $arg1 , $arg2 ) { // body }; $closureWithArgsAndVars = function ( $arg1 , $arg2 ) use ( $var1 , $var2 ) { // body }; \u53c2\u6570\u5217\u8868\u4ee5\u53ca\u53d8\u91cf\u5217\u8868 \u53ef\u4ee5 \u5206\u6210\u591a\u884c\uff0c\u8fd9\u6837\uff0c\u5305\u62ec\u7b2c\u4e00\u4e2a\u5728\u5185\u7684\u6bcf\u4e2a\u53c2\u6570\u6216\u53d8\u91cf\u90fd \u5fc5\u987b \u5355\u72ec\u6210\u884c\uff0c\u800c\u5217\u8868\u7684\u53f3\u62ec\u53f7\u4e0e\u95ed\u5305\u7684\u5f00\u59cb\u82b1\u62ec\u53f7 \u5fc5\u987b \u653e\u5728\u540c\u4e00\u884c\u3002 \u4ee5\u4e0b\u51e0\u4e2a\u4f8b\u5b50\uff0c\u5305\u542b\u4e86\u53c2\u6570\u548c\u53d8\u91cf\u5217\u8868\u88ab\u5206\u6210\u591a\u884c\u7684\u591a\u60c5\u51b5\u3002 <?php $longArgs_noVars = function ( $longArgument , $longerArgument , $muchLongerArgument ) { // body }; $noArgs_longVars = function () use ( $longVar1 , $longerVar2 , $muchLongerVar3 ) { // body }; $longArgs_longVars = function ( $longArgument , $longerArgument , $muchLongerArgument ) use ( $longVar1 , $longerVar2 , $muchLongerVar3 ) { // body }; $longArgs_shortVars = function ( $longArgument , $longerArgument , $muchLongerArgument ) use ( $var1 ) { // body }; $shortArgs_longVars = function ( $arg ) use ( $longVar1 , $longerVar2 , $muchLongerVar3 ) { // body }; \u6ce8\u610f\uff0c\u95ed\u5305\u88ab\u76f4\u63a5\u7528\u4f5c\u51fd\u6570\u6216\u65b9\u6cd5\u8c03\u7528\u7684\u53c2\u6570\u65f6\uff0c\u4ee5\u4e0a\u89c4\u5219\u4ecd\u7136\u9002\u7528\u3002 <?php $foo -> bar ( $arg1 , function ( $arg2 ) use ( $var1 ) { // body }, $arg3 );","title":"6. \u95ed\u5305"},{"location":"php/psr/psr-2/#7","text":"\u4f7f\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u8de8\u884c\u7684\u53c2\u6570\uff08\u5982\u6570\u7ec4\u548c\u533f\u540d\u51fd\u6570\uff09\u5e76\u4e0d\u9700\u8981\u89e6\u53d1 4.6 \u8282\u4e2d\u5173\u4e8e\u53c2\u6570\u5217\u8868\u7684\u5355\u884c\u89c4\u5b9a\uff0c \u56e0\u6b64\uff0c\u5728\u53c2\u6570\u8868\u4e2d\u7684\u6570\u7ec4\u548c\u533f\u540d\u51fd\u6570\u662f\u53ef\u4ee5\u5355\u72ec\u5206\u5217\u6210\u591a\u884c\u7684\u3002 \u4ee5\u4e0b\u7684\u4f8b\u5b50\u662f\u7b26\u5408 PSR-2 \u89c4\u8303\u7684\uff1a <?php somefunction ( $foo , $bar , [ // ... ], $baz ); $app -> get ( '/hello/{name}' , function ( $name ) use ( $app ) { return 'Hello ' . $app -> escape ( $name ); });","title":"7. \u591a\u884c\u53c2\u6570"},{"location":"php/psr/psr-2/#8","text":"\u5f53\u9700\u8981\u6269\u5c55\u591a\u4e2a\u63a5\u53e3\u65f6\uff0c extends \u7684\u76f8\u5173\u89c4\u8303\u4e0e 4.1 \u8282\u4e2d implements \u7684\u89c4\u8303\u4e00\u81f4\u3002","title":"8. \u591a\u63a5\u53e3\u6269\u5c55"},{"location":"php/psr/psr-2/#9","text":"\u4ee5\u4e0a\u89c4\u8303\u96be\u514d\u6709\u758f\u5ffd\uff0c\u5176\u4e2d\u5305\u62ec\u4f46\u4e0d\u4ec5\u9650\u4e8e\uff1a \u5168\u5c40\u53d8\u91cf\u548c\u5e38\u91cf\u7684\u5b9a\u4e49 \u51fd\u6570\u7684\u5b9a\u4e49 \u64cd\u4f5c\u7b26\u548c\u8d4b\u503c \u884c\u5185\u5bf9\u9f50 \u6ce8\u91ca\u548c\u6587\u6863\u63cf\u8ff0\u5757 \u7c7b\u540d\u7684\u524d\u7f00\u53ca\u540e\u7f00 \u6700\u4f73\u5b9e\u8df5 \u539f\u6587\uff1a https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-2-coding-style-guide-cn.md https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-2-coding-style-guide-meta-cn.md","title":"9. \u603b\u7ed3"},{"location":"php/psr/psr-3/","text":"PHP PSR-3 \u65e5\u5fd7\u63a5\u53e3\u89c4\u8303 # \u672c\u6587\u5236\u5b9a\u4e86\u65e5\u5fd7\u7c7b\u5e93\u7684\u901a\u7528\u63a5\u53e3\u89c4\u8303\u3002 \u672c\u89c4\u8303\u7684\u4e3b\u8981\u76ee\u7684\uff0c\u662f\u4e3a\u4e86\u8ba9\u65e5\u5fd7\u7c7b\u5e93\u4ee5\u7b80\u5355\u901a\u7528\u7684\u65b9\u5f0f\uff0c\u901a\u8fc7\u63a5\u6536\u4e00\u4e2a Psr\\Log\\LoggerInterface \u5bf9\u8c61\uff0c\u6765\u8bb0\u5f55\u65e5\u5fd7\u4fe1\u606f\u3002 \u6846\u67b6\u4ee5\u53caCMS\u5185\u5bb9\u7ba1\u7406\u7cfb\u7edf\u5982\u6709\u9700\u8981\uff0c \u53ef\u4ee5 \u5bf9\u6b64\u63a5\u53e3\u8fdb\u884c\u6269\u5c55\uff0c\u4f46\u9700\u9075\u5faa\u672c\u89c4\u8303\uff0c \u8fd9\u624d\u80fd\u4fdd\u8bc1\u5728\u4f7f\u7528\u7b2c\u4e09\u65b9\u7684\u7c7b\u5e93\u6587\u4ef6\u65f6\uff0c\u65e5\u5fd7\u63a5\u53e3\u4ecd\u80fd\u6b63\u5e38\u5bf9\u63a5\u3002 \u5173\u952e\u8bcd \u201c\u5fc5\u987b\u201d(\"MUST\")\u3001\u201c\u4e00\u5b9a\u4e0d\u53ef/\u4e00\u5b9a\u4e0d\u80fd\u201d(\"MUST NOT\")\u3001\u201c\u9700\u8981\u201d(\"REQUIRED\")\u3001 \u201c\u5c06\u4f1a\u201d(\"SHALL\")\u3001\u201c\u4e0d\u4f1a\u201d(\"SHALL NOT\")\u3001\u201c\u5e94\u8be5\u201d(\"SHOULD\")\u3001\u201c\u4e0d\u8be5\u201d(\"SHOULD NOT\")\u3001 \u201c\u63a8\u8350\u201d(\"RECOMMENDED\")\u3001\u201c\u53ef\u4ee5\u201d(\"MAY\")\u548c\u201d\u53ef\u9009\u201c(\"OPTIONAL\")\u7684\u8be6\u7ec6\u63cf\u8ff0\u53ef\u53c2\u89c1 RFC 2119 \u3002 \u672c\u6587\u4e2d\u7684 \u5b9e\u73b0\u8005 \u6307\u7684\u662f\u5b9e\u73b0\u4e86 LoggerInterface \u63a5\u53e3\u7684\u7c7b\u5e93\u6216\u8005\u6846\u67b6\uff0c\u53cd\u8fc7\u6765\u8bb2\uff0c\u4ed6\u4eec\u5c31\u662f LoggerInterface \u7684 \u4f7f\u7528\u8005 \u3002 1. \u89c4\u8303\u8bf4\u660e # 1.1 \u57fa\u672c\u89c4\u8303 # LoggerInterface \u63a5\u53e3\u5bf9\u5916\u5b9a\u4e49\u4e86\u516b\u4e2a\u65b9\u6cd5\uff0c\u5206\u522b\u7528\u6765\u8bb0\u5f55 RFC 5424 \u4e2d\u5b9a\u4e49\u7684\u516b\u4e2a\u7b49\u7ea7\u7684\u65e5\u5fd7\uff1adebug\u3001 info\u3001 notice\u3001 warning\u3001 error\u3001 critical\u3001 alert \u4ee5\u53ca emergency \u3002 \u7b2c\u4e5d\u4e2a\u65b9\u6cd5 \u2014\u2014 log \uff0c\u5176\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u8bb0\u5f55\u7684\u7b49\u7ea7\u3002\u53ef\u4f7f\u7528\u4e00\u4e2a\u9884\u5148\u5b9a\u4e49\u7684\u7b49\u7ea7\u5e38\u91cf\u4f5c\u4e3a\u53c2\u6570\u6765\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c \u5fc5\u987b \u4e0e\u76f4\u63a5\u8c03\u7528\u4ee5\u4e0a\u516b\u4e2a\u65b9\u6cd5\u5177\u6709\u76f8\u540c\u7684\u6548\u679c\u3002\u5982\u679c\u4f20\u5165\u7684\u7b49\u7ea7\u5e38\u91cf\u53c2\u6570\u6ca1\u6709\u9884\u5148\u5b9a\u4e49\uff0c\u5219 \u5fc5\u987b \u629b\u51fa Psr\\Log\\InvalidArgumentException \u7c7b\u578b\u7684\u5f02\u5e38\u3002\u5728\u4e0d\u786e\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u8005 \u4e0d\u8be5 \u4f7f\u7528\u672a\u652f\u6301\u7684\u7b49\u7ea7\u5e38\u91cf\u6765\u8c03\u7528\u6b64\u65b9\u6cd5\u3002 1.2 \u8bb0\u5f55\u4fe1\u606f # \u4ee5\u4e0a\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u6216\u8005\u662f\u6709 __toString() \u65b9\u6cd5\u7684\u5bf9\u8c61\u4f5c\u4e3a\u8bb0\u5f55\u4fe1\u606f\u53c2\u6570\uff0c\u8fd9\u6837\uff0c\u5b9e\u73b0\u8005\u5c31\u80fd\u628a\u5b83\u5f53\u6210\u5b57\u7b26\u4e32\u6765\u5904\u7406\uff0c\u5426\u5219\u5b9e\u73b0\u8005 \u5fc5\u987b \u81ea\u5df1\u628a\u5b83\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u3002 \u8bb0\u5f55\u4fe1\u606f\u53c2\u6570 \u53ef\u4ee5 \u643a\u5e26\u5360\u4f4d\u7b26\uff0c\u5b9e\u73b0\u8005 \u53ef\u4ee5 \u6839\u636e\u4e0a\u4e0b\u6587\u5c06\u5176\u5b83\u66ff\u6362\u6210\u76f8\u5e94\u7684\u503c\u3002 \u5176\u4e2d\u5360\u4f4d\u7b26 \u5fc5\u987b \u4e0e\u4e0a\u4e0b\u6587\u6570\u7ec4\u4e2d\u7684\u952e\u540d\u4fdd\u6301\u4e00\u81f4\u3002 \u5360\u4f4d\u7b26\u7684\u540d\u79f0 \u5fc5\u987b \u7531\u4e00\u4e2a\u5de6\u82b1\u62ec\u53f7 { \u4ee5\u53ca\u4e00\u4e2a\u53f3\u62ec\u53f7 } \u5305\u542b\u3002\u4f46\u82b1\u62ec\u53f7\u4e0e\u540d\u79f0\u4e4b\u95f4 \u4e00\u5b9a\u4e0d\u80fd \u6709\u7a7a\u683c\u7b26\u3002 \u5360\u4f4d\u7b26\u7684\u540d\u79f0 \u5e94\u8be5 \u53ea\u7531 A-Z \u3001 a-z , 0-9 \u3001\u4e0b\u5212\u7ebf _ \u3001\u4ee5\u53ca\u82f1\u6587\u7684\u53e5\u53f7 . \u7ec4\u6210\uff0c\u5176\u5b83\u5b57\u7b26\u4f5c\u4e3a\u5c06\u6765\u5360\u4f4d\u7b26\u89c4\u8303\u7684\u4fdd\u7559\u3002 \u5b9e\u73b0\u8005 \u53ef\u4ee5 \u901a\u8fc7\u5bf9\u5360\u4f4d\u7b26\u91c7\u7528\u4e0d\u540c\u7684\u8f6c\u4e49\u548c\u8f6c\u6362\u7b56\u7565\uff0c\u6765\u751f\u6210\u6700\u7ec8\u7684\u65e5\u5fd7\u3002 \u800c\u4f7f\u7528\u8005\u5728\u4e0d\u77e5\u9053\u4e0a\u4e0b\u6587\u7684\u524d\u63d0\u4e0b\uff0c \u4e0d\u8be5 \u63d0\u524d\u8f6c\u4e49\u5360\u4f4d\u7b26\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u5360\u4f4d\u7b26\u4f7f\u7528\u7684\u4f8b\u5b50\uff1a <?php /** * \u7528\u4e0a\u4e0b\u6587\u4fe1\u606f\u66ff\u6362\u8bb0\u5f55\u4fe1\u606f\u4e2d\u7684\u5360\u4f4d\u7b26 */ function interpolate ( $message , array $context = array ()) { // \u6784\u5efa\u4e00\u4e2a\u82b1\u62ec\u53f7\u5305\u542b\u7684\u952e\u540d\u7684\u66ff\u6362\u6570\u7ec4 $replace = array (); foreach ( $context as $key => $val ) { $replace [ '{' . $key . '}' ] = $val ; } // \u66ff\u6362\u8bb0\u5f55\u4fe1\u606f\u4e2d\u7684\u5360\u4f4d\u7b26\uff0c\u6700\u540e\u8fd4\u56de\u4fee\u6539\u540e\u7684\u8bb0\u5f55\u4fe1\u606f\u3002 return strtr ( $message , $replace ); } // \u542b\u6709\u5e26\u82b1\u62ec\u53f7\u5360\u4f4d\u7b26\u7684\u8bb0\u5f55\u4fe1\u606f\u3002 $message = \"User {username} created\" ; // \u5e26\u6709\u66ff\u6362\u4fe1\u606f\u7684\u4e0a\u4e0b\u6587\u6570\u7ec4\uff0c\u952e\u540d\u4e3a\u5360\u4f4d\u7b26\u540d\u79f0\uff0c\u952e\u503c\u4e3a\u66ff\u6362\u503c\u3002 $context = array ( 'username' => 'bolivar' ); // \u8f93\u51fa \"Username bolivar created\" echo interpolate ( $message , $context ); 1.3 \u4e0a\u4e0b\u6587 # \u6bcf\u4e2a\u8bb0\u5f55\u51fd\u6570\u90fd\u63a5\u53d7\u4e00\u4e2a\u4e0a\u4e0b\u6587\u6570\u7ec4\u53c2\u6570\uff0c\u7528\u6765\u88c5\u8f7d\u5b57\u7b26\u4e32\u7c7b\u578b\u65e0\u6cd5\u8868\u793a\u7684\u4fe1\u606f\u3002\u5b83 \u53ef\u4ee5 \u88c5\u8f7d\u4efb\u4f55\u4fe1\u606f\uff0c\u6240\u4ee5\u5b9e\u73b0\u8005 \u5fc5\u987b \u786e\u4fdd\u80fd\u6b63\u786e\u5904\u7406\u5176\u88c5\u8f7d\u7684\u4fe1\u606f\uff0c\u5bf9\u4e8e\u5176\u88c5\u8f7d\u7684\u6570\u636e\uff0c \u4e00\u5b9a\u4e0d\u80fd \u629b\u51fa\u5f02\u5e38\uff0c\u6216\u4ea7\u751fPHP\u51fa\u9519\u3001\u8b66\u544a\u6216\u63d0\u9192\u4fe1\u606f\uff08error\u3001warning\u3001notice\uff09\u3002 \u5982\u9700\u901a\u8fc7\u4e0a\u4e0b\u6587\u53c2\u6570\u4f20\u5165\u4e86\u4e00\u4e2a Exception \u5bf9\u8c61\uff0c \u5fc5\u987b \u4ee5 'exception' \u4f5c\u4e3a\u952e\u540d\u3002 \u8bb0\u5f55\u5f02\u5e38\u4fe1\u606f\u662f\u5f88\u666e\u904d\u7684\uff0c\u6240\u4ee5\u5982\u679c\u5b83\u80fd\u591f\u5728\u8bb0\u5f55\u7c7b\u5e93\u7684\u5e95\u5c42\u5b9e\u73b0\uff0c\u5c31\u80fd\u591f\u8ba9\u5b9e\u73b0\u8005\u4ece\u5f02\u5e38\u4fe1\u606f\u4e2d\u62bd\u4e1d\u5265\u8327\u3002 \u5f53\u7136\uff0c\u5b9e\u73b0\u8005\u5728\u4f7f\u7528\u5b83\u65f6\uff0c \u5fc5\u987b \u786e\u4fdd\u952e\u540d\u4e3a 'exception' \u7684\u952e\u503c\u662f\u5426\u771f\u7684\u662f\u4e00\u4e2a Exception \uff0c\u6bd5\u7adf\u5b83 \u53ef\u4ee5 \u88c5\u8f7d\u4efb\u4f55\u4fe1\u606f\u3002 1.4 \u52a9\u624b\u7c7b\u548c\u63a5\u53e3 # Psr\\Log\\AbstractLogger \u7c7b\u4f7f\u5f97\u53ea\u9700\u7ee7\u627f\u5b83\u548c\u5b9e\u73b0\u5176\u4e2d\u7684 log \u65b9\u6cd5\uff0c\u5c31\u80fd\u591f\u5f88\u8f7b\u6613\u5730\u5b9e\u73b0 LoggerInterface \u63a5\u53e3\uff0c\u800c\u53e6\u5916\u516b\u4e2a\u65b9\u6cd5\u5c31\u80fd\u591f\u628a\u8bb0\u5f55\u4fe1\u606f\u548c\u4e0a\u4e0b\u6587\u4fe1\u606f\u4f20\u7ed9\u5b83\u3002 \u540c\u6837\u5730\uff0c\u4f7f\u7528 Psr\\Log\\LoggerTrait \u4e5f\u53ea\u9700\u5b9e\u73b0\u5176\u4e2d\u7684 log \u65b9\u6cd5\u3002\u4e0d\u8fc7\uff0c\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u5728traits\u53ef\u590d\u7528\u4ee3\u7801\u5757\u8fd8\u4e0d\u80fd\u5b9e\u73b0\u63a5\u53e3\u524d\uff0c\u8fd8\u9700\u8981 implement LoggerInterface \u3002 \u5728\u6ca1\u6709\u53ef\u7528\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u65f6\uff0c Psr\\Log\\NullLogger \u63a5\u53e3 \u53ef\u4ee5 \u4e3a\u4f7f\u7528\u8005\u63d0\u4f9b\u4e00\u4e2a\u5907\u7528\u7684\u65e5\u5fd7\u201c\u9ed1\u6d1e\u201d\u3002\u4e0d\u8fc7\uff0c\u5f53\u4e0a\u4e0b\u6587\u7684\u6784\u5efa\u975e\u5e38\u6d88\u8017\u8d44\u6e90\u65f6\uff0c\u5e26\u6761\u4ef6\u68c0\u67e5\u7684\u65e5\u5fd7\u8bb0\u5f55\u6216\u8bb8\u662f\u66f4\u597d\u7684\u529e\u6cd5\u3002 Psr\\Log\\LoggerAwareInterface \u63a5\u53e3\u4ec5\u5305\u62ec\u4e00\u4e2a setLogger(LoggerInterface $logger) \u65b9\u6cd5\uff0c\u6846\u67b6\u53ef\u4ee5\u4f7f\u7528\u5b83\u5b9e\u73b0\u81ea\u52a8\u8fde\u63a5\u4efb\u610f\u7684\u65e5\u5fd7\u8bb0\u5f55\u5b9e\u4f8b\u3002 Psr\\Log\\LoggerAwareTrait trait\u53ef\u590d\u7528\u4ee3\u7801\u5757\u53ef\u4ee5\u5728\u4efb\u4f55\u7684\u7c7b\u91cc\u9762\u4f7f\u7528\uff0c\u53ea\u9700\u901a\u8fc7\u5b83\u63d0\u4f9b\u7684 $this->logger \uff0c\u5c31\u53ef\u4ee5\u8f7b\u677e\u5730\u5b9e\u73b0\u7b49\u540c\u7684\u63a5\u53e3\u3002 Psr\\Log\\LogLevel \u7c7b\u88c5\u8f7d\u4e86\u516b\u4e2a\u8bb0\u5f55\u7b49\u7ea7\u5e38\u91cf\u3002 2. \u5305 # \u4e0a\u8ff0\u7684\u63a5\u53e3\u3001\u7c7b\u548c\u76f8\u5173\u7684\u5f02\u5e38\u7c7b\uff0c\u4ee5\u53ca\u4e00\u7cfb\u5217\u7684\u5b9e\u73b0\u68c0\u6d4b\u6587\u4ef6\uff0c\u90fd\u5305\u542b\u5728 psr/log \u6587\u4ef6\u5305\u4e2d\u3002 3. Psr\\Log\\LoggerInterface # <?php namespace Psr\\Log ; /** * \u65e5\u5fd7\u8bb0\u5f55\u5b9e\u4f8b * * \u65e5\u5fd7\u4fe1\u606f\u53d8\u91cf \u2014\u2014 message\uff0c **\u5fc5\u987b**\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u662f\u5b9e\u73b0\u4e86 __toString() \u65b9\u6cd5\u7684\u5bf9\u8c61\u3002 * * \u65e5\u5fd7\u4fe1\u606f\u53d8\u91cf\u4e2d**\u53ef\u4ee5**\u5305\u542b\u683c\u5f0f\u5982 \u201c{foo}\u201d (\u4ee3\u8868foo) \u7684\u5360\u4f4d\u7b26\uff0c * \u5b83\u5c06\u4f1a\u7531\u4e0a\u4e0b\u6587\u6570\u7ec4\u4e2d\u952e\u540d\u4e3a \"foo\" \u7684\u952e\u503c\u66ff\u4ee3\u3002 * * \u4e0a\u4e0b\u6587\u6570\u7ec4\u53ef\u4ee5\u643a\u5e26\u4efb\u610f\u7684\u6570\u636e\uff0c\u552f\u4e00\u7684\u9650\u5236\u662f\uff0c\u5f53\u5b83\u643a\u5e26\u7684\u662f\u4e00\u4e2a exception \u5bf9\u8c61\u65f6\uff0c\u5b83\u7684\u952e\u540d \u5fc5\u987b \u662f \"exception\"\u3002 * * \u8be6\u60c5\u53ef\u53c2\u9605\uff1a https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-3-logger-interface-cn.md */ interface LoggerInterface { /** * \u7cfb\u7edf\u4e0d\u53ef\u7528 * * @param string $message * @param array $context * @return null */ public function emergency ( $message , array $context = array ()); /** * **\u5fc5\u987b**\u7acb\u523b\u91c7\u53d6\u884c\u52a8 * * \u4f8b\u5982\uff1a\u5728\u6574\u4e2a\u7f51\u7ad9\u90fd\u57ae\u6389\u4e86\u3001\u6570\u636e\u5e93\u4e0d\u53ef\u7528\u4e86\u6216\u8005\u5176\u4ed6\u7684\u60c5\u51b5\u4e0b\uff0c**\u5e94\u8be5**\u53d1\u9001\u4e00\u6761\u8b66\u62a5\u77ed\u4fe1\u628a\u4f60\u53eb\u9192\u3002 * * @param string $message * @param array $context * @return null */ public function alert ( $message , array $context = array ()); /** * \u7d27\u6025\u60c5\u51b5 * * \u4f8b\u5982\uff1a\u7a0b\u5e8f\u7ec4\u4ef6\u4e0d\u53ef\u7528\u6216\u8005\u51fa\u73b0\u975e\u9884\u671f\u7684\u5f02\u5e38\u3002 * * @param string $message * @param array $context * @return null */ public function critical ( $message , array $context = array ()); /** * \u8fd0\u884c\u65f6\u51fa\u73b0\u7684\u9519\u8bef\uff0c\u4e0d\u9700\u8981\u7acb\u523b\u91c7\u53d6\u884c\u52a8\uff0c\u4f46\u5fc5\u987b\u8bb0\u5f55\u4e0b\u6765\u4ee5\u5907\u68c0\u6d4b\u3002 * * @param string $message * @param array $context * @return null */ public function error ( $message , array $context = array ()); /** * \u51fa\u73b0\u975e\u9519\u8bef\u6027\u7684\u5f02\u5e38\u3002 * * \u4f8b\u5982\uff1a\u4f7f\u7528\u4e86\u88ab\u5f03\u7528\u7684API\u3001\u9519\u8bef\u5730\u4f7f\u7528\u4e86API\u6216\u8005\u975e\u9884\u60f3\u7684\u4e0d\u5fc5\u8981\u9519\u8bef\u3002 * * @param string $message * @param array $context * @return null */ public function warning ( $message , array $context = array ()); /** * \u4e00\u822c\u6027\u91cd\u8981\u7684\u4e8b\u4ef6\u3002 * * @param string $message * @param array $context * @return null */ public function notice ( $message , array $context = array ()); /** * \u91cd\u8981\u4e8b\u4ef6 * * \u4f8b\u5982\uff1a\u7528\u6237\u767b\u5f55\u548cSQL\u8bb0\u5f55\u3002 * * @param string $message * @param array $context * @return null */ public function info ( $message , array $context = array ()); /** * debug \u8be6\u60c5 * * @param string $message * @param array $context * @return null */ public function debug ( $message , array $context = array ()); /** * \u4efb\u610f\u7b49\u7ea7\u7684\u65e5\u5fd7\u8bb0\u5f55 * * @param mixed $level * @param string $message * @param array $context * @return null */ public function log ( $level , $message , array $context = array ()); } 4. Psr\\Log\\LoggerAwareInterface # <?php namespace Psr\\Log ; /** * logger-aware \u5b9a\u4e49\u5b9e\u4f8b */ interface LoggerAwareInterface { /** * \u8bbe\u7f6e\u4e00\u4e2a\u65e5\u5fd7\u8bb0\u5f55\u5b9e\u4f8b * * @param LoggerInterface $logger * @return null */ public function setLogger ( LoggerInterface $logger ); } 5. Psr\\Log\\LogLevel # <?php namespace Psr\\Log ; /** * \u65e5\u5fd7\u7b49\u7ea7\u5e38\u91cf\u5b9a\u4e49 */ class LogLevel { const EMERGENCY = 'emergency' ; const ALERT = 'alert' ; const CRITICAL = 'critical' ; const ERROR = 'error' ; const WARNING = 'warning' ; const NOTICE = 'notice' ; const INFO = 'info' ; const DEBUG = 'debug' ; } \u539f\u6587\uff1a https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-3-logger-interface-cn.md","title":"PHP PSR-3 \u65e5\u5fd7\u63a5\u53e3\u89c4\u8303"},{"location":"php/psr/psr-3/#php-psr-3","text":"\u672c\u6587\u5236\u5b9a\u4e86\u65e5\u5fd7\u7c7b\u5e93\u7684\u901a\u7528\u63a5\u53e3\u89c4\u8303\u3002 \u672c\u89c4\u8303\u7684\u4e3b\u8981\u76ee\u7684\uff0c\u662f\u4e3a\u4e86\u8ba9\u65e5\u5fd7\u7c7b\u5e93\u4ee5\u7b80\u5355\u901a\u7528\u7684\u65b9\u5f0f\uff0c\u901a\u8fc7\u63a5\u6536\u4e00\u4e2a Psr\\Log\\LoggerInterface \u5bf9\u8c61\uff0c\u6765\u8bb0\u5f55\u65e5\u5fd7\u4fe1\u606f\u3002 \u6846\u67b6\u4ee5\u53caCMS\u5185\u5bb9\u7ba1\u7406\u7cfb\u7edf\u5982\u6709\u9700\u8981\uff0c \u53ef\u4ee5 \u5bf9\u6b64\u63a5\u53e3\u8fdb\u884c\u6269\u5c55\uff0c\u4f46\u9700\u9075\u5faa\u672c\u89c4\u8303\uff0c \u8fd9\u624d\u80fd\u4fdd\u8bc1\u5728\u4f7f\u7528\u7b2c\u4e09\u65b9\u7684\u7c7b\u5e93\u6587\u4ef6\u65f6\uff0c\u65e5\u5fd7\u63a5\u53e3\u4ecd\u80fd\u6b63\u5e38\u5bf9\u63a5\u3002 \u5173\u952e\u8bcd \u201c\u5fc5\u987b\u201d(\"MUST\")\u3001\u201c\u4e00\u5b9a\u4e0d\u53ef/\u4e00\u5b9a\u4e0d\u80fd\u201d(\"MUST NOT\")\u3001\u201c\u9700\u8981\u201d(\"REQUIRED\")\u3001 \u201c\u5c06\u4f1a\u201d(\"SHALL\")\u3001\u201c\u4e0d\u4f1a\u201d(\"SHALL NOT\")\u3001\u201c\u5e94\u8be5\u201d(\"SHOULD\")\u3001\u201c\u4e0d\u8be5\u201d(\"SHOULD NOT\")\u3001 \u201c\u63a8\u8350\u201d(\"RECOMMENDED\")\u3001\u201c\u53ef\u4ee5\u201d(\"MAY\")\u548c\u201d\u53ef\u9009\u201c(\"OPTIONAL\")\u7684\u8be6\u7ec6\u63cf\u8ff0\u53ef\u53c2\u89c1 RFC 2119 \u3002 \u672c\u6587\u4e2d\u7684 \u5b9e\u73b0\u8005 \u6307\u7684\u662f\u5b9e\u73b0\u4e86 LoggerInterface \u63a5\u53e3\u7684\u7c7b\u5e93\u6216\u8005\u6846\u67b6\uff0c\u53cd\u8fc7\u6765\u8bb2\uff0c\u4ed6\u4eec\u5c31\u662f LoggerInterface \u7684 \u4f7f\u7528\u8005 \u3002","title":"PHP PSR-3 \u65e5\u5fd7\u63a5\u53e3\u89c4\u8303"},{"location":"php/psr/psr-3/#1","text":"","title":"1. \u89c4\u8303\u8bf4\u660e"},{"location":"php/psr/psr-3/#11","text":"LoggerInterface \u63a5\u53e3\u5bf9\u5916\u5b9a\u4e49\u4e86\u516b\u4e2a\u65b9\u6cd5\uff0c\u5206\u522b\u7528\u6765\u8bb0\u5f55 RFC 5424 \u4e2d\u5b9a\u4e49\u7684\u516b\u4e2a\u7b49\u7ea7\u7684\u65e5\u5fd7\uff1adebug\u3001 info\u3001 notice\u3001 warning\u3001 error\u3001 critical\u3001 alert \u4ee5\u53ca emergency \u3002 \u7b2c\u4e5d\u4e2a\u65b9\u6cd5 \u2014\u2014 log \uff0c\u5176\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u8bb0\u5f55\u7684\u7b49\u7ea7\u3002\u53ef\u4f7f\u7528\u4e00\u4e2a\u9884\u5148\u5b9a\u4e49\u7684\u7b49\u7ea7\u5e38\u91cf\u4f5c\u4e3a\u53c2\u6570\u6765\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c \u5fc5\u987b \u4e0e\u76f4\u63a5\u8c03\u7528\u4ee5\u4e0a\u516b\u4e2a\u65b9\u6cd5\u5177\u6709\u76f8\u540c\u7684\u6548\u679c\u3002\u5982\u679c\u4f20\u5165\u7684\u7b49\u7ea7\u5e38\u91cf\u53c2\u6570\u6ca1\u6709\u9884\u5148\u5b9a\u4e49\uff0c\u5219 \u5fc5\u987b \u629b\u51fa Psr\\Log\\InvalidArgumentException \u7c7b\u578b\u7684\u5f02\u5e38\u3002\u5728\u4e0d\u786e\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u8005 \u4e0d\u8be5 \u4f7f\u7528\u672a\u652f\u6301\u7684\u7b49\u7ea7\u5e38\u91cf\u6765\u8c03\u7528\u6b64\u65b9\u6cd5\u3002","title":"1.1 \u57fa\u672c\u89c4\u8303"},{"location":"php/psr/psr-3/#12","text":"\u4ee5\u4e0a\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u6216\u8005\u662f\u6709 __toString() \u65b9\u6cd5\u7684\u5bf9\u8c61\u4f5c\u4e3a\u8bb0\u5f55\u4fe1\u606f\u53c2\u6570\uff0c\u8fd9\u6837\uff0c\u5b9e\u73b0\u8005\u5c31\u80fd\u628a\u5b83\u5f53\u6210\u5b57\u7b26\u4e32\u6765\u5904\u7406\uff0c\u5426\u5219\u5b9e\u73b0\u8005 \u5fc5\u987b \u81ea\u5df1\u628a\u5b83\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u3002 \u8bb0\u5f55\u4fe1\u606f\u53c2\u6570 \u53ef\u4ee5 \u643a\u5e26\u5360\u4f4d\u7b26\uff0c\u5b9e\u73b0\u8005 \u53ef\u4ee5 \u6839\u636e\u4e0a\u4e0b\u6587\u5c06\u5176\u5b83\u66ff\u6362\u6210\u76f8\u5e94\u7684\u503c\u3002 \u5176\u4e2d\u5360\u4f4d\u7b26 \u5fc5\u987b \u4e0e\u4e0a\u4e0b\u6587\u6570\u7ec4\u4e2d\u7684\u952e\u540d\u4fdd\u6301\u4e00\u81f4\u3002 \u5360\u4f4d\u7b26\u7684\u540d\u79f0 \u5fc5\u987b \u7531\u4e00\u4e2a\u5de6\u82b1\u62ec\u53f7 { \u4ee5\u53ca\u4e00\u4e2a\u53f3\u62ec\u53f7 } \u5305\u542b\u3002\u4f46\u82b1\u62ec\u53f7\u4e0e\u540d\u79f0\u4e4b\u95f4 \u4e00\u5b9a\u4e0d\u80fd \u6709\u7a7a\u683c\u7b26\u3002 \u5360\u4f4d\u7b26\u7684\u540d\u79f0 \u5e94\u8be5 \u53ea\u7531 A-Z \u3001 a-z , 0-9 \u3001\u4e0b\u5212\u7ebf _ \u3001\u4ee5\u53ca\u82f1\u6587\u7684\u53e5\u53f7 . \u7ec4\u6210\uff0c\u5176\u5b83\u5b57\u7b26\u4f5c\u4e3a\u5c06\u6765\u5360\u4f4d\u7b26\u89c4\u8303\u7684\u4fdd\u7559\u3002 \u5b9e\u73b0\u8005 \u53ef\u4ee5 \u901a\u8fc7\u5bf9\u5360\u4f4d\u7b26\u91c7\u7528\u4e0d\u540c\u7684\u8f6c\u4e49\u548c\u8f6c\u6362\u7b56\u7565\uff0c\u6765\u751f\u6210\u6700\u7ec8\u7684\u65e5\u5fd7\u3002 \u800c\u4f7f\u7528\u8005\u5728\u4e0d\u77e5\u9053\u4e0a\u4e0b\u6587\u7684\u524d\u63d0\u4e0b\uff0c \u4e0d\u8be5 \u63d0\u524d\u8f6c\u4e49\u5360\u4f4d\u7b26\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u5360\u4f4d\u7b26\u4f7f\u7528\u7684\u4f8b\u5b50\uff1a <?php /** * \u7528\u4e0a\u4e0b\u6587\u4fe1\u606f\u66ff\u6362\u8bb0\u5f55\u4fe1\u606f\u4e2d\u7684\u5360\u4f4d\u7b26 */ function interpolate ( $message , array $context = array ()) { // \u6784\u5efa\u4e00\u4e2a\u82b1\u62ec\u53f7\u5305\u542b\u7684\u952e\u540d\u7684\u66ff\u6362\u6570\u7ec4 $replace = array (); foreach ( $context as $key => $val ) { $replace [ '{' . $key . '}' ] = $val ; } // \u66ff\u6362\u8bb0\u5f55\u4fe1\u606f\u4e2d\u7684\u5360\u4f4d\u7b26\uff0c\u6700\u540e\u8fd4\u56de\u4fee\u6539\u540e\u7684\u8bb0\u5f55\u4fe1\u606f\u3002 return strtr ( $message , $replace ); } // \u542b\u6709\u5e26\u82b1\u62ec\u53f7\u5360\u4f4d\u7b26\u7684\u8bb0\u5f55\u4fe1\u606f\u3002 $message = \"User {username} created\" ; // \u5e26\u6709\u66ff\u6362\u4fe1\u606f\u7684\u4e0a\u4e0b\u6587\u6570\u7ec4\uff0c\u952e\u540d\u4e3a\u5360\u4f4d\u7b26\u540d\u79f0\uff0c\u952e\u503c\u4e3a\u66ff\u6362\u503c\u3002 $context = array ( 'username' => 'bolivar' ); // \u8f93\u51fa \"Username bolivar created\" echo interpolate ( $message , $context );","title":"1.2 \u8bb0\u5f55\u4fe1\u606f"},{"location":"php/psr/psr-3/#13","text":"\u6bcf\u4e2a\u8bb0\u5f55\u51fd\u6570\u90fd\u63a5\u53d7\u4e00\u4e2a\u4e0a\u4e0b\u6587\u6570\u7ec4\u53c2\u6570\uff0c\u7528\u6765\u88c5\u8f7d\u5b57\u7b26\u4e32\u7c7b\u578b\u65e0\u6cd5\u8868\u793a\u7684\u4fe1\u606f\u3002\u5b83 \u53ef\u4ee5 \u88c5\u8f7d\u4efb\u4f55\u4fe1\u606f\uff0c\u6240\u4ee5\u5b9e\u73b0\u8005 \u5fc5\u987b \u786e\u4fdd\u80fd\u6b63\u786e\u5904\u7406\u5176\u88c5\u8f7d\u7684\u4fe1\u606f\uff0c\u5bf9\u4e8e\u5176\u88c5\u8f7d\u7684\u6570\u636e\uff0c \u4e00\u5b9a\u4e0d\u80fd \u629b\u51fa\u5f02\u5e38\uff0c\u6216\u4ea7\u751fPHP\u51fa\u9519\u3001\u8b66\u544a\u6216\u63d0\u9192\u4fe1\u606f\uff08error\u3001warning\u3001notice\uff09\u3002 \u5982\u9700\u901a\u8fc7\u4e0a\u4e0b\u6587\u53c2\u6570\u4f20\u5165\u4e86\u4e00\u4e2a Exception \u5bf9\u8c61\uff0c \u5fc5\u987b \u4ee5 'exception' \u4f5c\u4e3a\u952e\u540d\u3002 \u8bb0\u5f55\u5f02\u5e38\u4fe1\u606f\u662f\u5f88\u666e\u904d\u7684\uff0c\u6240\u4ee5\u5982\u679c\u5b83\u80fd\u591f\u5728\u8bb0\u5f55\u7c7b\u5e93\u7684\u5e95\u5c42\u5b9e\u73b0\uff0c\u5c31\u80fd\u591f\u8ba9\u5b9e\u73b0\u8005\u4ece\u5f02\u5e38\u4fe1\u606f\u4e2d\u62bd\u4e1d\u5265\u8327\u3002 \u5f53\u7136\uff0c\u5b9e\u73b0\u8005\u5728\u4f7f\u7528\u5b83\u65f6\uff0c \u5fc5\u987b \u786e\u4fdd\u952e\u540d\u4e3a 'exception' \u7684\u952e\u503c\u662f\u5426\u771f\u7684\u662f\u4e00\u4e2a Exception \uff0c\u6bd5\u7adf\u5b83 \u53ef\u4ee5 \u88c5\u8f7d\u4efb\u4f55\u4fe1\u606f\u3002","title":"1.3 \u4e0a\u4e0b\u6587"},{"location":"php/psr/psr-3/#14","text":"Psr\\Log\\AbstractLogger \u7c7b\u4f7f\u5f97\u53ea\u9700\u7ee7\u627f\u5b83\u548c\u5b9e\u73b0\u5176\u4e2d\u7684 log \u65b9\u6cd5\uff0c\u5c31\u80fd\u591f\u5f88\u8f7b\u6613\u5730\u5b9e\u73b0 LoggerInterface \u63a5\u53e3\uff0c\u800c\u53e6\u5916\u516b\u4e2a\u65b9\u6cd5\u5c31\u80fd\u591f\u628a\u8bb0\u5f55\u4fe1\u606f\u548c\u4e0a\u4e0b\u6587\u4fe1\u606f\u4f20\u7ed9\u5b83\u3002 \u540c\u6837\u5730\uff0c\u4f7f\u7528 Psr\\Log\\LoggerTrait \u4e5f\u53ea\u9700\u5b9e\u73b0\u5176\u4e2d\u7684 log \u65b9\u6cd5\u3002\u4e0d\u8fc7\uff0c\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u5728traits\u53ef\u590d\u7528\u4ee3\u7801\u5757\u8fd8\u4e0d\u80fd\u5b9e\u73b0\u63a5\u53e3\u524d\uff0c\u8fd8\u9700\u8981 implement LoggerInterface \u3002 \u5728\u6ca1\u6709\u53ef\u7528\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u65f6\uff0c Psr\\Log\\NullLogger \u63a5\u53e3 \u53ef\u4ee5 \u4e3a\u4f7f\u7528\u8005\u63d0\u4f9b\u4e00\u4e2a\u5907\u7528\u7684\u65e5\u5fd7\u201c\u9ed1\u6d1e\u201d\u3002\u4e0d\u8fc7\uff0c\u5f53\u4e0a\u4e0b\u6587\u7684\u6784\u5efa\u975e\u5e38\u6d88\u8017\u8d44\u6e90\u65f6\uff0c\u5e26\u6761\u4ef6\u68c0\u67e5\u7684\u65e5\u5fd7\u8bb0\u5f55\u6216\u8bb8\u662f\u66f4\u597d\u7684\u529e\u6cd5\u3002 Psr\\Log\\LoggerAwareInterface \u63a5\u53e3\u4ec5\u5305\u62ec\u4e00\u4e2a setLogger(LoggerInterface $logger) \u65b9\u6cd5\uff0c\u6846\u67b6\u53ef\u4ee5\u4f7f\u7528\u5b83\u5b9e\u73b0\u81ea\u52a8\u8fde\u63a5\u4efb\u610f\u7684\u65e5\u5fd7\u8bb0\u5f55\u5b9e\u4f8b\u3002 Psr\\Log\\LoggerAwareTrait trait\u53ef\u590d\u7528\u4ee3\u7801\u5757\u53ef\u4ee5\u5728\u4efb\u4f55\u7684\u7c7b\u91cc\u9762\u4f7f\u7528\uff0c\u53ea\u9700\u901a\u8fc7\u5b83\u63d0\u4f9b\u7684 $this->logger \uff0c\u5c31\u53ef\u4ee5\u8f7b\u677e\u5730\u5b9e\u73b0\u7b49\u540c\u7684\u63a5\u53e3\u3002 Psr\\Log\\LogLevel \u7c7b\u88c5\u8f7d\u4e86\u516b\u4e2a\u8bb0\u5f55\u7b49\u7ea7\u5e38\u91cf\u3002","title":"1.4 \u52a9\u624b\u7c7b\u548c\u63a5\u53e3"},{"location":"php/psr/psr-3/#2","text":"\u4e0a\u8ff0\u7684\u63a5\u53e3\u3001\u7c7b\u548c\u76f8\u5173\u7684\u5f02\u5e38\u7c7b\uff0c\u4ee5\u53ca\u4e00\u7cfb\u5217\u7684\u5b9e\u73b0\u68c0\u6d4b\u6587\u4ef6\uff0c\u90fd\u5305\u542b\u5728 psr/log \u6587\u4ef6\u5305\u4e2d\u3002","title":"2. \u5305"},{"location":"php/psr/psr-3/#3-psrlogloggerinterface","text":"<?php namespace Psr\\Log ; /** * \u65e5\u5fd7\u8bb0\u5f55\u5b9e\u4f8b * * \u65e5\u5fd7\u4fe1\u606f\u53d8\u91cf \u2014\u2014 message\uff0c **\u5fc5\u987b**\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u662f\u5b9e\u73b0\u4e86 __toString() \u65b9\u6cd5\u7684\u5bf9\u8c61\u3002 * * \u65e5\u5fd7\u4fe1\u606f\u53d8\u91cf\u4e2d**\u53ef\u4ee5**\u5305\u542b\u683c\u5f0f\u5982 \u201c{foo}\u201d (\u4ee3\u8868foo) \u7684\u5360\u4f4d\u7b26\uff0c * \u5b83\u5c06\u4f1a\u7531\u4e0a\u4e0b\u6587\u6570\u7ec4\u4e2d\u952e\u540d\u4e3a \"foo\" \u7684\u952e\u503c\u66ff\u4ee3\u3002 * * \u4e0a\u4e0b\u6587\u6570\u7ec4\u53ef\u4ee5\u643a\u5e26\u4efb\u610f\u7684\u6570\u636e\uff0c\u552f\u4e00\u7684\u9650\u5236\u662f\uff0c\u5f53\u5b83\u643a\u5e26\u7684\u662f\u4e00\u4e2a exception \u5bf9\u8c61\u65f6\uff0c\u5b83\u7684\u952e\u540d \u5fc5\u987b \u662f \"exception\"\u3002 * * \u8be6\u60c5\u53ef\u53c2\u9605\uff1a https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-3-logger-interface-cn.md */ interface LoggerInterface { /** * \u7cfb\u7edf\u4e0d\u53ef\u7528 * * @param string $message * @param array $context * @return null */ public function emergency ( $message , array $context = array ()); /** * **\u5fc5\u987b**\u7acb\u523b\u91c7\u53d6\u884c\u52a8 * * \u4f8b\u5982\uff1a\u5728\u6574\u4e2a\u7f51\u7ad9\u90fd\u57ae\u6389\u4e86\u3001\u6570\u636e\u5e93\u4e0d\u53ef\u7528\u4e86\u6216\u8005\u5176\u4ed6\u7684\u60c5\u51b5\u4e0b\uff0c**\u5e94\u8be5**\u53d1\u9001\u4e00\u6761\u8b66\u62a5\u77ed\u4fe1\u628a\u4f60\u53eb\u9192\u3002 * * @param string $message * @param array $context * @return null */ public function alert ( $message , array $context = array ()); /** * \u7d27\u6025\u60c5\u51b5 * * \u4f8b\u5982\uff1a\u7a0b\u5e8f\u7ec4\u4ef6\u4e0d\u53ef\u7528\u6216\u8005\u51fa\u73b0\u975e\u9884\u671f\u7684\u5f02\u5e38\u3002 * * @param string $message * @param array $context * @return null */ public function critical ( $message , array $context = array ()); /** * \u8fd0\u884c\u65f6\u51fa\u73b0\u7684\u9519\u8bef\uff0c\u4e0d\u9700\u8981\u7acb\u523b\u91c7\u53d6\u884c\u52a8\uff0c\u4f46\u5fc5\u987b\u8bb0\u5f55\u4e0b\u6765\u4ee5\u5907\u68c0\u6d4b\u3002 * * @param string $message * @param array $context * @return null */ public function error ( $message , array $context = array ()); /** * \u51fa\u73b0\u975e\u9519\u8bef\u6027\u7684\u5f02\u5e38\u3002 * * \u4f8b\u5982\uff1a\u4f7f\u7528\u4e86\u88ab\u5f03\u7528\u7684API\u3001\u9519\u8bef\u5730\u4f7f\u7528\u4e86API\u6216\u8005\u975e\u9884\u60f3\u7684\u4e0d\u5fc5\u8981\u9519\u8bef\u3002 * * @param string $message * @param array $context * @return null */ public function warning ( $message , array $context = array ()); /** * \u4e00\u822c\u6027\u91cd\u8981\u7684\u4e8b\u4ef6\u3002 * * @param string $message * @param array $context * @return null */ public function notice ( $message , array $context = array ()); /** * \u91cd\u8981\u4e8b\u4ef6 * * \u4f8b\u5982\uff1a\u7528\u6237\u767b\u5f55\u548cSQL\u8bb0\u5f55\u3002 * * @param string $message * @param array $context * @return null */ public function info ( $message , array $context = array ()); /** * debug \u8be6\u60c5 * * @param string $message * @param array $context * @return null */ public function debug ( $message , array $context = array ()); /** * \u4efb\u610f\u7b49\u7ea7\u7684\u65e5\u5fd7\u8bb0\u5f55 * * @param mixed $level * @param string $message * @param array $context * @return null */ public function log ( $level , $message , array $context = array ()); }","title":"3. Psr\\Log\\LoggerInterface"},{"location":"php/psr/psr-3/#4-psrlogloggerawareinterface","text":"<?php namespace Psr\\Log ; /** * logger-aware \u5b9a\u4e49\u5b9e\u4f8b */ interface LoggerAwareInterface { /** * \u8bbe\u7f6e\u4e00\u4e2a\u65e5\u5fd7\u8bb0\u5f55\u5b9e\u4f8b * * @param LoggerInterface $logger * @return null */ public function setLogger ( LoggerInterface $logger ); }","title":"4. Psr\\Log\\LoggerAwareInterface"},{"location":"php/psr/psr-3/#5-psrlogloglevel","text":"<?php namespace Psr\\Log ; /** * \u65e5\u5fd7\u7b49\u7ea7\u5e38\u91cf\u5b9a\u4e49 */ class LogLevel { const EMERGENCY = 'emergency' ; const ALERT = 'alert' ; const CRITICAL = 'critical' ; const ERROR = 'error' ; const WARNING = 'warning' ; const NOTICE = 'notice' ; const INFO = 'info' ; const DEBUG = 'debug' ; } \u539f\u6587\uff1a https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-3-logger-interface-cn.md","title":"5. Psr\\Log\\LogLevel"},{"location":"php/psr/psr-4-examples/","text":"PHP PSR-4 \u81ea\u52a8\u8f7d\u5165Autoloader - \u76f8\u5173\u793a\u4f8b # \u4ee5\u4e0b\u662f PSR-4 \u89c4\u8303\u7684\u76f8\u5173\u793a\u4f8b\u4ee3\u7801\uff1a \u95ed\u5305\u7684\u5b9e\u73b0\u793a\u4f8b # <?php /** * \u4e00\u4e2a\u5177\u4f53\u9879\u76ee\u7684\u5b9e\u4f8b * * \u5f53\u4f7f\u7528 SPL \u6ce8\u518c\u6b64\u81ea\u52a8\u52a0\u8f7d\u5668\u540e\uff0c\u6267\u884c\u4ee5\u4e0b\u8bed\u53e5\u5c06\u4ece * /path/to/project/src/Baz/Qux.php \u8f7d\u5165 \\Foo\\Bar\\Baz\\Qux \u7c7b\uff1a * * new \\Foo\\Bar\\Baz\\Qux; * * @param string $class \u5b8c\u6574\u7684\u7c7b\u540d * @return void */ spl_autoload_register ( function ( $class ) { // \u5177\u4f53\u9879\u76ee\u547d\u540d\u7a7a\u95f4\u524d\u7f00 $prefix = 'Foo\\\\Bar\\\\' ; // \u547d\u540d\u7a7a\u95f4\u524d\u7f00\u7684\u57fa\u76ee\u5f55 $base_dir = __DIR__ . '/src/' ; // \u5224\u65ad\u7c7b\u540d\u662f\u5426\u5177\u6709\u672c\u547d\u540d\u7a7a\u95f4\u524d\u7f00 $len = strlen ( $prefix ); if ( strncmp ( $prefix , $class , $len ) !== 0 ) { // \u4e0d\u542b\u672c\u547d\u540d\u7a7a\u95f4\u524d\u7f00\uff0c\u9000\u51fa\u672c\u81ea\u52a8\u8f7d\u5165\u5668 return ; } // \u622a\u53d6\u76f8\u5e94\u7c7b\u540d $relative_class = substr ( $class , $len ); // \u5c06\u547d\u540d\u7a7a\u95f4\u524d\u7f00\u66ff\u4f5c\u4e3a\u6587\u4ef6\u57fa\u76ee\u5f55\uff0c\u7136\u540e // \u5c06\u7c7b\u540d\u4e2d\u7684\u547d\u540d\u7a7a\u95f4\u5206\u9694\u7b26\u66ff\u6362\u6210\u6587\u4ef6\u5206\u9694\u7b26, // \u6700\u540e\u6dfb\u52a0 .php \u540e\u7f00 $file = $base_dir . str_replace ( '\\\\' , '/' , $relative_class ) . '.php' ; // \u5982\u679c\u4ee5\u4e0a\u6587\u4ef6\u5b58\u5728\uff0c\u5219\u5c06\u5176\u8f7d\u5165 if ( file_exists ( $file )) { require $file ; } }); \u7c7b\u7684\u5b9e\u73b0\u793a\u4f8b # \u4e0b\u9762\u662f\u4e00\u4e2a\u53ef\u5904\u7406\u591a\u547d\u540d\u7a7a\u95f4\u7684\u7c7b\u5b9e\u4f8b <?php namespace Example ; /** * An example of a general-purpose implementation that includes the optional * functionality of allowing multiple base directories for a single namespace * prefix. * * Given a foo-bar package of classes in the file system at the following * paths ... * * /path/to/packages/foo-bar/ * src/ * Baz.php # Foo\\Bar\\Baz * Qux/ * Quux.php # Foo\\Bar\\Qux\\Quux * tests/ * BazTest.php # Foo\\Bar\\BazTest * Qux/ * QuuxTest.php # Foo\\Bar\\Qux\\QuuxTest * * ... add the path to the class files for the \\Foo\\Bar\\ namespace prefix * as follows: * * <?php * // instantiate the loader * $loader = new \\Example\\Psr4AutoloaderClass; * * // register the autoloader * $loader->register(); * * // register the base directories for the namespace prefix * $loader->addNamespace('Foo\\Bar', '/path/to/packages/foo-bar/src'); * $loader->addNamespace('Foo\\Bar', '/path/to/packages/foo-bar/tests'); * * The following line would cause the autoloader to attempt to load the * \\Foo\\Bar\\Qux\\Quux class from /path/to/packages/foo-bar/src/Qux/Quux.php: * * <?php * new \\Foo\\Bar\\Qux\\Quux; * * \u4ee5\u4e0b\u4ee3\u7801\u5c06\u7531 /path/to/packages/foo-bar/tests/Qux/QuuxTest.php * \u8f7d\u5165 \\Foo\\Bar\\Qux\\QuuxTest \u7c7b * * <?php * new \\Foo\\Bar\\Qux\\QuuxTest; */ class Psr4AutoloaderClass { /** * An associative array where the key is a namespace prefix and the value * is an array of base directories for classes in that namespace. * * @var array */ protected $prefixes = array (); /** * \u5728 SPL \u81ea\u52a8\u52a0\u8f7d\u5668\u6808\u4e2d\u6ce8\u518c\u52a0\u8f7d\u5668 * * @return void */ public function register () { spl_autoload_register ( array ( $this , 'loadClass' )); } /** * \u6dfb\u52a0\u547d\u540d\u7a7a\u95f4\u524d\u7f00\u4e0e\u6587\u4ef6\u57fa\u76ee\u5f55\u5bf9 * * @param string $prefix \u547d\u540d\u7a7a\u95f4\u524d\u7f00 * @param string $base_dir \u547d\u540d\u7a7a\u95f4\u4e2d\u7c7b\u6587\u4ef6\u7684\u57fa\u76ee\u5f55 * @param bool $prepend \u4e3a True \u65f6\uff0c\u5c06\u57fa\u76ee\u5f55\u63d2\u5230\u6700\u524d\uff0c\u8fd9\u5c06\u8ba9\u5176\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u88ab\u641c\u7d22\u5230\uff0c\u5426\u5219\u63d2\u5230\u5c06\u6700\u540e\u3002 * @return void */ public function addNamespace ( $prefix , $base_dir , $prepend = false ) { // \u89c4\u8303\u5316\u547d\u540d\u7a7a\u95f4\u524d\u7f00 $prefix = trim ( $prefix , '\\\\' ) . '\\\\' ; // \u89c4\u8303\u5316\u6587\u4ef6\u57fa\u76ee\u5f55 $base_dir = rtrim ( $base_dir , '/' ) . DIRECTORY_SEPARATOR ; $base_dir = rtrim ( $base_dir , DIRECTORY_SEPARATOR ) . '/' ; // \u521d\u59cb\u5316\u547d\u540d\u7a7a\u95f4\u524d\u7f00\u6570\u7ec4 if ( isset ( $this -> prefixes [ $prefix ]) === false ) { $this -> prefixes [ $prefix ] = array (); } // \u5c06\u547d\u540d\u7a7a\u95f4\u524d\u7f00\u4e0e\u6587\u4ef6\u57fa\u76ee\u5f55\u5bf9\u63d2\u5165\u4fdd\u5b58\u6570\u7ec4 if ( $prepend ) { array_unshift ( $this -> prefixes [ $prefix ], $base_dir ); } else { array_push ( $this -> prefixes [ $prefix ], $base_dir ); } } /** * \u7531\u7c7b\u540d\u8f7d\u5165\u76f8\u5e94\u7c7b\u6587\u4ef6 * * @param string $class \u5b8c\u6574\u7684\u7c7b\u540d * @return mixed \u6210\u529f\u8f7d\u5165\u5219\u8fd4\u56de\u8f7d\u5165\u7684\u6587\u4ef6\u540d\uff0c\u5426\u5219\u8fd4\u56de\u5e03\u5c14 false */ public function loadClass ( $class ) { // \u5f53\u524d\u547d\u540d\u7a7a\u95f4\u524d\u7f00 $prefix = $class ; // work backwards through the namespace names of the fully-qualified // class name to find a mapped file name while ( false !== $pos = strrpos ( $prefix , '\\\\' )) { // retain the trailing namespace separator in the prefix $prefix = substr ( $class , 0 , $pos + 1 ); // the rest is the relative class name $relative_class = substr ( $class , $pos + 1 ); // try to load a mapped file for the prefix and relative class $mapped_file = $this -> loadMappedFile ( $prefix , $relative_class ); if ( $mapped_file ) { return $mapped_file ; } // remove the trailing namespace separator for the next iteration // of strrpos() $prefix = rtrim ( $prefix , '\\\\' ); } // \u627e\u4e0d\u5230\u76f8\u5e94\u6587\u4ef6 return false ; } /** * Load the mapped file for a namespace prefix and relative class. * * @param string $prefix The namespace prefix. * @param string $relative_class The relative class name. * @return mixed Boolean false if no mapped file can be loaded, or the * name of the mapped file that was loaded. */ protected function loadMappedFile ( $prefix , $relative_class ) { // are there any base directories for this namespace prefix? if ( isset ( $this -> prefixes [ $prefix ]) === false ) { return false ; } // look through base directories for this namespace prefix foreach ( $this -> prefixes [ $prefix ] as $base_dir ) { // replace the namespace prefix with the base directory, // replace namespace separators with directory separators // in the relative class name, append with .php $file = $base_dir . str_replace ( '\\\\' , DIRECTORY_SEPARATOR , $relative_class ) . '.php' ; $file = $base_dir . str_replace ( '\\\\' , '/' , $relative_class ) . '.php' ; // \u5f53\u6587\u4ef6\u5b58\u5728\u65f6\uff0c\u5728\u5165\u4e4b if ( $this -> requireFile ( $file )) { // \u5b8c\u6210\u8f7d\u5165 return $file ; } } // \u627e\u4e0d\u5230\u76f8\u5e94\u6587\u4ef6 return false ; } /** * \u5f53\u6587\u4ef6\u5b58\u5728\uff0c\u5219\u4ece\u6587\u4ef6\u7cfb\u7edf\u8f7d\u5165\u4e4b * * @param string $file \u9700\u8981\u8f7d\u5165\u7684\u6587\u4ef6 * @return bool \u5f53\u6587\u4ef6\u5b58\u5728\u5219\u4e3a True\uff0c\u5426\u5219\u4e3a false */ protected function requireFile ( $file ) { if ( file_exists ( $file )) { require $file ; return true ; } return false ; } } \u5355\u5143\u6d4b\u8bd5 # \u4ee5\u4e0b\u662f\u4e0a\u9762\u4ee3\u7801\u5355\u5143\u6d4b\u8bd5\u7684\u4e00\u79cd\u5b9e\u73b0\uff1a <?php namespace Example\\Tests ; class MockPsr4AutoloaderClass extends Psr4AutoloaderClass { protected $files = array (); public function setFiles ( array $files ) { $this -> files = $files ; } protected function requireFile ( $file ) { return in_array ( $file , $this -> files ); } } class Psr4AutoloaderClassTest extends \\PHPUnit_Framework_TestCase { protected $loader ; protected function setUp () { $this -> loader = new MockPsr4AutoloaderClass ; $this -> loader -> setFiles ( array ( '/vendor/foo.bar/src/ClassName.php' , '/vendor/foo.bar/src/DoomClassName.php' , '/vendor/foo.bar/tests/ClassNameTest.php' , '/vendor/foo.bardoom/src/ClassName.php' , '/vendor/foo.bar.baz.dib/src/ClassName.php' , '/vendor/foo.bar.baz.dib.zim.gir/src/ClassName.php' , )); $this -> loader -> addNamespace ( 'Foo\\Bar' , '/vendor/foo.bar/src' ); $this -> loader -> addNamespace ( 'Foo\\Bar' , '/vendor/foo.bar/tests' ); $this -> loader -> addNamespace ( 'Foo\\BarDoom' , '/vendor/foo.bardoom/src' ); $this -> loader -> addNamespace ( 'Foo\\Bar\\Baz\\Dib' , '/vendor/foo.bar.baz.dib/src' ); $this -> loader -> addNamespace ( 'Foo\\Bar\\Baz\\Dib\\Zim\\Gir' , '/vendor/foo.bar.baz.dib.zim.gir/src' ); } public function testExistingFile () { $actual = $this -> loader -> loadClass ( 'Foo\\Bar\\ClassName' ); $expect = '/vendor/foo.bar/src/ClassName.php' ; $this -> assertSame ( $expect , $actual ); $actual = $this -> loader -> loadClass ( 'Foo\\Bar\\ClassNameTest' ); $expect = '/vendor/foo.bar/tests/ClassNameTest.php' ; $this -> assertSame ( $expect , $actual ); } public function testMissingFile () { $actual = $this -> loader -> loadClass ( 'No_Vendor\\No_Package\\NoClass' ); $this -> assertFalse ( $actual ); } public function testDeepFile () { $actual = $this -> loader -> loadClass ( 'Foo\\Bar\\Baz\\Dib\\Zim\\Gir\\ClassName' ); $expect = '/vendor/foo.bar.baz.dib.zim.gir/src/ClassName.php' ; $this -> assertSame ( $expect , $actual ); } public function testConfusion () { $actual = $this -> loader -> loadClass ( 'Foo\\Bar\\DoomClassName' ); $expect = '/vendor/foo.bar/src/DoomClassName.php' ; $this -> assertSame ( $expect , $actual ); $actual = $this -> loader -> loadClass ( 'Foo\\BarDoom\\ClassName' ); $expect = '/vendor/foo.bardoom/src/ClassName.php' ; $this -> assertSame ( $expect , $actual ); } } \u539f\u6587\uff1a https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-4-autoloader-examples.md","title":"PHP PSR-4 \u76f8\u5173\u793a\u4f8b"},{"location":"php/psr/psr-4-examples/#php-psr-4-autoloader-","text":"\u4ee5\u4e0b\u662f PSR-4 \u89c4\u8303\u7684\u76f8\u5173\u793a\u4f8b\u4ee3\u7801\uff1a","title":"PHP PSR-4 \u81ea\u52a8\u8f7d\u5165Autoloader - \u76f8\u5173\u793a\u4f8b"},{"location":"php/psr/psr-4-examples/#_1","text":"<?php /** * \u4e00\u4e2a\u5177\u4f53\u9879\u76ee\u7684\u5b9e\u4f8b * * \u5f53\u4f7f\u7528 SPL \u6ce8\u518c\u6b64\u81ea\u52a8\u52a0\u8f7d\u5668\u540e\uff0c\u6267\u884c\u4ee5\u4e0b\u8bed\u53e5\u5c06\u4ece * /path/to/project/src/Baz/Qux.php \u8f7d\u5165 \\Foo\\Bar\\Baz\\Qux \u7c7b\uff1a * * new \\Foo\\Bar\\Baz\\Qux; * * @param string $class \u5b8c\u6574\u7684\u7c7b\u540d * @return void */ spl_autoload_register ( function ( $class ) { // \u5177\u4f53\u9879\u76ee\u547d\u540d\u7a7a\u95f4\u524d\u7f00 $prefix = 'Foo\\\\Bar\\\\' ; // \u547d\u540d\u7a7a\u95f4\u524d\u7f00\u7684\u57fa\u76ee\u5f55 $base_dir = __DIR__ . '/src/' ; // \u5224\u65ad\u7c7b\u540d\u662f\u5426\u5177\u6709\u672c\u547d\u540d\u7a7a\u95f4\u524d\u7f00 $len = strlen ( $prefix ); if ( strncmp ( $prefix , $class , $len ) !== 0 ) { // \u4e0d\u542b\u672c\u547d\u540d\u7a7a\u95f4\u524d\u7f00\uff0c\u9000\u51fa\u672c\u81ea\u52a8\u8f7d\u5165\u5668 return ; } // \u622a\u53d6\u76f8\u5e94\u7c7b\u540d $relative_class = substr ( $class , $len ); // \u5c06\u547d\u540d\u7a7a\u95f4\u524d\u7f00\u66ff\u4f5c\u4e3a\u6587\u4ef6\u57fa\u76ee\u5f55\uff0c\u7136\u540e // \u5c06\u7c7b\u540d\u4e2d\u7684\u547d\u540d\u7a7a\u95f4\u5206\u9694\u7b26\u66ff\u6362\u6210\u6587\u4ef6\u5206\u9694\u7b26, // \u6700\u540e\u6dfb\u52a0 .php \u540e\u7f00 $file = $base_dir . str_replace ( '\\\\' , '/' , $relative_class ) . '.php' ; // \u5982\u679c\u4ee5\u4e0a\u6587\u4ef6\u5b58\u5728\uff0c\u5219\u5c06\u5176\u8f7d\u5165 if ( file_exists ( $file )) { require $file ; } });","title":"\u95ed\u5305\u7684\u5b9e\u73b0\u793a\u4f8b"},{"location":"php/psr/psr-4-examples/#_2","text":"\u4e0b\u9762\u662f\u4e00\u4e2a\u53ef\u5904\u7406\u591a\u547d\u540d\u7a7a\u95f4\u7684\u7c7b\u5b9e\u4f8b <?php namespace Example ; /** * An example of a general-purpose implementation that includes the optional * functionality of allowing multiple base directories for a single namespace * prefix. * * Given a foo-bar package of classes in the file system at the following * paths ... * * /path/to/packages/foo-bar/ * src/ * Baz.php # Foo\\Bar\\Baz * Qux/ * Quux.php # Foo\\Bar\\Qux\\Quux * tests/ * BazTest.php # Foo\\Bar\\BazTest * Qux/ * QuuxTest.php # Foo\\Bar\\Qux\\QuuxTest * * ... add the path to the class files for the \\Foo\\Bar\\ namespace prefix * as follows: * * <?php * // instantiate the loader * $loader = new \\Example\\Psr4AutoloaderClass; * * // register the autoloader * $loader->register(); * * // register the base directories for the namespace prefix * $loader->addNamespace('Foo\\Bar', '/path/to/packages/foo-bar/src'); * $loader->addNamespace('Foo\\Bar', '/path/to/packages/foo-bar/tests'); * * The following line would cause the autoloader to attempt to load the * \\Foo\\Bar\\Qux\\Quux class from /path/to/packages/foo-bar/src/Qux/Quux.php: * * <?php * new \\Foo\\Bar\\Qux\\Quux; * * \u4ee5\u4e0b\u4ee3\u7801\u5c06\u7531 /path/to/packages/foo-bar/tests/Qux/QuuxTest.php * \u8f7d\u5165 \\Foo\\Bar\\Qux\\QuuxTest \u7c7b * * <?php * new \\Foo\\Bar\\Qux\\QuuxTest; */ class Psr4AutoloaderClass { /** * An associative array where the key is a namespace prefix and the value * is an array of base directories for classes in that namespace. * * @var array */ protected $prefixes = array (); /** * \u5728 SPL \u81ea\u52a8\u52a0\u8f7d\u5668\u6808\u4e2d\u6ce8\u518c\u52a0\u8f7d\u5668 * * @return void */ public function register () { spl_autoload_register ( array ( $this , 'loadClass' )); } /** * \u6dfb\u52a0\u547d\u540d\u7a7a\u95f4\u524d\u7f00\u4e0e\u6587\u4ef6\u57fa\u76ee\u5f55\u5bf9 * * @param string $prefix \u547d\u540d\u7a7a\u95f4\u524d\u7f00 * @param string $base_dir \u547d\u540d\u7a7a\u95f4\u4e2d\u7c7b\u6587\u4ef6\u7684\u57fa\u76ee\u5f55 * @param bool $prepend \u4e3a True \u65f6\uff0c\u5c06\u57fa\u76ee\u5f55\u63d2\u5230\u6700\u524d\uff0c\u8fd9\u5c06\u8ba9\u5176\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u88ab\u641c\u7d22\u5230\uff0c\u5426\u5219\u63d2\u5230\u5c06\u6700\u540e\u3002 * @return void */ public function addNamespace ( $prefix , $base_dir , $prepend = false ) { // \u89c4\u8303\u5316\u547d\u540d\u7a7a\u95f4\u524d\u7f00 $prefix = trim ( $prefix , '\\\\' ) . '\\\\' ; // \u89c4\u8303\u5316\u6587\u4ef6\u57fa\u76ee\u5f55 $base_dir = rtrim ( $base_dir , '/' ) . DIRECTORY_SEPARATOR ; $base_dir = rtrim ( $base_dir , DIRECTORY_SEPARATOR ) . '/' ; // \u521d\u59cb\u5316\u547d\u540d\u7a7a\u95f4\u524d\u7f00\u6570\u7ec4 if ( isset ( $this -> prefixes [ $prefix ]) === false ) { $this -> prefixes [ $prefix ] = array (); } // \u5c06\u547d\u540d\u7a7a\u95f4\u524d\u7f00\u4e0e\u6587\u4ef6\u57fa\u76ee\u5f55\u5bf9\u63d2\u5165\u4fdd\u5b58\u6570\u7ec4 if ( $prepend ) { array_unshift ( $this -> prefixes [ $prefix ], $base_dir ); } else { array_push ( $this -> prefixes [ $prefix ], $base_dir ); } } /** * \u7531\u7c7b\u540d\u8f7d\u5165\u76f8\u5e94\u7c7b\u6587\u4ef6 * * @param string $class \u5b8c\u6574\u7684\u7c7b\u540d * @return mixed \u6210\u529f\u8f7d\u5165\u5219\u8fd4\u56de\u8f7d\u5165\u7684\u6587\u4ef6\u540d\uff0c\u5426\u5219\u8fd4\u56de\u5e03\u5c14 false */ public function loadClass ( $class ) { // \u5f53\u524d\u547d\u540d\u7a7a\u95f4\u524d\u7f00 $prefix = $class ; // work backwards through the namespace names of the fully-qualified // class name to find a mapped file name while ( false !== $pos = strrpos ( $prefix , '\\\\' )) { // retain the trailing namespace separator in the prefix $prefix = substr ( $class , 0 , $pos + 1 ); // the rest is the relative class name $relative_class = substr ( $class , $pos + 1 ); // try to load a mapped file for the prefix and relative class $mapped_file = $this -> loadMappedFile ( $prefix , $relative_class ); if ( $mapped_file ) { return $mapped_file ; } // remove the trailing namespace separator for the next iteration // of strrpos() $prefix = rtrim ( $prefix , '\\\\' ); } // \u627e\u4e0d\u5230\u76f8\u5e94\u6587\u4ef6 return false ; } /** * Load the mapped file for a namespace prefix and relative class. * * @param string $prefix The namespace prefix. * @param string $relative_class The relative class name. * @return mixed Boolean false if no mapped file can be loaded, or the * name of the mapped file that was loaded. */ protected function loadMappedFile ( $prefix , $relative_class ) { // are there any base directories for this namespace prefix? if ( isset ( $this -> prefixes [ $prefix ]) === false ) { return false ; } // look through base directories for this namespace prefix foreach ( $this -> prefixes [ $prefix ] as $base_dir ) { // replace the namespace prefix with the base directory, // replace namespace separators with directory separators // in the relative class name, append with .php $file = $base_dir . str_replace ( '\\\\' , DIRECTORY_SEPARATOR , $relative_class ) . '.php' ; $file = $base_dir . str_replace ( '\\\\' , '/' , $relative_class ) . '.php' ; // \u5f53\u6587\u4ef6\u5b58\u5728\u65f6\uff0c\u5728\u5165\u4e4b if ( $this -> requireFile ( $file )) { // \u5b8c\u6210\u8f7d\u5165 return $file ; } } // \u627e\u4e0d\u5230\u76f8\u5e94\u6587\u4ef6 return false ; } /** * \u5f53\u6587\u4ef6\u5b58\u5728\uff0c\u5219\u4ece\u6587\u4ef6\u7cfb\u7edf\u8f7d\u5165\u4e4b * * @param string $file \u9700\u8981\u8f7d\u5165\u7684\u6587\u4ef6 * @return bool \u5f53\u6587\u4ef6\u5b58\u5728\u5219\u4e3a True\uff0c\u5426\u5219\u4e3a false */ protected function requireFile ( $file ) { if ( file_exists ( $file )) { require $file ; return true ; } return false ; } }","title":"\u7c7b\u7684\u5b9e\u73b0\u793a\u4f8b"},{"location":"php/psr/psr-4-examples/#_3","text":"\u4ee5\u4e0b\u662f\u4e0a\u9762\u4ee3\u7801\u5355\u5143\u6d4b\u8bd5\u7684\u4e00\u79cd\u5b9e\u73b0\uff1a <?php namespace Example\\Tests ; class MockPsr4AutoloaderClass extends Psr4AutoloaderClass { protected $files = array (); public function setFiles ( array $files ) { $this -> files = $files ; } protected function requireFile ( $file ) { return in_array ( $file , $this -> files ); } } class Psr4AutoloaderClassTest extends \\PHPUnit_Framework_TestCase { protected $loader ; protected function setUp () { $this -> loader = new MockPsr4AutoloaderClass ; $this -> loader -> setFiles ( array ( '/vendor/foo.bar/src/ClassName.php' , '/vendor/foo.bar/src/DoomClassName.php' , '/vendor/foo.bar/tests/ClassNameTest.php' , '/vendor/foo.bardoom/src/ClassName.php' , '/vendor/foo.bar.baz.dib/src/ClassName.php' , '/vendor/foo.bar.baz.dib.zim.gir/src/ClassName.php' , )); $this -> loader -> addNamespace ( 'Foo\\Bar' , '/vendor/foo.bar/src' ); $this -> loader -> addNamespace ( 'Foo\\Bar' , '/vendor/foo.bar/tests' ); $this -> loader -> addNamespace ( 'Foo\\BarDoom' , '/vendor/foo.bardoom/src' ); $this -> loader -> addNamespace ( 'Foo\\Bar\\Baz\\Dib' , '/vendor/foo.bar.baz.dib/src' ); $this -> loader -> addNamespace ( 'Foo\\Bar\\Baz\\Dib\\Zim\\Gir' , '/vendor/foo.bar.baz.dib.zim.gir/src' ); } public function testExistingFile () { $actual = $this -> loader -> loadClass ( 'Foo\\Bar\\ClassName' ); $expect = '/vendor/foo.bar/src/ClassName.php' ; $this -> assertSame ( $expect , $actual ); $actual = $this -> loader -> loadClass ( 'Foo\\Bar\\ClassNameTest' ); $expect = '/vendor/foo.bar/tests/ClassNameTest.php' ; $this -> assertSame ( $expect , $actual ); } public function testMissingFile () { $actual = $this -> loader -> loadClass ( 'No_Vendor\\No_Package\\NoClass' ); $this -> assertFalse ( $actual ); } public function testDeepFile () { $actual = $this -> loader -> loadClass ( 'Foo\\Bar\\Baz\\Dib\\Zim\\Gir\\ClassName' ); $expect = '/vendor/foo.bar.baz.dib.zim.gir/src/ClassName.php' ; $this -> assertSame ( $expect , $actual ); } public function testConfusion () { $actual = $this -> loader -> loadClass ( 'Foo\\Bar\\DoomClassName' ); $expect = '/vendor/foo.bar/src/DoomClassName.php' ; $this -> assertSame ( $expect , $actual ); $actual = $this -> loader -> loadClass ( 'Foo\\BarDoom\\ClassName' ); $expect = '/vendor/foo.bardoom/src/ClassName.php' ; $this -> assertSame ( $expect , $actual ); } } \u539f\u6587\uff1a https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-4-autoloader-examples.md","title":"\u5355\u5143\u6d4b\u8bd5"},{"location":"php/psr/psr-4/","text":"PHP PSR-4 \u81ea\u52a8\u8f7d\u5165Autoloader # \u5173\u952e\u8bcd \u201c\u5fc5\u987b\u201d(\"MUST\")\u3001\u201c\u4e00\u5b9a\u4e0d\u53ef/\u4e00\u5b9a\u4e0d\u80fd\u201d(\"MUST NOT\")\u3001\u201c\u9700\u8981\u201d(\"REQUIRED\")\u3001 \u201c\u5c06\u4f1a\u201d(\"SHALL\")\u3001\u201c\u4e0d\u4f1a\u201d(\"SHALL NOT\")\u3001\u201c\u5e94\u8be5\u201d(\"SHOULD\")\u3001\u201c\u4e0d\u8be5\u201d(\"SHOULD NOT\")\u3001 \u201c\u63a8\u8350\u201d(\"RECOMMENDED\")\u3001\u201c\u53ef\u4ee5\u201d(\"MAY\")\u548c\u201d\u53ef\u9009\u201c(\"OPTIONAL\")\u7684\u8be6\u7ec6\u63cf\u8ff0\u53ef\u53c2\u89c1 RFC 2119 \u3002 1. \u6982\u8ff0 # \u672c PSR \u662f\u5173\u4e8e\u7531\u6587\u4ef6\u8def\u5f84 \u81ea\u52a8\u8f7d\u5165 \u5bf9\u5e94\u7c7b\u7684\u76f8\u5173\u89c4\u8303\uff0c \u672c\u89c4\u8303\u662f\u53ef\u4e92\u64cd\u4f5c\u7684\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u4efb\u4e00\u81ea\u52a8\u8f7d\u5165\u89c4\u8303\u7684\u8865\u5145\uff0c\u5176\u4e2d\u5305\u62ec PSR-0 \uff0c\u6b64\u5916\uff0c \u672c PSR \u8fd8\u5305\u62ec\u81ea\u52a8\u8f7d\u5165\u7684\u7c7b\u5bf9\u5e94\u7684\u6587\u4ef6\u5b58\u653e\u8def\u5f84\u89c4\u8303\u3002 2. \u8be6\u7ec6\u8bf4\u660e # \u6b64\u5904\u7684\u201c\u7c7b\u201d\u6cdb\u6307\u6240\u6709\u7684class\u7c7b\u3001\u63a5\u53e3\u3001traits\u53ef\u590d\u7528\u4ee3\u7801\u5757\u4ee5\u53ca\u5176\u5b83\u7c7b\u4f3c\u7ed3\u6784\u3002 \u4e00\u4e2a\u5b8c\u6574\u7684\u7c7b\u540d\u9700\u5177\u6709\u4ee5\u4e0b\u7ed3\u6784: \\<\u547d\u540d\u7a7a\u95f4>(\\<\u5b50\u547d\u540d\u7a7a\u95f4>)*\\<\u7c7b\u540d> \u5b8c\u6574\u7684\u7c7b\u540d \u5fc5\u987b \u8981\u6709\u4e00\u4e2a\u9876\u7ea7\u547d\u540d\u7a7a\u95f4\uff0c\u88ab\u79f0\u4e3a \"vendor namespace\"\uff1b \u5b8c\u6574\u7684\u7c7b\u540d \u53ef\u4ee5 \u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u547d\u540d\u7a7a\u95f4\uff1b \u5b8c\u6574\u7684\u7c7b\u540d \u5fc5\u987b \u6709\u4e00\u4e2a\u6700\u7ec8\u7684\u7c7b\u540d\uff1b \u5b8c\u6574\u7684\u7c7b\u540d\u4e2d\u4efb\u610f\u4e00\u90e8\u5206\u4e2d\u7684\u4e0b\u5212\u7ebf\u90fd\u662f\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u7684\uff1b \u5b8c\u6574\u7684\u7c7b\u540d \u53ef\u4ee5 \u7531\u4efb\u610f\u5927\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\uff1b \u6240\u6709\u7c7b\u540d\u90fd \u5fc5\u987b \u662f\u5927\u5c0f\u5199\u654f\u611f\u7684\u3002 \u5f53\u6839\u636e\u5b8c\u6574\u7684\u7c7b\u540d\u8f7d\u5165\u76f8\u5e94\u7684\u6587\u4ef6\u2026\u2026 \u5b8c\u6574\u7684\u7c7b\u540d\u4e2d\uff0c\u53bb\u6389\u6700\u524d\u9762\u7684\u547d\u540d\u7a7a\u95f4\u5206\u9694\u7b26\uff0c\u524d\u9762\u8fde\u7eed\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u547d\u540d\u7a7a\u95f4\u548c\u5b50\u547d\u540d\u7a7a\u95f4\uff0c\u4f5c\u4e3a\u201c\u547d\u540d\u7a7a\u95f4\u524d\u7f00\u201d\uff0c\u5176\u5fc5\u987b\u4e0e\u81f3\u5c11\u4e00\u4e2a\u201c\u6587\u4ef6\u57fa\u76ee\u5f55\u201d\u76f8\u5bf9\u5e94\uff1b \u7d27\u63a5\u547d\u540d\u7a7a\u95f4\u524d\u7f00\u540e\u7684\u5b50\u547d\u540d\u7a7a\u95f4 \u5fc5\u987b \u4e0e\u76f8\u5e94\u7684\u201d\u6587\u4ef6\u57fa\u76ee\u5f55\u201c\u76f8\u5339\u914d\uff0c\u5176\u4e2d\u7684\u547d\u540d\u7a7a\u95f4\u5206\u9694\u7b26\u5c06\u4f5c\u4e3a\u76ee\u5f55\u5206\u9694\u7b26\u3002 \u672b\u5c3e\u7684\u7c7b\u540d \u5fc5\u987b \u4e0e\u5bf9\u5e94\u7684\u4ee5 .php \u4e3a\u540e\u7f00\u7684\u6587\u4ef6\u540c\u540d\u3002 \u81ea\u52a8\u52a0\u8f7d\u5668\uff08autoloader\uff09\u7684\u5b9e\u73b0 \u4e00\u5b9a\u4e0d\u80fd \u629b\u51fa\u5f02\u5e38\u3001 \u4e00\u5b9a\u4e0d\u80fd \u89e6\u53d1\u4efb\u4e00\u7ea7\u522b\u7684\u9519\u8bef\u4fe1\u606f\u4ee5\u53ca \u4e0d\u5e94\u8be5 \u6709\u8fd4\u56de\u503c\u3002 3. \u4f8b\u5b50 # \u4e0b\u8868\u5c55\u793a\u4e86\u7b26\u5408\u89c4\u8303\u5b8c\u6574\u7c7b\u540d\u3001\u547d\u540d\u7a7a\u95f4\u524d\u7f00\u548c\u6587\u4ef6\u57fa\u76ee\u5f55\u6240\u5bf9\u5e94\u7684\u6587\u4ef6\u8def\u5f84\u3002 \u5b8c\u6574\u7c7b\u540d \u547d\u540d\u7a7a\u95f4\u524d\u7f00 \u6587\u4ef6\u57fa\u76ee\u5f55 \u6587\u4ef6\u8def\u5f84 \\Acme\\Log\\Writer\\File_Writer Acme\\Log\\Writer ./acme-log-writer/lib/ ./acme-log-writer/lib/File_Writer.php \\Aura\\Web\\Response\\Status Aura\\Web /path/to/aura-web/src/ /path/to/aura-web/src/Response/Status.php \\Symfony\\Core\\Request Symfony\\Core ./vendor/Symfony/Core/ ./vendor/Symfony/Core/Request.php \\Zend\\Acl Zend /usr/includes/Zend/ /usr/includes/Zend/Acl.php \u5173\u4e8e\u672c\u89c4\u8303\u7684\u5b9e\u73b0\uff0c\u53ef\u53c2\u9605 \u76f8\u5173\u5b9e\u4f8b \u6ce8\u610f\uff1a\u5b9e\u4f8b\u5e76 \u4e0d \u5c5e\u4e8e\u89c4\u8303\u7684\u4e00\u90e8\u5206\uff0c\u4e14\u968f\u65f6 \u4f1a \u6709\u6240\u53d8\u52a8\u3002 \u539f\u6587\uff1a https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-4-autoloader-cn.md","title":"PHP PSR-4 \u81ea\u52a8\u8f7d\u5165Autoloader"},{"location":"php/psr/psr-4/#php-psr-4-autoloader","text":"\u5173\u952e\u8bcd \u201c\u5fc5\u987b\u201d(\"MUST\")\u3001\u201c\u4e00\u5b9a\u4e0d\u53ef/\u4e00\u5b9a\u4e0d\u80fd\u201d(\"MUST NOT\")\u3001\u201c\u9700\u8981\u201d(\"REQUIRED\")\u3001 \u201c\u5c06\u4f1a\u201d(\"SHALL\")\u3001\u201c\u4e0d\u4f1a\u201d(\"SHALL NOT\")\u3001\u201c\u5e94\u8be5\u201d(\"SHOULD\")\u3001\u201c\u4e0d\u8be5\u201d(\"SHOULD NOT\")\u3001 \u201c\u63a8\u8350\u201d(\"RECOMMENDED\")\u3001\u201c\u53ef\u4ee5\u201d(\"MAY\")\u548c\u201d\u53ef\u9009\u201c(\"OPTIONAL\")\u7684\u8be6\u7ec6\u63cf\u8ff0\u53ef\u53c2\u89c1 RFC 2119 \u3002","title":"PHP PSR-4 \u81ea\u52a8\u8f7d\u5165Autoloader"},{"location":"php/psr/psr-4/#1","text":"\u672c PSR \u662f\u5173\u4e8e\u7531\u6587\u4ef6\u8def\u5f84 \u81ea\u52a8\u8f7d\u5165 \u5bf9\u5e94\u7c7b\u7684\u76f8\u5173\u89c4\u8303\uff0c \u672c\u89c4\u8303\u662f\u53ef\u4e92\u64cd\u4f5c\u7684\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u4efb\u4e00\u81ea\u52a8\u8f7d\u5165\u89c4\u8303\u7684\u8865\u5145\uff0c\u5176\u4e2d\u5305\u62ec PSR-0 \uff0c\u6b64\u5916\uff0c \u672c PSR \u8fd8\u5305\u62ec\u81ea\u52a8\u8f7d\u5165\u7684\u7c7b\u5bf9\u5e94\u7684\u6587\u4ef6\u5b58\u653e\u8def\u5f84\u89c4\u8303\u3002","title":"1. \u6982\u8ff0"},{"location":"php/psr/psr-4/#2","text":"\u6b64\u5904\u7684\u201c\u7c7b\u201d\u6cdb\u6307\u6240\u6709\u7684class\u7c7b\u3001\u63a5\u53e3\u3001traits\u53ef\u590d\u7528\u4ee3\u7801\u5757\u4ee5\u53ca\u5176\u5b83\u7c7b\u4f3c\u7ed3\u6784\u3002 \u4e00\u4e2a\u5b8c\u6574\u7684\u7c7b\u540d\u9700\u5177\u6709\u4ee5\u4e0b\u7ed3\u6784: \\<\u547d\u540d\u7a7a\u95f4>(\\<\u5b50\u547d\u540d\u7a7a\u95f4>)*\\<\u7c7b\u540d> \u5b8c\u6574\u7684\u7c7b\u540d \u5fc5\u987b \u8981\u6709\u4e00\u4e2a\u9876\u7ea7\u547d\u540d\u7a7a\u95f4\uff0c\u88ab\u79f0\u4e3a \"vendor namespace\"\uff1b \u5b8c\u6574\u7684\u7c7b\u540d \u53ef\u4ee5 \u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u547d\u540d\u7a7a\u95f4\uff1b \u5b8c\u6574\u7684\u7c7b\u540d \u5fc5\u987b \u6709\u4e00\u4e2a\u6700\u7ec8\u7684\u7c7b\u540d\uff1b \u5b8c\u6574\u7684\u7c7b\u540d\u4e2d\u4efb\u610f\u4e00\u90e8\u5206\u4e2d\u7684\u4e0b\u5212\u7ebf\u90fd\u662f\u6ca1\u6709\u7279\u6b8a\u542b\u4e49\u7684\uff1b \u5b8c\u6574\u7684\u7c7b\u540d \u53ef\u4ee5 \u7531\u4efb\u610f\u5927\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\uff1b \u6240\u6709\u7c7b\u540d\u90fd \u5fc5\u987b \u662f\u5927\u5c0f\u5199\u654f\u611f\u7684\u3002 \u5f53\u6839\u636e\u5b8c\u6574\u7684\u7c7b\u540d\u8f7d\u5165\u76f8\u5e94\u7684\u6587\u4ef6\u2026\u2026 \u5b8c\u6574\u7684\u7c7b\u540d\u4e2d\uff0c\u53bb\u6389\u6700\u524d\u9762\u7684\u547d\u540d\u7a7a\u95f4\u5206\u9694\u7b26\uff0c\u524d\u9762\u8fde\u7eed\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u547d\u540d\u7a7a\u95f4\u548c\u5b50\u547d\u540d\u7a7a\u95f4\uff0c\u4f5c\u4e3a\u201c\u547d\u540d\u7a7a\u95f4\u524d\u7f00\u201d\uff0c\u5176\u5fc5\u987b\u4e0e\u81f3\u5c11\u4e00\u4e2a\u201c\u6587\u4ef6\u57fa\u76ee\u5f55\u201d\u76f8\u5bf9\u5e94\uff1b \u7d27\u63a5\u547d\u540d\u7a7a\u95f4\u524d\u7f00\u540e\u7684\u5b50\u547d\u540d\u7a7a\u95f4 \u5fc5\u987b \u4e0e\u76f8\u5e94\u7684\u201d\u6587\u4ef6\u57fa\u76ee\u5f55\u201c\u76f8\u5339\u914d\uff0c\u5176\u4e2d\u7684\u547d\u540d\u7a7a\u95f4\u5206\u9694\u7b26\u5c06\u4f5c\u4e3a\u76ee\u5f55\u5206\u9694\u7b26\u3002 \u672b\u5c3e\u7684\u7c7b\u540d \u5fc5\u987b \u4e0e\u5bf9\u5e94\u7684\u4ee5 .php \u4e3a\u540e\u7f00\u7684\u6587\u4ef6\u540c\u540d\u3002 \u81ea\u52a8\u52a0\u8f7d\u5668\uff08autoloader\uff09\u7684\u5b9e\u73b0 \u4e00\u5b9a\u4e0d\u80fd \u629b\u51fa\u5f02\u5e38\u3001 \u4e00\u5b9a\u4e0d\u80fd \u89e6\u53d1\u4efb\u4e00\u7ea7\u522b\u7684\u9519\u8bef\u4fe1\u606f\u4ee5\u53ca \u4e0d\u5e94\u8be5 \u6709\u8fd4\u56de\u503c\u3002","title":"2. \u8be6\u7ec6\u8bf4\u660e"},{"location":"php/psr/psr-4/#3","text":"\u4e0b\u8868\u5c55\u793a\u4e86\u7b26\u5408\u89c4\u8303\u5b8c\u6574\u7c7b\u540d\u3001\u547d\u540d\u7a7a\u95f4\u524d\u7f00\u548c\u6587\u4ef6\u57fa\u76ee\u5f55\u6240\u5bf9\u5e94\u7684\u6587\u4ef6\u8def\u5f84\u3002 \u5b8c\u6574\u7c7b\u540d \u547d\u540d\u7a7a\u95f4\u524d\u7f00 \u6587\u4ef6\u57fa\u76ee\u5f55 \u6587\u4ef6\u8def\u5f84 \\Acme\\Log\\Writer\\File_Writer Acme\\Log\\Writer ./acme-log-writer/lib/ ./acme-log-writer/lib/File_Writer.php \\Aura\\Web\\Response\\Status Aura\\Web /path/to/aura-web/src/ /path/to/aura-web/src/Response/Status.php \\Symfony\\Core\\Request Symfony\\Core ./vendor/Symfony/Core/ ./vendor/Symfony/Core/Request.php \\Zend\\Acl Zend /usr/includes/Zend/ /usr/includes/Zend/Acl.php \u5173\u4e8e\u672c\u89c4\u8303\u7684\u5b9e\u73b0\uff0c\u53ef\u53c2\u9605 \u76f8\u5173\u5b9e\u4f8b \u6ce8\u610f\uff1a\u5b9e\u4f8b\u5e76 \u4e0d \u5c5e\u4e8e\u89c4\u8303\u7684\u4e00\u90e8\u5206\uff0c\u4e14\u968f\u65f6 \u4f1a \u6709\u6240\u53d8\u52a8\u3002 \u539f\u6587\uff1a https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-4-autoloader-cn.md","title":"3. \u4f8b\u5b50"},{"location":"php/psr/psr-7/","text":"PHP PSR-7 HTTP\u6d88\u606f\u63a5\u53e3 # \u672c\u6587\u6863\u63cf\u8ff0\u4e86\u5728 RFC 7230 \u548c RFC 7231 \u4e2d\u88ab\u63cf\u8ff0\u6765\u4ee3\u8868HTTP\u6d88\u606f\u901a\u7528\u63a5\u53e3\uff0c\u4ee5\u53ca\u5728 RFC 3986 \u4e2d\u89c4\u5b9a\u7684URIs\u8bed\u6cd5\u3002 HTTP\u6d88\u606f\u662fWeb\u5f00\u53d1\u7684\u57fa\u7840\u3002Web\u6d4f\u89c8\u5668\u548cHTTP\u5ba2\u6237\u7aef\u4e4b\u95f4\uff0c\u4f8b\u5982\u4f7f\u7528cURL\u521b\u5efa\u4e00\u4e2a\u53d1\u9001\u5230Web\u670d\u52a1\u5668\u7684HTTP\u8bf7\u6c42\uff0cWeb\u670d\u52a1\u5668\u4f1a\u8fd4\u56de\u4e00\u4e2aHTTP\u54cd\u5e94\u3002\u670d\u52a1\u5668\u7aef\u4ee3\u7801\u6536\u5230\u4e00\u4e2aHTTP\u8bf7\u6c42\u6d88\u606f\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2aHTTP\u54cd\u5e94\u6d88\u606f\u3002 HTTP\u6d88\u606f\u901a\u5e38\u5bf9\u4e0e\u6700\u7ec8\u7684\u6d88\u8d39\u8005\u7528\u6237\u6765\u8bf4\u662f\u62bd\u8c61\u7684\uff0c\u4f46\u4f5c\u4e3a\u5f00\u53d1\u8005\uff0c\u6211\u4eec\u901a\u5e38\u9700\u8981\u77e5\u9053\u5b83\u4eec\u662f\u5982\u4f55\u6784\u5efa\u4ee5\u53ca\u5982\u4f55\u8bbf\u95ee\u548c\u64cd\u7eb5\u5b83\u4eec\uff0c\u4ee5\u6267\u884c\u6211\u4eec\u7684\u4efb\u52a1\uff0c\u662f\u5426\u53ef\u80fd\u88ab\u521b\u5efa\u4e3a\u5230HTTP API\u7684\u8bf7\u6c42\u6216\u5904\u7406\u4f20\u5165\u8bf7\u6c42\u3002 \u6bcf\u4e00\u4e2aHTTP\u8bf7\u6c42\u6d88\u606f\u6709\u4e00\u4e2a\u5177\u4f53\u5f62\u5f0f\uff1a POST /path HTTP/1.1 Host: example.com foo=bar&baz=bat \u4e00\u4e2a\u8bf7\u6c42\u7684\u7b2c\u4e00\u884c\u662f\u201c\u8bf7\u6c42\u884c\u201d\uff0c\u6309\u7167\u987a\u5e8f\u5305\u542b\u4e86HTTP\u8bf7\u6c42\u65b9\u6cd5\uff0c\u8bf7\u6c42\u7684\u76ee\u6807\u5730\u5740\uff08\u901a\u5e38\u662f\u4e00\u4e2a\u7edd\u5bf9URI\u6216\u8005\u670d\u52a1\u5668\u4e0a\u7684\u8def\u5f84\uff09\u4ee5\u53caHTTP\u534f\u8bae\u7684\u7248\u672c\u3002\u63a5\u7740\u662f\u4e00\u4e2a\u6216\u591a\u4e2aHTTP\u5934\uff0c\u4e00\u4e2a\u7a7a\u884c\uff0c\u4ee5\u53ca\u6d88\u606f\u4e3b\u4f53\u3002 HTTP\u54cd\u5e94\u4fe1\u606f\u5177\u6709\u7c7b\u4f3c\u7684\u7ed3\u6784\uff1a HTTP/1.1 200 OK Content-Type: text/plain This is the response body \u7b2c\u4e00\u884c\u662f\u201c\u72b6\u6001\u884c\u201d\uff0c\u6309\u7167\u987a\u5e8f\uff0c\u4f9d\u6b21\u5305\u542b\u4e86HTTP\u534f\u8bae\u7684\u7248\u672c\uff0cHTTP\u72b6\u6001\u7801\uff0c\u4ee5\u53ca\u4e00\u4e2a\u201c\u539f\u56e0\u5206\u6790\u201d\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u5bf9\u4eba\u7c7b\u53cb\u597d\u53ef\u8bfb\u7684\u72b6\u6001\u7801\u7684\u63cf\u8ff0\u3002\u50cf\u8bf7\u6c42\u6d88\u606f\u4e00\u6837\uff0c\u968f\u540e\u4e00\u4e2a\u6216\u591a\u4e2aHTTP\u5934\uff0c\u4e00\u4e2a\u7a7a\u884c\uff0c\u4ee5\u53ca\u6d88\u606f\u4e3b\u4f53\u3002 \u672c\u6587\u6863\u4e2d\u63cf\u8ff0\u7684\u63a5\u53e3\u90fd\u662f\u56f4\u7ed5HTTP\u6d88\u606f\u7684\u62bd\u8c61\u548c\u6784\u6210\u5b83\u4eec\u7684\u5143\u7d20\u3002 \u5173\u952e\u8bcd \u201c\u5fc5\u987b\u201d(\"MUST\")\u3001\u201c\u4e00\u5b9a\u4e0d\u53ef/\u4e00\u5b9a\u4e0d\u80fd\u201d(\"MUST NOT\")\u3001\u201c\u9700\u8981\u201d(\"REQUIRED\")\u3001 \u201c\u5c06\u4f1a\u201d(\"SHALL\")\u3001\u201c\u4e0d\u4f1a\u201d(\"SHALL NOT\")\u3001\u201c\u5e94\u8be5\u201d(\"SHOULD\")\u3001\u201c\u4e0d\u8be5\u201d(\"SHOULD NOT\")\u3001 \u201c\u63a8\u8350\u201d(\"RECOMMENDED\")\u3001\u201c\u53ef\u4ee5\u201d(\"MAY\")\u548c\u201d\u53ef\u9009\u201c(\"OPTIONAL\")\u7684\u8be6\u7ec6\u63cf\u8ff0\u53ef\u53c2\u89c1 RFC 2119 \u3002 \u53c2\u8003 # RFC 2119 RFC 3986 RFC 7230 RFC 7231 1. \u89c4\u8303 # 1.1. \u6d88\u606f # HTTP\u6d88\u606f\u662f\u4ece\u5ba2\u6237\u673a\u5230\u670d\u52a1\u5668\u7684\u8bf7\u6c42\u6216\u4ece\u670d\u52a1\u5668\u5230\u5ba2\u6237\u7aef\u7684\u54cd\u5e94\u3002\u672c\u89c4\u8303\u5206\u522b\u4e3a\u5176\u5b9a\u4e49\u4e86\u5bf9\u4e8eHTTP\u6d88\u606f\u7684\u63a5\u53e3 Psr\\Http\\Message\\RequestInterface \u548c Psr\\Http\\Message\\ResponseInterface \u3002 Psr\\Http\\Message\\RequestInterface \u548c Psr\\Http\\Message\\ResponseInterface \u90fd\u7ee7\u627f\u81ea Psr\\Http\\Message\\MessageInterface \u3002\u800c Psr\\Http\\Message\\MessageInterface \u53ef\u4ee5 \u88ab\u76f4\u63a5\u5b9e\u73b0\uff0c\u5b9e\u73b0\u8005 \u5e94\u8be5 \u5b9e\u73b0 Psr\\Http\\Message\\RequestInterface \u548c Psr\\Http\\Message\\ResponseInterface \u3002 \u4ece\u8fd9\u91cc\u5f00\u59cb\uff0c\u4e4b\u540e\u7684\u63cf\u8ff0\u4e2d\u547d\u540d\u7a7a\u95f4 Psr\\Http\\Message \u5728\u63d0\u5230\u8fd9\u4e2a\u63a5\u53e3\u7684\u65f6\u5019\u5c06\u4f1a\u88ab\u7701\u7565\u3002 1.2. HTTP\u5934 # \u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u5934\u5b57\u6bb5\u540d # HTTP\u6d88\u606f\u5305\u62ec\u5927\u5c0f\u5199\u4e0d\u654f\u611f\u7684\u5934\u5b57\u6bb5\u540d\u3002\u5934\u662f\u4ece\u5b9e\u73b0\u4e86 MessageInterface \u63a5\u53e3\u7684\u7c7b\u4e2d\u4ee5\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u65b9\u5f0f\u83b7\u53d6\u7684\u3002\u4f8b\u5982\uff0c\u83b7\u53d6 foo \u5934\u4e0e\u83b7\u53d6 FoO \u5934\u7684\u8fd4\u56de\u7ed3\u679c\u662f\u76f8\u540c\u7684\u3002\u540c\u6837\uff0c\u8bbe\u7f6e Foo \u5934\u5c06\u8986\u5199\u4e4b\u524d\u7684\u8bbe\u7f6e\u7684 foo \u5934\u7684\u503c\u3002 $message = $message->withHeader('foo', 'bar'); echo $message->getHeaderLine('foo'); // Outputs: bar echo $message->getHeaderLine('FOO'); // Outputs: bar $message = $message->withHeader('fOO', 'baz'); echo $message->getHeaderLine('foo'); // Outputs: baz \u5c3d\u7ba1\u5934\u80fd\u88ab\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u5730\u83b7\u53d6\uff0c\u4f46\u539f\u6709\u7684\u5927\u5c0f\u5199\u89c4\u8303 \u5fc5\u987b \u88ab\u4fdd\u7559\uff0c\u5c24\u5176\u662f\u4f7f\u7528 getHeaders() \u51fd\u6570\u6765\u83b7\u53d6\u5934\u7684\u65f6\u5019\u3002 \u4e0d\u7b26\u5408\u8981\u6c42\u7684HTTP\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u4f9d\u8d56\u4e8e\u4e00\u5b9a\u7684\u5927\u5c0f\u5199\u89c4\u8303\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u7528\u6237\u80fd\u591f\u5728\u521b\u5efa\u4e00\u4e2a\u8bf7\u6c42\u6216\u54cd\u5e94\u65f6\u63a7\u5236HTTP\u62a5\u5934\u7684\u5927\u5c0f\u5199\u7684\u60c5\u51b5\u4e0b\u662f\u975e\u5e38\u6709\u7528\u7684\u3002 \u5e26\u6709\u591a\u4e2a\u503c\u7684\u62a5\u5934 # \u4e3a\u4e86\u80fd\u591f\u5bb9\u7eb3\u5177\u6709\u591a\u4e2a\u503c\u4e14\u4f9d\u7136\u80fd\u591f\u65b9\u4fbf\u5730\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u4f20\u8f93\u7684\u62a5\u5934\uff0c MessageInterface \u63a5\u53e3\u7684\u5b9e\u4f8b\u80fd\u591f\u4ee5\u6570\u7ec4\u6216\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u6765\u83b7\u53d6\u62a5\u5934\u3002\u4f7f\u7528 getHeaderLine() \u65b9\u6cd5\u6765\u83b7\u53d6\u7279\u5b9a\u540d\u79f0\u7684\u62a5\u5934\u7684\u503c\uff0c\u5176\u5f62\u5f0f\u4e3a\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u5e76\u7528\u9017\u53f7\u8fde\u63a5\u7684\u5b57\u7b26\u4e32\uff0c\u5305\u542b\u4e86\u6240\u6709\u7684\u62a5\u5934\u503c\u3002\u4f7f\u7528 getHeader() \u6765\u83b7\u53d6\u7279\u5b9a\u540d\u79f0\u7684\u6240\u6709\u62a5\u5934\u503c\uff0c\u5176\u4ee5\u6570\u7ec4\u5f62\u5f0f\u8fd4\u56de\u7ed3\u679c\uff0c\u4e14\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u3002 \u539f\u6587\uff1a https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-4-autoloader-cn.md","title":"PHP PSR-7 HTTP\u6d88\u606f\u63a5\u53e3"},{"location":"php/psr/psr-7/#php-psr-7-http","text":"\u672c\u6587\u6863\u63cf\u8ff0\u4e86\u5728 RFC 7230 \u548c RFC 7231 \u4e2d\u88ab\u63cf\u8ff0\u6765\u4ee3\u8868HTTP\u6d88\u606f\u901a\u7528\u63a5\u53e3\uff0c\u4ee5\u53ca\u5728 RFC 3986 \u4e2d\u89c4\u5b9a\u7684URIs\u8bed\u6cd5\u3002 HTTP\u6d88\u606f\u662fWeb\u5f00\u53d1\u7684\u57fa\u7840\u3002Web\u6d4f\u89c8\u5668\u548cHTTP\u5ba2\u6237\u7aef\u4e4b\u95f4\uff0c\u4f8b\u5982\u4f7f\u7528cURL\u521b\u5efa\u4e00\u4e2a\u53d1\u9001\u5230Web\u670d\u52a1\u5668\u7684HTTP\u8bf7\u6c42\uff0cWeb\u670d\u52a1\u5668\u4f1a\u8fd4\u56de\u4e00\u4e2aHTTP\u54cd\u5e94\u3002\u670d\u52a1\u5668\u7aef\u4ee3\u7801\u6536\u5230\u4e00\u4e2aHTTP\u8bf7\u6c42\u6d88\u606f\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2aHTTP\u54cd\u5e94\u6d88\u606f\u3002 HTTP\u6d88\u606f\u901a\u5e38\u5bf9\u4e0e\u6700\u7ec8\u7684\u6d88\u8d39\u8005\u7528\u6237\u6765\u8bf4\u662f\u62bd\u8c61\u7684\uff0c\u4f46\u4f5c\u4e3a\u5f00\u53d1\u8005\uff0c\u6211\u4eec\u901a\u5e38\u9700\u8981\u77e5\u9053\u5b83\u4eec\u662f\u5982\u4f55\u6784\u5efa\u4ee5\u53ca\u5982\u4f55\u8bbf\u95ee\u548c\u64cd\u7eb5\u5b83\u4eec\uff0c\u4ee5\u6267\u884c\u6211\u4eec\u7684\u4efb\u52a1\uff0c\u662f\u5426\u53ef\u80fd\u88ab\u521b\u5efa\u4e3a\u5230HTTP API\u7684\u8bf7\u6c42\u6216\u5904\u7406\u4f20\u5165\u8bf7\u6c42\u3002 \u6bcf\u4e00\u4e2aHTTP\u8bf7\u6c42\u6d88\u606f\u6709\u4e00\u4e2a\u5177\u4f53\u5f62\u5f0f\uff1a POST /path HTTP/1.1 Host: example.com foo=bar&baz=bat \u4e00\u4e2a\u8bf7\u6c42\u7684\u7b2c\u4e00\u884c\u662f\u201c\u8bf7\u6c42\u884c\u201d\uff0c\u6309\u7167\u987a\u5e8f\u5305\u542b\u4e86HTTP\u8bf7\u6c42\u65b9\u6cd5\uff0c\u8bf7\u6c42\u7684\u76ee\u6807\u5730\u5740\uff08\u901a\u5e38\u662f\u4e00\u4e2a\u7edd\u5bf9URI\u6216\u8005\u670d\u52a1\u5668\u4e0a\u7684\u8def\u5f84\uff09\u4ee5\u53caHTTP\u534f\u8bae\u7684\u7248\u672c\u3002\u63a5\u7740\u662f\u4e00\u4e2a\u6216\u591a\u4e2aHTTP\u5934\uff0c\u4e00\u4e2a\u7a7a\u884c\uff0c\u4ee5\u53ca\u6d88\u606f\u4e3b\u4f53\u3002 HTTP\u54cd\u5e94\u4fe1\u606f\u5177\u6709\u7c7b\u4f3c\u7684\u7ed3\u6784\uff1a HTTP/1.1 200 OK Content-Type: text/plain This is the response body \u7b2c\u4e00\u884c\u662f\u201c\u72b6\u6001\u884c\u201d\uff0c\u6309\u7167\u987a\u5e8f\uff0c\u4f9d\u6b21\u5305\u542b\u4e86HTTP\u534f\u8bae\u7684\u7248\u672c\uff0cHTTP\u72b6\u6001\u7801\uff0c\u4ee5\u53ca\u4e00\u4e2a\u201c\u539f\u56e0\u5206\u6790\u201d\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u5bf9\u4eba\u7c7b\u53cb\u597d\u53ef\u8bfb\u7684\u72b6\u6001\u7801\u7684\u63cf\u8ff0\u3002\u50cf\u8bf7\u6c42\u6d88\u606f\u4e00\u6837\uff0c\u968f\u540e\u4e00\u4e2a\u6216\u591a\u4e2aHTTP\u5934\uff0c\u4e00\u4e2a\u7a7a\u884c\uff0c\u4ee5\u53ca\u6d88\u606f\u4e3b\u4f53\u3002 \u672c\u6587\u6863\u4e2d\u63cf\u8ff0\u7684\u63a5\u53e3\u90fd\u662f\u56f4\u7ed5HTTP\u6d88\u606f\u7684\u62bd\u8c61\u548c\u6784\u6210\u5b83\u4eec\u7684\u5143\u7d20\u3002 \u5173\u952e\u8bcd \u201c\u5fc5\u987b\u201d(\"MUST\")\u3001\u201c\u4e00\u5b9a\u4e0d\u53ef/\u4e00\u5b9a\u4e0d\u80fd\u201d(\"MUST NOT\")\u3001\u201c\u9700\u8981\u201d(\"REQUIRED\")\u3001 \u201c\u5c06\u4f1a\u201d(\"SHALL\")\u3001\u201c\u4e0d\u4f1a\u201d(\"SHALL NOT\")\u3001\u201c\u5e94\u8be5\u201d(\"SHOULD\")\u3001\u201c\u4e0d\u8be5\u201d(\"SHOULD NOT\")\u3001 \u201c\u63a8\u8350\u201d(\"RECOMMENDED\")\u3001\u201c\u53ef\u4ee5\u201d(\"MAY\")\u548c\u201d\u53ef\u9009\u201c(\"OPTIONAL\")\u7684\u8be6\u7ec6\u63cf\u8ff0\u53ef\u53c2\u89c1 RFC 2119 \u3002","title":"PHP PSR-7 HTTP\u6d88\u606f\u63a5\u53e3"},{"location":"php/psr/psr-7/#_1","text":"RFC 2119 RFC 3986 RFC 7230 RFC 7231","title":"\u53c2\u8003"},{"location":"php/psr/psr-7/#1","text":"","title":"1. \u89c4\u8303"},{"location":"php/psr/psr-7/#11","text":"HTTP\u6d88\u606f\u662f\u4ece\u5ba2\u6237\u673a\u5230\u670d\u52a1\u5668\u7684\u8bf7\u6c42\u6216\u4ece\u670d\u52a1\u5668\u5230\u5ba2\u6237\u7aef\u7684\u54cd\u5e94\u3002\u672c\u89c4\u8303\u5206\u522b\u4e3a\u5176\u5b9a\u4e49\u4e86\u5bf9\u4e8eHTTP\u6d88\u606f\u7684\u63a5\u53e3 Psr\\Http\\Message\\RequestInterface \u548c Psr\\Http\\Message\\ResponseInterface \u3002 Psr\\Http\\Message\\RequestInterface \u548c Psr\\Http\\Message\\ResponseInterface \u90fd\u7ee7\u627f\u81ea Psr\\Http\\Message\\MessageInterface \u3002\u800c Psr\\Http\\Message\\MessageInterface \u53ef\u4ee5 \u88ab\u76f4\u63a5\u5b9e\u73b0\uff0c\u5b9e\u73b0\u8005 \u5e94\u8be5 \u5b9e\u73b0 Psr\\Http\\Message\\RequestInterface \u548c Psr\\Http\\Message\\ResponseInterface \u3002 \u4ece\u8fd9\u91cc\u5f00\u59cb\uff0c\u4e4b\u540e\u7684\u63cf\u8ff0\u4e2d\u547d\u540d\u7a7a\u95f4 Psr\\Http\\Message \u5728\u63d0\u5230\u8fd9\u4e2a\u63a5\u53e3\u7684\u65f6\u5019\u5c06\u4f1a\u88ab\u7701\u7565\u3002","title":"1.1. \u6d88\u606f"},{"location":"php/psr/psr-7/#12-http","text":"","title":"1.2. HTTP\u5934"},{"location":"php/psr/psr-7/#_2","text":"HTTP\u6d88\u606f\u5305\u62ec\u5927\u5c0f\u5199\u4e0d\u654f\u611f\u7684\u5934\u5b57\u6bb5\u540d\u3002\u5934\u662f\u4ece\u5b9e\u73b0\u4e86 MessageInterface \u63a5\u53e3\u7684\u7c7b\u4e2d\u4ee5\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u65b9\u5f0f\u83b7\u53d6\u7684\u3002\u4f8b\u5982\uff0c\u83b7\u53d6 foo \u5934\u4e0e\u83b7\u53d6 FoO \u5934\u7684\u8fd4\u56de\u7ed3\u679c\u662f\u76f8\u540c\u7684\u3002\u540c\u6837\uff0c\u8bbe\u7f6e Foo \u5934\u5c06\u8986\u5199\u4e4b\u524d\u7684\u8bbe\u7f6e\u7684 foo \u5934\u7684\u503c\u3002 $message = $message->withHeader('foo', 'bar'); echo $message->getHeaderLine('foo'); // Outputs: bar echo $message->getHeaderLine('FOO'); // Outputs: bar $message = $message->withHeader('fOO', 'baz'); echo $message->getHeaderLine('foo'); // Outputs: baz \u5c3d\u7ba1\u5934\u80fd\u88ab\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u5730\u83b7\u53d6\uff0c\u4f46\u539f\u6709\u7684\u5927\u5c0f\u5199\u89c4\u8303 \u5fc5\u987b \u88ab\u4fdd\u7559\uff0c\u5c24\u5176\u662f\u4f7f\u7528 getHeaders() \u51fd\u6570\u6765\u83b7\u53d6\u5934\u7684\u65f6\u5019\u3002 \u4e0d\u7b26\u5408\u8981\u6c42\u7684HTTP\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u4f9d\u8d56\u4e8e\u4e00\u5b9a\u7684\u5927\u5c0f\u5199\u89c4\u8303\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u7528\u6237\u80fd\u591f\u5728\u521b\u5efa\u4e00\u4e2a\u8bf7\u6c42\u6216\u54cd\u5e94\u65f6\u63a7\u5236HTTP\u62a5\u5934\u7684\u5927\u5c0f\u5199\u7684\u60c5\u51b5\u4e0b\u662f\u975e\u5e38\u6709\u7528\u7684\u3002","title":"\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u5934\u5b57\u6bb5\u540d"},{"location":"php/psr/psr-7/#_3","text":"\u4e3a\u4e86\u80fd\u591f\u5bb9\u7eb3\u5177\u6709\u591a\u4e2a\u503c\u4e14\u4f9d\u7136\u80fd\u591f\u65b9\u4fbf\u5730\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u4f20\u8f93\u7684\u62a5\u5934\uff0c MessageInterface \u63a5\u53e3\u7684\u5b9e\u4f8b\u80fd\u591f\u4ee5\u6570\u7ec4\u6216\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u6765\u83b7\u53d6\u62a5\u5934\u3002\u4f7f\u7528 getHeaderLine() \u65b9\u6cd5\u6765\u83b7\u53d6\u7279\u5b9a\u540d\u79f0\u7684\u62a5\u5934\u7684\u503c\uff0c\u5176\u5f62\u5f0f\u4e3a\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u5e76\u7528\u9017\u53f7\u8fde\u63a5\u7684\u5b57\u7b26\u4e32\uff0c\u5305\u542b\u4e86\u6240\u6709\u7684\u62a5\u5934\u503c\u3002\u4f7f\u7528 getHeader() \u6765\u83b7\u53d6\u7279\u5b9a\u540d\u79f0\u7684\u6240\u6709\u62a5\u5934\u503c\uff0c\u5176\u4ee5\u6570\u7ec4\u5f62\u5f0f\u8fd4\u56de\u7ed3\u679c\uff0c\u4e14\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u3002 \u539f\u6587\uff1a https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-4-autoloader-cn.md","title":"\u5e26\u6709\u591a\u4e2a\u503c\u7684\u62a5\u5934"}]}